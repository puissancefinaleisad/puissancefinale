
nucleo-f429zi-net14.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000e114  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002bbc  0800e2c4  0800e2c4  0001e2c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08010e80  08010e80  00020e80  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08010e88  08010e88  00020e88  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08010e8c  08010e8c  00020e8c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000078  20000000  08010e90  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .ccmram       00000000  10000000  10000000  00030078  2**0
                  CONTENTS
  8 .bss          0000aee4  20000078  20000078  00030078  2**2
                  ALLOC
  9 ._user_heap_stack 00000600  2000af5c  2000af5c  00030078  2**0
                  ALLOC
 10 .ARM.attributes 00000030  00000000  00000000  00030078  2**0
                  CONTENTS, READONLY
 11 .debug_info   0005389b  00000000  00000000  000300a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_abbrev 00009230  00000000  00000000  00083943  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_loc    0001fccd  00000000  00000000  0008cb73  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00002340  00000000  00000000  000ac840  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00002838  00000000  00000000  000aeb80  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_line   00015dac  00000000  00000000  000b13b8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_str    0000b04c  00000000  00000000  000c7164  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .comment      0000007c  00000000  00000000  000d21b0  2**0
                  CONTENTS, READONLY
 19 .debug_frame  00006554  00000000  00000000  000d222c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000078 	.word	0x20000078
 80001cc:	00000000 	.word	0x00000000
 80001d0:	0800e2ac 	.word	0x0800e2ac

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	2000007c 	.word	0x2000007c
 80001ec:	0800e2ac 	.word	0x0800e2ac

080001f0 <strlen>:
 80001f0:	4603      	mov	r3, r0
 80001f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001f6:	2a00      	cmp	r2, #0
 80001f8:	d1fb      	bne.n	80001f2 <strlen+0x2>
 80001fa:	1a18      	subs	r0, r3, r0
 80001fc:	3801      	subs	r0, #1
 80001fe:	4770      	bx	lr

08000200 <__aeabi_uldivmod>:
 8000200:	b953      	cbnz	r3, 8000218 <__aeabi_uldivmod+0x18>
 8000202:	b94a      	cbnz	r2, 8000218 <__aeabi_uldivmod+0x18>
 8000204:	2900      	cmp	r1, #0
 8000206:	bf08      	it	eq
 8000208:	2800      	cmpeq	r0, #0
 800020a:	bf1c      	itt	ne
 800020c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000210:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000214:	f000 b97a 	b.w	800050c <__aeabi_idiv0>
 8000218:	f1ad 0c08 	sub.w	ip, sp, #8
 800021c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000220:	f000 f806 	bl	8000230 <__udivmoddi4>
 8000224:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000228:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800022c:	b004      	add	sp, #16
 800022e:	4770      	bx	lr

08000230 <__udivmoddi4>:
 8000230:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000234:	468c      	mov	ip, r1
 8000236:	460d      	mov	r5, r1
 8000238:	4604      	mov	r4, r0
 800023a:	9e08      	ldr	r6, [sp, #32]
 800023c:	2b00      	cmp	r3, #0
 800023e:	d151      	bne.n	80002e4 <__udivmoddi4+0xb4>
 8000240:	428a      	cmp	r2, r1
 8000242:	4617      	mov	r7, r2
 8000244:	d96d      	bls.n	8000322 <__udivmoddi4+0xf2>
 8000246:	fab2 fe82 	clz	lr, r2
 800024a:	f1be 0f00 	cmp.w	lr, #0
 800024e:	d00b      	beq.n	8000268 <__udivmoddi4+0x38>
 8000250:	f1ce 0c20 	rsb	ip, lr, #32
 8000254:	fa01 f50e 	lsl.w	r5, r1, lr
 8000258:	fa20 fc0c 	lsr.w	ip, r0, ip
 800025c:	fa02 f70e 	lsl.w	r7, r2, lr
 8000260:	ea4c 0c05 	orr.w	ip, ip, r5
 8000264:	fa00 f40e 	lsl.w	r4, r0, lr
 8000268:	ea4f 4a17 	mov.w	sl, r7, lsr #16
 800026c:	0c25      	lsrs	r5, r4, #16
 800026e:	fbbc f8fa 	udiv	r8, ip, sl
 8000272:	fa1f f987 	uxth.w	r9, r7
 8000276:	fb0a cc18 	mls	ip, sl, r8, ip
 800027a:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 800027e:	fb08 f309 	mul.w	r3, r8, r9
 8000282:	42ab      	cmp	r3, r5
 8000284:	d90a      	bls.n	800029c <__udivmoddi4+0x6c>
 8000286:	19ed      	adds	r5, r5, r7
 8000288:	f108 32ff 	add.w	r2, r8, #4294967295	; 0xffffffff
 800028c:	f080 8123 	bcs.w	80004d6 <__udivmoddi4+0x2a6>
 8000290:	42ab      	cmp	r3, r5
 8000292:	f240 8120 	bls.w	80004d6 <__udivmoddi4+0x2a6>
 8000296:	f1a8 0802 	sub.w	r8, r8, #2
 800029a:	443d      	add	r5, r7
 800029c:	1aed      	subs	r5, r5, r3
 800029e:	b2a4      	uxth	r4, r4
 80002a0:	fbb5 f0fa 	udiv	r0, r5, sl
 80002a4:	fb0a 5510 	mls	r5, sl, r0, r5
 80002a8:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80002ac:	fb00 f909 	mul.w	r9, r0, r9
 80002b0:	45a1      	cmp	r9, r4
 80002b2:	d909      	bls.n	80002c8 <__udivmoddi4+0x98>
 80002b4:	19e4      	adds	r4, r4, r7
 80002b6:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80002ba:	f080 810a 	bcs.w	80004d2 <__udivmoddi4+0x2a2>
 80002be:	45a1      	cmp	r9, r4
 80002c0:	f240 8107 	bls.w	80004d2 <__udivmoddi4+0x2a2>
 80002c4:	3802      	subs	r0, #2
 80002c6:	443c      	add	r4, r7
 80002c8:	eba4 0409 	sub.w	r4, r4, r9
 80002cc:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80002d0:	2100      	movs	r1, #0
 80002d2:	2e00      	cmp	r6, #0
 80002d4:	d061      	beq.n	800039a <__udivmoddi4+0x16a>
 80002d6:	fa24 f40e 	lsr.w	r4, r4, lr
 80002da:	2300      	movs	r3, #0
 80002dc:	6034      	str	r4, [r6, #0]
 80002de:	6073      	str	r3, [r6, #4]
 80002e0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002e4:	428b      	cmp	r3, r1
 80002e6:	d907      	bls.n	80002f8 <__udivmoddi4+0xc8>
 80002e8:	2e00      	cmp	r6, #0
 80002ea:	d054      	beq.n	8000396 <__udivmoddi4+0x166>
 80002ec:	2100      	movs	r1, #0
 80002ee:	e886 0021 	stmia.w	r6, {r0, r5}
 80002f2:	4608      	mov	r0, r1
 80002f4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002f8:	fab3 f183 	clz	r1, r3
 80002fc:	2900      	cmp	r1, #0
 80002fe:	f040 808e 	bne.w	800041e <__udivmoddi4+0x1ee>
 8000302:	42ab      	cmp	r3, r5
 8000304:	d302      	bcc.n	800030c <__udivmoddi4+0xdc>
 8000306:	4282      	cmp	r2, r0
 8000308:	f200 80fa 	bhi.w	8000500 <__udivmoddi4+0x2d0>
 800030c:	1a84      	subs	r4, r0, r2
 800030e:	eb65 0503 	sbc.w	r5, r5, r3
 8000312:	2001      	movs	r0, #1
 8000314:	46ac      	mov	ip, r5
 8000316:	2e00      	cmp	r6, #0
 8000318:	d03f      	beq.n	800039a <__udivmoddi4+0x16a>
 800031a:	e886 1010 	stmia.w	r6, {r4, ip}
 800031e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000322:	b912      	cbnz	r2, 800032a <__udivmoddi4+0xfa>
 8000324:	2701      	movs	r7, #1
 8000326:	fbb7 f7f2 	udiv	r7, r7, r2
 800032a:	fab7 fe87 	clz	lr, r7
 800032e:	f1be 0f00 	cmp.w	lr, #0
 8000332:	d134      	bne.n	800039e <__udivmoddi4+0x16e>
 8000334:	1beb      	subs	r3, r5, r7
 8000336:	0c3a      	lsrs	r2, r7, #16
 8000338:	fa1f fc87 	uxth.w	ip, r7
 800033c:	2101      	movs	r1, #1
 800033e:	fbb3 f8f2 	udiv	r8, r3, r2
 8000342:	0c25      	lsrs	r5, r4, #16
 8000344:	fb02 3318 	mls	r3, r2, r8, r3
 8000348:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 800034c:	fb0c f308 	mul.w	r3, ip, r8
 8000350:	42ab      	cmp	r3, r5
 8000352:	d907      	bls.n	8000364 <__udivmoddi4+0x134>
 8000354:	19ed      	adds	r5, r5, r7
 8000356:	f108 30ff 	add.w	r0, r8, #4294967295	; 0xffffffff
 800035a:	d202      	bcs.n	8000362 <__udivmoddi4+0x132>
 800035c:	42ab      	cmp	r3, r5
 800035e:	f200 80d1 	bhi.w	8000504 <__udivmoddi4+0x2d4>
 8000362:	4680      	mov	r8, r0
 8000364:	1aed      	subs	r5, r5, r3
 8000366:	b2a3      	uxth	r3, r4
 8000368:	fbb5 f0f2 	udiv	r0, r5, r2
 800036c:	fb02 5510 	mls	r5, r2, r0, r5
 8000370:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
 8000374:	fb0c fc00 	mul.w	ip, ip, r0
 8000378:	45a4      	cmp	ip, r4
 800037a:	d907      	bls.n	800038c <__udivmoddi4+0x15c>
 800037c:	19e4      	adds	r4, r4, r7
 800037e:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000382:	d202      	bcs.n	800038a <__udivmoddi4+0x15a>
 8000384:	45a4      	cmp	ip, r4
 8000386:	f200 80b8 	bhi.w	80004fa <__udivmoddi4+0x2ca>
 800038a:	4618      	mov	r0, r3
 800038c:	eba4 040c 	sub.w	r4, r4, ip
 8000390:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000394:	e79d      	b.n	80002d2 <__udivmoddi4+0xa2>
 8000396:	4631      	mov	r1, r6
 8000398:	4630      	mov	r0, r6
 800039a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800039e:	f1ce 0420 	rsb	r4, lr, #32
 80003a2:	fa05 f30e 	lsl.w	r3, r5, lr
 80003a6:	fa07 f70e 	lsl.w	r7, r7, lr
 80003aa:	fa20 f804 	lsr.w	r8, r0, r4
 80003ae:	0c3a      	lsrs	r2, r7, #16
 80003b0:	fa25 f404 	lsr.w	r4, r5, r4
 80003b4:	ea48 0803 	orr.w	r8, r8, r3
 80003b8:	fbb4 f1f2 	udiv	r1, r4, r2
 80003bc:	ea4f 4518 	mov.w	r5, r8, lsr #16
 80003c0:	fb02 4411 	mls	r4, r2, r1, r4
 80003c4:	fa1f fc87 	uxth.w	ip, r7
 80003c8:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
 80003cc:	fb01 f30c 	mul.w	r3, r1, ip
 80003d0:	42ab      	cmp	r3, r5
 80003d2:	fa00 f40e 	lsl.w	r4, r0, lr
 80003d6:	d909      	bls.n	80003ec <__udivmoddi4+0x1bc>
 80003d8:	19ed      	adds	r5, r5, r7
 80003da:	f101 30ff 	add.w	r0, r1, #4294967295	; 0xffffffff
 80003de:	f080 808a 	bcs.w	80004f6 <__udivmoddi4+0x2c6>
 80003e2:	42ab      	cmp	r3, r5
 80003e4:	f240 8087 	bls.w	80004f6 <__udivmoddi4+0x2c6>
 80003e8:	3902      	subs	r1, #2
 80003ea:	443d      	add	r5, r7
 80003ec:	1aeb      	subs	r3, r5, r3
 80003ee:	fa1f f588 	uxth.w	r5, r8
 80003f2:	fbb3 f0f2 	udiv	r0, r3, r2
 80003f6:	fb02 3310 	mls	r3, r2, r0, r3
 80003fa:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 80003fe:	fb00 f30c 	mul.w	r3, r0, ip
 8000402:	42ab      	cmp	r3, r5
 8000404:	d907      	bls.n	8000416 <__udivmoddi4+0x1e6>
 8000406:	19ed      	adds	r5, r5, r7
 8000408:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 800040c:	d26f      	bcs.n	80004ee <__udivmoddi4+0x2be>
 800040e:	42ab      	cmp	r3, r5
 8000410:	d96d      	bls.n	80004ee <__udivmoddi4+0x2be>
 8000412:	3802      	subs	r0, #2
 8000414:	443d      	add	r5, r7
 8000416:	1aeb      	subs	r3, r5, r3
 8000418:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800041c:	e78f      	b.n	800033e <__udivmoddi4+0x10e>
 800041e:	f1c1 0720 	rsb	r7, r1, #32
 8000422:	fa22 f807 	lsr.w	r8, r2, r7
 8000426:	408b      	lsls	r3, r1
 8000428:	fa05 f401 	lsl.w	r4, r5, r1
 800042c:	ea48 0303 	orr.w	r3, r8, r3
 8000430:	fa20 fe07 	lsr.w	lr, r0, r7
 8000434:	ea4f 4c13 	mov.w	ip, r3, lsr #16
 8000438:	40fd      	lsrs	r5, r7
 800043a:	ea4e 0e04 	orr.w	lr, lr, r4
 800043e:	fbb5 f9fc 	udiv	r9, r5, ip
 8000442:	ea4f 441e 	mov.w	r4, lr, lsr #16
 8000446:	fb0c 5519 	mls	r5, ip, r9, r5
 800044a:	fa1f f883 	uxth.w	r8, r3
 800044e:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 8000452:	fb09 f408 	mul.w	r4, r9, r8
 8000456:	42ac      	cmp	r4, r5
 8000458:	fa02 f201 	lsl.w	r2, r2, r1
 800045c:	fa00 fa01 	lsl.w	sl, r0, r1
 8000460:	d908      	bls.n	8000474 <__udivmoddi4+0x244>
 8000462:	18ed      	adds	r5, r5, r3
 8000464:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000468:	d243      	bcs.n	80004f2 <__udivmoddi4+0x2c2>
 800046a:	42ac      	cmp	r4, r5
 800046c:	d941      	bls.n	80004f2 <__udivmoddi4+0x2c2>
 800046e:	f1a9 0902 	sub.w	r9, r9, #2
 8000472:	441d      	add	r5, r3
 8000474:	1b2d      	subs	r5, r5, r4
 8000476:	fa1f fe8e 	uxth.w	lr, lr
 800047a:	fbb5 f0fc 	udiv	r0, r5, ip
 800047e:	fb0c 5510 	mls	r5, ip, r0, r5
 8000482:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
 8000486:	fb00 f808 	mul.w	r8, r0, r8
 800048a:	45a0      	cmp	r8, r4
 800048c:	d907      	bls.n	800049e <__udivmoddi4+0x26e>
 800048e:	18e4      	adds	r4, r4, r3
 8000490:	f100 35ff 	add.w	r5, r0, #4294967295	; 0xffffffff
 8000494:	d229      	bcs.n	80004ea <__udivmoddi4+0x2ba>
 8000496:	45a0      	cmp	r8, r4
 8000498:	d927      	bls.n	80004ea <__udivmoddi4+0x2ba>
 800049a:	3802      	subs	r0, #2
 800049c:	441c      	add	r4, r3
 800049e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004a2:	eba4 0408 	sub.w	r4, r4, r8
 80004a6:	fba0 8902 	umull	r8, r9, r0, r2
 80004aa:	454c      	cmp	r4, r9
 80004ac:	46c6      	mov	lr, r8
 80004ae:	464d      	mov	r5, r9
 80004b0:	d315      	bcc.n	80004de <__udivmoddi4+0x2ae>
 80004b2:	d012      	beq.n	80004da <__udivmoddi4+0x2aa>
 80004b4:	b156      	cbz	r6, 80004cc <__udivmoddi4+0x29c>
 80004b6:	ebba 030e 	subs.w	r3, sl, lr
 80004ba:	eb64 0405 	sbc.w	r4, r4, r5
 80004be:	fa04 f707 	lsl.w	r7, r4, r7
 80004c2:	40cb      	lsrs	r3, r1
 80004c4:	431f      	orrs	r7, r3
 80004c6:	40cc      	lsrs	r4, r1
 80004c8:	6037      	str	r7, [r6, #0]
 80004ca:	6074      	str	r4, [r6, #4]
 80004cc:	2100      	movs	r1, #0
 80004ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004d2:	4618      	mov	r0, r3
 80004d4:	e6f8      	b.n	80002c8 <__udivmoddi4+0x98>
 80004d6:	4690      	mov	r8, r2
 80004d8:	e6e0      	b.n	800029c <__udivmoddi4+0x6c>
 80004da:	45c2      	cmp	sl, r8
 80004dc:	d2ea      	bcs.n	80004b4 <__udivmoddi4+0x284>
 80004de:	ebb8 0e02 	subs.w	lr, r8, r2
 80004e2:	eb69 0503 	sbc.w	r5, r9, r3
 80004e6:	3801      	subs	r0, #1
 80004e8:	e7e4      	b.n	80004b4 <__udivmoddi4+0x284>
 80004ea:	4628      	mov	r0, r5
 80004ec:	e7d7      	b.n	800049e <__udivmoddi4+0x26e>
 80004ee:	4640      	mov	r0, r8
 80004f0:	e791      	b.n	8000416 <__udivmoddi4+0x1e6>
 80004f2:	4681      	mov	r9, r0
 80004f4:	e7be      	b.n	8000474 <__udivmoddi4+0x244>
 80004f6:	4601      	mov	r1, r0
 80004f8:	e778      	b.n	80003ec <__udivmoddi4+0x1bc>
 80004fa:	3802      	subs	r0, #2
 80004fc:	443c      	add	r4, r7
 80004fe:	e745      	b.n	800038c <__udivmoddi4+0x15c>
 8000500:	4608      	mov	r0, r1
 8000502:	e708      	b.n	8000316 <__udivmoddi4+0xe6>
 8000504:	f1a8 0802 	sub.w	r8, r8, #2
 8000508:	443d      	add	r5, r7
 800050a:	e72b      	b.n	8000364 <__udivmoddi4+0x134>

0800050c <__aeabi_idiv0>:
 800050c:	4770      	bx	lr
 800050e:	bf00      	nop

08000510 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000510:	b508      	push	{r3, lr}
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000512:	4b0b      	ldr	r3, [pc, #44]	; (8000540 <HAL_Init+0x30>)
 8000514:	681a      	ldr	r2, [r3, #0]
 8000516:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800051a:	601a      	str	r2, [r3, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800051c:	681a      	ldr	r2, [r3, #0]
 800051e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8000522:	601a      	str	r2, [r3, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000524:	681a      	ldr	r2, [r3, #0]
 8000526:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800052a:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800052c:	2003      	movs	r0, #3
 800052e:	f000 f82f 	bl	8000590 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000532:	2000      	movs	r0, #0
 8000534:	f00d f9d6 	bl	800d8e4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000538:	f00d f9b2 	bl	800d8a0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
}
 800053c:	2000      	movs	r0, #0
 800053e:	bd08      	pop	{r3, pc}
 8000540:	40023c00 	.word	0x40023c00

08000544 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8000544:	4a03      	ldr	r2, [pc, #12]	; (8000554 <HAL_IncTick+0x10>)
 8000546:	6811      	ldr	r1, [r2, #0]
 8000548:	4b03      	ldr	r3, [pc, #12]	; (8000558 <HAL_IncTick+0x14>)
 800054a:	781b      	ldrb	r3, [r3, #0]
 800054c:	440b      	add	r3, r1
 800054e:	6013      	str	r3, [r2, #0]
 8000550:	4770      	bx	lr
 8000552:	bf00      	nop
 8000554:	20004224 	.word	0x20004224
 8000558:	20000000 	.word	0x20000000

0800055c <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 800055c:	4b01      	ldr	r3, [pc, #4]	; (8000564 <HAL_GetTick+0x8>)
 800055e:	6818      	ldr	r0, [r3, #0]
}
 8000560:	4770      	bx	lr
 8000562:	bf00      	nop
 8000564:	20004224 	.word	0x20004224

08000568 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000568:	b538      	push	{r3, r4, r5, lr}
 800056a:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 800056c:	f7ff fff6 	bl	800055c <HAL_GetTick>
 8000570:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000572:	f1b4 3fff 	cmp.w	r4, #4294967295	; 0xffffffff
 8000576:	d002      	beq.n	800057e <HAL_Delay+0x16>
  {
    wait += (uint32_t)(uwTickFreq);
 8000578:	4b04      	ldr	r3, [pc, #16]	; (800058c <HAL_Delay+0x24>)
 800057a:	781b      	ldrb	r3, [r3, #0]
 800057c:	441c      	add	r4, r3
  }

  while((HAL_GetTick() - tickstart) < wait)
 800057e:	f7ff ffed 	bl	800055c <HAL_GetTick>
 8000582:	1b40      	subs	r0, r0, r5
 8000584:	4284      	cmp	r4, r0
 8000586:	d8fa      	bhi.n	800057e <HAL_Delay+0x16>
  {
  }
}
 8000588:	bd38      	pop	{r3, r4, r5, pc}
 800058a:	bf00      	nop
 800058c:	20000000 	.word	0x20000000

08000590 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000590:	4a07      	ldr	r2, [pc, #28]	; (80005b0 <HAL_NVIC_SetPriorityGrouping+0x20>)
 8000592:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000594:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8000598:	041b      	lsls	r3, r3, #16
 800059a:	0c1b      	lsrs	r3, r3, #16
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800059c:	0200      	lsls	r0, r0, #8
 800059e:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80005a2:	4318      	orrs	r0, r3
  reg_value  =  (reg_value                                   |
 80005a4:	f040 60bf 	orr.w	r0, r0, #100139008	; 0x5f80000
 80005a8:	f440 3000 	orr.w	r0, r0, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 80005ac:	60d0      	str	r0, [r2, #12]
 80005ae:	4770      	bx	lr
 80005b0:	e000ed00 	.word	0xe000ed00

080005b4 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80005b4:	b430      	push	{r4, r5}
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80005b6:	4b16      	ldr	r3, [pc, #88]	; (8000610 <HAL_NVIC_SetPriority+0x5c>)
 80005b8:	68db      	ldr	r3, [r3, #12]
 80005ba:	f3c3 2302 	ubfx	r3, r3, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80005be:	f1c3 0407 	rsb	r4, r3, #7
 80005c2:	2c04      	cmp	r4, #4
 80005c4:	bf28      	it	cs
 80005c6:	2404      	movcs	r4, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80005c8:	1d1d      	adds	r5, r3, #4
 80005ca:	2d06      	cmp	r5, #6
 80005cc:	d917      	bls.n	80005fe <HAL_NVIC_SetPriority+0x4a>
 80005ce:	3b03      	subs	r3, #3

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80005d0:	2501      	movs	r5, #1
 80005d2:	fa05 f404 	lsl.w	r4, r5, r4
 80005d6:	3c01      	subs	r4, #1
 80005d8:	4021      	ands	r1, r4
 80005da:	4099      	lsls	r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80005dc:	fa05 f303 	lsl.w	r3, r5, r3
 80005e0:	3b01      	subs	r3, #1
 80005e2:	4013      	ands	r3, r2
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80005e4:	4319      	orrs	r1, r3
  if ((int32_t)(IRQn) >= 0)
 80005e6:	2800      	cmp	r0, #0
 80005e8:	db0b      	blt.n	8000602 <HAL_NVIC_SetPriority+0x4e>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80005ea:	0109      	lsls	r1, r1, #4
 80005ec:	b2c9      	uxtb	r1, r1
 80005ee:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 80005f2:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 80005f6:	f880 1300 	strb.w	r1, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 80005fa:	bc30      	pop	{r4, r5}
 80005fc:	4770      	bx	lr
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80005fe:	2300      	movs	r3, #0
 8000600:	e7e6      	b.n	80005d0 <HAL_NVIC_SetPriority+0x1c>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000602:	f000 000f 	and.w	r0, r0, #15
 8000606:	0109      	lsls	r1, r1, #4
 8000608:	b2c9      	uxtb	r1, r1
 800060a:	4b02      	ldr	r3, [pc, #8]	; (8000614 <HAL_NVIC_SetPriority+0x60>)
 800060c:	5419      	strb	r1, [r3, r0]
 800060e:	e7f4      	b.n	80005fa <HAL_NVIC_SetPriority+0x46>
 8000610:	e000ed00 	.word	0xe000ed00
 8000614:	e000ed14 	.word	0xe000ed14

08000618 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8000618:	2800      	cmp	r0, #0
 800061a:	db08      	blt.n	800062e <HAL_NVIC_EnableIRQ+0x16>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800061c:	0942      	lsrs	r2, r0, #5
 800061e:	f000 001f 	and.w	r0, r0, #31
 8000622:	2301      	movs	r3, #1
 8000624:	fa03 f000 	lsl.w	r0, r3, r0
 8000628:	4b01      	ldr	r3, [pc, #4]	; (8000630 <HAL_NVIC_EnableIRQ+0x18>)
 800062a:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 800062e:	4770      	bx	lr
 8000630:	e000e100 	.word	0xe000e100

08000634 <ETH_MACAddressConfig>:

  /* Check the parameters */
  assert_param(IS_ETH_MAC_ADDRESS0123(MacAddr));
  
  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 8000634:	7950      	ldrb	r0, [r2, #5]
 8000636:	7913      	ldrb	r3, [r2, #4]
 8000638:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 800063c:	4807      	ldr	r0, [pc, #28]	; (800065c <ETH_MACAddressConfig+0x28>)
 800063e:	500b      	str	r3, [r1, r0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 8000640:	78d0      	ldrb	r0, [r2, #3]
 8000642:	7893      	ldrb	r3, [r2, #2]
 8000644:	041b      	lsls	r3, r3, #16
 8000646:	ea43 6300 	orr.w	r3, r3, r0, lsl #24
 800064a:	7850      	ldrb	r0, [r2, #1]
 800064c:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
 8000650:	7812      	ldrb	r2, [r2, #0]
 8000652:	4313      	orrs	r3, r2
  
  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 8000654:	4a02      	ldr	r2, [pc, #8]	; (8000660 <ETH_MACAddressConfig+0x2c>)
 8000656:	508b      	str	r3, [r1, r2]
 8000658:	4770      	bx	lr
 800065a:	bf00      	nop
 800065c:	40028040 	.word	0x40028040
 8000660:	40028044 	.word	0x40028044

08000664 <ETH_DMATransmissionEnable>:
  * @retval None
  */
static void ETH_DMATransmissionEnable(ETH_HandleTypeDef *heth)
{
  /* Enable the DMA transmission */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_ST;  
 8000664:	6801      	ldr	r1, [r0, #0]
 8000666:	f241 0218 	movw	r2, #4120	; 0x1018
 800066a:	588b      	ldr	r3, [r1, r2]
 800066c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000670:	508b      	str	r3, [r1, r2]
 8000672:	4770      	bx	lr

08000674 <ETH_DMAReceptionEnable>:
  * @retval None
  */
static void ETH_DMAReceptionEnable(ETH_HandleTypeDef *heth)
{  
  /* Enable the DMA reception */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_SR;  
 8000674:	6801      	ldr	r1, [r0, #0]
 8000676:	f241 0218 	movw	r2, #4120	; 0x1018
 800067a:	588b      	ldr	r3, [r1, r2]
 800067c:	f043 0302 	orr.w	r3, r3, #2
 8000680:	508b      	str	r3, [r1, r2]
 8000682:	4770      	bx	lr

08000684 <ETH_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay specifies the delay time length, in milliseconds.
  * @retval None
  */
static void ETH_Delay(uint32_t mdelay)
{
 8000684:	b082      	sub	sp, #8
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8000686:	4b08      	ldr	r3, [pc, #32]	; (80006a8 <ETH_Delay+0x24>)
 8000688:	681b      	ldr	r3, [r3, #0]
 800068a:	4a08      	ldr	r2, [pc, #32]	; (80006ac <ETH_Delay+0x28>)
 800068c:	fba2 2303 	umull	r2, r3, r2, r3
 8000690:	0a5b      	lsrs	r3, r3, #9
 8000692:	fb00 f003 	mul.w	r0, r0, r3
 8000696:	9001      	str	r0, [sp, #4]
  do 
  {
    __NOP();
 8000698:	bf00      	nop
  } 
  while (Delay --);
 800069a:	9b01      	ldr	r3, [sp, #4]
 800069c:	1e5a      	subs	r2, r3, #1
 800069e:	9201      	str	r2, [sp, #4]
 80006a0:	2b00      	cmp	r3, #0
 80006a2:	d1f9      	bne.n	8000698 <ETH_Delay+0x14>
}
 80006a4:	b002      	add	sp, #8
 80006a6:	4770      	bx	lr
 80006a8:	20000010 	.word	0x20000010
 80006ac:	10624dd3 	.word	0x10624dd3

080006b0 <ETH_MACTransmissionEnable>:
{ 
 80006b0:	b510      	push	{r4, lr}
 80006b2:	b082      	sub	sp, #8
 80006b4:	4604      	mov	r4, r0
  __IO uint32_t tmpreg1 = 0U;
 80006b6:	2300      	movs	r3, #0
 80006b8:	9301      	str	r3, [sp, #4]
  (heth->Instance)->MACCR |= ETH_MACCR_TE;
 80006ba:	6802      	ldr	r2, [r0, #0]
 80006bc:	6813      	ldr	r3, [r2, #0]
 80006be:	f043 0308 	orr.w	r3, r3, #8
 80006c2:	6013      	str	r3, [r2, #0]
  tmpreg1 = (heth->Instance)->MACCR;
 80006c4:	6803      	ldr	r3, [r0, #0]
 80006c6:	681b      	ldr	r3, [r3, #0]
 80006c8:	9301      	str	r3, [sp, #4]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 80006ca:	2001      	movs	r0, #1
 80006cc:	f7ff ffda 	bl	8000684 <ETH_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 80006d0:	6823      	ldr	r3, [r4, #0]
 80006d2:	9a01      	ldr	r2, [sp, #4]
 80006d4:	601a      	str	r2, [r3, #0]
}
 80006d6:	b002      	add	sp, #8
 80006d8:	bd10      	pop	{r4, pc}

080006da <ETH_MACReceptionEnable>:
{ 
 80006da:	b510      	push	{r4, lr}
 80006dc:	b082      	sub	sp, #8
 80006de:	4604      	mov	r4, r0
  __IO uint32_t tmpreg1 = 0U;
 80006e0:	2300      	movs	r3, #0
 80006e2:	9301      	str	r3, [sp, #4]
  (heth->Instance)->MACCR |= ETH_MACCR_RE;
 80006e4:	6802      	ldr	r2, [r0, #0]
 80006e6:	6813      	ldr	r3, [r2, #0]
 80006e8:	f043 0304 	orr.w	r3, r3, #4
 80006ec:	6013      	str	r3, [r2, #0]
  tmpreg1 = (heth->Instance)->MACCR;
 80006ee:	6803      	ldr	r3, [r0, #0]
 80006f0:	681b      	ldr	r3, [r3, #0]
 80006f2:	9301      	str	r3, [sp, #4]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 80006f4:	2001      	movs	r0, #1
 80006f6:	f7ff ffc5 	bl	8000684 <ETH_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 80006fa:	6823      	ldr	r3, [r4, #0]
 80006fc:	9a01      	ldr	r2, [sp, #4]
 80006fe:	601a      	str	r2, [r3, #0]
}
 8000700:	b002      	add	sp, #8
 8000702:	bd10      	pop	{r4, pc}

08000704 <ETH_FlushTransmitFIFO>:
{
 8000704:	b530      	push	{r4, r5, lr}
 8000706:	b083      	sub	sp, #12
 8000708:	4605      	mov	r5, r0
  __IO uint32_t tmpreg1 = 0U;
 800070a:	2300      	movs	r3, #0
 800070c:	9301      	str	r3, [sp, #4]
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_FTF;
 800070e:	6802      	ldr	r2, [r0, #0]
 8000710:	f241 0418 	movw	r4, #4120	; 0x1018
 8000714:	5913      	ldr	r3, [r2, r4]
 8000716:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800071a:	5113      	str	r3, [r2, r4]
  tmpreg1 = (heth->Instance)->DMAOMR;
 800071c:	6803      	ldr	r3, [r0, #0]
 800071e:	591b      	ldr	r3, [r3, r4]
 8000720:	9301      	str	r3, [sp, #4]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 8000722:	2001      	movs	r0, #1
 8000724:	f7ff ffae 	bl	8000684 <ETH_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 8000728:	682b      	ldr	r3, [r5, #0]
 800072a:	9a01      	ldr	r2, [sp, #4]
 800072c:	511a      	str	r2, [r3, r4]
}
 800072e:	b003      	add	sp, #12
 8000730:	bd30      	pop	{r4, r5, pc}
	...

08000734 <ETH_MACDMAConfig>:
{
 8000734:	b570      	push	{r4, r5, r6, lr}
 8000736:	b09e      	sub	sp, #120	; 0x78
 8000738:	4604      	mov	r4, r0
  if (err != ETH_SUCCESS) /* Auto-negotiation failed */
 800073a:	b129      	cbz	r1, 8000748 <ETH_MACDMAConfig+0x14>
    (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;
 800073c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000740:	60c3      	str	r3, [r0, #12]
    (heth->Init).Speed = ETH_SPEED_100M;
 8000742:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000746:	6083      	str	r3, [r0, #8]
  if(heth->Init.ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 8000748:	69e3      	ldr	r3, [r4, #28]
 800074a:	2b00      	cmp	r3, #0
 800074c:	d16a      	bne.n	8000824 <ETH_MACDMAConfig+0xf0>
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_ENABLE;
 800074e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000752:	9307      	str	r3, [sp, #28]
  tmpreg1 = (heth->Instance)->MACCR;
 8000754:	6821      	ldr	r1, [r4, #0]
 8000756:	680b      	ldr	r3, [r1, #0]
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 8000758:	4a39      	ldr	r2, [pc, #228]	; (8000840 <ETH_MACDMAConfig+0x10c>)
 800075a:	401a      	ands	r2, r3
                       (heth->Init).Speed | 
 800075c:	68a3      	ldr	r3, [r4, #8]
                       (heth->Init).DuplexMode | 
 800075e:	68e0      	ldr	r0, [r4, #12]
                       macinit.LoopbackMode |
 8000760:	4303      	orrs	r3, r0
                       macinit.ChecksumOffload |    
 8000762:	9807      	ldr	r0, [sp, #28]
                       (heth->Init).DuplexMode | 
 8000764:	4303      	orrs	r3, r0
                       macinit.ChecksumOffload |    
 8000766:	f443 7300 	orr.w	r3, r3, #512	; 0x200
  tmpreg1 |= (uint32_t)(macinit.Watchdog | 
 800076a:	4313      	orrs	r3, r2
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 800076c:	600b      	str	r3, [r1, #0]
  tmpreg1 = (heth->Instance)->MACCR;
 800076e:	6823      	ldr	r3, [r4, #0]
 8000770:	681d      	ldr	r5, [r3, #0]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8000772:	2001      	movs	r0, #1
 8000774:	f7ff fef8 	bl	8000568 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1; 
 8000778:	6823      	ldr	r3, [r4, #0]
 800077a:	601d      	str	r5, [r3, #0]
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 800077c:	6823      	ldr	r3, [r4, #0]
 800077e:	2240      	movs	r2, #64	; 0x40
 8000780:	605a      	str	r2, [r3, #4]
   tmpreg1 = (heth->Instance)->MACFFR;
 8000782:	6823      	ldr	r3, [r4, #0]
 8000784:	685d      	ldr	r5, [r3, #4]
   HAL_Delay(ETH_REG_WRITE_DELAY);
 8000786:	2001      	movs	r0, #1
 8000788:	f7ff feee 	bl	8000568 <HAL_Delay>
   (heth->Instance)->MACFFR = tmpreg1;
 800078c:	6823      	ldr	r3, [r4, #0]
 800078e:	605d      	str	r5, [r3, #4]
   (heth->Instance)->MACHTHR = (uint32_t)macinit.HashTableHigh;
 8000790:	6823      	ldr	r3, [r4, #0]
 8000792:	2500      	movs	r5, #0
 8000794:	609d      	str	r5, [r3, #8]
   (heth->Instance)->MACHTLR = (uint32_t)macinit.HashTableLow;
 8000796:	6823      	ldr	r3, [r4, #0]
 8000798:	60dd      	str	r5, [r3, #12]
   tmpreg1 = (heth->Instance)->MACFCR;
 800079a:	6822      	ldr	r2, [r4, #0]
 800079c:	6993      	ldr	r3, [r2, #24]
   tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 800079e:	f023 03be 	bic.w	r3, r3, #190	; 0xbe
 80007a2:	041b      	lsls	r3, r3, #16
 80007a4:	0c1b      	lsrs	r3, r3, #16
   tmpreg1 |= (uint32_t)((macinit.PauseTime << 16U) | 
 80007a6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 80007aa:	6193      	str	r3, [r2, #24]
   tmpreg1 = (heth->Instance)->MACFCR;
 80007ac:	6823      	ldr	r3, [r4, #0]
 80007ae:	699e      	ldr	r6, [r3, #24]
   HAL_Delay(ETH_REG_WRITE_DELAY);
 80007b0:	2001      	movs	r0, #1
 80007b2:	f7ff fed9 	bl	8000568 <HAL_Delay>
   (heth->Instance)->MACFCR = tmpreg1;
 80007b6:	6823      	ldr	r3, [r4, #0]
 80007b8:	619e      	str	r6, [r3, #24]
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 80007ba:	6823      	ldr	r3, [r4, #0]
 80007bc:	61dd      	str	r5, [r3, #28]
    tmpreg1 = (heth->Instance)->MACVLANTR;
 80007be:	6823      	ldr	r3, [r4, #0]
 80007c0:	69dd      	ldr	r5, [r3, #28]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 80007c2:	2001      	movs	r0, #1
 80007c4:	f7ff fed0 	bl	8000568 <HAL_Delay>
    (heth->Instance)->MACVLANTR = tmpreg1;
 80007c8:	6823      	ldr	r3, [r4, #0]
 80007ca:	61dd      	str	r5, [r3, #28]
    tmpreg1 = (heth->Instance)->DMAOMR;
 80007cc:	6822      	ldr	r2, [r4, #0]
 80007ce:	f241 0518 	movw	r5, #4120	; 0x1018
 80007d2:	5951      	ldr	r1, [r2, r5]
    tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 80007d4:	4b1b      	ldr	r3, [pc, #108]	; (8000844 <ETH_MACDMAConfig+0x110>)
 80007d6:	400b      	ands	r3, r1
    tmpreg1 |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 80007d8:	f043 7308 	orr.w	r3, r3, #35651584	; 0x2200000
 80007dc:	f043 0304 	orr.w	r3, r3, #4
    (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 80007e0:	5153      	str	r3, [r2, r5]
    tmpreg1 = (heth->Instance)->DMAOMR;
 80007e2:	6823      	ldr	r3, [r4, #0]
 80007e4:	595e      	ldr	r6, [r3, r5]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 80007e6:	2001      	movs	r0, #1
 80007e8:	f7ff febe 	bl	8000568 <HAL_Delay>
    (heth->Instance)->DMAOMR = tmpreg1;
 80007ec:	6823      	ldr	r3, [r4, #0]
 80007ee:	515e      	str	r6, [r3, r5]
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 80007f0:	6823      	ldr	r3, [r4, #0]
 80007f2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80007f6:	4a14      	ldr	r2, [pc, #80]	; (8000848 <ETH_MACDMAConfig+0x114>)
 80007f8:	601a      	str	r2, [r3, #0]
     tmpreg1 = (heth->Instance)->DMABMR;
 80007fa:	6823      	ldr	r3, [r4, #0]
 80007fc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000800:	681d      	ldr	r5, [r3, #0]
     HAL_Delay(ETH_REG_WRITE_DELAY);
 8000802:	2001      	movs	r0, #1
 8000804:	f7ff feb0 	bl	8000568 <HAL_Delay>
     (heth->Instance)->DMABMR = tmpreg1;
 8000808:	6823      	ldr	r3, [r4, #0]
 800080a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800080e:	601d      	str	r5, [r3, #0]
     if((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 8000810:	69a3      	ldr	r3, [r4, #24]
 8000812:	2b01      	cmp	r3, #1
 8000814:	d009      	beq.n	800082a <ETH_MACDMAConfig+0xf6>
     ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8000816:	6962      	ldr	r2, [r4, #20]
 8000818:	2100      	movs	r1, #0
 800081a:	4620      	mov	r0, r4
 800081c:	f7ff ff0a 	bl	8000634 <ETH_MACAddressConfig>
}
 8000820:	b01e      	add	sp, #120	; 0x78
 8000822:	bd70      	pop	{r4, r5, r6, pc}
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_DISABLE;
 8000824:	2300      	movs	r3, #0
 8000826:	9307      	str	r3, [sp, #28]
 8000828:	e794      	b.n	8000754 <ETH_MACDMAConfig+0x20>
       __HAL_ETH_DMA_ENABLE_IT((heth), ETH_DMA_IT_NIS | ETH_DMA_IT_R);
 800082a:	6821      	ldr	r1, [r4, #0]
 800082c:	f241 021c 	movw	r2, #4124	; 0x101c
 8000830:	588b      	ldr	r3, [r1, r2]
 8000832:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000836:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800083a:	508b      	str	r3, [r1, r2]
 800083c:	e7eb      	b.n	8000816 <ETH_MACDMAConfig+0xe2>
 800083e:	bf00      	nop
 8000840:	ff20810f 	.word	0xff20810f
 8000844:	f8de3f23 	.word	0xf8de3f23
 8000848:	02c12080 	.word	0x02c12080

0800084c <HAL_ETH_DMATxDescListInit>:
{
 800084c:	b4f0      	push	{r4, r5, r6, r7}
  __HAL_LOCK(heth);
 800084e:	f890 4045 	ldrb.w	r4, [r0, #69]	; 0x45
 8000852:	2c01      	cmp	r4, #1
 8000854:	d031      	beq.n	80008ba <HAL_ETH_DMATxDescListInit+0x6e>
 8000856:	2401      	movs	r4, #1
 8000858:	f880 4045 	strb.w	r4, [r0, #69]	; 0x45
  heth->State = HAL_ETH_STATE_BUSY;
 800085c:	2402      	movs	r4, #2
 800085e:	f880 4044 	strb.w	r4, [r0, #68]	; 0x44
  heth->TxDesc = DMATxDescTab;
 8000862:	62c1      	str	r1, [r0, #44]	; 0x2c
  for(i=0U; i < TxBuffCount; i++)
 8000864:	2400      	movs	r4, #0
 8000866:	e001      	b.n	800086c <HAL_ETH_DMATxDescListInit+0x20>
      dmatxdesc->Buffer2NextDescAddr = (uint32_t) DMATxDescTab;  
 8000868:	60f9      	str	r1, [r7, #12]
  for(i=0U; i < TxBuffCount; i++)
 800086a:	3401      	adds	r4, #1
 800086c:	429c      	cmp	r4, r3
 800086e:	d217      	bcs.n	80008a0 <HAL_ETH_DMATxDescListInit+0x54>
    dmatxdesc = DMATxDescTab + i;
 8000870:	0165      	lsls	r5, r4, #5
 8000872:	194f      	adds	r7, r1, r5
    dmatxdesc->Status = ETH_DMATXDESC_TCH;  
 8000874:	f44f 1680 	mov.w	r6, #1048576	; 0x100000
 8000878:	514e      	str	r6, [r1, r5]
    dmatxdesc->Buffer1Addr = (uint32_t)(&TxBuff[i*ETH_TX_BUF_SIZE]);
 800087a:	f240 56f4 	movw	r6, #1524	; 0x5f4
 800087e:	fb06 2604 	mla	r6, r6, r4, r2
 8000882:	60be      	str	r6, [r7, #8]
    if ((heth->Init).ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 8000884:	69c6      	ldr	r6, [r0, #28]
 8000886:	b91e      	cbnz	r6, 8000890 <HAL_ETH_DMATxDescListInit+0x44>
      dmatxdesc->Status |= ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL;
 8000888:	594e      	ldr	r6, [r1, r5]
 800088a:	f446 0640 	orr.w	r6, r6, #12582912	; 0xc00000
 800088e:	514e      	str	r6, [r1, r5]
    if(i < (TxBuffCount-1U))
 8000890:	1e5d      	subs	r5, r3, #1
 8000892:	42ac      	cmp	r4, r5
 8000894:	d2e8      	bcs.n	8000868 <HAL_ETH_DMATxDescListInit+0x1c>
      dmatxdesc->Buffer2NextDescAddr = (uint32_t)(DMATxDescTab+i+1U);
 8000896:	1c65      	adds	r5, r4, #1
 8000898:	eb01 1545 	add.w	r5, r1, r5, lsl #5
 800089c:	60fd      	str	r5, [r7, #12]
 800089e:	e7e4      	b.n	800086a <HAL_ETH_DMATxDescListInit+0x1e>
  (heth->Instance)->DMATDLAR = (uint32_t) DMATxDescTab;
 80008a0:	6802      	ldr	r2, [r0, #0]
 80008a2:	f241 0310 	movw	r3, #4112	; 0x1010
 80008a6:	50d1      	str	r1, [r2, r3]
  heth->State= HAL_ETH_STATE_READY;
 80008a8:	2301      	movs	r3, #1
 80008aa:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
  __HAL_UNLOCK(heth);
 80008ae:	2300      	movs	r3, #0
 80008b0:	f880 3045 	strb.w	r3, [r0, #69]	; 0x45
  return HAL_OK;
 80008b4:	4618      	mov	r0, r3
}
 80008b6:	bcf0      	pop	{r4, r5, r6, r7}
 80008b8:	4770      	bx	lr
  __HAL_LOCK(heth);
 80008ba:	2002      	movs	r0, #2
 80008bc:	e7fb      	b.n	80008b6 <HAL_ETH_DMATxDescListInit+0x6a>

080008be <HAL_ETH_DMARxDescListInit>:
{
 80008be:	b4f0      	push	{r4, r5, r6, r7}
  __HAL_LOCK(heth);
 80008c0:	f890 4045 	ldrb.w	r4, [r0, #69]	; 0x45
 80008c4:	2c01      	cmp	r4, #1
 80008c6:	d02e      	beq.n	8000926 <HAL_ETH_DMARxDescListInit+0x68>
 80008c8:	2401      	movs	r4, #1
 80008ca:	f880 4045 	strb.w	r4, [r0, #69]	; 0x45
  heth->State = HAL_ETH_STATE_BUSY;
 80008ce:	2402      	movs	r4, #2
 80008d0:	f880 4044 	strb.w	r4, [r0, #68]	; 0x44
  heth->RxDesc = DMARxDescTab; 
 80008d4:	6281      	str	r1, [r0, #40]	; 0x28
  for(i=0U; i < RxBuffCount; i++)
 80008d6:	2400      	movs	r4, #0
 80008d8:	e001      	b.n	80008de <HAL_ETH_DMARxDescListInit+0x20>
      DMARxDesc->Buffer2NextDescAddr = (uint32_t)(DMARxDescTab); 
 80008da:	60e9      	str	r1, [r5, #12]
  for(i=0U; i < RxBuffCount; i++)
 80008dc:	3401      	adds	r4, #1
 80008de:	429c      	cmp	r4, r3
 80008e0:	d214      	bcs.n	800090c <HAL_ETH_DMARxDescListInit+0x4e>
    DMARxDesc = DMARxDescTab+i;
 80008e2:	0166      	lsls	r6, r4, #5
 80008e4:	198d      	adds	r5, r1, r6
    DMARxDesc->Status = ETH_DMARXDESC_OWN;
 80008e6:	f04f 4700 	mov.w	r7, #2147483648	; 0x80000000
 80008ea:	518f      	str	r7, [r1, r6]
    DMARxDesc->ControlBufferSize = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;  
 80008ec:	f244 56f4 	movw	r6, #17908	; 0x45f4
 80008f0:	606e      	str	r6, [r5, #4]
    DMARxDesc->Buffer1Addr = (uint32_t)(&RxBuff[i*ETH_RX_BUF_SIZE]);
 80008f2:	f240 56f4 	movw	r6, #1524	; 0x5f4
 80008f6:	fb06 2604 	mla	r6, r6, r4, r2
 80008fa:	60ae      	str	r6, [r5, #8]
    if(i < (RxBuffCount-1U))
 80008fc:	1e5e      	subs	r6, r3, #1
 80008fe:	42b4      	cmp	r4, r6
 8000900:	d2eb      	bcs.n	80008da <HAL_ETH_DMARxDescListInit+0x1c>
      DMARxDesc->Buffer2NextDescAddr = (uint32_t)(DMARxDescTab+i+1U); 
 8000902:	1c66      	adds	r6, r4, #1
 8000904:	eb01 1646 	add.w	r6, r1, r6, lsl #5
 8000908:	60ee      	str	r6, [r5, #12]
 800090a:	e7e7      	b.n	80008dc <HAL_ETH_DMARxDescListInit+0x1e>
  (heth->Instance)->DMARDLAR = (uint32_t) DMARxDescTab;
 800090c:	6802      	ldr	r2, [r0, #0]
 800090e:	f241 030c 	movw	r3, #4108	; 0x100c
 8000912:	50d1      	str	r1, [r2, r3]
  heth->State= HAL_ETH_STATE_READY;
 8000914:	2301      	movs	r3, #1
 8000916:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
  __HAL_UNLOCK(heth);
 800091a:	2300      	movs	r3, #0
 800091c:	f880 3045 	strb.w	r3, [r0, #69]	; 0x45
  return HAL_OK;
 8000920:	4618      	mov	r0, r3
}
 8000922:	bcf0      	pop	{r4, r5, r6, r7}
 8000924:	4770      	bx	lr
  __HAL_LOCK(heth);
 8000926:	2002      	movs	r0, #2
 8000928:	e7fb      	b.n	8000922 <HAL_ETH_DMARxDescListInit+0x64>
	...

0800092c <HAL_ETH_TransmitFrame>:
  __HAL_LOCK(heth);
 800092c:	f890 3045 	ldrb.w	r3, [r0, #69]	; 0x45
 8000930:	2b01      	cmp	r3, #1
 8000932:	f000 8087 	beq.w	8000a44 <HAL_ETH_TransmitFrame+0x118>
 8000936:	2301      	movs	r3, #1
 8000938:	f880 3045 	strb.w	r3, [r0, #69]	; 0x45
  heth->State = HAL_ETH_STATE_BUSY;
 800093c:	2302      	movs	r3, #2
 800093e:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
  if (FrameLength == 0U) 
 8000942:	b199      	cbz	r1, 800096c <HAL_ETH_TransmitFrame+0x40>
  if(((heth->TxDesc)->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 8000944:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8000946:	681a      	ldr	r2, [r3, #0]
 8000948:	2a00      	cmp	r2, #0
 800094a:	db17      	blt.n	800097c <HAL_ETH_TransmitFrame+0x50>
{
 800094c:	b430      	push	{r4, r5}
  if (FrameLength > ETH_TX_BUF_SIZE)
 800094e:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8000952:	4291      	cmp	r1, r2
 8000954:	d91a      	bls.n	800098c <HAL_ETH_TransmitFrame+0x60>
    bufcount = FrameLength/ETH_TX_BUF_SIZE;
 8000956:	4c3c      	ldr	r4, [pc, #240]	; (8000a48 <HAL_ETH_TransmitFrame+0x11c>)
 8000958:	fba4 2401 	umull	r2, r4, r4, r1
 800095c:	0aa4      	lsrs	r4, r4, #10
    if (FrameLength % ETH_TX_BUF_SIZE) 
 800095e:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8000962:	fb02 1214 	mls	r2, r2, r4, r1
 8000966:	b192      	cbz	r2, 800098e <HAL_ETH_TransmitFrame+0x62>
      bufcount++;
 8000968:	3401      	adds	r4, #1
 800096a:	e010      	b.n	800098e <HAL_ETH_TransmitFrame+0x62>
    heth->State = HAL_ETH_STATE_READY;
 800096c:	2301      	movs	r3, #1
 800096e:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
    __HAL_UNLOCK(heth);
 8000972:	2200      	movs	r2, #0
 8000974:	f880 2045 	strb.w	r2, [r0, #69]	; 0x45
    return  HAL_ERROR;                                    
 8000978:	4618      	mov	r0, r3
 800097a:	4770      	bx	lr
    heth->State = HAL_ETH_STATE_BUSY_TX;
 800097c:	2312      	movs	r3, #18
 800097e:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
    __HAL_UNLOCK(heth);
 8000982:	2300      	movs	r3, #0
 8000984:	f880 3045 	strb.w	r3, [r0, #69]	; 0x45
    return HAL_ERROR;
 8000988:	2001      	movs	r0, #1
 800098a:	4770      	bx	lr
    bufcount = 1U;
 800098c:	2401      	movs	r4, #1
  if (bufcount == 1U)
 800098e:	2c01      	cmp	r4, #1
 8000990:	d001      	beq.n	8000996 <HAL_ETH_TransmitFrame+0x6a>
 8000992:	2300      	movs	r3, #0
 8000994:	e037      	b.n	8000a06 <HAL_ETH_TransmitFrame+0xda>
    heth->TxDesc->Status |=ETH_DMATXDESC_FS|ETH_DMATXDESC_LS;
 8000996:	681a      	ldr	r2, [r3, #0]
 8000998:	f042 5240 	orr.w	r2, r2, #805306368	; 0x30000000
 800099c:	601a      	str	r2, [r3, #0]
    heth->TxDesc->ControlBufferSize = (FrameLength & ETH_DMATXDESC_TBS1);
 800099e:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 80009a0:	f3c1 010c 	ubfx	r1, r1, #0, #13
 80009a4:	6059      	str	r1, [r3, #4]
    heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 80009a6:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
 80009a8:	6813      	ldr	r3, [r2, #0]
 80009aa:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80009ae:	6013      	str	r3, [r2, #0]
    heth->TxDesc= (ETH_DMADescTypeDef *)(heth->TxDesc->Buffer2NextDescAddr);
 80009b0:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 80009b2:	68db      	ldr	r3, [r3, #12]
 80009b4:	62c3      	str	r3, [r0, #44]	; 0x2c
  if (((heth->Instance)->DMASR & ETH_DMASR_TBUS) != (uint32_t)RESET)
 80009b6:	6803      	ldr	r3, [r0, #0]
 80009b8:	f241 0214 	movw	r2, #4116	; 0x1014
 80009bc:	589a      	ldr	r2, [r3, r2]
 80009be:	f012 0f04 	tst.w	r2, #4
 80009c2:	d008      	beq.n	80009d6 <HAL_ETH_TransmitFrame+0xaa>
    (heth->Instance)->DMASR = ETH_DMASR_TBUS;
 80009c4:	2104      	movs	r1, #4
 80009c6:	f241 0214 	movw	r2, #4116	; 0x1014
 80009ca:	5099      	str	r1, [r3, r2]
    (heth->Instance)->DMATPDR = 0U;
 80009cc:	6802      	ldr	r2, [r0, #0]
 80009ce:	2100      	movs	r1, #0
 80009d0:	f241 0304 	movw	r3, #4100	; 0x1004
 80009d4:	50d1      	str	r1, [r2, r3]
  heth->State = HAL_ETH_STATE_READY;
 80009d6:	2301      	movs	r3, #1
 80009d8:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
  __HAL_UNLOCK(heth);
 80009dc:	2300      	movs	r3, #0
 80009de:	f880 3045 	strb.w	r3, [r0, #69]	; 0x45
  return HAL_OK;
 80009e2:	4618      	mov	r0, r3
}
 80009e4:	bc30      	pop	{r4, r5}
 80009e6:	4770      	bx	lr
        heth->TxDesc->Status |= ETH_DMATXDESC_FS;  
 80009e8:	6ac5      	ldr	r5, [r0, #44]	; 0x2c
 80009ea:	682a      	ldr	r2, [r5, #0]
 80009ec:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80009f0:	602a      	str	r2, [r5, #0]
 80009f2:	e011      	b.n	8000a18 <HAL_ETH_TransmitFrame+0xec>
      heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 80009f4:	6ac5      	ldr	r5, [r0, #44]	; 0x2c
 80009f6:	682a      	ldr	r2, [r5, #0]
 80009f8:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80009fc:	602a      	str	r2, [r5, #0]
      heth->TxDesc = (ETH_DMADescTypeDef *)(heth->TxDesc->Buffer2NextDescAddr);
 80009fe:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
 8000a00:	68d2      	ldr	r2, [r2, #12]
 8000a02:	62c2      	str	r2, [r0, #44]	; 0x2c
    for (i=0U; i< bufcount; i++)
 8000a04:	3301      	adds	r3, #1
 8000a06:	429c      	cmp	r4, r3
 8000a08:	d9d5      	bls.n	80009b6 <HAL_ETH_TransmitFrame+0x8a>
      heth->TxDesc->Status &= ~(ETH_DMATXDESC_FS | ETH_DMATXDESC_LS);
 8000a0a:	6ac5      	ldr	r5, [r0, #44]	; 0x2c
 8000a0c:	682a      	ldr	r2, [r5, #0]
 8000a0e:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8000a12:	602a      	str	r2, [r5, #0]
      if (i == 0U) 
 8000a14:	2b00      	cmp	r3, #0
 8000a16:	d0e7      	beq.n	80009e8 <HAL_ETH_TransmitFrame+0xbc>
      heth->TxDesc->ControlBufferSize = (ETH_TX_BUF_SIZE & ETH_DMATXDESC_TBS1);
 8000a18:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
 8000a1a:	f240 55f4 	movw	r5, #1524	; 0x5f4
 8000a1e:	6055      	str	r5, [r2, #4]
      if (i == (bufcount-1U))
 8000a20:	1e62      	subs	r2, r4, #1
 8000a22:	4293      	cmp	r3, r2
 8000a24:	d1e6      	bne.n	80009f4 <HAL_ETH_TransmitFrame+0xc8>
        heth->TxDesc->Status |= ETH_DMATXDESC_LS;
 8000a26:	6ac5      	ldr	r5, [r0, #44]	; 0x2c
 8000a28:	682a      	ldr	r2, [r5, #0]
 8000a2a:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 8000a2e:	602a      	str	r2, [r5, #0]
        size = FrameLength - (bufcount-1U)*ETH_TX_BUF_SIZE;
 8000a30:	4a06      	ldr	r2, [pc, #24]	; (8000a4c <HAL_ETH_TransmitFrame+0x120>)
 8000a32:	fb02 1204 	mla	r2, r2, r4, r1
 8000a36:	f202 52f4 	addw	r2, r2, #1524	; 0x5f4
        heth->TxDesc->ControlBufferSize = (size & ETH_DMATXDESC_TBS1);
 8000a3a:	6ac5      	ldr	r5, [r0, #44]	; 0x2c
 8000a3c:	f3c2 020c 	ubfx	r2, r2, #0, #13
 8000a40:	606a      	str	r2, [r5, #4]
 8000a42:	e7d7      	b.n	80009f4 <HAL_ETH_TransmitFrame+0xc8>
  __HAL_LOCK(heth);
 8000a44:	2002      	movs	r0, #2
 8000a46:	4770      	bx	lr
 8000a48:	ac02b00b 	.word	0xac02b00b
 8000a4c:	fffffa0c 	.word	0xfffffa0c

08000a50 <HAL_ETH_GetReceivedFrame_IT>:
  __HAL_LOCK(heth);
 8000a50:	f890 3045 	ldrb.w	r3, [r0, #69]	; 0x45
 8000a54:	2b01      	cmp	r3, #1
 8000a56:	d045      	beq.n	8000ae4 <HAL_ETH_GetReceivedFrame_IT+0x94>
 8000a58:	2301      	movs	r3, #1
 8000a5a:	f880 3045 	strb.w	r3, [r0, #69]	; 0x45
  heth->State = HAL_ETH_STATE_BUSY;
 8000a5e:	2302      	movs	r3, #2
 8000a60:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
  uint32_t descriptorscancounter = 0U;
 8000a64:	2100      	movs	r1, #0
  while (((heth->RxDesc->Status & ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (descriptorscancounter < ETH_RXBUFNB))
 8000a66:	e00a      	b.n	8000a7e <HAL_ETH_GetReceivedFrame_IT+0x2e>
      heth->RxFrameInfos.FSRxDesc = heth->RxDesc;
 8000a68:	6303      	str	r3, [r0, #48]	; 0x30
      heth->RxFrameInfos.SegCount = 1U;   
 8000a6a:	2201      	movs	r2, #1
 8000a6c:	6382      	str	r2, [r0, #56]	; 0x38
      heth->RxDesc = (ETH_DMADescTypeDef*) (heth->RxDesc->Buffer2NextDescAddr);
 8000a6e:	68db      	ldr	r3, [r3, #12]
 8000a70:	6283      	str	r3, [r0, #40]	; 0x28
 8000a72:	e004      	b.n	8000a7e <HAL_ETH_GetReceivedFrame_IT+0x2e>
      (heth->RxFrameInfos.SegCount)++;
 8000a74:	6b82      	ldr	r2, [r0, #56]	; 0x38
 8000a76:	3201      	adds	r2, #1
 8000a78:	6382      	str	r2, [r0, #56]	; 0x38
      heth->RxDesc = (ETH_DMADescTypeDef*)(heth->RxDesc->Buffer2NextDescAddr);
 8000a7a:	68db      	ldr	r3, [r3, #12]
 8000a7c:	6283      	str	r3, [r0, #40]	; 0x28
  while (((heth->RxDesc->Status & ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (descriptorscancounter < ETH_RXBUFNB))
 8000a7e:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8000a80:	681a      	ldr	r2, [r3, #0]
 8000a82:	2a00      	cmp	r2, #0
 8000a84:	db26      	blt.n	8000ad4 <HAL_ETH_GetReceivedFrame_IT+0x84>
 8000a86:	2903      	cmp	r1, #3
 8000a88:	d824      	bhi.n	8000ad4 <HAL_ETH_GetReceivedFrame_IT+0x84>
    descriptorscancounter++;
 8000a8a:	3101      	adds	r1, #1
    if((heth->RxDesc->Status & (ETH_DMARXDESC_FS | ETH_DMARXDESC_LS)) == (uint32_t)ETH_DMARXDESC_FS)
 8000a8c:	681a      	ldr	r2, [r3, #0]
 8000a8e:	f402 7240 	and.w	r2, r2, #768	; 0x300
 8000a92:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
 8000a96:	d0e7      	beq.n	8000a68 <HAL_ETH_GetReceivedFrame_IT+0x18>
    else if ((heth->RxDesc->Status & (ETH_DMARXDESC_LS | ETH_DMARXDESC_FS)) == (uint32_t)RESET)
 8000a98:	681a      	ldr	r2, [r3, #0]
 8000a9a:	f412 7f40 	tst.w	r2, #768	; 0x300
 8000a9e:	d0e9      	beq.n	8000a74 <HAL_ETH_GetReceivedFrame_IT+0x24>
      heth->RxFrameInfos.LSRxDesc = heth->RxDesc;
 8000aa0:	6343      	str	r3, [r0, #52]	; 0x34
      (heth->RxFrameInfos.SegCount)++;
 8000aa2:	6b82      	ldr	r2, [r0, #56]	; 0x38
 8000aa4:	3201      	adds	r2, #1
 8000aa6:	6382      	str	r2, [r0, #56]	; 0x38
      if ((heth->RxFrameInfos.SegCount) == 1U)
 8000aa8:	2a01      	cmp	r2, #1
 8000aaa:	d011      	beq.n	8000ad0 <HAL_ETH_GetReceivedFrame_IT+0x80>
      heth->RxFrameInfos.length = (((heth->RxDesc)->Status & ETH_DMARXDESC_FL) >> ETH_DMARXDESC_FRAMELENGTHSHIFT) - 4U;
 8000aac:	681a      	ldr	r2, [r3, #0]
 8000aae:	f3c2 420d 	ubfx	r2, r2, #16, #14
 8000ab2:	3a04      	subs	r2, #4
 8000ab4:	63c2      	str	r2, [r0, #60]	; 0x3c
      heth->RxFrameInfos.buffer =((heth->RxFrameInfos).FSRxDesc)->Buffer1Addr;
 8000ab6:	6b02      	ldr	r2, [r0, #48]	; 0x30
 8000ab8:	6892      	ldr	r2, [r2, #8]
 8000aba:	6402      	str	r2, [r0, #64]	; 0x40
      heth->RxDesc = (ETH_DMADescTypeDef*) (heth->RxDesc->Buffer2NextDescAddr);
 8000abc:	68db      	ldr	r3, [r3, #12]
 8000abe:	6283      	str	r3, [r0, #40]	; 0x28
      heth->State = HAL_ETH_STATE_READY;
 8000ac0:	2301      	movs	r3, #1
 8000ac2:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
      __HAL_UNLOCK(heth);
 8000ac6:	2300      	movs	r3, #0
 8000ac8:	f880 3045 	strb.w	r3, [r0, #69]	; 0x45
      return HAL_OK;
 8000acc:	4618      	mov	r0, r3
 8000ace:	4770      	bx	lr
        heth->RxFrameInfos.FSRxDesc = heth->RxDesc;
 8000ad0:	6303      	str	r3, [r0, #48]	; 0x30
 8000ad2:	e7eb      	b.n	8000aac <HAL_ETH_GetReceivedFrame_IT+0x5c>
  heth->State = HAL_ETH_STATE_READY;
 8000ad4:	2301      	movs	r3, #1
 8000ad6:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
  __HAL_UNLOCK(heth);
 8000ada:	2200      	movs	r2, #0
 8000adc:	f880 2045 	strb.w	r2, [r0, #69]	; 0x45
  return HAL_ERROR;
 8000ae0:	4618      	mov	r0, r3
 8000ae2:	4770      	bx	lr
  __HAL_LOCK(heth);
 8000ae4:	2002      	movs	r0, #2
}
 8000ae6:	4770      	bx	lr

08000ae8 <HAL_ETH_TxCpltCallback>:
{
 8000ae8:	4770      	bx	lr

08000aea <HAL_ETH_ErrorCallback>:
{
 8000aea:	4770      	bx	lr

08000aec <HAL_ETH_IRQHandler>:
{
 8000aec:	b510      	push	{r4, lr}
 8000aee:	4604      	mov	r4, r0
  if (__HAL_ETH_DMA_GET_FLAG(heth, ETH_DMA_FLAG_R)) 
 8000af0:	6803      	ldr	r3, [r0, #0]
 8000af2:	f241 0214 	movw	r2, #4116	; 0x1014
 8000af6:	589a      	ldr	r2, [r3, r2]
 8000af8:	f012 0f40 	tst.w	r2, #64	; 0x40
 8000afc:	d111      	bne.n	8000b22 <HAL_ETH_IRQHandler+0x36>
  else if (__HAL_ETH_DMA_GET_FLAG(heth, ETH_DMA_FLAG_T)) 
 8000afe:	f241 0214 	movw	r2, #4116	; 0x1014
 8000b02:	589b      	ldr	r3, [r3, r2]
 8000b04:	f013 0f01 	tst.w	r3, #1
 8000b08:	d119      	bne.n	8000b3e <HAL_ETH_IRQHandler+0x52>
  __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_IT_NIS);
 8000b0a:	6822      	ldr	r2, [r4, #0]
 8000b0c:	f241 0314 	movw	r3, #4116	; 0x1014
 8000b10:	f44f 3180 	mov.w	r1, #65536	; 0x10000
 8000b14:	50d1      	str	r1, [r2, r3]
  if(__HAL_ETH_DMA_GET_FLAG(heth, ETH_DMA_FLAG_AIS))
 8000b16:	6822      	ldr	r2, [r4, #0]
 8000b18:	58d3      	ldr	r3, [r2, r3]
 8000b1a:	f413 4f00 	tst.w	r3, #32768	; 0x8000
 8000b1e:	d11b      	bne.n	8000b58 <HAL_ETH_IRQHandler+0x6c>
 8000b20:	bd10      	pop	{r4, pc}
    HAL_ETH_RxCpltCallback(heth);
 8000b22:	f00c fbc9 	bl	800d2b8 <HAL_ETH_RxCpltCallback>
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_IT_R);
 8000b26:	6822      	ldr	r2, [r4, #0]
 8000b28:	2140      	movs	r1, #64	; 0x40
 8000b2a:	f241 0314 	movw	r3, #4116	; 0x1014
 8000b2e:	50d1      	str	r1, [r2, r3]
    heth->State = HAL_ETH_STATE_READY;
 8000b30:	2301      	movs	r3, #1
 8000b32:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
    __HAL_UNLOCK(heth);
 8000b36:	2300      	movs	r3, #0
 8000b38:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8000b3c:	e7e5      	b.n	8000b0a <HAL_ETH_IRQHandler+0x1e>
    HAL_ETH_TxCpltCallback(heth);
 8000b3e:	f7ff ffd3 	bl	8000ae8 <HAL_ETH_TxCpltCallback>
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_IT_T);
 8000b42:	6821      	ldr	r1, [r4, #0]
 8000b44:	2301      	movs	r3, #1
 8000b46:	f241 0214 	movw	r2, #4116	; 0x1014
 8000b4a:	508b      	str	r3, [r1, r2]
    heth->State = HAL_ETH_STATE_READY;
 8000b4c:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
    __HAL_UNLOCK(heth);
 8000b50:	2300      	movs	r3, #0
 8000b52:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8000b56:	e7d8      	b.n	8000b0a <HAL_ETH_IRQHandler+0x1e>
    HAL_ETH_ErrorCallback(heth);
 8000b58:	4620      	mov	r0, r4
 8000b5a:	f7ff ffc6 	bl	8000aea <HAL_ETH_ErrorCallback>
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_FLAG_AIS);
 8000b5e:	6822      	ldr	r2, [r4, #0]
 8000b60:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000b64:	f241 0314 	movw	r3, #4116	; 0x1014
 8000b68:	50d1      	str	r1, [r2, r3]
    heth->State = HAL_ETH_STATE_READY;
 8000b6a:	2301      	movs	r3, #1
 8000b6c:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
    __HAL_UNLOCK(heth);
 8000b70:	2300      	movs	r3, #0
 8000b72:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
}
 8000b76:	e7d3      	b.n	8000b20 <HAL_ETH_IRQHandler+0x34>

08000b78 <HAL_ETH_ReadPHYRegister>:
{
 8000b78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if(heth->State == HAL_ETH_STATE_BUSY_RD)
 8000b7a:	f890 3044 	ldrb.w	r3, [r0, #68]	; 0x44
 8000b7e:	b2db      	uxtb	r3, r3
 8000b80:	2b82      	cmp	r3, #130	; 0x82
 8000b82:	d101      	bne.n	8000b88 <HAL_ETH_ReadPHYRegister+0x10>
    return HAL_BUSY;
 8000b84:	2002      	movs	r0, #2
}
 8000b86:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000b88:	4616      	mov	r6, r2
 8000b8a:	4605      	mov	r5, r0
  heth->State = HAL_ETH_STATE_BUSY_RD;
 8000b8c:	2382      	movs	r3, #130	; 0x82
 8000b8e:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
  tmpreg1 = heth->Instance->MACMIIAR;
 8000b92:	6802      	ldr	r2, [r0, #0]
 8000b94:	6914      	ldr	r4, [r2, #16]
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 8000b96:	f004 041c 	and.w	r4, r4, #28
  tmpreg1 |=(((uint32_t)heth->Init.PhyAddress << 11U) & ETH_MACMIIAR_PA); /* Set the PHY device address   */
 8000b9a:	8a03      	ldrh	r3, [r0, #16]
 8000b9c:	02db      	lsls	r3, r3, #11
 8000b9e:	b29b      	uxth	r3, r3
 8000ba0:	431c      	orrs	r4, r3
  tmpreg1 |=(((uint32_t)PHYReg<<6U) & ETH_MACMIIAR_MR);                   /* Set the PHY register address */
 8000ba2:	0189      	lsls	r1, r1, #6
 8000ba4:	f401 61f8 	and.w	r1, r1, #1984	; 0x7c0
  tmpreg1 &= ~ETH_MACMIIAR_MW;                                            /* Set the read mode            */
 8000ba8:	430c      	orrs	r4, r1
  tmpreg1 |= ETH_MACMIIAR_MB;                                             /* Set the MII Busy bit         */
 8000baa:	f044 0401 	orr.w	r4, r4, #1
  heth->Instance->MACMIIAR = tmpreg1;
 8000bae:	6114      	str	r4, [r2, #16]
  tickstart = HAL_GetTick();
 8000bb0:	f7ff fcd4 	bl	800055c <HAL_GetTick>
 8000bb4:	4607      	mov	r7, r0
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8000bb6:	f014 0f01 	tst.w	r4, #1
 8000bba:	d010      	beq.n	8000bde <HAL_ETH_ReadPHYRegister+0x66>
    if((HAL_GetTick() - tickstart ) > PHY_READ_TO)
 8000bbc:	f7ff fcce 	bl	800055c <HAL_GetTick>
 8000bc0:	1bc0      	subs	r0, r0, r7
 8000bc2:	f5b0 3f80 	cmp.w	r0, #65536	; 0x10000
 8000bc6:	d202      	bcs.n	8000bce <HAL_ETH_ReadPHYRegister+0x56>
    tmpreg1 = heth->Instance->MACMIIAR;
 8000bc8:	682b      	ldr	r3, [r5, #0]
 8000bca:	691c      	ldr	r4, [r3, #16]
 8000bcc:	e7f3      	b.n	8000bb6 <HAL_ETH_ReadPHYRegister+0x3e>
      heth->State= HAL_ETH_STATE_READY;
 8000bce:	2301      	movs	r3, #1
 8000bd0:	f885 3044 	strb.w	r3, [r5, #68]	; 0x44
      __HAL_UNLOCK(heth);
 8000bd4:	2300      	movs	r3, #0
 8000bd6:	f885 3045 	strb.w	r3, [r5, #69]	; 0x45
      return HAL_TIMEOUT;
 8000bda:	2003      	movs	r0, #3
 8000bdc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  *RegValue = (uint16_t)(heth->Instance->MACMIIDR);
 8000bde:	682b      	ldr	r3, [r5, #0]
 8000be0:	695b      	ldr	r3, [r3, #20]
 8000be2:	b29b      	uxth	r3, r3
 8000be4:	6033      	str	r3, [r6, #0]
  heth->State = HAL_ETH_STATE_READY;
 8000be6:	2301      	movs	r3, #1
 8000be8:	f885 3044 	strb.w	r3, [r5, #68]	; 0x44
  return HAL_OK;
 8000bec:	2000      	movs	r0, #0
 8000bee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08000bf0 <HAL_ETH_WritePHYRegister>:
  if(heth->State == HAL_ETH_STATE_BUSY_WR)
 8000bf0:	f890 3044 	ldrb.w	r3, [r0, #68]	; 0x44
 8000bf4:	b2db      	uxtb	r3, r3
 8000bf6:	2b42      	cmp	r3, #66	; 0x42
 8000bf8:	d101      	bne.n	8000bfe <HAL_ETH_WritePHYRegister+0xe>
    return HAL_BUSY;
 8000bfa:	2002      	movs	r0, #2
 8000bfc:	4770      	bx	lr
{
 8000bfe:	b570      	push	{r4, r5, r6, lr}
 8000c00:	4605      	mov	r5, r0
  heth->State = HAL_ETH_STATE_BUSY_WR;
 8000c02:	2342      	movs	r3, #66	; 0x42
 8000c04:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
  tmpreg1 = heth->Instance->MACMIIAR;
 8000c08:	6800      	ldr	r0, [r0, #0]
 8000c0a:	6904      	ldr	r4, [r0, #16]
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 8000c0c:	f004 041c 	and.w	r4, r4, #28
  tmpreg1 |=(((uint32_t)heth->Init.PhyAddress<<11U) & ETH_MACMIIAR_PA); /* Set the PHY device address */
 8000c10:	8a2b      	ldrh	r3, [r5, #16]
 8000c12:	02db      	lsls	r3, r3, #11
 8000c14:	b29b      	uxth	r3, r3
 8000c16:	431c      	orrs	r4, r3
  tmpreg1 |=(((uint32_t)PHYReg<<6U) & ETH_MACMIIAR_MR);                 /* Set the PHY register address */
 8000c18:	0189      	lsls	r1, r1, #6
 8000c1a:	f401 61f8 	and.w	r1, r1, #1984	; 0x7c0
 8000c1e:	430c      	orrs	r4, r1
  tmpreg1 |= ETH_MACMIIAR_MB;                                           /* Set the MII Busy bit */
 8000c20:	f044 0403 	orr.w	r4, r4, #3
 8000c24:	b292      	uxth	r2, r2
  heth->Instance->MACMIIDR = (uint16_t)RegValue;
 8000c26:	6142      	str	r2, [r0, #20]
  heth->Instance->MACMIIAR = tmpreg1;
 8000c28:	682b      	ldr	r3, [r5, #0]
 8000c2a:	611c      	str	r4, [r3, #16]
  tickstart = HAL_GetTick();
 8000c2c:	f7ff fc96 	bl	800055c <HAL_GetTick>
 8000c30:	4606      	mov	r6, r0
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8000c32:	f014 0f01 	tst.w	r4, #1
 8000c36:	d010      	beq.n	8000c5a <HAL_ETH_WritePHYRegister+0x6a>
    if((HAL_GetTick() - tickstart ) > PHY_WRITE_TO)
 8000c38:	f7ff fc90 	bl	800055c <HAL_GetTick>
 8000c3c:	1b80      	subs	r0, r0, r6
 8000c3e:	f5b0 3f80 	cmp.w	r0, #65536	; 0x10000
 8000c42:	d202      	bcs.n	8000c4a <HAL_ETH_WritePHYRegister+0x5a>
    tmpreg1 = heth->Instance->MACMIIAR;
 8000c44:	682b      	ldr	r3, [r5, #0]
 8000c46:	691c      	ldr	r4, [r3, #16]
 8000c48:	e7f3      	b.n	8000c32 <HAL_ETH_WritePHYRegister+0x42>
      heth->State= HAL_ETH_STATE_READY;
 8000c4a:	2301      	movs	r3, #1
 8000c4c:	f885 3044 	strb.w	r3, [r5, #68]	; 0x44
      __HAL_UNLOCK(heth);
 8000c50:	2300      	movs	r3, #0
 8000c52:	f885 3045 	strb.w	r3, [r5, #69]	; 0x45
      return HAL_TIMEOUT;
 8000c56:	2003      	movs	r0, #3
 8000c58:	bd70      	pop	{r4, r5, r6, pc}
  heth->State = HAL_ETH_STATE_READY;
 8000c5a:	2301      	movs	r3, #1
 8000c5c:	f885 3044 	strb.w	r3, [r5, #68]	; 0x44
  return HAL_OK; 
 8000c60:	2000      	movs	r0, #0
 8000c62:	bd70      	pop	{r4, r5, r6, pc}

08000c64 <HAL_ETH_Init>:
{
 8000c64:	b570      	push	{r4, r5, r6, lr}
 8000c66:	b082      	sub	sp, #8
  uint32_t tmpreg1 = 0U, phyreg = 0U;
 8000c68:	2300      	movs	r3, #0
 8000c6a:	9301      	str	r3, [sp, #4]
  if(heth == NULL)
 8000c6c:	2800      	cmp	r0, #0
 8000c6e:	f000 810e 	beq.w	8000e8e <HAL_ETH_Init+0x22a>
 8000c72:	4604      	mov	r4, r0
  if(heth->State == HAL_ETH_STATE_RESET)
 8000c74:	f890 3044 	ldrb.w	r3, [r0, #68]	; 0x44
 8000c78:	2b00      	cmp	r3, #0
 8000c7a:	d034      	beq.n	8000ce6 <HAL_ETH_Init+0x82>
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c7c:	2300      	movs	r3, #0
 8000c7e:	9300      	str	r3, [sp, #0]
 8000c80:	4b84      	ldr	r3, [pc, #528]	; (8000e94 <HAL_ETH_Init+0x230>)
 8000c82:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8000c84:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8000c88:	645a      	str	r2, [r3, #68]	; 0x44
 8000c8a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c8c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000c90:	9300      	str	r3, [sp, #0]
 8000c92:	9b00      	ldr	r3, [sp, #0]
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 8000c94:	4b80      	ldr	r3, [pc, #512]	; (8000e98 <HAL_ETH_Init+0x234>)
 8000c96:	685a      	ldr	r2, [r3, #4]
 8000c98:	f422 0200 	bic.w	r2, r2, #8388608	; 0x800000
 8000c9c:	605a      	str	r2, [r3, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 8000c9e:	685a      	ldr	r2, [r3, #4]
 8000ca0:	6a21      	ldr	r1, [r4, #32]
 8000ca2:	430a      	orrs	r2, r1
 8000ca4:	605a      	str	r2, [r3, #4]
  (heth->Instance)->DMABMR |= ETH_DMABMR_SR;
 8000ca6:	6823      	ldr	r3, [r4, #0]
 8000ca8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000cac:	681a      	ldr	r2, [r3, #0]
 8000cae:	f042 0201 	orr.w	r2, r2, #1
 8000cb2:	601a      	str	r2, [r3, #0]
  tickstart = HAL_GetTick();
 8000cb4:	f7ff fc52 	bl	800055c <HAL_GetTick>
 8000cb8:	4605      	mov	r5, r0
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 8000cba:	6823      	ldr	r3, [r4, #0]
 8000cbc:	f503 5280 	add.w	r2, r3, #4096	; 0x1000
 8000cc0:	6812      	ldr	r2, [r2, #0]
 8000cc2:	f012 0f01 	tst.w	r2, #1
 8000cc6:	d013      	beq.n	8000cf0 <HAL_ETH_Init+0x8c>
    if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_SWRESET)
 8000cc8:	f7ff fc48 	bl	800055c <HAL_GetTick>
 8000ccc:	1b40      	subs	r0, r0, r5
 8000cce:	f5b0 7ffa 	cmp.w	r0, #500	; 0x1f4
 8000cd2:	d9f2      	bls.n	8000cba <HAL_ETH_Init+0x56>
      heth->State= HAL_ETH_STATE_TIMEOUT;
 8000cd4:	2503      	movs	r5, #3
 8000cd6:	f884 5044 	strb.w	r5, [r4, #68]	; 0x44
      __HAL_UNLOCK(heth);
 8000cda:	2300      	movs	r3, #0
 8000cdc:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
}
 8000ce0:	4628      	mov	r0, r5
 8000ce2:	b002      	add	sp, #8
 8000ce4:	bd70      	pop	{r4, r5, r6, pc}
    heth->Lock = HAL_UNLOCKED;
 8000ce6:	f880 3045 	strb.w	r3, [r0, #69]	; 0x45
    HAL_ETH_MspInit(heth);
 8000cea:	f00c fa57 	bl	800d19c <HAL_ETH_MspInit>
 8000cee:	e7c5      	b.n	8000c7c <HAL_ETH_Init+0x18>
  tmpreg1 = (heth->Instance)->MACMIIAR;
 8000cf0:	691d      	ldr	r5, [r3, #16]
  tmpreg1 &= ETH_MACMIIAR_CR_MASK;
 8000cf2:	f025 051c 	bic.w	r5, r5, #28
  hclk = HAL_RCC_GetHCLKFreq();
 8000cf6:	f000 fd6f 	bl	80017d8 <HAL_RCC_GetHCLKFreq>
  if((hclk >= 20000000U)&&(hclk < 35000000U))
 8000cfa:	4b68      	ldr	r3, [pc, #416]	; (8000e9c <HAL_ETH_Init+0x238>)
 8000cfc:	4403      	add	r3, r0
 8000cfe:	4a68      	ldr	r2, [pc, #416]	; (8000ea0 <HAL_ETH_Init+0x23c>)
 8000d00:	4293      	cmp	r3, r2
 8000d02:	d855      	bhi.n	8000db0 <HAL_ETH_Init+0x14c>
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div16;
 8000d04:	f045 0508 	orr.w	r5, r5, #8
  (heth->Instance)->MACMIIAR = (uint32_t)tmpreg1;
 8000d08:	6823      	ldr	r3, [r4, #0]
 8000d0a:	611d      	str	r5, [r3, #16]
  if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_RESET)) != HAL_OK)
 8000d0c:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000d10:	2100      	movs	r1, #0
 8000d12:	4620      	mov	r0, r4
 8000d14:	f7ff ff6c 	bl	8000bf0 <HAL_ETH_WritePHYRegister>
 8000d18:	4605      	mov	r5, r0
 8000d1a:	2800      	cmp	r0, #0
 8000d1c:	d160      	bne.n	8000de0 <HAL_ETH_Init+0x17c>
  HAL_Delay(PHY_RESET_DELAY);
 8000d1e:	20ff      	movs	r0, #255	; 0xff
 8000d20:	f7ff fc22 	bl	8000568 <HAL_Delay>
  if((heth->Init).AutoNegotiation != ETH_AUTONEGOTIATION_DISABLE)
 8000d24:	6863      	ldr	r3, [r4, #4]
 8000d26:	2b00      	cmp	r3, #0
 8000d28:	f000 8091 	beq.w	8000e4e <HAL_ETH_Init+0x1ea>
    tickstart = HAL_GetTick();
 8000d2c:	f7ff fc16 	bl	800055c <HAL_GetTick>
 8000d30:	4606      	mov	r6, r0
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 8000d32:	aa01      	add	r2, sp, #4
 8000d34:	2101      	movs	r1, #1
 8000d36:	4620      	mov	r0, r4
 8000d38:	f7ff ff1e 	bl	8000b78 <HAL_ETH_ReadPHYRegister>
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_LINKED_STATE)
 8000d3c:	f7ff fc0e 	bl	800055c <HAL_GetTick>
 8000d40:	1b80      	subs	r0, r0, r6
 8000d42:	f241 3388 	movw	r3, #5000	; 0x1388
 8000d46:	4298      	cmp	r0, r3
 8000d48:	d852      	bhi.n	8000df0 <HAL_ETH_Init+0x18c>
    } while (((phyreg & PHY_LINKED_STATUS) != PHY_LINKED_STATUS));
 8000d4a:	9b01      	ldr	r3, [sp, #4]
 8000d4c:	f013 0f04 	tst.w	r3, #4
 8000d50:	d0ef      	beq.n	8000d32 <HAL_ETH_Init+0xce>
    if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_AUTONEGOTIATION)) != HAL_OK)
 8000d52:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000d56:	2100      	movs	r1, #0
 8000d58:	4620      	mov	r0, r4
 8000d5a:	f7ff ff49 	bl	8000bf0 <HAL_ETH_WritePHYRegister>
 8000d5e:	2800      	cmp	r0, #0
 8000d60:	d152      	bne.n	8000e08 <HAL_ETH_Init+0x1a4>
    tickstart = HAL_GetTick();
 8000d62:	f7ff fbfb 	bl	800055c <HAL_GetTick>
 8000d66:	4606      	mov	r6, r0
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 8000d68:	aa01      	add	r2, sp, #4
 8000d6a:	2101      	movs	r1, #1
 8000d6c:	4620      	mov	r0, r4
 8000d6e:	f7ff ff03 	bl	8000b78 <HAL_ETH_ReadPHYRegister>
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_AUTONEGO_COMPLETED)
 8000d72:	f7ff fbf3 	bl	800055c <HAL_GetTick>
 8000d76:	1b80      	subs	r0, r0, r6
 8000d78:	f241 3388 	movw	r3, #5000	; 0x1388
 8000d7c:	4298      	cmp	r0, r3
 8000d7e:	d84b      	bhi.n	8000e18 <HAL_ETH_Init+0x1b4>
    } while (((phyreg & PHY_AUTONEGO_COMPLETE) != PHY_AUTONEGO_COMPLETE));
 8000d80:	9b01      	ldr	r3, [sp, #4]
 8000d82:	f013 0f20 	tst.w	r3, #32
 8000d86:	d0ef      	beq.n	8000d68 <HAL_ETH_Init+0x104>
    if((HAL_ETH_ReadPHYRegister(heth, PHY_SR, &phyreg)) != HAL_OK)
 8000d88:	aa01      	add	r2, sp, #4
 8000d8a:	211f      	movs	r1, #31
 8000d8c:	4620      	mov	r0, r4
 8000d8e:	f7ff fef3 	bl	8000b78 <HAL_ETH_ReadPHYRegister>
 8000d92:	2800      	cmp	r0, #0
 8000d94:	d14c      	bne.n	8000e30 <HAL_ETH_Init+0x1cc>
    if((phyreg & PHY_DUPLEX_STATUS) != (uint32_t)RESET)
 8000d96:	9b01      	ldr	r3, [sp, #4]
 8000d98:	f013 0f10 	tst.w	r3, #16
 8000d9c:	d050      	beq.n	8000e40 <HAL_ETH_Init+0x1dc>
      (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;  
 8000d9e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000da2:	60e2      	str	r2, [r4, #12]
    if((phyreg & PHY_SPEED_STATUS) == PHY_SPEED_STATUS)
 8000da4:	f013 0f04 	tst.w	r3, #4
 8000da8:	d04d      	beq.n	8000e46 <HAL_ETH_Init+0x1e2>
      (heth->Init).Speed = ETH_SPEED_10M; 
 8000daa:	2300      	movs	r3, #0
 8000dac:	60a3      	str	r3, [r4, #8]
 8000dae:	e05e      	b.n	8000e6e <HAL_ETH_Init+0x20a>
  else if((hclk >= 35000000U)&&(hclk < 60000000U))
 8000db0:	4b3c      	ldr	r3, [pc, #240]	; (8000ea4 <HAL_ETH_Init+0x240>)
 8000db2:	4403      	add	r3, r0
 8000db4:	4a3c      	ldr	r2, [pc, #240]	; (8000ea8 <HAL_ETH_Init+0x244>)
 8000db6:	4293      	cmp	r3, r2
 8000db8:	d802      	bhi.n	8000dc0 <HAL_ETH_Init+0x15c>
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div26;
 8000dba:	f045 050c 	orr.w	r5, r5, #12
 8000dbe:	e7a3      	b.n	8000d08 <HAL_ETH_Init+0xa4>
  else if((hclk >= 60000000U)&&(hclk < 100000000U))
 8000dc0:	4b3a      	ldr	r3, [pc, #232]	; (8000eac <HAL_ETH_Init+0x248>)
 8000dc2:	4403      	add	r3, r0
 8000dc4:	4a3a      	ldr	r2, [pc, #232]	; (8000eb0 <HAL_ETH_Init+0x24c>)
 8000dc6:	4293      	cmp	r3, r2
 8000dc8:	d99e      	bls.n	8000d08 <HAL_ETH_Init+0xa4>
  else if((hclk >= 100000000U)&&(hclk < 150000000U))
 8000dca:	4b3a      	ldr	r3, [pc, #232]	; (8000eb4 <HAL_ETH_Init+0x250>)
 8000dcc:	4403      	add	r3, r0
 8000dce:	4a3a      	ldr	r2, [pc, #232]	; (8000eb8 <HAL_ETH_Init+0x254>)
 8000dd0:	4293      	cmp	r3, r2
 8000dd2:	d802      	bhi.n	8000dda <HAL_ETH_Init+0x176>
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div62;
 8000dd4:	f045 0504 	orr.w	r5, r5, #4
 8000dd8:	e796      	b.n	8000d08 <HAL_ETH_Init+0xa4>
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div102;    
 8000dda:	f045 0510 	orr.w	r5, r5, #16
 8000dde:	e793      	b.n	8000d08 <HAL_ETH_Init+0xa4>
    ETH_MACDMAConfig(heth, err);
 8000de0:	2101      	movs	r1, #1
 8000de2:	4620      	mov	r0, r4
 8000de4:	f7ff fca6 	bl	8000734 <ETH_MACDMAConfig>
    heth->State = HAL_ETH_STATE_READY;
 8000de8:	2501      	movs	r5, #1
 8000dea:	f884 5044 	strb.w	r5, [r4, #68]	; 0x44
    return HAL_ERROR;
 8000dee:	e777      	b.n	8000ce0 <HAL_ETH_Init+0x7c>
        ETH_MACDMAConfig(heth, err);
 8000df0:	2101      	movs	r1, #1
 8000df2:	4620      	mov	r0, r4
 8000df4:	f7ff fc9e 	bl	8000734 <ETH_MACDMAConfig>
        heth->State= HAL_ETH_STATE_READY;
 8000df8:	2301      	movs	r3, #1
 8000dfa:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
        __HAL_UNLOCK(heth);
 8000dfe:	2300      	movs	r3, #0
 8000e00:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
        return HAL_TIMEOUT;
 8000e04:	2503      	movs	r5, #3
 8000e06:	e76b      	b.n	8000ce0 <HAL_ETH_Init+0x7c>
      ETH_MACDMAConfig(heth, err);
 8000e08:	2101      	movs	r1, #1
 8000e0a:	4620      	mov	r0, r4
 8000e0c:	f7ff fc92 	bl	8000734 <ETH_MACDMAConfig>
      heth->State = HAL_ETH_STATE_READY;
 8000e10:	2501      	movs	r5, #1
 8000e12:	f884 5044 	strb.w	r5, [r4, #68]	; 0x44
      return HAL_ERROR;   
 8000e16:	e763      	b.n	8000ce0 <HAL_ETH_Init+0x7c>
        ETH_MACDMAConfig(heth, err);
 8000e18:	2101      	movs	r1, #1
 8000e1a:	4620      	mov	r0, r4
 8000e1c:	f7ff fc8a 	bl	8000734 <ETH_MACDMAConfig>
        heth->State= HAL_ETH_STATE_READY;
 8000e20:	2301      	movs	r3, #1
 8000e22:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
        __HAL_UNLOCK(heth);
 8000e26:	2300      	movs	r3, #0
 8000e28:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
        return HAL_TIMEOUT;
 8000e2c:	2503      	movs	r5, #3
 8000e2e:	e757      	b.n	8000ce0 <HAL_ETH_Init+0x7c>
      ETH_MACDMAConfig(heth, err);
 8000e30:	2101      	movs	r1, #1
 8000e32:	4620      	mov	r0, r4
 8000e34:	f7ff fc7e 	bl	8000734 <ETH_MACDMAConfig>
      heth->State = HAL_ETH_STATE_READY;
 8000e38:	2501      	movs	r5, #1
 8000e3a:	f884 5044 	strb.w	r5, [r4, #68]	; 0x44
      return HAL_ERROR;   
 8000e3e:	e74f      	b.n	8000ce0 <HAL_ETH_Init+0x7c>
      (heth->Init).DuplexMode = ETH_MODE_HALFDUPLEX;           
 8000e40:	2200      	movs	r2, #0
 8000e42:	60e2      	str	r2, [r4, #12]
 8000e44:	e7ae      	b.n	8000da4 <HAL_ETH_Init+0x140>
      (heth->Init).Speed = ETH_SPEED_100M;
 8000e46:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000e4a:	60a3      	str	r3, [r4, #8]
 8000e4c:	e00f      	b.n	8000e6e <HAL_ETH_Init+0x20a>
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3U) |
 8000e4e:	68e3      	ldr	r3, [r4, #12]
 8000e50:	f3c3 02cf 	ubfx	r2, r3, #3, #16
                                                (uint16_t)((heth->Init).Speed >> 1U))) != HAL_OK)
 8000e54:	68a3      	ldr	r3, [r4, #8]
 8000e56:	f3c3 034f 	ubfx	r3, r3, #1, #16
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3U) |
 8000e5a:	431a      	orrs	r2, r3
 8000e5c:	2100      	movs	r1, #0
 8000e5e:	4620      	mov	r0, r4
 8000e60:	f7ff fec6 	bl	8000bf0 <HAL_ETH_WritePHYRegister>
 8000e64:	b958      	cbnz	r0, 8000e7e <HAL_ETH_Init+0x21a>
    HAL_Delay(PHY_CONFIG_DELAY);
 8000e66:	f640 70ff 	movw	r0, #4095	; 0xfff
 8000e6a:	f7ff fb7d 	bl	8000568 <HAL_Delay>
  ETH_MACDMAConfig(heth, err);
 8000e6e:	2100      	movs	r1, #0
 8000e70:	4620      	mov	r0, r4
 8000e72:	f7ff fc5f 	bl	8000734 <ETH_MACDMAConfig>
  heth->State= HAL_ETH_STATE_READY;
 8000e76:	2301      	movs	r3, #1
 8000e78:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
  return HAL_OK;
 8000e7c:	e730      	b.n	8000ce0 <HAL_ETH_Init+0x7c>
      ETH_MACDMAConfig(heth, err);
 8000e7e:	2101      	movs	r1, #1
 8000e80:	4620      	mov	r0, r4
 8000e82:	f7ff fc57 	bl	8000734 <ETH_MACDMAConfig>
      heth->State = HAL_ETH_STATE_READY;
 8000e86:	2501      	movs	r5, #1
 8000e88:	f884 5044 	strb.w	r5, [r4, #68]	; 0x44
      return HAL_ERROR;
 8000e8c:	e728      	b.n	8000ce0 <HAL_ETH_Init+0x7c>
    return HAL_ERROR;
 8000e8e:	2501      	movs	r5, #1
 8000e90:	e726      	b.n	8000ce0 <HAL_ETH_Init+0x7c>
 8000e92:	bf00      	nop
 8000e94:	40023800 	.word	0x40023800
 8000e98:	40013800 	.word	0x40013800
 8000e9c:	feced300 	.word	0xfeced300
 8000ea0:	00e4e1bf 	.word	0x00e4e1bf
 8000ea4:	fde9f140 	.word	0xfde9f140
 8000ea8:	017d783f 	.word	0x017d783f
 8000eac:	fc6c7900 	.word	0xfc6c7900
 8000eb0:	026259ff 	.word	0x026259ff
 8000eb4:	fa0a1f00 	.word	0xfa0a1f00
 8000eb8:	02faf07f 	.word	0x02faf07f

08000ebc <HAL_ETH_Start>:
{  
 8000ebc:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(heth);
 8000ebe:	f890 3045 	ldrb.w	r3, [r0, #69]	; 0x45
 8000ec2:	2b01      	cmp	r3, #1
 8000ec4:	d101      	bne.n	8000eca <HAL_ETH_Start+0xe>
 8000ec6:	2002      	movs	r0, #2
}
 8000ec8:	bd38      	pop	{r3, r4, r5, pc}
 8000eca:	4604      	mov	r4, r0
  __HAL_LOCK(heth);
 8000ecc:	2501      	movs	r5, #1
 8000ece:	f880 5045 	strb.w	r5, [r0, #69]	; 0x45
  heth->State = HAL_ETH_STATE_BUSY;
 8000ed2:	2302      	movs	r3, #2
 8000ed4:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
  ETH_MACTransmissionEnable(heth);
 8000ed8:	f7ff fbea 	bl	80006b0 <ETH_MACTransmissionEnable>
  ETH_MACReceptionEnable(heth);
 8000edc:	4620      	mov	r0, r4
 8000ede:	f7ff fbfc 	bl	80006da <ETH_MACReceptionEnable>
  ETH_FlushTransmitFIFO(heth);
 8000ee2:	4620      	mov	r0, r4
 8000ee4:	f7ff fc0e 	bl	8000704 <ETH_FlushTransmitFIFO>
  ETH_DMATransmissionEnable(heth);
 8000ee8:	4620      	mov	r0, r4
 8000eea:	f7ff fbbb 	bl	8000664 <ETH_DMATransmissionEnable>
  ETH_DMAReceptionEnable(heth);
 8000eee:	4620      	mov	r0, r4
 8000ef0:	f7ff fbc0 	bl	8000674 <ETH_DMAReceptionEnable>
  heth->State= HAL_ETH_STATE_READY;
 8000ef4:	f884 5044 	strb.w	r5, [r4, #68]	; 0x44
  __HAL_UNLOCK(heth);
 8000ef8:	2000      	movs	r0, #0
 8000efa:	f884 0045 	strb.w	r0, [r4, #69]	; 0x45
  return HAL_OK;
 8000efe:	bd38      	pop	{r3, r4, r5, pc}

08000f00 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000f00:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000f02:	b083      	sub	sp, #12
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000f04:	2400      	movs	r4, #0
 8000f06:	e04b      	b.n	8000fa0 <HAL_GPIO_Init+0xa0>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000f08:	ea4f 0ed4 	mov.w	lr, r4, lsr #3
 8000f0c:	f10e 0e08 	add.w	lr, lr, #8
 8000f10:	f850 202e 	ldr.w	r2, [r0, lr, lsl #2]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000f14:	f004 0607 	and.w	r6, r4, #7
 8000f18:	00b6      	lsls	r6, r6, #2
 8000f1a:	270f      	movs	r7, #15
 8000f1c:	40b7      	lsls	r7, r6
 8000f1e:	ea22 0207 	bic.w	r2, r2, r7
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000f22:	690f      	ldr	r7, [r1, #16]
 8000f24:	fa07 f606 	lsl.w	r6, r7, r6
 8000f28:	4332      	orrs	r2, r6
        GPIOx->AFR[position >> 3U] = temp;
 8000f2a:	f840 202e 	str.w	r2, [r0, lr, lsl #2]
 8000f2e:	e046      	b.n	8000fbe <HAL_GPIO_Init+0xbe>
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();

        temp = SYSCFG->EXTICR[position >> 2U];
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000f30:	2609      	movs	r6, #9
 8000f32:	e000      	b.n	8000f36 <HAL_GPIO_Init+0x36>
 8000f34:	2600      	movs	r6, #0
 8000f36:	fa06 f60e 	lsl.w	r6, r6, lr
 8000f3a:	4332      	orrs	r2, r6
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000f3c:	3302      	adds	r3, #2
 8000f3e:	4e64      	ldr	r6, [pc, #400]	; (80010d0 <HAL_GPIO_Init+0x1d0>)
 8000f40:	f846 2023 	str.w	r2, [r6, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000f44:	4b63      	ldr	r3, [pc, #396]	; (80010d4 <HAL_GPIO_Init+0x1d4>)
 8000f46:	681a      	ldr	r2, [r3, #0]
        temp &= ~((uint32_t)iocurrent);
 8000f48:	43eb      	mvns	r3, r5
 8000f4a:	ea02 0603 	and.w	r6, r2, r3
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000f4e:	684f      	ldr	r7, [r1, #4]
 8000f50:	f417 3f80 	tst.w	r7, #65536	; 0x10000
 8000f54:	d001      	beq.n	8000f5a <HAL_GPIO_Init+0x5a>
        {
          temp |= iocurrent;
 8000f56:	ea45 0602 	orr.w	r6, r5, r2
        }
        EXTI->IMR = temp;
 8000f5a:	4a5e      	ldr	r2, [pc, #376]	; (80010d4 <HAL_GPIO_Init+0x1d4>)
 8000f5c:	6016      	str	r6, [r2, #0]

        temp = EXTI->EMR;
 8000f5e:	6852      	ldr	r2, [r2, #4]
        temp &= ~((uint32_t)iocurrent);
 8000f60:	ea03 0602 	and.w	r6, r3, r2
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000f64:	684f      	ldr	r7, [r1, #4]
 8000f66:	f417 3f00 	tst.w	r7, #131072	; 0x20000
 8000f6a:	d001      	beq.n	8000f70 <HAL_GPIO_Init+0x70>
        {
          temp |= iocurrent;
 8000f6c:	ea45 0602 	orr.w	r6, r5, r2
        }
        EXTI->EMR = temp;
 8000f70:	4a58      	ldr	r2, [pc, #352]	; (80010d4 <HAL_GPIO_Init+0x1d4>)
 8000f72:	6056      	str	r6, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000f74:	6892      	ldr	r2, [r2, #8]
        temp &= ~((uint32_t)iocurrent);
 8000f76:	ea03 0602 	and.w	r6, r3, r2
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000f7a:	684f      	ldr	r7, [r1, #4]
 8000f7c:	f417 1f80 	tst.w	r7, #1048576	; 0x100000
 8000f80:	d001      	beq.n	8000f86 <HAL_GPIO_Init+0x86>
        {
          temp |= iocurrent;
 8000f82:	ea45 0602 	orr.w	r6, r5, r2
        }
        EXTI->RTSR = temp;
 8000f86:	4a53      	ldr	r2, [pc, #332]	; (80010d4 <HAL_GPIO_Init+0x1d4>)
 8000f88:	6096      	str	r6, [r2, #8]

        temp = EXTI->FTSR;
 8000f8a:	68d2      	ldr	r2, [r2, #12]
        temp &= ~((uint32_t)iocurrent);
 8000f8c:	4013      	ands	r3, r2
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000f8e:	684e      	ldr	r6, [r1, #4]
 8000f90:	f416 1f00 	tst.w	r6, #2097152	; 0x200000
 8000f94:	d001      	beq.n	8000f9a <HAL_GPIO_Init+0x9a>
        {
          temp |= iocurrent;
 8000f96:	ea45 0302 	orr.w	r3, r5, r2
        }
        EXTI->FTSR = temp;
 8000f9a:	4a4e      	ldr	r2, [pc, #312]	; (80010d4 <HAL_GPIO_Init+0x1d4>)
 8000f9c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000f9e:	3401      	adds	r4, #1
 8000fa0:	2c0f      	cmp	r4, #15
 8000fa2:	f200 8092 	bhi.w	80010ca <HAL_GPIO_Init+0x1ca>
    ioposition = 0x01U << position;
 8000fa6:	2301      	movs	r3, #1
 8000fa8:	40a3      	lsls	r3, r4
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000faa:	680a      	ldr	r2, [r1, #0]
 8000fac:	ea03 0502 	and.w	r5, r3, r2
    if(iocurrent == ioposition)
 8000fb0:	42ab      	cmp	r3, r5
 8000fb2:	d1f4      	bne.n	8000f9e <HAL_GPIO_Init+0x9e>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000fb4:	684a      	ldr	r2, [r1, #4]
 8000fb6:	2a02      	cmp	r2, #2
 8000fb8:	d0a6      	beq.n	8000f08 <HAL_GPIO_Init+0x8>
 8000fba:	2a12      	cmp	r2, #18
 8000fbc:	d0a4      	beq.n	8000f08 <HAL_GPIO_Init+0x8>
      temp = GPIOx->MODER;
 8000fbe:	6806      	ldr	r6, [r0, #0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000fc0:	ea4f 0e44 	mov.w	lr, r4, lsl #1
 8000fc4:	2203      	movs	r2, #3
 8000fc6:	fa02 f20e 	lsl.w	r2, r2, lr
 8000fca:	43d2      	mvns	r2, r2
 8000fcc:	4016      	ands	r6, r2
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000fce:	684f      	ldr	r7, [r1, #4]
 8000fd0:	f007 0703 	and.w	r7, r7, #3
 8000fd4:	fa07 f70e 	lsl.w	r7, r7, lr
 8000fd8:	433e      	orrs	r6, r7
      GPIOx->MODER = temp;
 8000fda:	6006      	str	r6, [r0, #0]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000fdc:	684e      	ldr	r6, [r1, #4]
 8000fde:	1e77      	subs	r7, r6, #1
 8000fe0:	2f01      	cmp	r7, #1
 8000fe2:	d903      	bls.n	8000fec <HAL_GPIO_Init+0xec>
 8000fe4:	2e11      	cmp	r6, #17
 8000fe6:	d001      	beq.n	8000fec <HAL_GPIO_Init+0xec>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000fe8:	2e12      	cmp	r6, #18
 8000fea:	d10f      	bne.n	800100c <HAL_GPIO_Init+0x10c>
        temp = GPIOx->OSPEEDR; 
 8000fec:	6886      	ldr	r6, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000fee:	4016      	ands	r6, r2
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000ff0:	68cf      	ldr	r7, [r1, #12]
 8000ff2:	fa07 f70e 	lsl.w	r7, r7, lr
 8000ff6:	433e      	orrs	r6, r7
        GPIOx->OSPEEDR = temp;
 8000ff8:	6086      	str	r6, [r0, #8]
        temp = GPIOx->OTYPER;
 8000ffa:	6846      	ldr	r6, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000ffc:	ea26 0303 	bic.w	r3, r6, r3
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001000:	684e      	ldr	r6, [r1, #4]
 8001002:	f3c6 1600 	ubfx	r6, r6, #4, #1
 8001006:	40a6      	lsls	r6, r4
 8001008:	4333      	orrs	r3, r6
        GPIOx->OTYPER = temp;
 800100a:	6043      	str	r3, [r0, #4]
      temp = GPIOx->PUPDR;
 800100c:	68c3      	ldr	r3, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800100e:	401a      	ands	r2, r3
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001010:	688b      	ldr	r3, [r1, #8]
 8001012:	fa03 f30e 	lsl.w	r3, r3, lr
 8001016:	431a      	orrs	r2, r3
      GPIOx->PUPDR = temp;
 8001018:	60c2      	str	r2, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800101a:	684b      	ldr	r3, [r1, #4]
 800101c:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 8001020:	d0bd      	beq.n	8000f9e <HAL_GPIO_Init+0x9e>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001022:	2300      	movs	r3, #0
 8001024:	9301      	str	r3, [sp, #4]
 8001026:	4b2c      	ldr	r3, [pc, #176]	; (80010d8 <HAL_GPIO_Init+0x1d8>)
 8001028:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800102a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800102e:	645a      	str	r2, [r3, #68]	; 0x44
 8001030:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001032:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001036:	9301      	str	r3, [sp, #4]
 8001038:	9b01      	ldr	r3, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2U];
 800103a:	08a3      	lsrs	r3, r4, #2
 800103c:	1c9e      	adds	r6, r3, #2
 800103e:	4a24      	ldr	r2, [pc, #144]	; (80010d0 <HAL_GPIO_Init+0x1d0>)
 8001040:	f852 2026 	ldr.w	r2, [r2, r6, lsl #2]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001044:	f004 0603 	and.w	r6, r4, #3
 8001048:	ea4f 0e86 	mov.w	lr, r6, lsl #2
 800104c:	260f      	movs	r6, #15
 800104e:	fa06 f60e 	lsl.w	r6, r6, lr
 8001052:	ea22 0206 	bic.w	r2, r2, r6
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001056:	4f21      	ldr	r7, [pc, #132]	; (80010dc <HAL_GPIO_Init+0x1dc>)
 8001058:	42b8      	cmp	r0, r7
 800105a:	f43f af6b 	beq.w	8000f34 <HAL_GPIO_Init+0x34>
 800105e:	4e20      	ldr	r6, [pc, #128]	; (80010e0 <HAL_GPIO_Init+0x1e0>)
 8001060:	42b0      	cmp	r0, r6
 8001062:	d022      	beq.n	80010aa <HAL_GPIO_Init+0x1aa>
 8001064:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8001068:	42b0      	cmp	r0, r6
 800106a:	d020      	beq.n	80010ae <HAL_GPIO_Init+0x1ae>
 800106c:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8001070:	42b0      	cmp	r0, r6
 8001072:	d01e      	beq.n	80010b2 <HAL_GPIO_Init+0x1b2>
 8001074:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8001078:	42b0      	cmp	r0, r6
 800107a:	d01c      	beq.n	80010b6 <HAL_GPIO_Init+0x1b6>
 800107c:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8001080:	42b0      	cmp	r0, r6
 8001082:	d01a      	beq.n	80010ba <HAL_GPIO_Init+0x1ba>
 8001084:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8001088:	42b0      	cmp	r0, r6
 800108a:	d018      	beq.n	80010be <HAL_GPIO_Init+0x1be>
 800108c:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8001090:	42b0      	cmp	r0, r6
 8001092:	d016      	beq.n	80010c2 <HAL_GPIO_Init+0x1c2>
 8001094:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8001098:	42b0      	cmp	r0, r6
 800109a:	d014      	beq.n	80010c6 <HAL_GPIO_Init+0x1c6>
 800109c:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 80010a0:	42b0      	cmp	r0, r6
 80010a2:	f43f af45 	beq.w	8000f30 <HAL_GPIO_Init+0x30>
 80010a6:	260a      	movs	r6, #10
 80010a8:	e745      	b.n	8000f36 <HAL_GPIO_Init+0x36>
 80010aa:	2601      	movs	r6, #1
 80010ac:	e743      	b.n	8000f36 <HAL_GPIO_Init+0x36>
 80010ae:	2602      	movs	r6, #2
 80010b0:	e741      	b.n	8000f36 <HAL_GPIO_Init+0x36>
 80010b2:	2603      	movs	r6, #3
 80010b4:	e73f      	b.n	8000f36 <HAL_GPIO_Init+0x36>
 80010b6:	2604      	movs	r6, #4
 80010b8:	e73d      	b.n	8000f36 <HAL_GPIO_Init+0x36>
 80010ba:	2605      	movs	r6, #5
 80010bc:	e73b      	b.n	8000f36 <HAL_GPIO_Init+0x36>
 80010be:	2606      	movs	r6, #6
 80010c0:	e739      	b.n	8000f36 <HAL_GPIO_Init+0x36>
 80010c2:	2607      	movs	r6, #7
 80010c4:	e737      	b.n	8000f36 <HAL_GPIO_Init+0x36>
 80010c6:	2608      	movs	r6, #8
 80010c8:	e735      	b.n	8000f36 <HAL_GPIO_Init+0x36>
      }
    }
  }
}
 80010ca:	b003      	add	sp, #12
 80010cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80010ce:	bf00      	nop
 80010d0:	40013800 	.word	0x40013800
 80010d4:	40013c00 	.word	0x40013c00
 80010d8:	40023800 	.word	0x40023800
 80010dc:	40020000 	.word	0x40020000
 80010e0:	40020400 	.word	0x40020400

080010e4 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80010e4:	b912      	cbnz	r2, 80010ec <HAL_GPIO_WritePin+0x8>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80010e6:	0409      	lsls	r1, r1, #16
 80010e8:	6181      	str	r1, [r0, #24]
 80010ea:	4770      	bx	lr
    GPIOx->BSRR = GPIO_Pin;
 80010ec:	6181      	str	r1, [r0, #24]
 80010ee:	4770      	bx	lr

080010f0 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80010f0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80010f2:	b08b      	sub	sp, #44	; 0x2c
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80010f4:	2800      	cmp	r0, #0
 80010f6:	f000 808a 	beq.w	800120e <HAL_PCD_Init+0x11e>
 80010fa:	4604      	mov	r4, r0
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 80010fc:	6805      	ldr	r5, [r0, #0]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80010fe:	f890 33bd 	ldrb.w	r3, [r0, #957]	; 0x3bd
 8001102:	b323      	cbz	r3, 800114e <HAL_PCD_Init+0x5e>
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001104:	2303      	movs	r3, #3
 8001106:	f884 33bd 	strb.w	r3, [r4, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 800110a:	6beb      	ldr	r3, [r5, #60]	; 0x3c
 800110c:	f413 7f80 	tst.w	r3, #256	; 0x100
 8001110:	d101      	bne.n	8001116 <HAL_PCD_Init+0x26>
  {
    hpcd->Init.dma_enable = 0U;
 8001112:	2300      	movs	r3, #0
 8001114:	6123      	str	r3, [r4, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001116:	6820      	ldr	r0, [r4, #0]
 8001118:	f000 ff2d 	bl	8001f76 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800111c:	4625      	mov	r5, r4
 800111e:	f855 7b10 	ldr.w	r7, [r5], #16
 8001122:	466e      	mov	r6, sp
 8001124:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001126:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8001128:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800112a:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 800112c:	e895 0003 	ldmia.w	r5, {r0, r1}
 8001130:	e886 0003 	stmia.w	r6, {r0, r1}
 8001134:	1d23      	adds	r3, r4, #4
 8001136:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001138:	4638      	mov	r0, r7
 800113a:	f000 fed7 	bl	8001eec <USB_CoreInit>
 800113e:	b158      	cbz	r0, 8001158 <HAL_PCD_Init+0x68>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001140:	2302      	movs	r3, #2
 8001142:	f884 33bd 	strb.w	r3, [r4, #957]	; 0x3bd
    return HAL_ERROR;
 8001146:	2501      	movs	r5, #1
  }
  #endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);

  return HAL_OK;
}
 8001148:	4628      	mov	r0, r5
 800114a:	b00b      	add	sp, #44	; 0x2c
 800114c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    hpcd->Lock = HAL_UNLOCKED;
 800114e:	f880 33bc 	strb.w	r3, [r0, #956]	; 0x3bc
    HAL_PCD_MspInit(hpcd);
 8001152:	f00c fe05 	bl	800dd60 <HAL_PCD_MspInit>
 8001156:	e7d5      	b.n	8001104 <HAL_PCD_Init+0x14>
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8001158:	2100      	movs	r1, #0
 800115a:	6820      	ldr	r0, [r4, #0]
 800115c:	f000 ff11 	bl	8001f82 <USB_SetCurrentMode>
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001160:	2300      	movs	r3, #0
 8001162:	e015      	b.n	8001190 <HAL_PCD_Init+0xa0>
    hpcd->IN_ep[i].is_in = 1U;
 8001164:	00d9      	lsls	r1, r3, #3
 8001166:	1ac8      	subs	r0, r1, r3
 8001168:	0082      	lsls	r2, r0, #2
 800116a:	4422      	add	r2, r4
 800116c:	2001      	movs	r0, #1
 800116e:	f882 003d 	strb.w	r0, [r2, #61]	; 0x3d
    hpcd->IN_ep[i].num = i;
 8001172:	f882 303c 	strb.w	r3, [r2, #60]	; 0x3c
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001176:	f8a2 3042 	strh.w	r3, [r2, #66]	; 0x42
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800117a:	2000      	movs	r0, #0
 800117c:	f882 003f 	strb.w	r0, [r2, #63]	; 0x3f
    hpcd->IN_ep[i].maxpacket = 0U;
 8001180:	6450      	str	r0, [r2, #68]	; 0x44
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001182:	6490      	str	r0, [r2, #72]	; 0x48
    hpcd->IN_ep[i].xfer_len = 0U;
 8001184:	1aca      	subs	r2, r1, r3
 8001186:	0091      	lsls	r1, r2, #2
 8001188:	4421      	add	r1, r4
 800118a:	6508      	str	r0, [r1, #80]	; 0x50
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800118c:	3301      	adds	r3, #1
 800118e:	b2db      	uxtb	r3, r3
 8001190:	6865      	ldr	r5, [r4, #4]
 8001192:	42ab      	cmp	r3, r5
 8001194:	d3e6      	bcc.n	8001164 <HAL_PCD_Init+0x74>
 8001196:	2300      	movs	r3, #0
 8001198:	e015      	b.n	80011c6 <HAL_PCD_Init+0xd6>
    hpcd->OUT_ep[i].is_in = 0U;
 800119a:	00d8      	lsls	r0, r3, #3
 800119c:	1ac1      	subs	r1, r0, r3
 800119e:	008a      	lsls	r2, r1, #2
 80011a0:	4422      	add	r2, r4
 80011a2:	2100      	movs	r1, #0
 80011a4:	f882 11fd 	strb.w	r1, [r2, #509]	; 0x1fd
    hpcd->OUT_ep[i].num = i;
 80011a8:	f882 31fc 	strb.w	r3, [r2, #508]	; 0x1fc
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80011ac:	f882 11ff 	strb.w	r1, [r2, #511]	; 0x1ff
    hpcd->OUT_ep[i].maxpacket = 0U;
 80011b0:	f8c2 1204 	str.w	r1, [r2, #516]	; 0x204
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80011b4:	f8c2 1208 	str.w	r1, [r2, #520]	; 0x208
    hpcd->OUT_ep[i].xfer_len = 0U;
 80011b8:	1ac2      	subs	r2, r0, r3
 80011ba:	0090      	lsls	r0, r2, #2
 80011bc:	4420      	add	r0, r4
 80011be:	f8c0 1210 	str.w	r1, [r0, #528]	; 0x210
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80011c2:	3301      	adds	r3, #1
 80011c4:	b2db      	uxtb	r3, r3
 80011c6:	429d      	cmp	r5, r3
 80011c8:	d8e7      	bhi.n	800119a <HAL_PCD_Init+0xaa>
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80011ca:	4625      	mov	r5, r4
 80011cc:	f855 7b10 	ldr.w	r7, [r5], #16
 80011d0:	466e      	mov	r6, sp
 80011d2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80011d4:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 80011d6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80011d8:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 80011da:	e895 0003 	ldmia.w	r5, {r0, r1}
 80011de:	e886 0003 	stmia.w	r6, {r0, r1}
 80011e2:	1d23      	adds	r3, r4, #4
 80011e4:	cb0e      	ldmia	r3, {r1, r2, r3}
 80011e6:	4638      	mov	r0, r7
 80011e8:	f000 ff12 	bl	8002010 <USB_DevInit>
 80011ec:	4605      	mov	r5, r0
 80011ee:	b120      	cbz	r0, 80011fa <HAL_PCD_Init+0x10a>
    hpcd->State = HAL_PCD_STATE_ERROR;
 80011f0:	2302      	movs	r3, #2
 80011f2:	f884 33bd 	strb.w	r3, [r4, #957]	; 0x3bd
    return HAL_ERROR;
 80011f6:	2501      	movs	r5, #1
 80011f8:	e7a6      	b.n	8001148 <HAL_PCD_Init+0x58>
  hpcd->USB_Address = 0U;
 80011fa:	2300      	movs	r3, #0
 80011fc:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8001200:	2301      	movs	r3, #1
 8001202:	f884 33bd 	strb.w	r3, [r4, #957]	; 0x3bd
  (void)USB_DevDisconnect(hpcd->Instance);
 8001206:	6820      	ldr	r0, [r4, #0]
 8001208:	f000 ffd2 	bl	80021b0 <USB_DevDisconnect>
  return HAL_OK;
 800120c:	e79c      	b.n	8001148 <HAL_PCD_Init+0x58>
    return HAL_ERROR;
 800120e:	2501      	movs	r5, #1
 8001210:	e79a      	b.n	8001148 <HAL_PCD_Init+0x58>
	...

08001214 <HAL_RCC_OscConfig>:
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001214:	2800      	cmp	r0, #0
 8001216:	f000 81bb 	beq.w	8001590 <HAL_RCC_OscConfig+0x37c>
{
 800121a:	b570      	push	{r4, r5, r6, lr}
 800121c:	b082      	sub	sp, #8
 800121e:	4604      	mov	r4, r0
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001220:	6803      	ldr	r3, [r0, #0]
 8001222:	f013 0f01 	tst.w	r3, #1
 8001226:	d03b      	beq.n	80012a0 <HAL_RCC_OscConfig+0x8c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001228:	4ba7      	ldr	r3, [pc, #668]	; (80014c8 <HAL_RCC_OscConfig+0x2b4>)
 800122a:	689b      	ldr	r3, [r3, #8]
 800122c:	f003 030c 	and.w	r3, r3, #12
 8001230:	2b04      	cmp	r3, #4
 8001232:	d02c      	beq.n	800128e <HAL_RCC_OscConfig+0x7a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001234:	4ba4      	ldr	r3, [pc, #656]	; (80014c8 <HAL_RCC_OscConfig+0x2b4>)
 8001236:	689b      	ldr	r3, [r3, #8]
 8001238:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800123c:	2b08      	cmp	r3, #8
 800123e:	d021      	beq.n	8001284 <HAL_RCC_OscConfig+0x70>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001240:	6863      	ldr	r3, [r4, #4]
 8001242:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001246:	d04f      	beq.n	80012e8 <HAL_RCC_OscConfig+0xd4>
 8001248:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800124c:	d052      	beq.n	80012f4 <HAL_RCC_OscConfig+0xe0>
 800124e:	4b9e      	ldr	r3, [pc, #632]	; (80014c8 <HAL_RCC_OscConfig+0x2b4>)
 8001250:	681a      	ldr	r2, [r3, #0]
 8001252:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8001256:	601a      	str	r2, [r3, #0]
 8001258:	681a      	ldr	r2, [r3, #0]
 800125a:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800125e:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001260:	6863      	ldr	r3, [r4, #4]
 8001262:	2b00      	cmp	r3, #0
 8001264:	d050      	beq.n	8001308 <HAL_RCC_OscConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001266:	f7ff f979 	bl	800055c <HAL_GetTick>
 800126a:	4605      	mov	r5, r0

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800126c:	4b96      	ldr	r3, [pc, #600]	; (80014c8 <HAL_RCC_OscConfig+0x2b4>)
 800126e:	681b      	ldr	r3, [r3, #0]
 8001270:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8001274:	d114      	bne.n	80012a0 <HAL_RCC_OscConfig+0x8c>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001276:	f7ff f971 	bl	800055c <HAL_GetTick>
 800127a:	1b40      	subs	r0, r0, r5
 800127c:	2864      	cmp	r0, #100	; 0x64
 800127e:	d9f5      	bls.n	800126c <HAL_RCC_OscConfig+0x58>
          {
            return HAL_TIMEOUT;
 8001280:	2003      	movs	r0, #3
 8001282:	e18a      	b.n	800159a <HAL_RCC_OscConfig+0x386>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001284:	4b90      	ldr	r3, [pc, #576]	; (80014c8 <HAL_RCC_OscConfig+0x2b4>)
 8001286:	685b      	ldr	r3, [r3, #4]
 8001288:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 800128c:	d0d8      	beq.n	8001240 <HAL_RCC_OscConfig+0x2c>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800128e:	4b8e      	ldr	r3, [pc, #568]	; (80014c8 <HAL_RCC_OscConfig+0x2b4>)
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8001296:	d003      	beq.n	80012a0 <HAL_RCC_OscConfig+0x8c>
 8001298:	6863      	ldr	r3, [r4, #4]
 800129a:	2b00      	cmp	r3, #0
 800129c:	f000 817a 	beq.w	8001594 <HAL_RCC_OscConfig+0x380>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80012a0:	6823      	ldr	r3, [r4, #0]
 80012a2:	f013 0f02 	tst.w	r3, #2
 80012a6:	d055      	beq.n	8001354 <HAL_RCC_OscConfig+0x140>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80012a8:	4b87      	ldr	r3, [pc, #540]	; (80014c8 <HAL_RCC_OscConfig+0x2b4>)
 80012aa:	689b      	ldr	r3, [r3, #8]
 80012ac:	f013 0f0c 	tst.w	r3, #12
 80012b0:	d03e      	beq.n	8001330 <HAL_RCC_OscConfig+0x11c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80012b2:	4b85      	ldr	r3, [pc, #532]	; (80014c8 <HAL_RCC_OscConfig+0x2b4>)
 80012b4:	689b      	ldr	r3, [r3, #8]
 80012b6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80012ba:	2b08      	cmp	r3, #8
 80012bc:	d033      	beq.n	8001326 <HAL_RCC_OscConfig+0x112>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80012be:	68e3      	ldr	r3, [r4, #12]
 80012c0:	2b00      	cmp	r3, #0
 80012c2:	d068      	beq.n	8001396 <HAL_RCC_OscConfig+0x182>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80012c4:	2201      	movs	r2, #1
 80012c6:	4b81      	ldr	r3, [pc, #516]	; (80014cc <HAL_RCC_OscConfig+0x2b8>)
 80012c8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80012ca:	f7ff f947 	bl	800055c <HAL_GetTick>
 80012ce:	4605      	mov	r5, r0

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80012d0:	4b7d      	ldr	r3, [pc, #500]	; (80014c8 <HAL_RCC_OscConfig+0x2b4>)
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	f013 0f02 	tst.w	r3, #2
 80012d8:	d154      	bne.n	8001384 <HAL_RCC_OscConfig+0x170>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80012da:	f7ff f93f 	bl	800055c <HAL_GetTick>
 80012de:	1b40      	subs	r0, r0, r5
 80012e0:	2802      	cmp	r0, #2
 80012e2:	d9f5      	bls.n	80012d0 <HAL_RCC_OscConfig+0xbc>
          {
            return HAL_TIMEOUT;
 80012e4:	2003      	movs	r0, #3
 80012e6:	e158      	b.n	800159a <HAL_RCC_OscConfig+0x386>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80012e8:	4a77      	ldr	r2, [pc, #476]	; (80014c8 <HAL_RCC_OscConfig+0x2b4>)
 80012ea:	6813      	ldr	r3, [r2, #0]
 80012ec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80012f0:	6013      	str	r3, [r2, #0]
 80012f2:	e7b5      	b.n	8001260 <HAL_RCC_OscConfig+0x4c>
 80012f4:	4b74      	ldr	r3, [pc, #464]	; (80014c8 <HAL_RCC_OscConfig+0x2b4>)
 80012f6:	681a      	ldr	r2, [r3, #0]
 80012f8:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 80012fc:	601a      	str	r2, [r3, #0]
 80012fe:	681a      	ldr	r2, [r3, #0]
 8001300:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8001304:	601a      	str	r2, [r3, #0]
 8001306:	e7ab      	b.n	8001260 <HAL_RCC_OscConfig+0x4c>
        tickstart = HAL_GetTick();
 8001308:	f7ff f928 	bl	800055c <HAL_GetTick>
 800130c:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800130e:	4b6e      	ldr	r3, [pc, #440]	; (80014c8 <HAL_RCC_OscConfig+0x2b4>)
 8001310:	681b      	ldr	r3, [r3, #0]
 8001312:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8001316:	d0c3      	beq.n	80012a0 <HAL_RCC_OscConfig+0x8c>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001318:	f7ff f920 	bl	800055c <HAL_GetTick>
 800131c:	1b40      	subs	r0, r0, r5
 800131e:	2864      	cmp	r0, #100	; 0x64
 8001320:	d9f5      	bls.n	800130e <HAL_RCC_OscConfig+0xfa>
            return HAL_TIMEOUT;
 8001322:	2003      	movs	r0, #3
 8001324:	e139      	b.n	800159a <HAL_RCC_OscConfig+0x386>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001326:	4b68      	ldr	r3, [pc, #416]	; (80014c8 <HAL_RCC_OscConfig+0x2b4>)
 8001328:	685b      	ldr	r3, [r3, #4]
 800132a:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 800132e:	d1c6      	bne.n	80012be <HAL_RCC_OscConfig+0xaa>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001330:	4b65      	ldr	r3, [pc, #404]	; (80014c8 <HAL_RCC_OscConfig+0x2b4>)
 8001332:	681b      	ldr	r3, [r3, #0]
 8001334:	f013 0f02 	tst.w	r3, #2
 8001338:	d004      	beq.n	8001344 <HAL_RCC_OscConfig+0x130>
 800133a:	68e3      	ldr	r3, [r4, #12]
 800133c:	2b01      	cmp	r3, #1
 800133e:	d001      	beq.n	8001344 <HAL_RCC_OscConfig+0x130>
        return HAL_ERROR;
 8001340:	2001      	movs	r0, #1
 8001342:	e12a      	b.n	800159a <HAL_RCC_OscConfig+0x386>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001344:	4a60      	ldr	r2, [pc, #384]	; (80014c8 <HAL_RCC_OscConfig+0x2b4>)
 8001346:	6813      	ldr	r3, [r2, #0]
 8001348:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 800134c:	6921      	ldr	r1, [r4, #16]
 800134e:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8001352:	6013      	str	r3, [r2, #0]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001354:	6823      	ldr	r3, [r4, #0]
 8001356:	f013 0f08 	tst.w	r3, #8
 800135a:	d040      	beq.n	80013de <HAL_RCC_OscConfig+0x1ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800135c:	6963      	ldr	r3, [r4, #20]
 800135e:	b363      	cbz	r3, 80013ba <HAL_RCC_OscConfig+0x1a6>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001360:	2201      	movs	r2, #1
 8001362:	4b5b      	ldr	r3, [pc, #364]	; (80014d0 <HAL_RCC_OscConfig+0x2bc>)
 8001364:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001366:	f7ff f8f9 	bl	800055c <HAL_GetTick>
 800136a:	4605      	mov	r5, r0

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800136c:	4b56      	ldr	r3, [pc, #344]	; (80014c8 <HAL_RCC_OscConfig+0x2b4>)
 800136e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001370:	f013 0f02 	tst.w	r3, #2
 8001374:	d133      	bne.n	80013de <HAL_RCC_OscConfig+0x1ca>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001376:	f7ff f8f1 	bl	800055c <HAL_GetTick>
 800137a:	1b40      	subs	r0, r0, r5
 800137c:	2802      	cmp	r0, #2
 800137e:	d9f5      	bls.n	800136c <HAL_RCC_OscConfig+0x158>
        {
          return HAL_TIMEOUT;
 8001380:	2003      	movs	r0, #3
 8001382:	e10a      	b.n	800159a <HAL_RCC_OscConfig+0x386>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001384:	4a50      	ldr	r2, [pc, #320]	; (80014c8 <HAL_RCC_OscConfig+0x2b4>)
 8001386:	6813      	ldr	r3, [r2, #0]
 8001388:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 800138c:	6921      	ldr	r1, [r4, #16]
 800138e:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8001392:	6013      	str	r3, [r2, #0]
 8001394:	e7de      	b.n	8001354 <HAL_RCC_OscConfig+0x140>
        __HAL_RCC_HSI_DISABLE();
 8001396:	2200      	movs	r2, #0
 8001398:	4b4c      	ldr	r3, [pc, #304]	; (80014cc <HAL_RCC_OscConfig+0x2b8>)
 800139a:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 800139c:	f7ff f8de 	bl	800055c <HAL_GetTick>
 80013a0:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80013a2:	4b49      	ldr	r3, [pc, #292]	; (80014c8 <HAL_RCC_OscConfig+0x2b4>)
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	f013 0f02 	tst.w	r3, #2
 80013aa:	d0d3      	beq.n	8001354 <HAL_RCC_OscConfig+0x140>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80013ac:	f7ff f8d6 	bl	800055c <HAL_GetTick>
 80013b0:	1b40      	subs	r0, r0, r5
 80013b2:	2802      	cmp	r0, #2
 80013b4:	d9f5      	bls.n	80013a2 <HAL_RCC_OscConfig+0x18e>
            return HAL_TIMEOUT;
 80013b6:	2003      	movs	r0, #3
 80013b8:	e0ef      	b.n	800159a <HAL_RCC_OscConfig+0x386>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80013ba:	2200      	movs	r2, #0
 80013bc:	4b44      	ldr	r3, [pc, #272]	; (80014d0 <HAL_RCC_OscConfig+0x2bc>)
 80013be:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80013c0:	f7ff f8cc 	bl	800055c <HAL_GetTick>
 80013c4:	4605      	mov	r5, r0

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80013c6:	4b40      	ldr	r3, [pc, #256]	; (80014c8 <HAL_RCC_OscConfig+0x2b4>)
 80013c8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80013ca:	f013 0f02 	tst.w	r3, #2
 80013ce:	d006      	beq.n	80013de <HAL_RCC_OscConfig+0x1ca>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80013d0:	f7ff f8c4 	bl	800055c <HAL_GetTick>
 80013d4:	1b40      	subs	r0, r0, r5
 80013d6:	2802      	cmp	r0, #2
 80013d8:	d9f5      	bls.n	80013c6 <HAL_RCC_OscConfig+0x1b2>
        {
          return HAL_TIMEOUT;
 80013da:	2003      	movs	r0, #3
 80013dc:	e0dd      	b.n	800159a <HAL_RCC_OscConfig+0x386>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80013de:	6823      	ldr	r3, [r4, #0]
 80013e0:	f013 0f04 	tst.w	r3, #4
 80013e4:	d079      	beq.n	80014da <HAL_RCC_OscConfig+0x2c6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80013e6:	4b38      	ldr	r3, [pc, #224]	; (80014c8 <HAL_RCC_OscConfig+0x2b4>)
 80013e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013ea:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 80013ee:	d133      	bne.n	8001458 <HAL_RCC_OscConfig+0x244>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80013f0:	2300      	movs	r3, #0
 80013f2:	9301      	str	r3, [sp, #4]
 80013f4:	4b34      	ldr	r3, [pc, #208]	; (80014c8 <HAL_RCC_OscConfig+0x2b4>)
 80013f6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80013f8:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80013fc:	641a      	str	r2, [r3, #64]	; 0x40
 80013fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001400:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001404:	9301      	str	r3, [sp, #4]
 8001406:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8001408:	2501      	movs	r5, #1
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800140a:	4b32      	ldr	r3, [pc, #200]	; (80014d4 <HAL_RCC_OscConfig+0x2c0>)
 800140c:	681b      	ldr	r3, [r3, #0]
 800140e:	f413 7f80 	tst.w	r3, #256	; 0x100
 8001412:	d023      	beq.n	800145c <HAL_RCC_OscConfig+0x248>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001414:	68a3      	ldr	r3, [r4, #8]
 8001416:	2b01      	cmp	r3, #1
 8001418:	d034      	beq.n	8001484 <HAL_RCC_OscConfig+0x270>
 800141a:	2b05      	cmp	r3, #5
 800141c:	d038      	beq.n	8001490 <HAL_RCC_OscConfig+0x27c>
 800141e:	4b2a      	ldr	r3, [pc, #168]	; (80014c8 <HAL_RCC_OscConfig+0x2b4>)
 8001420:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8001422:	f022 0201 	bic.w	r2, r2, #1
 8001426:	671a      	str	r2, [r3, #112]	; 0x70
 8001428:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800142a:	f022 0204 	bic.w	r2, r2, #4
 800142e:	671a      	str	r2, [r3, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001430:	68a3      	ldr	r3, [r4, #8]
 8001432:	2b00      	cmp	r3, #0
 8001434:	d036      	beq.n	80014a4 <HAL_RCC_OscConfig+0x290>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001436:	f7ff f891 	bl	800055c <HAL_GetTick>
 800143a:	4606      	mov	r6, r0

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800143c:	4b22      	ldr	r3, [pc, #136]	; (80014c8 <HAL_RCC_OscConfig+0x2b4>)
 800143e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001440:	f013 0f02 	tst.w	r3, #2
 8001444:	d148      	bne.n	80014d8 <HAL_RCC_OscConfig+0x2c4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001446:	f7ff f889 	bl	800055c <HAL_GetTick>
 800144a:	1b80      	subs	r0, r0, r6
 800144c:	f241 3388 	movw	r3, #5000	; 0x1388
 8001450:	4298      	cmp	r0, r3
 8001452:	d9f3      	bls.n	800143c <HAL_RCC_OscConfig+0x228>
        {
          return HAL_TIMEOUT;
 8001454:	2003      	movs	r0, #3
 8001456:	e0a0      	b.n	800159a <HAL_RCC_OscConfig+0x386>
    FlagStatus       pwrclkchanged = RESET;
 8001458:	2500      	movs	r5, #0
 800145a:	e7d6      	b.n	800140a <HAL_RCC_OscConfig+0x1f6>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800145c:	4a1d      	ldr	r2, [pc, #116]	; (80014d4 <HAL_RCC_OscConfig+0x2c0>)
 800145e:	6813      	ldr	r3, [r2, #0]
 8001460:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001464:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 8001466:	f7ff f879 	bl	800055c <HAL_GetTick>
 800146a:	4606      	mov	r6, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800146c:	4b19      	ldr	r3, [pc, #100]	; (80014d4 <HAL_RCC_OscConfig+0x2c0>)
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	f413 7f80 	tst.w	r3, #256	; 0x100
 8001474:	d1ce      	bne.n	8001414 <HAL_RCC_OscConfig+0x200>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001476:	f7ff f871 	bl	800055c <HAL_GetTick>
 800147a:	1b80      	subs	r0, r0, r6
 800147c:	2802      	cmp	r0, #2
 800147e:	d9f5      	bls.n	800146c <HAL_RCC_OscConfig+0x258>
          return HAL_TIMEOUT;
 8001480:	2003      	movs	r0, #3
 8001482:	e08a      	b.n	800159a <HAL_RCC_OscConfig+0x386>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001484:	4a10      	ldr	r2, [pc, #64]	; (80014c8 <HAL_RCC_OscConfig+0x2b4>)
 8001486:	6f13      	ldr	r3, [r2, #112]	; 0x70
 8001488:	f043 0301 	orr.w	r3, r3, #1
 800148c:	6713      	str	r3, [r2, #112]	; 0x70
 800148e:	e7cf      	b.n	8001430 <HAL_RCC_OscConfig+0x21c>
 8001490:	4b0d      	ldr	r3, [pc, #52]	; (80014c8 <HAL_RCC_OscConfig+0x2b4>)
 8001492:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8001494:	f042 0204 	orr.w	r2, r2, #4
 8001498:	671a      	str	r2, [r3, #112]	; 0x70
 800149a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800149c:	f042 0201 	orr.w	r2, r2, #1
 80014a0:	671a      	str	r2, [r3, #112]	; 0x70
 80014a2:	e7c5      	b.n	8001430 <HAL_RCC_OscConfig+0x21c>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80014a4:	f7ff f85a 	bl	800055c <HAL_GetTick>
 80014a8:	4606      	mov	r6, r0

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80014aa:	4b07      	ldr	r3, [pc, #28]	; (80014c8 <HAL_RCC_OscConfig+0x2b4>)
 80014ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80014ae:	f013 0f02 	tst.w	r3, #2
 80014b2:	d011      	beq.n	80014d8 <HAL_RCC_OscConfig+0x2c4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80014b4:	f7ff f852 	bl	800055c <HAL_GetTick>
 80014b8:	1b80      	subs	r0, r0, r6
 80014ba:	f241 3388 	movw	r3, #5000	; 0x1388
 80014be:	4298      	cmp	r0, r3
 80014c0:	d9f3      	bls.n	80014aa <HAL_RCC_OscConfig+0x296>
        {
          return HAL_TIMEOUT;
 80014c2:	2003      	movs	r0, #3
 80014c4:	e069      	b.n	800159a <HAL_RCC_OscConfig+0x386>
 80014c6:	bf00      	nop
 80014c8:	40023800 	.word	0x40023800
 80014cc:	42470000 	.word	0x42470000
 80014d0:	42470e80 	.word	0x42470e80
 80014d4:	40007000 	.word	0x40007000
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80014d8:	b9e5      	cbnz	r5, 8001514 <HAL_RCC_OscConfig+0x300>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80014da:	69a3      	ldr	r3, [r4, #24]
 80014dc:	2b00      	cmp	r3, #0
 80014de:	d05b      	beq.n	8001598 <HAL_RCC_OscConfig+0x384>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80014e0:	4a30      	ldr	r2, [pc, #192]	; (80015a4 <HAL_RCC_OscConfig+0x390>)
 80014e2:	6892      	ldr	r2, [r2, #8]
 80014e4:	f002 020c 	and.w	r2, r2, #12
 80014e8:	2a08      	cmp	r2, #8
 80014ea:	d058      	beq.n	800159e <HAL_RCC_OscConfig+0x38a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80014ec:	2b02      	cmp	r3, #2
 80014ee:	d017      	beq.n	8001520 <HAL_RCC_OscConfig+0x30c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80014f0:	2200      	movs	r2, #0
 80014f2:	4b2d      	ldr	r3, [pc, #180]	; (80015a8 <HAL_RCC_OscConfig+0x394>)
 80014f4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014f6:	f7ff f831 	bl	800055c <HAL_GetTick>
 80014fa:	4604      	mov	r4, r0

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80014fc:	4b29      	ldr	r3, [pc, #164]	; (80015a4 <HAL_RCC_OscConfig+0x390>)
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8001504:	d042      	beq.n	800158c <HAL_RCC_OscConfig+0x378>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001506:	f7ff f829 	bl	800055c <HAL_GetTick>
 800150a:	1b00      	subs	r0, r0, r4
 800150c:	2802      	cmp	r0, #2
 800150e:	d9f5      	bls.n	80014fc <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 8001510:	2003      	movs	r0, #3
 8001512:	e042      	b.n	800159a <HAL_RCC_OscConfig+0x386>
      __HAL_RCC_PWR_CLK_DISABLE();
 8001514:	4a23      	ldr	r2, [pc, #140]	; (80015a4 <HAL_RCC_OscConfig+0x390>)
 8001516:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8001518:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800151c:	6413      	str	r3, [r2, #64]	; 0x40
 800151e:	e7dc      	b.n	80014da <HAL_RCC_OscConfig+0x2c6>
        __HAL_RCC_PLL_DISABLE();
 8001520:	2200      	movs	r2, #0
 8001522:	4b21      	ldr	r3, [pc, #132]	; (80015a8 <HAL_RCC_OscConfig+0x394>)
 8001524:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8001526:	f7ff f819 	bl	800055c <HAL_GetTick>
 800152a:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800152c:	4b1d      	ldr	r3, [pc, #116]	; (80015a4 <HAL_RCC_OscConfig+0x390>)
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8001534:	d006      	beq.n	8001544 <HAL_RCC_OscConfig+0x330>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001536:	f7ff f811 	bl	800055c <HAL_GetTick>
 800153a:	1b40      	subs	r0, r0, r5
 800153c:	2802      	cmp	r0, #2
 800153e:	d9f5      	bls.n	800152c <HAL_RCC_OscConfig+0x318>
            return HAL_TIMEOUT;
 8001540:	2003      	movs	r0, #3
 8001542:	e02a      	b.n	800159a <HAL_RCC_OscConfig+0x386>
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001544:	69e3      	ldr	r3, [r4, #28]
 8001546:	6a22      	ldr	r2, [r4, #32]
 8001548:	4313      	orrs	r3, r2
 800154a:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800154c:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8001550:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8001552:	0852      	lsrs	r2, r2, #1
 8001554:	3a01      	subs	r2, #1
 8001556:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800155a:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800155c:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8001560:	4a10      	ldr	r2, [pc, #64]	; (80015a4 <HAL_RCC_OscConfig+0x390>)
 8001562:	6053      	str	r3, [r2, #4]
        __HAL_RCC_PLL_ENABLE();
 8001564:	2201      	movs	r2, #1
 8001566:	4b10      	ldr	r3, [pc, #64]	; (80015a8 <HAL_RCC_OscConfig+0x394>)
 8001568:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 800156a:	f7fe fff7 	bl	800055c <HAL_GetTick>
 800156e:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001570:	4b0c      	ldr	r3, [pc, #48]	; (80015a4 <HAL_RCC_OscConfig+0x390>)
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8001578:	d106      	bne.n	8001588 <HAL_RCC_OscConfig+0x374>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800157a:	f7fe ffef 	bl	800055c <HAL_GetTick>
 800157e:	1b00      	subs	r0, r0, r4
 8001580:	2802      	cmp	r0, #2
 8001582:	d9f5      	bls.n	8001570 <HAL_RCC_OscConfig+0x35c>
            return HAL_TIMEOUT;
 8001584:	2003      	movs	r0, #3
 8001586:	e008      	b.n	800159a <HAL_RCC_OscConfig+0x386>
    else
    {
      return HAL_ERROR;
    }
  }
  return HAL_OK;
 8001588:	2000      	movs	r0, #0
 800158a:	e006      	b.n	800159a <HAL_RCC_OscConfig+0x386>
 800158c:	2000      	movs	r0, #0
 800158e:	e004      	b.n	800159a <HAL_RCC_OscConfig+0x386>
    return HAL_ERROR;
 8001590:	2001      	movs	r0, #1
 8001592:	4770      	bx	lr
        return HAL_ERROR;
 8001594:	2001      	movs	r0, #1
 8001596:	e000      	b.n	800159a <HAL_RCC_OscConfig+0x386>
  return HAL_OK;
 8001598:	2000      	movs	r0, #0
}
 800159a:	b002      	add	sp, #8
 800159c:	bd70      	pop	{r4, r5, r6, pc}
      return HAL_ERROR;
 800159e:	2001      	movs	r0, #1
 80015a0:	e7fb      	b.n	800159a <HAL_RCC_OscConfig+0x386>
 80015a2:	bf00      	nop
 80015a4:	40023800 	.word	0x40023800
 80015a8:	42470060 	.word	0x42470060

080015ac <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80015ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
  uint32_t sysclockfreq = 0U;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80015ae:	4b31      	ldr	r3, [pc, #196]	; (8001674 <HAL_RCC_GetSysClockFreq+0xc8>)
 80015b0:	689b      	ldr	r3, [r3, #8]
 80015b2:	f003 030c 	and.w	r3, r3, #12
 80015b6:	2b04      	cmp	r3, #4
 80015b8:	d059      	beq.n	800166e <HAL_RCC_GetSysClockFreq+0xc2>
 80015ba:	2b08      	cmp	r3, #8
 80015bc:	d001      	beq.n	80015c2 <HAL_RCC_GetSysClockFreq+0x16>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80015be:	482e      	ldr	r0, [pc, #184]	; (8001678 <HAL_RCC_GetSysClockFreq+0xcc>)
 80015c0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80015c2:	4b2c      	ldr	r3, [pc, #176]	; (8001674 <HAL_RCC_GetSysClockFreq+0xc8>)
 80015c4:	685a      	ldr	r2, [r3, #4]
 80015c6:	f002 023f 	and.w	r2, r2, #63	; 0x3f
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80015ca:	685b      	ldr	r3, [r3, #4]
 80015cc:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 80015d0:	d02a      	beq.n	8001628 <HAL_RCC_GetSysClockFreq+0x7c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80015d2:	4b28      	ldr	r3, [pc, #160]	; (8001674 <HAL_RCC_GetSysClockFreq+0xc8>)
 80015d4:	685b      	ldr	r3, [r3, #4]
 80015d6:	f3c3 1388 	ubfx	r3, r3, #6, #9
 80015da:	461e      	mov	r6, r3
 80015dc:	2700      	movs	r7, #0
 80015de:	015c      	lsls	r4, r3, #5
 80015e0:	2500      	movs	r5, #0
 80015e2:	1ae4      	subs	r4, r4, r3
 80015e4:	eb65 0507 	sbc.w	r5, r5, r7
 80015e8:	01a9      	lsls	r1, r5, #6
 80015ea:	ea41 6194 	orr.w	r1, r1, r4, lsr #26
 80015ee:	01a0      	lsls	r0, r4, #6
 80015f0:	1b00      	subs	r0, r0, r4
 80015f2:	eb61 0105 	sbc.w	r1, r1, r5
 80015f6:	00cb      	lsls	r3, r1, #3
 80015f8:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 80015fc:	00c4      	lsls	r4, r0, #3
 80015fe:	19a0      	adds	r0, r4, r6
 8001600:	eb43 0107 	adc.w	r1, r3, r7
 8001604:	024b      	lsls	r3, r1, #9
 8001606:	ea43 53d0 	orr.w	r3, r3, r0, lsr #23
 800160a:	0244      	lsls	r4, r0, #9
 800160c:	4620      	mov	r0, r4
 800160e:	4619      	mov	r1, r3
 8001610:	2300      	movs	r3, #0
 8001612:	f7fe fdf5 	bl	8000200 <__aeabi_uldivmod>
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001616:	4b17      	ldr	r3, [pc, #92]	; (8001674 <HAL_RCC_GetSysClockFreq+0xc8>)
 8001618:	685b      	ldr	r3, [r3, #4]
 800161a:	f3c3 4301 	ubfx	r3, r3, #16, #2
 800161e:	3301      	adds	r3, #1
 8001620:	005b      	lsls	r3, r3, #1

      sysclockfreq = pllvco/pllp;
 8001622:	fbb0 f0f3 	udiv	r0, r0, r3
      break;
 8001626:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001628:	4b12      	ldr	r3, [pc, #72]	; (8001674 <HAL_RCC_GetSysClockFreq+0xc8>)
 800162a:	685b      	ldr	r3, [r3, #4]
 800162c:	f3c3 1388 	ubfx	r3, r3, #6, #9
 8001630:	461e      	mov	r6, r3
 8001632:	2700      	movs	r7, #0
 8001634:	015c      	lsls	r4, r3, #5
 8001636:	2500      	movs	r5, #0
 8001638:	1ae4      	subs	r4, r4, r3
 800163a:	eb65 0507 	sbc.w	r5, r5, r7
 800163e:	01a9      	lsls	r1, r5, #6
 8001640:	ea41 6194 	orr.w	r1, r1, r4, lsr #26
 8001644:	01a0      	lsls	r0, r4, #6
 8001646:	1b00      	subs	r0, r0, r4
 8001648:	eb61 0105 	sbc.w	r1, r1, r5
 800164c:	00cb      	lsls	r3, r1, #3
 800164e:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8001652:	00c4      	lsls	r4, r0, #3
 8001654:	19a0      	adds	r0, r4, r6
 8001656:	eb43 0107 	adc.w	r1, r3, r7
 800165a:	028b      	lsls	r3, r1, #10
 800165c:	ea43 5390 	orr.w	r3, r3, r0, lsr #22
 8001660:	0284      	lsls	r4, r0, #10
 8001662:	4620      	mov	r0, r4
 8001664:	4619      	mov	r1, r3
 8001666:	2300      	movs	r3, #0
 8001668:	f7fe fdca 	bl	8000200 <__aeabi_uldivmod>
 800166c:	e7d3      	b.n	8001616 <HAL_RCC_GetSysClockFreq+0x6a>
      sysclockfreq = HSE_VALUE;
 800166e:	4803      	ldr	r0, [pc, #12]	; (800167c <HAL_RCC_GetSysClockFreq+0xd0>)
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8001670:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001672:	bf00      	nop
 8001674:	40023800 	.word	0x40023800
 8001678:	00f42400 	.word	0x00f42400
 800167c:	007a1200 	.word	0x007a1200

08001680 <HAL_RCC_ClockConfig>:
  if(RCC_ClkInitStruct == NULL)
 8001680:	2800      	cmp	r0, #0
 8001682:	f000 809d 	beq.w	80017c0 <HAL_RCC_ClockConfig+0x140>
{
 8001686:	b570      	push	{r4, r5, r6, lr}
 8001688:	4604      	mov	r4, r0
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800168a:	4b4f      	ldr	r3, [pc, #316]	; (80017c8 <HAL_RCC_ClockConfig+0x148>)
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	f003 030f 	and.w	r3, r3, #15
 8001692:	428b      	cmp	r3, r1
 8001694:	d209      	bcs.n	80016aa <HAL_RCC_ClockConfig+0x2a>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001696:	b2cb      	uxtb	r3, r1
 8001698:	4a4b      	ldr	r2, [pc, #300]	; (80017c8 <HAL_RCC_ClockConfig+0x148>)
 800169a:	7013      	strb	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800169c:	6813      	ldr	r3, [r2, #0]
 800169e:	f003 030f 	and.w	r3, r3, #15
 80016a2:	4299      	cmp	r1, r3
 80016a4:	d001      	beq.n	80016aa <HAL_RCC_ClockConfig+0x2a>
      return HAL_ERROR;
 80016a6:	2001      	movs	r0, #1
 80016a8:	bd70      	pop	{r4, r5, r6, pc}
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80016aa:	6823      	ldr	r3, [r4, #0]
 80016ac:	f013 0f02 	tst.w	r3, #2
 80016b0:	d017      	beq.n	80016e2 <HAL_RCC_ClockConfig+0x62>
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80016b2:	f013 0f04 	tst.w	r3, #4
 80016b6:	d004      	beq.n	80016c2 <HAL_RCC_ClockConfig+0x42>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80016b8:	4a44      	ldr	r2, [pc, #272]	; (80017cc <HAL_RCC_ClockConfig+0x14c>)
 80016ba:	6893      	ldr	r3, [r2, #8]
 80016bc:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80016c0:	6093      	str	r3, [r2, #8]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80016c2:	6823      	ldr	r3, [r4, #0]
 80016c4:	f013 0f08 	tst.w	r3, #8
 80016c8:	d004      	beq.n	80016d4 <HAL_RCC_ClockConfig+0x54>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80016ca:	4a40      	ldr	r2, [pc, #256]	; (80017cc <HAL_RCC_ClockConfig+0x14c>)
 80016cc:	6893      	ldr	r3, [r2, #8]
 80016ce:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80016d2:	6093      	str	r3, [r2, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80016d4:	4a3d      	ldr	r2, [pc, #244]	; (80017cc <HAL_RCC_ClockConfig+0x14c>)
 80016d6:	6893      	ldr	r3, [r2, #8]
 80016d8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80016dc:	68a0      	ldr	r0, [r4, #8]
 80016de:	4303      	orrs	r3, r0
 80016e0:	6093      	str	r3, [r2, #8]
 80016e2:	460d      	mov	r5, r1
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80016e4:	6823      	ldr	r3, [r4, #0]
 80016e6:	f013 0f01 	tst.w	r3, #1
 80016ea:	d032      	beq.n	8001752 <HAL_RCC_ClockConfig+0xd2>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80016ec:	6863      	ldr	r3, [r4, #4]
 80016ee:	2b01      	cmp	r3, #1
 80016f0:	d021      	beq.n	8001736 <HAL_RCC_ClockConfig+0xb6>
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80016f2:	1e9a      	subs	r2, r3, #2
 80016f4:	2a01      	cmp	r2, #1
 80016f6:	d925      	bls.n	8001744 <HAL_RCC_ClockConfig+0xc4>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80016f8:	4a34      	ldr	r2, [pc, #208]	; (80017cc <HAL_RCC_ClockConfig+0x14c>)
 80016fa:	6812      	ldr	r2, [r2, #0]
 80016fc:	f012 0f02 	tst.w	r2, #2
 8001700:	d060      	beq.n	80017c4 <HAL_RCC_ClockConfig+0x144>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001702:	4932      	ldr	r1, [pc, #200]	; (80017cc <HAL_RCC_ClockConfig+0x14c>)
 8001704:	688a      	ldr	r2, [r1, #8]
 8001706:	f022 0203 	bic.w	r2, r2, #3
 800170a:	4313      	orrs	r3, r2
 800170c:	608b      	str	r3, [r1, #8]
    tickstart = HAL_GetTick();
 800170e:	f7fe ff25 	bl	800055c <HAL_GetTick>
 8001712:	4606      	mov	r6, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001714:	4b2d      	ldr	r3, [pc, #180]	; (80017cc <HAL_RCC_ClockConfig+0x14c>)
 8001716:	689b      	ldr	r3, [r3, #8]
 8001718:	f003 030c 	and.w	r3, r3, #12
 800171c:	6862      	ldr	r2, [r4, #4]
 800171e:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8001722:	d016      	beq.n	8001752 <HAL_RCC_ClockConfig+0xd2>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001724:	f7fe ff1a 	bl	800055c <HAL_GetTick>
 8001728:	1b80      	subs	r0, r0, r6
 800172a:	f241 3388 	movw	r3, #5000	; 0x1388
 800172e:	4298      	cmp	r0, r3
 8001730:	d9f0      	bls.n	8001714 <HAL_RCC_ClockConfig+0x94>
        return HAL_TIMEOUT;
 8001732:	2003      	movs	r0, #3
 8001734:	bd70      	pop	{r4, r5, r6, pc}
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001736:	4a25      	ldr	r2, [pc, #148]	; (80017cc <HAL_RCC_ClockConfig+0x14c>)
 8001738:	6812      	ldr	r2, [r2, #0]
 800173a:	f412 3f00 	tst.w	r2, #131072	; 0x20000
 800173e:	d1e0      	bne.n	8001702 <HAL_RCC_ClockConfig+0x82>
        return HAL_ERROR;
 8001740:	2001      	movs	r0, #1
 8001742:	bd70      	pop	{r4, r5, r6, pc}
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001744:	4a21      	ldr	r2, [pc, #132]	; (80017cc <HAL_RCC_ClockConfig+0x14c>)
 8001746:	6812      	ldr	r2, [r2, #0]
 8001748:	f012 7f00 	tst.w	r2, #33554432	; 0x2000000
 800174c:	d1d9      	bne.n	8001702 <HAL_RCC_ClockConfig+0x82>
        return HAL_ERROR;
 800174e:	2001      	movs	r0, #1
 8001750:	bd70      	pop	{r4, r5, r6, pc}
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001752:	4b1d      	ldr	r3, [pc, #116]	; (80017c8 <HAL_RCC_ClockConfig+0x148>)
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	f003 030f 	and.w	r3, r3, #15
 800175a:	429d      	cmp	r5, r3
 800175c:	d209      	bcs.n	8001772 <HAL_RCC_ClockConfig+0xf2>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800175e:	b2ea      	uxtb	r2, r5
 8001760:	4b19      	ldr	r3, [pc, #100]	; (80017c8 <HAL_RCC_ClockConfig+0x148>)
 8001762:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	f003 030f 	and.w	r3, r3, #15
 800176a:	429d      	cmp	r5, r3
 800176c:	d001      	beq.n	8001772 <HAL_RCC_ClockConfig+0xf2>
      return HAL_ERROR;
 800176e:	2001      	movs	r0, #1
}
 8001770:	bd70      	pop	{r4, r5, r6, pc}
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001772:	6823      	ldr	r3, [r4, #0]
 8001774:	f013 0f04 	tst.w	r3, #4
 8001778:	d006      	beq.n	8001788 <HAL_RCC_ClockConfig+0x108>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800177a:	4a14      	ldr	r2, [pc, #80]	; (80017cc <HAL_RCC_ClockConfig+0x14c>)
 800177c:	6893      	ldr	r3, [r2, #8]
 800177e:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 8001782:	68e1      	ldr	r1, [r4, #12]
 8001784:	430b      	orrs	r3, r1
 8001786:	6093      	str	r3, [r2, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001788:	6823      	ldr	r3, [r4, #0]
 800178a:	f013 0f08 	tst.w	r3, #8
 800178e:	d007      	beq.n	80017a0 <HAL_RCC_ClockConfig+0x120>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001790:	4a0e      	ldr	r2, [pc, #56]	; (80017cc <HAL_RCC_ClockConfig+0x14c>)
 8001792:	6893      	ldr	r3, [r2, #8]
 8001794:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8001798:	6921      	ldr	r1, [r4, #16]
 800179a:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 800179e:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80017a0:	f7ff ff04 	bl	80015ac <HAL_RCC_GetSysClockFreq>
 80017a4:	4b09      	ldr	r3, [pc, #36]	; (80017cc <HAL_RCC_ClockConfig+0x14c>)
 80017a6:	689b      	ldr	r3, [r3, #8]
 80017a8:	f3c3 1303 	ubfx	r3, r3, #4, #4
 80017ac:	4a08      	ldr	r2, [pc, #32]	; (80017d0 <HAL_RCC_ClockConfig+0x150>)
 80017ae:	5cd3      	ldrb	r3, [r2, r3]
 80017b0:	40d8      	lsrs	r0, r3
 80017b2:	4b08      	ldr	r3, [pc, #32]	; (80017d4 <HAL_RCC_ClockConfig+0x154>)
 80017b4:	6018      	str	r0, [r3, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 80017b6:	2000      	movs	r0, #0
 80017b8:	f00c f894 	bl	800d8e4 <HAL_InitTick>
  return HAL_OK;
 80017bc:	2000      	movs	r0, #0
 80017be:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 80017c0:	2001      	movs	r0, #1
 80017c2:	4770      	bx	lr
        return HAL_ERROR;
 80017c4:	2001      	movs	r0, #1
 80017c6:	bd70      	pop	{r4, r5, r6, pc}
 80017c8:	40023c00 	.word	0x40023c00
 80017cc:	40023800 	.word	0x40023800
 80017d0:	080107d0 	.word	0x080107d0
 80017d4:	20000010 	.word	0x20000010

080017d8 <HAL_RCC_GetHCLKFreq>:
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
}
 80017d8:	4b01      	ldr	r3, [pc, #4]	; (80017e0 <HAL_RCC_GetHCLKFreq+0x8>)
 80017da:	6818      	ldr	r0, [r3, #0]
 80017dc:	4770      	bx	lr
 80017de:	bf00      	nop
 80017e0:	20000010 	.word	0x20000010

080017e4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80017e4:	b508      	push	{r3, lr}
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80017e6:	f7ff fff7 	bl	80017d8 <HAL_RCC_GetHCLKFreq>
 80017ea:	4b04      	ldr	r3, [pc, #16]	; (80017fc <HAL_RCC_GetPCLK1Freq+0x18>)
 80017ec:	689b      	ldr	r3, [r3, #8]
 80017ee:	f3c3 2382 	ubfx	r3, r3, #10, #3
 80017f2:	4a03      	ldr	r2, [pc, #12]	; (8001800 <HAL_RCC_GetPCLK1Freq+0x1c>)
 80017f4:	5cd3      	ldrb	r3, [r2, r3]
}
 80017f6:	40d8      	lsrs	r0, r3
 80017f8:	bd08      	pop	{r3, pc}
 80017fa:	bf00      	nop
 80017fc:	40023800 	.word	0x40023800
 8001800:	080107e0 	.word	0x080107e0

08001804 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001804:	b508      	push	{r3, lr}
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001806:	f7ff ffe7 	bl	80017d8 <HAL_RCC_GetHCLKFreq>
 800180a:	4b04      	ldr	r3, [pc, #16]	; (800181c <HAL_RCC_GetPCLK2Freq+0x18>)
 800180c:	689b      	ldr	r3, [r3, #8]
 800180e:	f3c3 3342 	ubfx	r3, r3, #13, #3
 8001812:	4a03      	ldr	r2, [pc, #12]	; (8001820 <HAL_RCC_GetPCLK2Freq+0x1c>)
 8001814:	5cd3      	ldrb	r3, [r2, r3]
}
 8001816:	40d8      	lsrs	r0, r3
 8001818:	bd08      	pop	{r3, pc}
 800181a:	bf00      	nop
 800181c:	40023800 	.word	0x40023800
 8001820:	080107e0 	.word	0x080107e0

08001824 <HAL_RCC_GetClockConfig>:
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001824:	230f      	movs	r3, #15
 8001826:	6003      	str	r3, [r0, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001828:	4b0b      	ldr	r3, [pc, #44]	; (8001858 <HAL_RCC_GetClockConfig+0x34>)
 800182a:	689a      	ldr	r2, [r3, #8]
 800182c:	f002 0203 	and.w	r2, r2, #3
 8001830:	6042      	str	r2, [r0, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001832:	689a      	ldr	r2, [r3, #8]
 8001834:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
 8001838:	6082      	str	r2, [r0, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 800183a:	689a      	ldr	r2, [r3, #8]
 800183c:	f402 52e0 	and.w	r2, r2, #7168	; 0x1c00
 8001840:	60c2      	str	r2, [r0, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8001842:	689b      	ldr	r3, [r3, #8]
 8001844:	08db      	lsrs	r3, r3, #3
 8001846:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
 800184a:	6103      	str	r3, [r0, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800184c:	4b03      	ldr	r3, [pc, #12]	; (800185c <HAL_RCC_GetClockConfig+0x38>)
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	f003 030f 	and.w	r3, r3, #15
 8001854:	600b      	str	r3, [r1, #0]
 8001856:	4770      	bx	lr
 8001858:	40023800 	.word	0x40023800
 800185c:	40023c00 	.word	0x40023c00

08001860 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001860:	4770      	bx	lr

08001862 <HAL_TIM_Base_Start_IT>:

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001862:	6802      	ldr	r2, [r0, #0]
 8001864:	68d3      	ldr	r3, [r2, #12]
 8001866:	f043 0301 	orr.w	r3, r3, #1
 800186a:	60d3      	str	r3, [r2, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800186c:	6802      	ldr	r2, [r0, #0]
 800186e:	6893      	ldr	r3, [r2, #8]
 8001870:	f003 0307 	and.w	r3, r3, #7
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001874:	2b06      	cmp	r3, #6
 8001876:	d003      	beq.n	8001880 <HAL_TIM_Base_Start_IT+0x1e>
  {
    __HAL_TIM_ENABLE(htim);
 8001878:	6813      	ldr	r3, [r2, #0]
 800187a:	f043 0301 	orr.w	r3, r3, #1
 800187e:	6013      	str	r3, [r2, #0]
  }

  /* Return function status */
  return HAL_OK;
}
 8001880:	2000      	movs	r0, #0
 8001882:	4770      	bx	lr

08001884 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001884:	4770      	bx	lr

08001886 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001886:	4770      	bx	lr

08001888 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001888:	4770      	bx	lr

0800188a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800188a:	4770      	bx	lr

0800188c <HAL_TIM_IRQHandler>:
{
 800188c:	b510      	push	{r4, lr}
 800188e:	4604      	mov	r4, r0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001890:	6803      	ldr	r3, [r0, #0]
 8001892:	691a      	ldr	r2, [r3, #16]
 8001894:	f012 0f02 	tst.w	r2, #2
 8001898:	d011      	beq.n	80018be <HAL_TIM_IRQHandler+0x32>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800189a:	68da      	ldr	r2, [r3, #12]
 800189c:	f012 0f02 	tst.w	r2, #2
 80018a0:	d00d      	beq.n	80018be <HAL_TIM_IRQHandler+0x32>
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80018a2:	f06f 0202 	mvn.w	r2, #2
 80018a6:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80018a8:	2301      	movs	r3, #1
 80018aa:	7703      	strb	r3, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80018ac:	6803      	ldr	r3, [r0, #0]
 80018ae:	699b      	ldr	r3, [r3, #24]
 80018b0:	f013 0f03 	tst.w	r3, #3
 80018b4:	d070      	beq.n	8001998 <HAL_TIM_IRQHandler+0x10c>
          HAL_TIM_IC_CaptureCallback(htim);
 80018b6:	f7ff ffe6 	bl	8001886 <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80018ba:	2300      	movs	r3, #0
 80018bc:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80018be:	6823      	ldr	r3, [r4, #0]
 80018c0:	691a      	ldr	r2, [r3, #16]
 80018c2:	f012 0f04 	tst.w	r2, #4
 80018c6:	d012      	beq.n	80018ee <HAL_TIM_IRQHandler+0x62>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80018c8:	68da      	ldr	r2, [r3, #12]
 80018ca:	f012 0f04 	tst.w	r2, #4
 80018ce:	d00e      	beq.n	80018ee <HAL_TIM_IRQHandler+0x62>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80018d0:	f06f 0204 	mvn.w	r2, #4
 80018d4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80018d6:	2302      	movs	r3, #2
 80018d8:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80018da:	6823      	ldr	r3, [r4, #0]
 80018dc:	699b      	ldr	r3, [r3, #24]
 80018de:	f413 7f40 	tst.w	r3, #768	; 0x300
 80018e2:	d05f      	beq.n	80019a4 <HAL_TIM_IRQHandler+0x118>
        HAL_TIM_IC_CaptureCallback(htim);
 80018e4:	4620      	mov	r0, r4
 80018e6:	f7ff ffce 	bl	8001886 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80018ea:	2300      	movs	r3, #0
 80018ec:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80018ee:	6823      	ldr	r3, [r4, #0]
 80018f0:	691a      	ldr	r2, [r3, #16]
 80018f2:	f012 0f08 	tst.w	r2, #8
 80018f6:	d012      	beq.n	800191e <HAL_TIM_IRQHandler+0x92>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80018f8:	68da      	ldr	r2, [r3, #12]
 80018fa:	f012 0f08 	tst.w	r2, #8
 80018fe:	d00e      	beq.n	800191e <HAL_TIM_IRQHandler+0x92>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001900:	f06f 0208 	mvn.w	r2, #8
 8001904:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001906:	2304      	movs	r3, #4
 8001908:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800190a:	6823      	ldr	r3, [r4, #0]
 800190c:	69db      	ldr	r3, [r3, #28]
 800190e:	f013 0f03 	tst.w	r3, #3
 8001912:	d04e      	beq.n	80019b2 <HAL_TIM_IRQHandler+0x126>
        HAL_TIM_IC_CaptureCallback(htim);
 8001914:	4620      	mov	r0, r4
 8001916:	f7ff ffb6 	bl	8001886 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800191a:	2300      	movs	r3, #0
 800191c:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800191e:	6823      	ldr	r3, [r4, #0]
 8001920:	691a      	ldr	r2, [r3, #16]
 8001922:	f012 0f10 	tst.w	r2, #16
 8001926:	d012      	beq.n	800194e <HAL_TIM_IRQHandler+0xc2>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8001928:	68da      	ldr	r2, [r3, #12]
 800192a:	f012 0f10 	tst.w	r2, #16
 800192e:	d00e      	beq.n	800194e <HAL_TIM_IRQHandler+0xc2>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001930:	f06f 0210 	mvn.w	r2, #16
 8001934:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001936:	2308      	movs	r3, #8
 8001938:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800193a:	6823      	ldr	r3, [r4, #0]
 800193c:	69db      	ldr	r3, [r3, #28]
 800193e:	f413 7f40 	tst.w	r3, #768	; 0x300
 8001942:	d03d      	beq.n	80019c0 <HAL_TIM_IRQHandler+0x134>
        HAL_TIM_IC_CaptureCallback(htim);
 8001944:	4620      	mov	r0, r4
 8001946:	f7ff ff9e 	bl	8001886 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800194a:	2300      	movs	r3, #0
 800194c:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800194e:	6823      	ldr	r3, [r4, #0]
 8001950:	691a      	ldr	r2, [r3, #16]
 8001952:	f012 0f01 	tst.w	r2, #1
 8001956:	d003      	beq.n	8001960 <HAL_TIM_IRQHandler+0xd4>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8001958:	68da      	ldr	r2, [r3, #12]
 800195a:	f012 0f01 	tst.w	r2, #1
 800195e:	d136      	bne.n	80019ce <HAL_TIM_IRQHandler+0x142>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001960:	6823      	ldr	r3, [r4, #0]
 8001962:	691a      	ldr	r2, [r3, #16]
 8001964:	f012 0f80 	tst.w	r2, #128	; 0x80
 8001968:	d003      	beq.n	8001972 <HAL_TIM_IRQHandler+0xe6>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800196a:	68da      	ldr	r2, [r3, #12]
 800196c:	f012 0f80 	tst.w	r2, #128	; 0x80
 8001970:	d134      	bne.n	80019dc <HAL_TIM_IRQHandler+0x150>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001972:	6823      	ldr	r3, [r4, #0]
 8001974:	691a      	ldr	r2, [r3, #16]
 8001976:	f012 0f40 	tst.w	r2, #64	; 0x40
 800197a:	d003      	beq.n	8001984 <HAL_TIM_IRQHandler+0xf8>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800197c:	68da      	ldr	r2, [r3, #12]
 800197e:	f012 0f40 	tst.w	r2, #64	; 0x40
 8001982:	d132      	bne.n	80019ea <HAL_TIM_IRQHandler+0x15e>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8001984:	6823      	ldr	r3, [r4, #0]
 8001986:	691a      	ldr	r2, [r3, #16]
 8001988:	f012 0f20 	tst.w	r2, #32
 800198c:	d003      	beq.n	8001996 <HAL_TIM_IRQHandler+0x10a>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800198e:	68da      	ldr	r2, [r3, #12]
 8001990:	f012 0f20 	tst.w	r2, #32
 8001994:	d130      	bne.n	80019f8 <HAL_TIM_IRQHandler+0x16c>
 8001996:	bd10      	pop	{r4, pc}
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001998:	f7ff ff74 	bl	8001884 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800199c:	4620      	mov	r0, r4
 800199e:	f7ff ff73 	bl	8001888 <HAL_TIM_PWM_PulseFinishedCallback>
 80019a2:	e78a      	b.n	80018ba <HAL_TIM_IRQHandler+0x2e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80019a4:	4620      	mov	r0, r4
 80019a6:	f7ff ff6d 	bl	8001884 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80019aa:	4620      	mov	r0, r4
 80019ac:	f7ff ff6c 	bl	8001888 <HAL_TIM_PWM_PulseFinishedCallback>
 80019b0:	e79b      	b.n	80018ea <HAL_TIM_IRQHandler+0x5e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80019b2:	4620      	mov	r0, r4
 80019b4:	f7ff ff66 	bl	8001884 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80019b8:	4620      	mov	r0, r4
 80019ba:	f7ff ff65 	bl	8001888 <HAL_TIM_PWM_PulseFinishedCallback>
 80019be:	e7ac      	b.n	800191a <HAL_TIM_IRQHandler+0x8e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80019c0:	4620      	mov	r0, r4
 80019c2:	f7ff ff5f 	bl	8001884 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80019c6:	4620      	mov	r0, r4
 80019c8:	f7ff ff5e 	bl	8001888 <HAL_TIM_PWM_PulseFinishedCallback>
 80019cc:	e7bd      	b.n	800194a <HAL_TIM_IRQHandler+0xbe>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80019ce:	f06f 0201 	mvn.w	r2, #1
 80019d2:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 80019d4:	4620      	mov	r0, r4
 80019d6:	f00b fe83 	bl	800d6e0 <HAL_TIM_PeriodElapsedCallback>
 80019da:	e7c1      	b.n	8001960 <HAL_TIM_IRQHandler+0xd4>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80019dc:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80019e0:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 80019e2:	4620      	mov	r0, r4
 80019e4:	f000 f890 	bl	8001b08 <HAL_TIMEx_BreakCallback>
 80019e8:	e7c3      	b.n	8001972 <HAL_TIM_IRQHandler+0xe6>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80019ea:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80019ee:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 80019f0:	4620      	mov	r0, r4
 80019f2:	f7ff ff4a 	bl	800188a <HAL_TIM_TriggerCallback>
 80019f6:	e7c5      	b.n	8001984 <HAL_TIM_IRQHandler+0xf8>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80019f8:	f06f 0220 	mvn.w	r2, #32
 80019fc:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutCallback(htim);
 80019fe:	4620      	mov	r0, r4
 8001a00:	f000 f881 	bl	8001b06 <HAL_TIMEx_CommutCallback>
}
 8001a04:	e7c7      	b.n	8001996 <HAL_TIM_IRQHandler+0x10a>
	...

08001a08 <TIM_Base_SetConfig>:
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001a08:	6803      	ldr	r3, [r0, #0]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001a0a:	4a31      	ldr	r2, [pc, #196]	; (8001ad0 <TIM_Base_SetConfig+0xc8>)
 8001a0c:	4290      	cmp	r0, r2
 8001a0e:	d012      	beq.n	8001a36 <TIM_Base_SetConfig+0x2e>
 8001a10:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8001a14:	d00f      	beq.n	8001a36 <TIM_Base_SetConfig+0x2e>
 8001a16:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 8001a1a:	4290      	cmp	r0, r2
 8001a1c:	d00b      	beq.n	8001a36 <TIM_Base_SetConfig+0x2e>
 8001a1e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001a22:	4290      	cmp	r0, r2
 8001a24:	d007      	beq.n	8001a36 <TIM_Base_SetConfig+0x2e>
 8001a26:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001a2a:	4290      	cmp	r0, r2
 8001a2c:	d003      	beq.n	8001a36 <TIM_Base_SetConfig+0x2e>
 8001a2e:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 8001a32:	4290      	cmp	r0, r2
 8001a34:	d103      	bne.n	8001a3e <TIM_Base_SetConfig+0x36>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001a36:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8001a3a:	684a      	ldr	r2, [r1, #4]
 8001a3c:	4313      	orrs	r3, r2
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001a3e:	4a24      	ldr	r2, [pc, #144]	; (8001ad0 <TIM_Base_SetConfig+0xc8>)
 8001a40:	4290      	cmp	r0, r2
 8001a42:	d02a      	beq.n	8001a9a <TIM_Base_SetConfig+0x92>
 8001a44:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8001a48:	d027      	beq.n	8001a9a <TIM_Base_SetConfig+0x92>
 8001a4a:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 8001a4e:	4290      	cmp	r0, r2
 8001a50:	d023      	beq.n	8001a9a <TIM_Base_SetConfig+0x92>
 8001a52:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001a56:	4290      	cmp	r0, r2
 8001a58:	d01f      	beq.n	8001a9a <TIM_Base_SetConfig+0x92>
 8001a5a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001a5e:	4290      	cmp	r0, r2
 8001a60:	d01b      	beq.n	8001a9a <TIM_Base_SetConfig+0x92>
 8001a62:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 8001a66:	4290      	cmp	r0, r2
 8001a68:	d017      	beq.n	8001a9a <TIM_Base_SetConfig+0x92>
 8001a6a:	f502 5270 	add.w	r2, r2, #15360	; 0x3c00
 8001a6e:	4290      	cmp	r0, r2
 8001a70:	d013      	beq.n	8001a9a <TIM_Base_SetConfig+0x92>
 8001a72:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001a76:	4290      	cmp	r0, r2
 8001a78:	d00f      	beq.n	8001a9a <TIM_Base_SetConfig+0x92>
 8001a7a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001a7e:	4290      	cmp	r0, r2
 8001a80:	d00b      	beq.n	8001a9a <TIM_Base_SetConfig+0x92>
 8001a82:	f5a2 3298 	sub.w	r2, r2, #77824	; 0x13000
 8001a86:	4290      	cmp	r0, r2
 8001a88:	d007      	beq.n	8001a9a <TIM_Base_SetConfig+0x92>
 8001a8a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001a8e:	4290      	cmp	r0, r2
 8001a90:	d003      	beq.n	8001a9a <TIM_Base_SetConfig+0x92>
 8001a92:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001a96:	4290      	cmp	r0, r2
 8001a98:	d103      	bne.n	8001aa2 <TIM_Base_SetConfig+0x9a>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001a9a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001a9e:	68ca      	ldr	r2, [r1, #12]
 8001aa0:	4313      	orrs	r3, r2
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001aa2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001aa6:	694a      	ldr	r2, [r1, #20]
 8001aa8:	4313      	orrs	r3, r2

  TIMx->CR1 = tmpcr1;
 8001aaa:	6003      	str	r3, [r0, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001aac:	688b      	ldr	r3, [r1, #8]
 8001aae:	62c3      	str	r3, [r0, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001ab0:	680b      	ldr	r3, [r1, #0]
 8001ab2:	6283      	str	r3, [r0, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001ab4:	4b06      	ldr	r3, [pc, #24]	; (8001ad0 <TIM_Base_SetConfig+0xc8>)
 8001ab6:	4298      	cmp	r0, r3
 8001ab8:	d006      	beq.n	8001ac8 <TIM_Base_SetConfig+0xc0>
 8001aba:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001abe:	4298      	cmp	r0, r3
 8001ac0:	d002      	beq.n	8001ac8 <TIM_Base_SetConfig+0xc0>
    TIMx->RCR = Structure->RepetitionCounter;
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001ac2:	2301      	movs	r3, #1
 8001ac4:	6143      	str	r3, [r0, #20]
 8001ac6:	4770      	bx	lr
    TIMx->RCR = Structure->RepetitionCounter;
 8001ac8:	690b      	ldr	r3, [r1, #16]
 8001aca:	6303      	str	r3, [r0, #48]	; 0x30
 8001acc:	e7f9      	b.n	8001ac2 <TIM_Base_SetConfig+0xba>
 8001ace:	bf00      	nop
 8001ad0:	40010000 	.word	0x40010000

08001ad4 <HAL_TIM_Base_Init>:
  if (htim == NULL)
 8001ad4:	b1a8      	cbz	r0, 8001b02 <HAL_TIM_Base_Init+0x2e>
{
 8001ad6:	b510      	push	{r4, lr}
 8001ad8:	4604      	mov	r4, r0
  if (htim->State == HAL_TIM_STATE_RESET)
 8001ada:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8001ade:	b15b      	cbz	r3, 8001af8 <HAL_TIM_Base_Init+0x24>
  htim->State = HAL_TIM_STATE_BUSY;
 8001ae0:	2302      	movs	r3, #2
 8001ae2:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001ae6:	1d21      	adds	r1, r4, #4
 8001ae8:	6820      	ldr	r0, [r4, #0]
 8001aea:	f7ff ff8d 	bl	8001a08 <TIM_Base_SetConfig>
  htim->State = HAL_TIM_STATE_READY;
 8001aee:	2301      	movs	r3, #1
 8001af0:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 8001af4:	2000      	movs	r0, #0
 8001af6:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 8001af8:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 8001afc:	f7ff feb0 	bl	8001860 <HAL_TIM_Base_MspInit>
 8001b00:	e7ee      	b.n	8001ae0 <HAL_TIM_Base_Init+0xc>
    return HAL_ERROR;
 8001b02:	2001      	movs	r0, #1
 8001b04:	4770      	bx	lr

08001b06 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8001b06:	4770      	bx	lr

08001b08 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8001b08:	4770      	bx	lr
	...

08001b0c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001b0c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001b10:	4604      	mov	r4, r0
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001b12:	6802      	ldr	r2, [r0, #0]
 8001b14:	6913      	ldr	r3, [r2, #16]
 8001b16:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001b1a:	68c1      	ldr	r1, [r0, #12]
 8001b1c:	430b      	orrs	r3, r1
 8001b1e:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8001b20:	6883      	ldr	r3, [r0, #8]
 8001b22:	6902      	ldr	r2, [r0, #16]
 8001b24:	4313      	orrs	r3, r2
 8001b26:	6942      	ldr	r2, [r0, #20]
 8001b28:	4313      	orrs	r3, r2
 8001b2a:	69c2      	ldr	r2, [r0, #28]
 8001b2c:	4313      	orrs	r3, r2
  MODIFY_REG(huart->Instance->CR1,
 8001b2e:	6801      	ldr	r1, [r0, #0]
 8001b30:	68ca      	ldr	r2, [r1, #12]
 8001b32:	f422 4216 	bic.w	r2, r2, #38400	; 0x9600
 8001b36:	f022 020c 	bic.w	r2, r2, #12
 8001b3a:	4313      	orrs	r3, r2
 8001b3c:	60cb      	str	r3, [r1, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8001b3e:	6802      	ldr	r2, [r0, #0]
 8001b40:	6953      	ldr	r3, [r2, #20]
 8001b42:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001b46:	6981      	ldr	r1, [r0, #24]
 8001b48:	430b      	orrs	r3, r1
 8001b4a:	6153      	str	r3, [r2, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001b4c:	69c3      	ldr	r3, [r0, #28]
 8001b4e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001b52:	d062      	beq.n	8001c1a <UART_SetConfig+0x10e>
  }
  else
  {
    /*-------------------------- USART BRR Configuration ---------------------*/
#if defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8001b54:	f8d0 8000 	ldr.w	r8, [r0]
 8001b58:	4bbb      	ldr	r3, [pc, #748]	; (8001e48 <UART_SetConfig+0x33c>)
 8001b5a:	4598      	cmp	r8, r3
 8001b5c:	f000 811b 	beq.w	8001d96 <UART_SetConfig+0x28a>
 8001b60:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001b64:	4598      	cmp	r8, r3
 8001b66:	f000 8116 	beq.w	8001d96 <UART_SetConfig+0x28a>
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8001b6a:	f7ff fe3b 	bl	80017e4 <HAL_RCC_GetPCLK1Freq>
 8001b6e:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8001b72:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8001b76:	6865      	ldr	r5, [r4, #4]
 8001b78:	00ad      	lsls	r5, r5, #2
 8001b7a:	fbb0 f5f5 	udiv	r5, r0, r5
 8001b7e:	4fb3      	ldr	r7, [pc, #716]	; (8001e4c <UART_SetConfig+0x340>)
 8001b80:	fba7 3505 	umull	r3, r5, r7, r5
 8001b84:	096d      	lsrs	r5, r5, #5
 8001b86:	012e      	lsls	r6, r5, #4
 8001b88:	f7ff fe2c 	bl	80017e4 <HAL_RCC_GetPCLK1Freq>
 8001b8c:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8001b90:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8001b94:	6865      	ldr	r5, [r4, #4]
 8001b96:	00ad      	lsls	r5, r5, #2
 8001b98:	fbb0 faf5 	udiv	sl, r0, r5
 8001b9c:	f7ff fe22 	bl	80017e4 <HAL_RCC_GetPCLK1Freq>
 8001ba0:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8001ba4:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8001ba8:	6865      	ldr	r5, [r4, #4]
 8001baa:	00ad      	lsls	r5, r5, #2
 8001bac:	fbb0 f5f5 	udiv	r5, r0, r5
 8001bb0:	fba7 3505 	umull	r3, r5, r7, r5
 8001bb4:	096d      	lsrs	r5, r5, #5
 8001bb6:	f04f 0964 	mov.w	r9, #100	; 0x64
 8001bba:	fb09 a515 	mls	r5, r9, r5, sl
 8001bbe:	012d      	lsls	r5, r5, #4
 8001bc0:	3532      	adds	r5, #50	; 0x32
 8001bc2:	fba7 3505 	umull	r3, r5, r7, r5
 8001bc6:	096d      	lsrs	r5, r5, #5
 8001bc8:	f005 05f0 	and.w	r5, r5, #240	; 0xf0
 8001bcc:	4435      	add	r5, r6
 8001bce:	f7ff fe09 	bl	80017e4 <HAL_RCC_GetPCLK1Freq>
 8001bd2:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8001bd6:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8001bda:	6866      	ldr	r6, [r4, #4]
 8001bdc:	00b6      	lsls	r6, r6, #2
 8001bde:	fbb0 f6f6 	udiv	r6, r0, r6
 8001be2:	f7ff fdff 	bl	80017e4 <HAL_RCC_GetPCLK1Freq>
 8001be6:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8001bea:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8001bee:	6863      	ldr	r3, [r4, #4]
 8001bf0:	009b      	lsls	r3, r3, #2
 8001bf2:	fbb0 f0f3 	udiv	r0, r0, r3
 8001bf6:	fba7 3000 	umull	r3, r0, r7, r0
 8001bfa:	0940      	lsrs	r0, r0, #5
 8001bfc:	fb09 6910 	mls	r9, r9, r0, r6
 8001c00:	ea4f 1909 	mov.w	r9, r9, lsl #4
 8001c04:	f109 0932 	add.w	r9, r9, #50	; 0x32
 8001c08:	fba7 3709 	umull	r3, r7, r7, r9
 8001c0c:	f3c7 1743 	ubfx	r7, r7, #5, #4
 8001c10:	442f      	add	r7, r5
 8001c12:	f8c8 7008 	str.w	r7, [r8, #8]
 8001c16:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8001c1a:	f8d0 8000 	ldr.w	r8, [r0]
 8001c1e:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8001c22:	f503 4310 	add.w	r3, r3, #36864	; 0x9000
 8001c26:	4598      	cmp	r8, r3
 8001c28:	d05c      	beq.n	8001ce4 <UART_SetConfig+0x1d8>
 8001c2a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001c2e:	4598      	cmp	r8, r3
 8001c30:	d058      	beq.n	8001ce4 <UART_SetConfig+0x1d8>
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8001c32:	f7ff fdd7 	bl	80017e4 <HAL_RCC_GetPCLK1Freq>
 8001c36:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8001c3a:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8001c3e:	6865      	ldr	r5, [r4, #4]
 8001c40:	006d      	lsls	r5, r5, #1
 8001c42:	fbb0 f5f5 	udiv	r5, r0, r5
 8001c46:	4f81      	ldr	r7, [pc, #516]	; (8001e4c <UART_SetConfig+0x340>)
 8001c48:	fba7 3505 	umull	r3, r5, r7, r5
 8001c4c:	096d      	lsrs	r5, r5, #5
 8001c4e:	012e      	lsls	r6, r5, #4
 8001c50:	f7ff fdc8 	bl	80017e4 <HAL_RCC_GetPCLK1Freq>
 8001c54:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8001c58:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8001c5c:	6865      	ldr	r5, [r4, #4]
 8001c5e:	006d      	lsls	r5, r5, #1
 8001c60:	fbb0 faf5 	udiv	sl, r0, r5
 8001c64:	f7ff fdbe 	bl	80017e4 <HAL_RCC_GetPCLK1Freq>
 8001c68:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8001c6c:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8001c70:	6865      	ldr	r5, [r4, #4]
 8001c72:	006d      	lsls	r5, r5, #1
 8001c74:	fbb0 f5f5 	udiv	r5, r0, r5
 8001c78:	fba7 3505 	umull	r3, r5, r7, r5
 8001c7c:	096d      	lsrs	r5, r5, #5
 8001c7e:	f04f 0964 	mov.w	r9, #100	; 0x64
 8001c82:	fb09 a515 	mls	r5, r9, r5, sl
 8001c86:	00ed      	lsls	r5, r5, #3
 8001c88:	3532      	adds	r5, #50	; 0x32
 8001c8a:	fba7 3505 	umull	r3, r5, r7, r5
 8001c8e:	096d      	lsrs	r5, r5, #5
 8001c90:	006d      	lsls	r5, r5, #1
 8001c92:	f405 75f8 	and.w	r5, r5, #496	; 0x1f0
 8001c96:	4435      	add	r5, r6
 8001c98:	f7ff fda4 	bl	80017e4 <HAL_RCC_GetPCLK1Freq>
 8001c9c:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8001ca0:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8001ca4:	6866      	ldr	r6, [r4, #4]
 8001ca6:	0076      	lsls	r6, r6, #1
 8001ca8:	fbb0 f6f6 	udiv	r6, r0, r6
 8001cac:	f7ff fd9a 	bl	80017e4 <HAL_RCC_GetPCLK1Freq>
 8001cb0:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8001cb4:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8001cb8:	6863      	ldr	r3, [r4, #4]
 8001cba:	005b      	lsls	r3, r3, #1
 8001cbc:	fbb0 f3f3 	udiv	r3, r0, r3
 8001cc0:	fba7 2303 	umull	r2, r3, r7, r3
 8001cc4:	095b      	lsrs	r3, r3, #5
 8001cc6:	fb09 6913 	mls	r9, r9, r3, r6
 8001cca:	ea4f 09c9 	mov.w	r9, r9, lsl #3
 8001cce:	f109 0932 	add.w	r9, r9, #50	; 0x32
 8001cd2:	fba7 3709 	umull	r3, r7, r7, r9
 8001cd6:	f3c7 1742 	ubfx	r7, r7, #5, #3
 8001cda:	442f      	add	r7, r5
 8001cdc:	f8c8 7008 	str.w	r7, [r8, #8]
 8001ce0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 8001ce4:	f7ff fd8e 	bl	8001804 <HAL_RCC_GetPCLK2Freq>
 8001ce8:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8001cec:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8001cf0:	6865      	ldr	r5, [r4, #4]
 8001cf2:	006d      	lsls	r5, r5, #1
 8001cf4:	fbb0 f5f5 	udiv	r5, r0, r5
 8001cf8:	4f54      	ldr	r7, [pc, #336]	; (8001e4c <UART_SetConfig+0x340>)
 8001cfa:	fba7 3505 	umull	r3, r5, r7, r5
 8001cfe:	096d      	lsrs	r5, r5, #5
 8001d00:	012e      	lsls	r6, r5, #4
 8001d02:	f7ff fd7f 	bl	8001804 <HAL_RCC_GetPCLK2Freq>
 8001d06:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8001d0a:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8001d0e:	6865      	ldr	r5, [r4, #4]
 8001d10:	006d      	lsls	r5, r5, #1
 8001d12:	fbb0 faf5 	udiv	sl, r0, r5
 8001d16:	f7ff fd75 	bl	8001804 <HAL_RCC_GetPCLK2Freq>
 8001d1a:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8001d1e:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8001d22:	6865      	ldr	r5, [r4, #4]
 8001d24:	006d      	lsls	r5, r5, #1
 8001d26:	fbb0 f5f5 	udiv	r5, r0, r5
 8001d2a:	fba7 3505 	umull	r3, r5, r7, r5
 8001d2e:	096d      	lsrs	r5, r5, #5
 8001d30:	f04f 0964 	mov.w	r9, #100	; 0x64
 8001d34:	fb09 a515 	mls	r5, r9, r5, sl
 8001d38:	00ed      	lsls	r5, r5, #3
 8001d3a:	3532      	adds	r5, #50	; 0x32
 8001d3c:	fba7 3505 	umull	r3, r5, r7, r5
 8001d40:	096d      	lsrs	r5, r5, #5
 8001d42:	006d      	lsls	r5, r5, #1
 8001d44:	f405 75f8 	and.w	r5, r5, #496	; 0x1f0
 8001d48:	4435      	add	r5, r6
 8001d4a:	f7ff fd5b 	bl	8001804 <HAL_RCC_GetPCLK2Freq>
 8001d4e:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8001d52:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8001d56:	6866      	ldr	r6, [r4, #4]
 8001d58:	0076      	lsls	r6, r6, #1
 8001d5a:	fbb0 f6f6 	udiv	r6, r0, r6
 8001d5e:	f7ff fd51 	bl	8001804 <HAL_RCC_GetPCLK2Freq>
 8001d62:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8001d66:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8001d6a:	6863      	ldr	r3, [r4, #4]
 8001d6c:	005b      	lsls	r3, r3, #1
 8001d6e:	fbb0 f3f3 	udiv	r3, r0, r3
 8001d72:	fba7 2303 	umull	r2, r3, r7, r3
 8001d76:	095b      	lsrs	r3, r3, #5
 8001d78:	fb09 6913 	mls	r9, r9, r3, r6
 8001d7c:	ea4f 09c9 	mov.w	r9, r9, lsl #3
 8001d80:	f109 0932 	add.w	r9, r9, #50	; 0x32
 8001d84:	fba7 3709 	umull	r3, r7, r7, r9
 8001d88:	f3c7 1742 	ubfx	r7, r7, #5, #3
 8001d8c:	442f      	add	r7, r5
 8001d8e:	f8c8 7008 	str.w	r7, [r8, #8]
 8001d92:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 8001d96:	f7ff fd35 	bl	8001804 <HAL_RCC_GetPCLK2Freq>
 8001d9a:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8001d9e:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8001da2:	6865      	ldr	r5, [r4, #4]
 8001da4:	00ad      	lsls	r5, r5, #2
 8001da6:	fbb0 f5f5 	udiv	r5, r0, r5
 8001daa:	4f28      	ldr	r7, [pc, #160]	; (8001e4c <UART_SetConfig+0x340>)
 8001dac:	fba7 3505 	umull	r3, r5, r7, r5
 8001db0:	096d      	lsrs	r5, r5, #5
 8001db2:	012e      	lsls	r6, r5, #4
 8001db4:	f7ff fd26 	bl	8001804 <HAL_RCC_GetPCLK2Freq>
 8001db8:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8001dbc:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8001dc0:	6865      	ldr	r5, [r4, #4]
 8001dc2:	00ad      	lsls	r5, r5, #2
 8001dc4:	fbb0 faf5 	udiv	sl, r0, r5
 8001dc8:	f7ff fd1c 	bl	8001804 <HAL_RCC_GetPCLK2Freq>
 8001dcc:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8001dd0:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8001dd4:	6865      	ldr	r5, [r4, #4]
 8001dd6:	00ad      	lsls	r5, r5, #2
 8001dd8:	fbb0 f5f5 	udiv	r5, r0, r5
 8001ddc:	fba7 3505 	umull	r3, r5, r7, r5
 8001de0:	096d      	lsrs	r5, r5, #5
 8001de2:	f04f 0964 	mov.w	r9, #100	; 0x64
 8001de6:	fb09 a515 	mls	r5, r9, r5, sl
 8001dea:	012d      	lsls	r5, r5, #4
 8001dec:	3532      	adds	r5, #50	; 0x32
 8001dee:	fba7 3505 	umull	r3, r5, r7, r5
 8001df2:	096d      	lsrs	r5, r5, #5
 8001df4:	f005 05f0 	and.w	r5, r5, #240	; 0xf0
 8001df8:	4435      	add	r5, r6
 8001dfa:	f7ff fd03 	bl	8001804 <HAL_RCC_GetPCLK2Freq>
 8001dfe:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8001e02:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8001e06:	6866      	ldr	r6, [r4, #4]
 8001e08:	00b6      	lsls	r6, r6, #2
 8001e0a:	fbb0 f6f6 	udiv	r6, r0, r6
 8001e0e:	f7ff fcf9 	bl	8001804 <HAL_RCC_GetPCLK2Freq>
 8001e12:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8001e16:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8001e1a:	6863      	ldr	r3, [r4, #4]
 8001e1c:	009b      	lsls	r3, r3, #2
 8001e1e:	fbb0 f3f3 	udiv	r3, r0, r3
 8001e22:	fba7 2303 	umull	r2, r3, r7, r3
 8001e26:	095b      	lsrs	r3, r3, #5
 8001e28:	fb09 6913 	mls	r9, r9, r3, r6
 8001e2c:	ea4f 1909 	mov.w	r9, r9, lsl #4
 8001e30:	f109 0932 	add.w	r9, r9, #50	; 0x32
 8001e34:	fba7 3709 	umull	r3, r7, r7, r9
 8001e38:	f3c7 1743 	ubfx	r7, r7, #5, #4
 8001e3c:	442f      	add	r7, r5
 8001e3e:	f8c8 7008 	str.w	r7, [r8, #8]
 8001e42:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001e46:	bf00      	nop
 8001e48:	40011000 	.word	0x40011000
 8001e4c:	51eb851f 	.word	0x51eb851f

08001e50 <HAL_UART_Init>:
  if (huart == NULL)
 8001e50:	b358      	cbz	r0, 8001eaa <HAL_UART_Init+0x5a>
{
 8001e52:	b510      	push	{r4, lr}
 8001e54:	4604      	mov	r4, r0
  if (huart->gState == HAL_UART_STATE_RESET)
 8001e56:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 8001e5a:	b30b      	cbz	r3, 8001ea0 <HAL_UART_Init+0x50>
  huart->gState = HAL_UART_STATE_BUSY;
 8001e5c:	2324      	movs	r3, #36	; 0x24
 8001e5e:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  __HAL_UART_DISABLE(huart);
 8001e62:	6822      	ldr	r2, [r4, #0]
 8001e64:	68d3      	ldr	r3, [r2, #12]
 8001e66:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8001e6a:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 8001e6c:	4620      	mov	r0, r4
 8001e6e:	f7ff fe4d 	bl	8001b0c <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001e72:	6822      	ldr	r2, [r4, #0]
 8001e74:	6913      	ldr	r3, [r2, #16]
 8001e76:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 8001e7a:	6113      	str	r3, [r2, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001e7c:	6822      	ldr	r2, [r4, #0]
 8001e7e:	6953      	ldr	r3, [r2, #20]
 8001e80:	f023 032a 	bic.w	r3, r3, #42	; 0x2a
 8001e84:	6153      	str	r3, [r2, #20]
  __HAL_UART_ENABLE(huart);
 8001e86:	6822      	ldr	r2, [r4, #0]
 8001e88:	68d3      	ldr	r3, [r2, #12]
 8001e8a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001e8e:	60d3      	str	r3, [r2, #12]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001e90:	2000      	movs	r0, #0
 8001e92:	63e0      	str	r0, [r4, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8001e94:	2320      	movs	r3, #32
 8001e96:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8001e9a:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
  return HAL_OK;
 8001e9e:	bd10      	pop	{r4, pc}
    huart->Lock = HAL_UNLOCKED;
 8001ea0:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
    HAL_UART_MspInit(huart);
 8001ea4:	f00b ff06 	bl	800dcb4 <HAL_UART_MspInit>
 8001ea8:	e7d8      	b.n	8001e5c <HAL_UART_Init+0xc>
    return HAL_ERROR;
 8001eaa:	2001      	movs	r0, #1
 8001eac:	4770      	bx	lr
	...

08001eb0 <USB_CoreReset>:
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
  uint32_t count = 0U;
 8001eb0:	2300      	movs	r3, #0

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8001eb2:	3301      	adds	r3, #1
 8001eb4:	4a0c      	ldr	r2, [pc, #48]	; (8001ee8 <USB_CoreReset+0x38>)
 8001eb6:	4293      	cmp	r3, r2
 8001eb8:	d811      	bhi.n	8001ede <USB_CoreReset+0x2e>
    {
      return HAL_TIMEOUT;
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8001eba:	6902      	ldr	r2, [r0, #16]
 8001ebc:	2a00      	cmp	r2, #0
 8001ebe:	daf8      	bge.n	8001eb2 <USB_CoreReset+0x2>

  /* Core Soft Reset */
  count = 0U;
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8001ec0:	6903      	ldr	r3, [r0, #16]
 8001ec2:	f043 0301 	orr.w	r3, r3, #1
 8001ec6:	6103      	str	r3, [r0, #16]
  count = 0U;
 8001ec8:	2300      	movs	r3, #0

  do
  {
    if (++count > 200000U)
 8001eca:	3301      	adds	r3, #1
 8001ecc:	4a06      	ldr	r2, [pc, #24]	; (8001ee8 <USB_CoreReset+0x38>)
 8001ece:	4293      	cmp	r3, r2
 8001ed0:	d807      	bhi.n	8001ee2 <USB_CoreReset+0x32>
    {
      return HAL_TIMEOUT;
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8001ed2:	6902      	ldr	r2, [r0, #16]
 8001ed4:	f012 0f01 	tst.w	r2, #1
 8001ed8:	d1f7      	bne.n	8001eca <USB_CoreReset+0x1a>

  return HAL_OK;
 8001eda:	2000      	movs	r0, #0
 8001edc:	4770      	bx	lr
      return HAL_TIMEOUT;
 8001ede:	2003      	movs	r0, #3
 8001ee0:	4770      	bx	lr
      return HAL_TIMEOUT;
 8001ee2:	2003      	movs	r0, #3
}
 8001ee4:	4770      	bx	lr
 8001ee6:	bf00      	nop
 8001ee8:	00030d40 	.word	0x00030d40

08001eec <USB_CoreInit>:
{
 8001eec:	b084      	sub	sp, #16
 8001eee:	b510      	push	{r4, lr}
 8001ef0:	4604      	mov	r4, r0
 8001ef2:	a803      	add	r0, sp, #12
 8001ef4:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8001ef8:	9b08      	ldr	r3, [sp, #32]
 8001efa:	2b01      	cmp	r3, #1
 8001efc:	d00d      	beq.n	8001f1a <USB_CoreInit+0x2e>
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8001efe:	68e3      	ldr	r3, [r4, #12]
 8001f00:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001f04:	60e3      	str	r3, [r4, #12]
    ret = USB_CoreReset(USBx);
 8001f06:	4620      	mov	r0, r4
 8001f08:	f7ff ffd2 	bl	8001eb0 <USB_CoreReset>
    if (cfg.battery_charging_enable == 0U)
 8001f0c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8001f0e:	bb23      	cbnz	r3, 8001f5a <USB_CoreInit+0x6e>
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8001f10:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8001f12:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001f16:	63a3      	str	r3, [r4, #56]	; 0x38
 8001f18:	e013      	b.n	8001f42 <USB_CoreInit+0x56>
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8001f1a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8001f1c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001f20:	63a3      	str	r3, [r4, #56]	; 0x38
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8001f22:	68e3      	ldr	r3, [r4, #12]
 8001f24:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8001f28:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001f2c:	60e3      	str	r3, [r4, #12]
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8001f2e:	68e3      	ldr	r3, [r4, #12]
 8001f30:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8001f34:	60e3      	str	r3, [r4, #12]
    if (cfg.use_external_vbus == 1U)
 8001f36:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8001f38:	2b01      	cmp	r3, #1
 8001f3a:	d009      	beq.n	8001f50 <USB_CoreInit+0x64>
    ret = USB_CoreReset(USBx);
 8001f3c:	4620      	mov	r0, r4
 8001f3e:	f7ff ffb7 	bl	8001eb0 <USB_CoreReset>
  if (cfg.dma_enable == 1U)
 8001f42:	9b06      	ldr	r3, [sp, #24]
 8001f44:	2b01      	cmp	r3, #1
 8001f46:	d00d      	beq.n	8001f64 <USB_CoreInit+0x78>
}
 8001f48:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001f4c:	b004      	add	sp, #16
 8001f4e:	4770      	bx	lr
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8001f50:	68e3      	ldr	r3, [r4, #12]
 8001f52:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001f56:	60e3      	str	r3, [r4, #12]
 8001f58:	e7f0      	b.n	8001f3c <USB_CoreInit+0x50>
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8001f5a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8001f5c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001f60:	63a3      	str	r3, [r4, #56]	; 0x38
 8001f62:	e7ee      	b.n	8001f42 <USB_CoreInit+0x56>
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8001f64:	68a3      	ldr	r3, [r4, #8]
 8001f66:	f043 0306 	orr.w	r3, r3, #6
 8001f6a:	60a3      	str	r3, [r4, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8001f6c:	68a3      	ldr	r3, [r4, #8]
 8001f6e:	f043 0320 	orr.w	r3, r3, #32
 8001f72:	60a3      	str	r3, [r4, #8]
 8001f74:	e7e8      	b.n	8001f48 <USB_CoreInit+0x5c>

08001f76 <USB_DisableGlobalInt>:
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8001f76:	6883      	ldr	r3, [r0, #8]
 8001f78:	f023 0301 	bic.w	r3, r3, #1
 8001f7c:	6083      	str	r3, [r0, #8]
}
 8001f7e:	2000      	movs	r0, #0
 8001f80:	4770      	bx	lr

08001f82 <USB_SetCurrentMode>:
{
 8001f82:	b508      	push	{r3, lr}
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8001f84:	68c3      	ldr	r3, [r0, #12]
 8001f86:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8001f8a:	60c3      	str	r3, [r0, #12]
  if (mode == USB_HOST_MODE)
 8001f8c:	2901      	cmp	r1, #1
 8001f8e:	d009      	beq.n	8001fa4 <USB_SetCurrentMode+0x22>
  else if (mode == USB_DEVICE_MODE)
 8001f90:	b969      	cbnz	r1, 8001fae <USB_SetCurrentMode+0x2c>
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8001f92:	68c3      	ldr	r3, [r0, #12]
 8001f94:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8001f98:	60c3      	str	r3, [r0, #12]
  HAL_Delay(50U);
 8001f9a:	2032      	movs	r0, #50	; 0x32
 8001f9c:	f7fe fae4 	bl	8000568 <HAL_Delay>
  return HAL_OK;
 8001fa0:	2000      	movs	r0, #0
 8001fa2:	bd08      	pop	{r3, pc}
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8001fa4:	68c3      	ldr	r3, [r0, #12]
 8001fa6:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8001faa:	60c3      	str	r3, [r0, #12]
 8001fac:	e7f5      	b.n	8001f9a <USB_SetCurrentMode+0x18>
    return HAL_ERROR;
 8001fae:	2001      	movs	r0, #1
}
 8001fb0:	bd08      	pop	{r3, pc}
	...

08001fb4 <USB_FlushTxFifo>:
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8001fb4:	0189      	lsls	r1, r1, #6
 8001fb6:	f041 0120 	orr.w	r1, r1, #32
 8001fba:	6101      	str	r1, [r0, #16]
  uint32_t count = 0U;
 8001fbc:	2300      	movs	r3, #0
    if (++count > 200000U)
 8001fbe:	3301      	adds	r3, #1
 8001fc0:	4a05      	ldr	r2, [pc, #20]	; (8001fd8 <USB_FlushTxFifo+0x24>)
 8001fc2:	4293      	cmp	r3, r2
 8001fc4:	d805      	bhi.n	8001fd2 <USB_FlushTxFifo+0x1e>
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8001fc6:	6902      	ldr	r2, [r0, #16]
 8001fc8:	f012 0f20 	tst.w	r2, #32
 8001fcc:	d1f7      	bne.n	8001fbe <USB_FlushTxFifo+0xa>
  return HAL_OK;
 8001fce:	2000      	movs	r0, #0
 8001fd0:	4770      	bx	lr
      return HAL_TIMEOUT;
 8001fd2:	2003      	movs	r0, #3
}
 8001fd4:	4770      	bx	lr
 8001fd6:	bf00      	nop
 8001fd8:	00030d40 	.word	0x00030d40

08001fdc <USB_FlushRxFifo>:
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8001fdc:	2310      	movs	r3, #16
 8001fde:	6103      	str	r3, [r0, #16]
  uint32_t count = 0;
 8001fe0:	2300      	movs	r3, #0
    if (++count > 200000U)
 8001fe2:	3301      	adds	r3, #1
 8001fe4:	4a05      	ldr	r2, [pc, #20]	; (8001ffc <USB_FlushRxFifo+0x20>)
 8001fe6:	4293      	cmp	r3, r2
 8001fe8:	d805      	bhi.n	8001ff6 <USB_FlushRxFifo+0x1a>
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8001fea:	6902      	ldr	r2, [r0, #16]
 8001fec:	f012 0f10 	tst.w	r2, #16
 8001ff0:	d1f7      	bne.n	8001fe2 <USB_FlushRxFifo+0x6>
  return HAL_OK;
 8001ff2:	2000      	movs	r0, #0
 8001ff4:	4770      	bx	lr
      return HAL_TIMEOUT;
 8001ff6:	2003      	movs	r0, #3
}
 8001ff8:	4770      	bx	lr
 8001ffa:	bf00      	nop
 8001ffc:	00030d40 	.word	0x00030d40

08002000 <USB_SetDevSpeed>:
  USBx_DEVICE->DCFG |= speed;
 8002000:	f8d0 3800 	ldr.w	r3, [r0, #2048]	; 0x800
 8002004:	4319      	orrs	r1, r3
 8002006:	f8c0 1800 	str.w	r1, [r0, #2048]	; 0x800
}
 800200a:	2000      	movs	r0, #0
 800200c:	4770      	bx	lr
	...

08002010 <USB_DevInit>:
{
 8002010:	b084      	sub	sp, #16
 8002012:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002016:	4604      	mov	r4, r0
 8002018:	a807      	add	r0, sp, #28
 800201a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t USBx_BASE = (uint32_t)USBx;
 800201e:	4625      	mov	r5, r4
  for (i = 0U; i < 15U; i++)
 8002020:	2300      	movs	r3, #0
 8002022:	e006      	b.n	8002032 <USB_DevInit+0x22>
    USBx->DIEPTXF[i] = 0U;
 8002024:	f103 0240 	add.w	r2, r3, #64	; 0x40
 8002028:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 800202c:	2100      	movs	r1, #0
 800202e:	6051      	str	r1, [r2, #4]
  for (i = 0U; i < 15U; i++)
 8002030:	3301      	adds	r3, #1
 8002032:	2b0e      	cmp	r3, #14
 8002034:	d9f6      	bls.n	8002024 <USB_DevInit+0x14>
  if (cfg.vbus_sensing_enable == 0U)
 8002036:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8002038:	bb73      	cbnz	r3, 8002098 <USB_DevInit+0x88>
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 800203a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800203c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002040:	63a3      	str	r3, [r4, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8002042:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8002044:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 8002048:	63a3      	str	r3, [r4, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 800204a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800204c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002050:	63a3      	str	r3, [r4, #56]	; 0x38
  USBx_PCGCCTL = 0U;
 8002052:	2300      	movs	r3, #0
 8002054:	f8c4 3e00 	str.w	r3, [r4, #3584]	; 0xe00
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8002058:	f504 6600 	add.w	r6, r4, #2048	; 0x800
 800205c:	f8d4 3800 	ldr.w	r3, [r4, #2048]	; 0x800
 8002060:	f8c4 3800 	str.w	r3, [r4, #2048]	; 0x800
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8002064:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8002066:	2b01      	cmp	r3, #1
 8002068:	d01f      	beq.n	80020aa <USB_DevInit+0x9a>
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800206a:	2103      	movs	r1, #3
 800206c:	4620      	mov	r0, r4
 800206e:	f7ff ffc7 	bl	8002000 <USB_SetDevSpeed>
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8002072:	2110      	movs	r1, #16
 8002074:	4620      	mov	r0, r4
 8002076:	f7ff ff9d 	bl	8001fb4 <USB_FlushTxFifo>
 800207a:	4680      	mov	r8, r0
 800207c:	b108      	cbz	r0, 8002082 <USB_DevInit+0x72>
    ret = HAL_ERROR;
 800207e:	f04f 0801 	mov.w	r8, #1
  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8002082:	4620      	mov	r0, r4
 8002084:	f7ff ffaa 	bl	8001fdc <USB_FlushRxFifo>
 8002088:	b108      	cbz	r0, 800208e <USB_DevInit+0x7e>
    ret = HAL_ERROR;
 800208a:	f04f 0801 	mov.w	r8, #1
  USBx_DEVICE->DIEPMSK = 0U;
 800208e:	2300      	movs	r3, #0
 8002090:	6133      	str	r3, [r6, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8002092:	6173      	str	r3, [r6, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8002094:	61f3      	str	r3, [r6, #28]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8002096:	e01f      	b.n	80020d8 <USB_DevInit+0xc8>
    USBx->GOTGCTL &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8002098:	6823      	ldr	r3, [r4, #0]
 800209a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800209e:	6023      	str	r3, [r4, #0]
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 80020a0:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80020a2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80020a6:	63a3      	str	r3, [r4, #56]	; 0x38
 80020a8:	e7d3      	b.n	8002052 <USB_DevInit+0x42>
    if (cfg.speed == USBD_HS_SPEED)
 80020aa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80020ac:	b923      	cbnz	r3, 80020b8 <USB_DevInit+0xa8>
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80020ae:	2100      	movs	r1, #0
 80020b0:	4620      	mov	r0, r4
 80020b2:	f7ff ffa5 	bl	8002000 <USB_SetDevSpeed>
 80020b6:	e7dc      	b.n	8002072 <USB_DevInit+0x62>
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80020b8:	2101      	movs	r1, #1
 80020ba:	4620      	mov	r0, r4
 80020bc:	f7ff ffa0 	bl	8002000 <USB_SetDevSpeed>
 80020c0:	e7d7      	b.n	8002072 <USB_DevInit+0x62>
      if (i == 0U)
 80020c2:	b9c3      	cbnz	r3, 80020f6 <USB_DevInit+0xe6>
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80020c4:	f04f 6000 	mov.w	r0, #134217728	; 0x8000000
 80020c8:	f8c2 0900 	str.w	r0, [r2, #2304]	; 0x900
    USBx_INEP(i)->DIEPTSIZ = 0U;
 80020cc:	2200      	movs	r2, #0
 80020ce:	610a      	str	r2, [r1, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80020d0:	f64f 327f 	movw	r2, #64383	; 0xfb7f
 80020d4:	608a      	str	r2, [r1, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80020d6:	3301      	adds	r3, #1
 80020d8:	9907      	ldr	r1, [sp, #28]
 80020da:	428b      	cmp	r3, r1
 80020dc:	d210      	bcs.n	8002100 <USB_DevInit+0xf0>
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80020de:	eb05 1243 	add.w	r2, r5, r3, lsl #5
 80020e2:	f502 6110 	add.w	r1, r2, #2304	; 0x900
 80020e6:	f8d2 0900 	ldr.w	r0, [r2, #2304]	; 0x900
 80020ea:	2800      	cmp	r0, #0
 80020ec:	dbe9      	blt.n	80020c2 <USB_DevInit+0xb2>
      USBx_INEP(i)->DIEPCTL = 0U;
 80020ee:	2000      	movs	r0, #0
 80020f0:	f8c2 0900 	str.w	r0, [r2, #2304]	; 0x900
 80020f4:	e7ea      	b.n	80020cc <USB_DevInit+0xbc>
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80020f6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80020fa:	f8c2 0900 	str.w	r0, [r2, #2304]	; 0x900
 80020fe:	e7e5      	b.n	80020cc <USB_DevInit+0xbc>
 8002100:	2300      	movs	r3, #0
 8002102:	e00a      	b.n	800211a <USB_DevInit+0x10a>
      if (i == 0U)
 8002104:	b1bb      	cbz	r3, 8002136 <USB_DevInit+0x126>
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8002106:	f04f 4790 	mov.w	r7, #1207959552	; 0x48000000
 800210a:	f8c2 7b00 	str.w	r7, [r2, #2816]	; 0xb00
    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800210e:	2200      	movs	r2, #0
 8002110:	6102      	str	r2, [r0, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8002112:	f64f 327f 	movw	r2, #64383	; 0xfb7f
 8002116:	6082      	str	r2, [r0, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8002118:	3301      	adds	r3, #1
 800211a:	428b      	cmp	r3, r1
 800211c:	d210      	bcs.n	8002140 <USB_DevInit+0x130>
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800211e:	eb05 1243 	add.w	r2, r5, r3, lsl #5
 8002122:	f502 6030 	add.w	r0, r2, #2816	; 0xb00
 8002126:	f8d2 7b00 	ldr.w	r7, [r2, #2816]	; 0xb00
 800212a:	2f00      	cmp	r7, #0
 800212c:	dbea      	blt.n	8002104 <USB_DevInit+0xf4>
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800212e:	2700      	movs	r7, #0
 8002130:	f8c2 7b00 	str.w	r7, [r2, #2816]	; 0xb00
 8002134:	e7eb      	b.n	800210e <USB_DevInit+0xfe>
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8002136:	f04f 6700 	mov.w	r7, #134217728	; 0x8000000
 800213a:	f8c2 7b00 	str.w	r7, [r2, #2816]	; 0xb00
 800213e:	e7e6      	b.n	800210e <USB_DevInit+0xfe>
  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8002140:	6933      	ldr	r3, [r6, #16]
 8002142:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002146:	6133      	str	r3, [r6, #16]
  if (cfg.dma_enable == 1U)
 8002148:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800214a:	2b01      	cmp	r3, #1
 800214c:	d01b      	beq.n	8002186 <USB_DevInit+0x176>
  USBx->GINTMSK = 0U;
 800214e:	2200      	movs	r2, #0
 8002150:	61a2      	str	r2, [r4, #24]
  USBx->GINTSTS = 0xBFFFFFFFU;
 8002152:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8002156:	6162      	str	r2, [r4, #20]
  if (cfg.dma_enable == 0U)
 8002158:	b91b      	cbnz	r3, 8002162 <USB_DevInit+0x152>
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800215a:	69a3      	ldr	r3, [r4, #24]
 800215c:	f043 0310 	orr.w	r3, r3, #16
 8002160:	61a3      	str	r3, [r4, #24]
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8002162:	69a2      	ldr	r2, [r4, #24]
 8002164:	4b10      	ldr	r3, [pc, #64]	; (80021a8 <USB_DevInit+0x198>)
 8002166:	4313      	orrs	r3, r2
 8002168:	61a3      	str	r3, [r4, #24]
  if (cfg.Sof_enable != 0U)
 800216a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800216c:	b11b      	cbz	r3, 8002176 <USB_DevInit+0x166>
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800216e:	69a3      	ldr	r3, [r4, #24]
 8002170:	f043 0308 	orr.w	r3, r3, #8
 8002174:	61a3      	str	r3, [r4, #24]
  if (cfg.vbus_sensing_enable == 1U)
 8002176:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8002178:	2b01      	cmp	r3, #1
 800217a:	d00d      	beq.n	8002198 <USB_DevInit+0x188>
}
 800217c:	4640      	mov	r0, r8
 800217e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8002182:	b004      	add	sp, #16
 8002184:	4770      	bx	lr
    USBx_DEVICE->DTHRCTL = USB_OTG_DTHRCTL_TXTHRLEN_6 |
 8002186:	4a09      	ldr	r2, [pc, #36]	; (80021ac <USB_DevInit+0x19c>)
 8002188:	6332      	str	r2, [r6, #48]	; 0x30
    USBx_DEVICE->DTHRCTL |= USB_OTG_DTHRCTL_RXTHREN |
 800218a:	6b32      	ldr	r2, [r6, #48]	; 0x30
 800218c:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8002190:	f042 0203 	orr.w	r2, r2, #3
 8002194:	6332      	str	r2, [r6, #48]	; 0x30
 8002196:	e7da      	b.n	800214e <USB_DevInit+0x13e>
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8002198:	69a3      	ldr	r3, [r4, #24]
 800219a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800219e:	f043 0304 	orr.w	r3, r3, #4
 80021a2:	61a3      	str	r3, [r4, #24]
 80021a4:	e7ea      	b.n	800217c <USB_DevInit+0x16c>
 80021a6:	bf00      	nop
 80021a8:	803c3800 	.word	0x803c3800
 80021ac:	00800100 	.word	0x00800100

080021b0 <USB_DevDisconnect>:
{
 80021b0:	b508      	push	{r3, lr}
  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80021b2:	f8d0 3804 	ldr.w	r3, [r0, #2052]	; 0x804
 80021b6:	f043 0302 	orr.w	r3, r3, #2
 80021ba:	f8c0 3804 	str.w	r3, [r0, #2052]	; 0x804
  HAL_Delay(3U);
 80021be:	2003      	movs	r0, #3
 80021c0:	f7fe f9d2 	bl	8000568 <HAL_Delay>
}
 80021c4:	2000      	movs	r0, #0
 80021c6:	bd08      	pop	{r3, pc}

080021c8 <makeFreeRtosPriority>:
/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
  
  if (priority != osPriorityError) {
 80021c8:	2884      	cmp	r0, #132	; 0x84
 80021ca:	d001      	beq.n	80021d0 <makeFreeRtosPriority+0x8>
    fpriority += (priority - osPriorityIdle);
 80021cc:	3003      	adds	r0, #3
 80021ce:	4770      	bx	lr
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 80021d0:	2000      	movs	r0, #0
  }
  
  return fpriority;
}
 80021d2:	4770      	bx	lr

080021d4 <inHandlerMode>:
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80021d4:	f3ef 8005 	mrs	r0, IPSR

/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
  return __get_IPSR() != 0;
}
 80021d8:	3000      	adds	r0, #0
 80021da:	bf18      	it	ne
 80021dc:	2001      	movne	r0, #1
 80021de:	4770      	bx	lr

080021e0 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 80021e0:	b508      	push	{r3, lr}
  vTaskStartScheduler();
 80021e2:	f001 fc23 	bl	8003a2c <vTaskStartScheduler>
  
  return osOK;
}
 80021e6:	2000      	movs	r0, #0
 80021e8:	bd08      	pop	{r3, pc}

080021ea <osKernelSysTick>:
* @param  None
* @retval None
* @note   MUST REMAIN UNCHANGED: \b osKernelSysTick shall be consistent in every CMSIS-RTOS.
*/
uint32_t osKernelSysTick(void)
{
 80021ea:	b508      	push	{r3, lr}
  if (inHandlerMode()) {
 80021ec:	f7ff fff2 	bl	80021d4 <inHandlerMode>
 80021f0:	b910      	cbnz	r0, 80021f8 <osKernelSysTick+0xe>
    return xTaskGetTickCountFromISR();
  }
  else {
    return xTaskGetTickCount();
 80021f2:	f001 fc5f 	bl	8003ab4 <xTaskGetTickCount>
  }
}
 80021f6:	bd08      	pop	{r3, pc}
    return xTaskGetTickCountFromISR();
 80021f8:	f001 fc62 	bl	8003ac0 <xTaskGetTickCountFromISR>
 80021fc:	bd08      	pop	{r3, pc}

080021fe <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 80021fe:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8002202:	b087      	sub	sp, #28
 8002204:	4604      	mov	r4, r0
 8002206:	460f      	mov	r7, r1
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8002208:	6945      	ldr	r5, [r0, #20]
 800220a:	b1bd      	cbz	r5, 800223c <osThreadCreate+0x3e>
 800220c:	6986      	ldr	r6, [r0, #24]
 800220e:	b1ae      	cbz	r6, 800223c <osThreadCreate+0x3e>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8002210:	f8d0 8004 	ldr.w	r8, [r0, #4]
 8002214:	f8d0 9000 	ldr.w	r9, [r0]
 8002218:	f9b0 0008 	ldrsh.w	r0, [r0, #8]
 800221c:	f7ff ffd4 	bl	80021c8 <makeFreeRtosPriority>
 8002220:	6922      	ldr	r2, [r4, #16]
 8002222:	9602      	str	r6, [sp, #8]
 8002224:	9501      	str	r5, [sp, #4]
 8002226:	9000      	str	r0, [sp, #0]
 8002228:	463b      	mov	r3, r7
 800222a:	4649      	mov	r1, r9
 800222c:	4640      	mov	r0, r8
 800222e:	f001 fb91 	bl	8003954 <xTaskCreateStatic>
 8002232:	9005      	str	r0, [sp, #20]
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8002234:	9805      	ldr	r0, [sp, #20]
}
 8002236:	b007      	add	sp, #28
 8002238:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800223c:	6865      	ldr	r5, [r4, #4]
 800223e:	6826      	ldr	r6, [r4, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8002240:	f8d4 8010 	ldr.w	r8, [r4, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8002244:	f9b4 0008 	ldrsh.w	r0, [r4, #8]
 8002248:	f7ff ffbe 	bl	80021c8 <makeFreeRtosPriority>
 800224c:	ab05      	add	r3, sp, #20
 800224e:	9301      	str	r3, [sp, #4]
 8002250:	9000      	str	r0, [sp, #0]
 8002252:	463b      	mov	r3, r7
 8002254:	fa1f f288 	uxth.w	r2, r8
 8002258:	4631      	mov	r1, r6
 800225a:	4628      	mov	r0, r5
 800225c:	f001 fbb3 	bl	80039c6 <xTaskCreate>
 8002260:	2801      	cmp	r0, #1
 8002262:	d0e7      	beq.n	8002234 <osThreadCreate+0x36>
      return NULL;
 8002264:	2000      	movs	r0, #0
 8002266:	e7e6      	b.n	8002236 <osThreadCreate+0x38>

08002268 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8002268:	b508      	push	{r3, lr}
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800226a:	4603      	mov	r3, r0
 800226c:	b900      	cbnz	r0, 8002270 <osDelay+0x8>
 800226e:	2301      	movs	r3, #1
 8002270:	4618      	mov	r0, r3
 8002272:	f001 fd0f 	bl	8003c94 <vTaskDelay>
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8002276:	2000      	movs	r0, #0
 8002278:	bd08      	pop	{r3, pc}

0800227a <osMutexCreate>:
* @param  mutex_def     mutex definition referenced with \ref osMutex.
* @retval  mutex ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMutexCreate shall be consistent in every CMSIS-RTOS.
*/
osMutexId osMutexCreate (const osMutexDef_t *mutex_def)
{
 800227a:	b508      	push	{r3, lr}
#if ( configUSE_MUTEXES == 1)

#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if (mutex_def->controlblock != NULL) {
 800227c:	6841      	ldr	r1, [r0, #4]
 800227e:	b119      	cbz	r1, 8002288 <osMutexCreate+0xe>
    return xSemaphoreCreateMutexStatic( mutex_def->controlblock );
 8002280:	2001      	movs	r0, #1
 8002282:	f000 ff04 	bl	800308e <xQueueCreateMutexStatic>
 8002286:	bd08      	pop	{r3, pc}
     }
  else {
    return xSemaphoreCreateMutex(); 
 8002288:	2001      	movs	r0, #1
 800228a:	f000 fef5 	bl	8003078 <xQueueCreateMutex>
    return xSemaphoreCreateMutex(); 
#endif
#else
  return NULL;
#endif
}
 800228e:	bd08      	pop	{r3, pc}

08002290 <osMutexWait>:
* @param millisec      timeout value or 0 in case of no time-out.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexWait shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexWait (osMutexId mutex_id, uint32_t millisec)
{
 8002290:	b530      	push	{r4, r5, lr}
 8002292:	b083      	sub	sp, #12
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 8002294:	2300      	movs	r3, #0
 8002296:	9301      	str	r3, [sp, #4]
  
  
  if (mutex_id == NULL) {
 8002298:	b350      	cbz	r0, 80022f0 <osMutexWait+0x60>
 800229a:	460c      	mov	r4, r1
 800229c:	4605      	mov	r5, r0
    return osErrorParameter;
  }
  
  ticks = 0;
  if (millisec == osWaitForever) {
 800229e:	f1b1 3fff 	cmp.w	r1, #4294967295	; 0xffffffff
 80022a2:	d00d      	beq.n	80022c0 <osMutexWait+0x30>
    ticks = portMAX_DELAY;
  }
  else if (millisec != 0) {
 80022a4:	b901      	cbnz	r1, 80022a8 <osMutexWait+0x18>
  ticks = 0;
 80022a6:	461c      	mov	r4, r3
    if (ticks == 0) {
      ticks = 1;
    }
  }
  
  if (inHandlerMode()) {
 80022a8:	f7ff ff94 	bl	80021d4 <inHandlerMode>
 80022ac:	b1b8      	cbz	r0, 80022de <osMutexWait+0x4e>
    if (xSemaphoreTakeFromISR(mutex_id, &taskWoken) != pdTRUE) {
 80022ae:	aa01      	add	r2, sp, #4
 80022b0:	2100      	movs	r1, #0
 80022b2:	4628      	mov	r0, r5
 80022b4:	f001 f936 	bl	8003524 <xQueueReceiveFromISR>
 80022b8:	2801      	cmp	r0, #1
 80022ba:	d004      	beq.n	80022c6 <osMutexWait+0x36>
      return osErrorOS;
 80022bc:	20ff      	movs	r0, #255	; 0xff
 80022be:	e015      	b.n	80022ec <osMutexWait+0x5c>
    ticks = portMAX_DELAY;
 80022c0:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 80022c4:	e7f0      	b.n	80022a8 <osMutexWait+0x18>
    }
	portEND_SWITCHING_ISR(taskWoken);
 80022c6:	9b01      	ldr	r3, [sp, #4]
 80022c8:	b1a3      	cbz	r3, 80022f4 <osMutexWait+0x64>
 80022ca:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80022ce:	4b0b      	ldr	r3, [pc, #44]	; (80022fc <osMutexWait+0x6c>)
 80022d0:	601a      	str	r2, [r3, #0]
 80022d2:	f3bf 8f4f 	dsb	sy
 80022d6:	f3bf 8f6f 	isb	sy
  } 
  else if (xSemaphoreTake(mutex_id, ticks) != pdTRUE) {
    return osErrorOS;
  }
  
  return osOK;
 80022da:	2000      	movs	r0, #0
 80022dc:	e006      	b.n	80022ec <osMutexWait+0x5c>
  else if (xSemaphoreTake(mutex_id, ticks) != pdTRUE) {
 80022de:	4621      	mov	r1, r4
 80022e0:	4628      	mov	r0, r5
 80022e2:	f001 f857 	bl	8003394 <xQueueSemaphoreTake>
 80022e6:	2801      	cmp	r0, #1
 80022e8:	d006      	beq.n	80022f8 <osMutexWait+0x68>
    return osErrorOS;
 80022ea:	20ff      	movs	r0, #255	; 0xff
}
 80022ec:	b003      	add	sp, #12
 80022ee:	bd30      	pop	{r4, r5, pc}
    return osErrorParameter;
 80022f0:	2080      	movs	r0, #128	; 0x80
 80022f2:	e7fb      	b.n	80022ec <osMutexWait+0x5c>
  return osOK;
 80022f4:	2000      	movs	r0, #0
 80022f6:	e7f9      	b.n	80022ec <osMutexWait+0x5c>
 80022f8:	2000      	movs	r0, #0
 80022fa:	e7f7      	b.n	80022ec <osMutexWait+0x5c>
 80022fc:	e000ed04 	.word	0xe000ed04

08002300 <osMutexRelease>:
* @param mutex_id      mutex ID obtained by \ref osMutexCreate.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexRelease (osMutexId mutex_id)
{
 8002300:	b510      	push	{r4, lr}
 8002302:	b082      	sub	sp, #8
 8002304:	4604      	mov	r4, r0
  osStatus result = osOK;
  portBASE_TYPE taskWoken = pdFALSE;
 8002306:	2300      	movs	r3, #0
 8002308:	9301      	str	r3, [sp, #4]
  
  if (inHandlerMode()) {
 800230a:	f7ff ff63 	bl	80021d4 <inHandlerMode>
 800230e:	b1a0      	cbz	r0, 800233a <osMutexRelease+0x3a>
    if (xSemaphoreGiveFromISR(mutex_id, &taskWoken) != pdTRUE) {
 8002310:	a901      	add	r1, sp, #4
 8002312:	4620      	mov	r0, r4
 8002314:	f000 ff39 	bl	800318a <xQueueGiveFromISR>
 8002318:	2801      	cmp	r0, #1
 800231a:	d002      	beq.n	8002322 <osMutexRelease+0x22>
      return osErrorOS;
 800231c:	20ff      	movs	r0, #255	; 0xff
  else if (xSemaphoreGive(mutex_id) != pdTRUE) 
  {
    result = osErrorOS;
  }
  return result;
}
 800231e:	b002      	add	sp, #8
 8002320:	bd10      	pop	{r4, pc}
    portEND_SWITCHING_ISR(taskWoken);
 8002322:	9b01      	ldr	r3, [sp, #4]
 8002324:	b1ab      	cbz	r3, 8002352 <osMutexRelease+0x52>
 8002326:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800232a:	4b0b      	ldr	r3, [pc, #44]	; (8002358 <osMutexRelease+0x58>)
 800232c:	601a      	str	r2, [r3, #0]
 800232e:	f3bf 8f4f 	dsb	sy
 8002332:	f3bf 8f6f 	isb	sy
  osStatus result = osOK;
 8002336:	2000      	movs	r0, #0
 8002338:	e7f1      	b.n	800231e <osMutexRelease+0x1e>
  else if (xSemaphoreGive(mutex_id) != pdTRUE) 
 800233a:	2300      	movs	r3, #0
 800233c:	461a      	mov	r2, r3
 800233e:	4619      	mov	r1, r3
 8002340:	4620      	mov	r0, r4
 8002342:	f000 fddd 	bl	8002f00 <xQueueGenericSend>
 8002346:	2801      	cmp	r0, #1
 8002348:	d001      	beq.n	800234e <osMutexRelease+0x4e>
    result = osErrorOS;
 800234a:	20ff      	movs	r0, #255	; 0xff
 800234c:	e7e7      	b.n	800231e <osMutexRelease+0x1e>
  osStatus result = osOK;
 800234e:	2000      	movs	r0, #0
 8002350:	e7e5      	b.n	800231e <osMutexRelease+0x1e>
 8002352:	2000      	movs	r0, #0
 8002354:	e7e3      	b.n	800231e <osMutexRelease+0x1e>
 8002356:	bf00      	nop
 8002358:	e000ed04 	.word	0xe000ed04

0800235c <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{ 
 800235c:	b510      	push	{r4, lr}
 800235e:	b082      	sub	sp, #8
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  osSemaphoreId sema;
  
  if (semaphore_def->controlblock != NULL){
 8002360:	6843      	ldr	r3, [r0, #4]
 8002362:	b163      	cbz	r3, 800237e <osSemaphoreCreate+0x22>
    if (count == 1) {
 8002364:	2901      	cmp	r1, #1
 8002366:	d11a      	bne.n	800239e <osSemaphoreCreate+0x42>
      return xSemaphoreCreateBinaryStatic( semaphore_def->controlblock );
 8002368:	2203      	movs	r2, #3
 800236a:	9200      	str	r2, [sp, #0]
 800236c:	2200      	movs	r2, #0
 800236e:	4611      	mov	r1, r2
 8002370:	2001      	movs	r0, #1
 8002372:	f000 fd4d 	bl	8002e10 <xQueueGenericCreateStatic>
 8002376:	4604      	mov	r4, r0
#else
    return NULL;
#endif
  }
#endif
}
 8002378:	4620      	mov	r0, r4
 800237a:	b002      	add	sp, #8
 800237c:	bd10      	pop	{r4, pc}
    if (count == 1) {
 800237e:	2901      	cmp	r1, #1
 8002380:	d10f      	bne.n	80023a2 <osSemaphoreCreate+0x46>
      vSemaphoreCreateBinary(sema);
 8002382:	2203      	movs	r2, #3
 8002384:	2100      	movs	r1, #0
 8002386:	2001      	movs	r0, #1
 8002388:	f000 fd92 	bl	8002eb0 <xQueueGenericCreate>
 800238c:	4604      	mov	r4, r0
 800238e:	2800      	cmp	r0, #0
 8002390:	d0f2      	beq.n	8002378 <osSemaphoreCreate+0x1c>
 8002392:	2300      	movs	r3, #0
 8002394:	461a      	mov	r2, r3
 8002396:	4619      	mov	r1, r3
 8002398:	f000 fdb2 	bl	8002f00 <xQueueGenericSend>
 800239c:	e7ec      	b.n	8002378 <osSemaphoreCreate+0x1c>
      return NULL;
 800239e:	2400      	movs	r4, #0
 80023a0:	e7ea      	b.n	8002378 <osSemaphoreCreate+0x1c>
      return NULL;
 80023a2:	2400      	movs	r4, #0
 80023a4:	e7e8      	b.n	8002378 <osSemaphoreCreate+0x1c>
	...

080023a8 <osSemaphoreWait>:
* @param  millisec      timeout value or 0 in case of no time-out.
* @retval  number of available tokens, or -1 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreWait shall be consistent in every CMSIS-RTOS.
*/
int32_t osSemaphoreWait (osSemaphoreId semaphore_id, uint32_t millisec)
{
 80023a8:	b530      	push	{r4, r5, lr}
 80023aa:	b083      	sub	sp, #12
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 80023ac:	2300      	movs	r3, #0
 80023ae:	9301      	str	r3, [sp, #4]
  
  
  if (semaphore_id == NULL) {
 80023b0:	b350      	cbz	r0, 8002408 <osSemaphoreWait+0x60>
 80023b2:	460c      	mov	r4, r1
 80023b4:	4605      	mov	r5, r0
    return osErrorParameter;
  }
  
  ticks = 0;
  if (millisec == osWaitForever) {
 80023b6:	f1b1 3fff 	cmp.w	r1, #4294967295	; 0xffffffff
 80023ba:	d00d      	beq.n	80023d8 <osSemaphoreWait+0x30>
    ticks = portMAX_DELAY;
  }
  else if (millisec != 0) {
 80023bc:	b901      	cbnz	r1, 80023c0 <osSemaphoreWait+0x18>
  ticks = 0;
 80023be:	461c      	mov	r4, r3
    if (ticks == 0) {
      ticks = 1;
    }
  }
  
  if (inHandlerMode()) {
 80023c0:	f7ff ff08 	bl	80021d4 <inHandlerMode>
 80023c4:	b1b8      	cbz	r0, 80023f6 <osSemaphoreWait+0x4e>
    if (xSemaphoreTakeFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 80023c6:	aa01      	add	r2, sp, #4
 80023c8:	2100      	movs	r1, #0
 80023ca:	4628      	mov	r0, r5
 80023cc:	f001 f8aa 	bl	8003524 <xQueueReceiveFromISR>
 80023d0:	2801      	cmp	r0, #1
 80023d2:	d004      	beq.n	80023de <osSemaphoreWait+0x36>
      return osErrorOS;
 80023d4:	20ff      	movs	r0, #255	; 0xff
 80023d6:	e015      	b.n	8002404 <osSemaphoreWait+0x5c>
    ticks = portMAX_DELAY;
 80023d8:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 80023dc:	e7f0      	b.n	80023c0 <osSemaphoreWait+0x18>
    }
	portEND_SWITCHING_ISR(taskWoken);
 80023de:	9b01      	ldr	r3, [sp, #4]
 80023e0:	b1a3      	cbz	r3, 800240c <osSemaphoreWait+0x64>
 80023e2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80023e6:	4b0b      	ldr	r3, [pc, #44]	; (8002414 <osSemaphoreWait+0x6c>)
 80023e8:	601a      	str	r2, [r3, #0]
 80023ea:	f3bf 8f4f 	dsb	sy
 80023ee:	f3bf 8f6f 	isb	sy
  }  
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
    return osErrorOS;
  }
  
  return osOK;
 80023f2:	2000      	movs	r0, #0
 80023f4:	e006      	b.n	8002404 <osSemaphoreWait+0x5c>
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
 80023f6:	4621      	mov	r1, r4
 80023f8:	4628      	mov	r0, r5
 80023fa:	f000 ffcb 	bl	8003394 <xQueueSemaphoreTake>
 80023fe:	2801      	cmp	r0, #1
 8002400:	d006      	beq.n	8002410 <osSemaphoreWait+0x68>
    return osErrorOS;
 8002402:	20ff      	movs	r0, #255	; 0xff
}
 8002404:	b003      	add	sp, #12
 8002406:	bd30      	pop	{r4, r5, pc}
    return osErrorParameter;
 8002408:	2080      	movs	r0, #128	; 0x80
 800240a:	e7fb      	b.n	8002404 <osSemaphoreWait+0x5c>
  return osOK;
 800240c:	2000      	movs	r0, #0
 800240e:	e7f9      	b.n	8002404 <osSemaphoreWait+0x5c>
 8002410:	2000      	movs	r0, #0
 8002412:	e7f7      	b.n	8002404 <osSemaphoreWait+0x5c>
 8002414:	e000ed04 	.word	0xe000ed04

08002418 <osSemaphoreRelease>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreRelease (osSemaphoreId semaphore_id)
{
 8002418:	b510      	push	{r4, lr}
 800241a:	b082      	sub	sp, #8
 800241c:	4604      	mov	r4, r0
  osStatus result = osOK;
  portBASE_TYPE taskWoken = pdFALSE;
 800241e:	2300      	movs	r3, #0
 8002420:	9301      	str	r3, [sp, #4]
  
  
  if (inHandlerMode()) {
 8002422:	f7ff fed7 	bl	80021d4 <inHandlerMode>
 8002426:	b1a0      	cbz	r0, 8002452 <osSemaphoreRelease+0x3a>
    if (xSemaphoreGiveFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 8002428:	a901      	add	r1, sp, #4
 800242a:	4620      	mov	r0, r4
 800242c:	f000 fead 	bl	800318a <xQueueGiveFromISR>
 8002430:	2801      	cmp	r0, #1
 8002432:	d002      	beq.n	800243a <osSemaphoreRelease+0x22>
      return osErrorOS;
 8002434:	20ff      	movs	r0, #255	; 0xff
      result = osErrorOS;
    }
  }
  
  return result;
}
 8002436:	b002      	add	sp, #8
 8002438:	bd10      	pop	{r4, pc}
    portEND_SWITCHING_ISR(taskWoken);
 800243a:	9b01      	ldr	r3, [sp, #4]
 800243c:	b1ab      	cbz	r3, 800246a <osSemaphoreRelease+0x52>
 800243e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002442:	4b0b      	ldr	r3, [pc, #44]	; (8002470 <osSemaphoreRelease+0x58>)
 8002444:	601a      	str	r2, [r3, #0]
 8002446:	f3bf 8f4f 	dsb	sy
 800244a:	f3bf 8f6f 	isb	sy
  osStatus result = osOK;
 800244e:	2000      	movs	r0, #0
 8002450:	e7f1      	b.n	8002436 <osSemaphoreRelease+0x1e>
    if (xSemaphoreGive(semaphore_id) != pdTRUE) {
 8002452:	2300      	movs	r3, #0
 8002454:	461a      	mov	r2, r3
 8002456:	4619      	mov	r1, r3
 8002458:	4620      	mov	r0, r4
 800245a:	f000 fd51 	bl	8002f00 <xQueueGenericSend>
 800245e:	2801      	cmp	r0, #1
 8002460:	d001      	beq.n	8002466 <osSemaphoreRelease+0x4e>
      result = osErrorOS;
 8002462:	20ff      	movs	r0, #255	; 0xff
 8002464:	e7e7      	b.n	8002436 <osSemaphoreRelease+0x1e>
  osStatus result = osOK;
 8002466:	2000      	movs	r0, #0
 8002468:	e7e5      	b.n	8002436 <osSemaphoreRelease+0x1e>
 800246a:	2000      	movs	r0, #0
 800246c:	e7e3      	b.n	8002436 <osSemaphoreRelease+0x1e>
 800246e:	bf00      	nop
 8002470:	e000ed04 	.word	0xe000ed04

08002474 <osSemaphoreDelete>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreDelete shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreDelete (osSemaphoreId semaphore_id)
{
 8002474:	b510      	push	{r4, lr}
 8002476:	4604      	mov	r4, r0
  if (inHandlerMode()) {
 8002478:	f7ff feac 	bl	80021d4 <inHandlerMode>
 800247c:	b108      	cbz	r0, 8002482 <osSemaphoreDelete+0xe>
    return osErrorISR;
 800247e:	2082      	movs	r0, #130	; 0x82
  }

  vSemaphoreDelete(semaphore_id);

  return osOK; 
}
 8002480:	bd10      	pop	{r4, pc}
  vSemaphoreDelete(semaphore_id);
 8002482:	4620      	mov	r0, r4
 8002484:	f001 f8de 	bl	8003644 <vQueueDelete>
  return osOK; 
 8002488:	2000      	movs	r0, #0
 800248a:	bd10      	pop	{r4, pc}

0800248c <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 800248c:	b510      	push	{r4, lr}
 800248e:	b082      	sub	sp, #8
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 8002490:	6882      	ldr	r2, [r0, #8]
 8002492:	b14a      	cbz	r2, 80024a8 <osMessageCreate+0x1c>
 8002494:	68c3      	ldr	r3, [r0, #12]
 8002496:	b13b      	cbz	r3, 80024a8 <osMessageCreate+0x1c>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 8002498:	6841      	ldr	r1, [r0, #4]
 800249a:	6800      	ldr	r0, [r0, #0]
 800249c:	2400      	movs	r4, #0
 800249e:	9400      	str	r4, [sp, #0]
 80024a0:	f000 fcb6 	bl	8002e10 <xQueueGenericCreateStatic>
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 80024a4:	b002      	add	sp, #8
 80024a6:	bd10      	pop	{r4, pc}
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 80024a8:	2200      	movs	r2, #0
 80024aa:	6841      	ldr	r1, [r0, #4]
 80024ac:	6800      	ldr	r0, [r0, #0]
 80024ae:	f000 fcff 	bl	8002eb0 <xQueueGenericCreate>
 80024b2:	e7f7      	b.n	80024a4 <osMessageCreate+0x18>

080024b4 <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 80024b4:	b530      	push	{r4, r5, lr}
 80024b6:	b085      	sub	sp, #20
 80024b8:	4604      	mov	r4, r0
 80024ba:	9101      	str	r1, [sp, #4]
  portBASE_TYPE taskWoken = pdFALSE;
 80024bc:	2300      	movs	r3, #0
 80024be:	9303      	str	r3, [sp, #12]
  TickType_t ticks;
  
  ticks = millisec / portTICK_PERIOD_MS;
  if (ticks == 0) {
 80024c0:	4615      	mov	r5, r2
 80024c2:	b902      	cbnz	r2, 80024c6 <osMessagePut+0x12>
    ticks = 1;
 80024c4:	2501      	movs	r5, #1
  }
  
  if (inHandlerMode()) {
 80024c6:	f7ff fe85 	bl	80021d4 <inHandlerMode>
 80024ca:	b1a8      	cbz	r0, 80024f8 <osMessagePut+0x44>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 80024cc:	2300      	movs	r3, #0
 80024ce:	aa03      	add	r2, sp, #12
 80024d0:	a901      	add	r1, sp, #4
 80024d2:	4620      	mov	r0, r4
 80024d4:	f000 fdea 	bl	80030ac <xQueueGenericSendFromISR>
 80024d8:	2801      	cmp	r0, #1
 80024da:	d001      	beq.n	80024e0 <osMessagePut+0x2c>
      return osErrorOS;
 80024dc:	20ff      	movs	r0, #255	; 0xff
 80024de:	e014      	b.n	800250a <osMessagePut+0x56>
    }
    portEND_SWITCHING_ISR(taskWoken);
 80024e0:	9b03      	ldr	r3, [sp, #12]
 80024e2:	b1a3      	cbz	r3, 800250e <osMessagePut+0x5a>
 80024e4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80024e8:	4b0b      	ldr	r3, [pc, #44]	; (8002518 <osMessagePut+0x64>)
 80024ea:	601a      	str	r2, [r3, #0]
 80024ec:	f3bf 8f4f 	dsb	sy
 80024f0:	f3bf 8f6f 	isb	sy
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
      return osErrorOS;
    }
  }
  
  return osOK;
 80024f4:	2000      	movs	r0, #0
 80024f6:	e008      	b.n	800250a <osMessagePut+0x56>
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 80024f8:	2300      	movs	r3, #0
 80024fa:	462a      	mov	r2, r5
 80024fc:	a901      	add	r1, sp, #4
 80024fe:	4620      	mov	r0, r4
 8002500:	f000 fcfe 	bl	8002f00 <xQueueGenericSend>
 8002504:	2801      	cmp	r0, #1
 8002506:	d004      	beq.n	8002512 <osMessagePut+0x5e>
      return osErrorOS;
 8002508:	20ff      	movs	r0, #255	; 0xff
}
 800250a:	b005      	add	sp, #20
 800250c:	bd30      	pop	{r4, r5, pc}
  return osOK;
 800250e:	2000      	movs	r0, #0
 8002510:	e7fb      	b.n	800250a <osMessagePut+0x56>
 8002512:	2000      	movs	r0, #0
 8002514:	e7f9      	b.n	800250a <osMessagePut+0x56>
 8002516:	bf00      	nop
 8002518:	e000ed04 	.word	0xe000ed04

0800251c <osMessageGet>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval event information that includes status code.
* @note   MUST REMAIN UNCHANGED: \b osMessageGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMessageGet (osMessageQId queue_id, uint32_t millisec)
{
 800251c:	b570      	push	{r4, r5, r6, lr}
 800251e:	b084      	sub	sp, #16
 8002520:	4604      	mov	r4, r0
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.message_id = queue_id;
 8002522:	9102      	str	r1, [sp, #8]
  event.value.v = 0;
 8002524:	2300      	movs	r3, #0
 8002526:	9301      	str	r3, [sp, #4]
  
  if (queue_id == NULL) {
 8002528:	b1f9      	cbz	r1, 800256a <osMessageGet+0x4e>
 800252a:	460d      	mov	r5, r1
 800252c:	4616      	mov	r6, r2
    event.status = osErrorParameter;
    return event;
  }
  
  taskWoken = pdFALSE;
 800252e:	2300      	movs	r3, #0
 8002530:	9303      	str	r3, [sp, #12]
  
  ticks = 0;
  if (millisec == osWaitForever) {
 8002532:	f1b2 3fff 	cmp.w	r2, #4294967295	; 0xffffffff
 8002536:	d021      	beq.n	800257c <osMessageGet+0x60>
    ticks = portMAX_DELAY;
  }
  else if (millisec != 0) {
 8002538:	b902      	cbnz	r2, 800253c <osMessageGet+0x20>
  ticks = 0;
 800253a:	461e      	mov	r6, r3
    if (ticks == 0) {
      ticks = 1;
    }
  }
  
  if (inHandlerMode()) {
 800253c:	f7ff fe4a 	bl	80021d4 <inHandlerMode>
 8002540:	b310      	cbz	r0, 8002588 <osMessageGet+0x6c>
    if (xQueueReceiveFromISR(queue_id, &event.value.v, &taskWoken) == pdTRUE) {
 8002542:	aa03      	add	r2, sp, #12
 8002544:	a901      	add	r1, sp, #4
 8002546:	4628      	mov	r0, r5
 8002548:	f000 ffec 	bl	8003524 <xQueueReceiveFromISR>
 800254c:	2801      	cmp	r0, #1
 800254e:	d018      	beq.n	8002582 <osMessageGet+0x66>
      /* We have mail */
      event.status = osEventMessage;
    }
    else {
      event.status = osOK;
 8002550:	2300      	movs	r3, #0
 8002552:	9300      	str	r3, [sp, #0]
    }
    portEND_SWITCHING_ISR(taskWoken);
 8002554:	9b03      	ldr	r3, [sp, #12]
 8002556:	b30b      	cbz	r3, 800259c <osMessageGet+0x80>
 8002558:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800255c:	4b15      	ldr	r3, [pc, #84]	; (80025b4 <osMessageGet+0x98>)
 800255e:	601a      	str	r2, [r3, #0]
 8002560:	f3bf 8f4f 	dsb	sy
 8002564:	f3bf 8f6f 	isb	sy
 8002568:	e018      	b.n	800259c <osMessageGet+0x80>
    event.status = osErrorParameter;
 800256a:	ab04      	add	r3, sp, #16
 800256c:	2280      	movs	r2, #128	; 0x80
 800256e:	f843 2d10 	str.w	r2, [r3, #-16]!
    return event;
 8002572:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8002576:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800257a:	e013      	b.n	80025a4 <osMessageGet+0x88>
    ticks = portMAX_DELAY;
 800257c:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
 8002580:	e7dc      	b.n	800253c <osMessageGet+0x20>
      event.status = osEventMessage;
 8002582:	2310      	movs	r3, #16
 8002584:	9300      	str	r3, [sp, #0]
 8002586:	e7e5      	b.n	8002554 <osMessageGet+0x38>
  }
  else {
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
 8002588:	4632      	mov	r2, r6
 800258a:	a901      	add	r1, sp, #4
 800258c:	4628      	mov	r0, r5
 800258e:	f000 fe5b 	bl	8003248 <xQueueReceive>
 8002592:	2801      	cmp	r0, #1
 8002594:	d009      	beq.n	80025aa <osMessageGet+0x8e>
      /* We have mail */
      event.status = osEventMessage;
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 8002596:	b95e      	cbnz	r6, 80025b0 <osMessageGet+0x94>
 8002598:	2300      	movs	r3, #0
 800259a:	9300      	str	r3, [sp, #0]
    }
  }
  
  return event;
 800259c:	e89d 0007 	ldmia.w	sp, {r0, r1, r2}
 80025a0:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 80025a4:	4620      	mov	r0, r4
 80025a6:	b004      	add	sp, #16
 80025a8:	bd70      	pop	{r4, r5, r6, pc}
      event.status = osEventMessage;
 80025aa:	2310      	movs	r3, #16
 80025ac:	9300      	str	r3, [sp, #0]
 80025ae:	e7f5      	b.n	800259c <osMessageGet+0x80>
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 80025b0:	2340      	movs	r3, #64	; 0x40
 80025b2:	e7f2      	b.n	800259a <osMessageGet+0x7e>
 80025b4:	e000ed04 	.word	0xe000ed04

080025b8 <osMessageWaiting>:
* @brief  Get the number of messaged stored in a queue.
* @param  queue_id  message queue ID obtained with \ref osMessageCreate.
* @retval number of messages stored in a queue.
*/
uint32_t osMessageWaiting(osMessageQId queue_id)
{
 80025b8:	b510      	push	{r4, lr}
 80025ba:	4604      	mov	r4, r0
  if (inHandlerMode()) {
 80025bc:	f7ff fe0a 	bl	80021d4 <inHandlerMode>
 80025c0:	b918      	cbnz	r0, 80025ca <osMessageWaiting+0x12>
    return uxQueueMessagesWaitingFromISR(queue_id);
  }
  else
  {
    return uxQueueMessagesWaiting(queue_id);
 80025c2:	4620      	mov	r0, r4
 80025c4:	f001 f809 	bl	80035da <uxQueueMessagesWaiting>
  }
}
 80025c8:	bd10      	pop	{r4, pc}
    return uxQueueMessagesWaitingFromISR(queue_id);
 80025ca:	4620      	mov	r0, r4
 80025cc:	f001 f818 	bl	8003600 <uxQueueMessagesWaitingFromISR>
 80025d0:	bd10      	pop	{r4, pc}

080025d2 <osMessageDelete>:
* @brief Delete a Message Queue
* @param  queue_id  message queue ID obtained with \ref osMessageCreate.
* @retval  status code that indicates the execution status of the function.
*/
osStatus osMessageDelete (osMessageQId queue_id)
{
 80025d2:	b510      	push	{r4, lr}
 80025d4:	4604      	mov	r4, r0
  if (inHandlerMode()) {
 80025d6:	f7ff fdfd 	bl	80021d4 <inHandlerMode>
 80025da:	b108      	cbz	r0, 80025e0 <osMessageDelete+0xe>
    return osErrorISR;
 80025dc:	2082      	movs	r0, #130	; 0x82
  }

  vQueueDelete(queue_id);

  return osOK; 
}
 80025de:	bd10      	pop	{r4, pc}
  vQueueDelete(queue_id);
 80025e0:	4620      	mov	r0, r4
 80025e2:	f001 f82f 	bl	8003644 <vQueueDelete>
  return osOK; 
 80025e6:	2000      	movs	r0, #0
 80025e8:	bd10      	pop	{r4, pc}

080025ea <vListInitialise>:
void vListInitialise( List_t * const pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80025ea:	f100 0308 	add.w	r3, r0, #8
 80025ee:	6043      	str	r3, [r0, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80025f0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80025f4:	6082      	str	r2, [r0, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80025f6:	60c3      	str	r3, [r0, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80025f8:	6103      	str	r3, [r0, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80025fa:	2300      	movs	r3, #0
 80025fc:	6003      	str	r3, [r0, #0]
 80025fe:	4770      	bx	lr

08002600 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8002600:	2300      	movs	r3, #0
 8002602:	6103      	str	r3, [r0, #16]
 8002604:	4770      	bx	lr

08002606 <vListInsertEnd>:
}
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t * const pxIndex = pxList->pxIndex;
 8002606:	6843      	ldr	r3, [r0, #4]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8002608:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800260a:	689a      	ldr	r2, [r3, #8]
 800260c:	608a      	str	r2, [r1, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800260e:	689a      	ldr	r2, [r3, #8]
 8002610:	6051      	str	r1, [r2, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8002612:	6099      	str	r1, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8002614:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
 8002616:	6803      	ldr	r3, [r0, #0]
 8002618:	3301      	adds	r3, #1
 800261a:	6003      	str	r3, [r0, #0]
 800261c:	4770      	bx	lr

0800261e <vListInsert>:
}
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800261e:	b430      	push	{r4, r5}
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8002620:	680d      	ldr	r5, [r1, #0]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8002622:	f1b5 3fff 	cmp.w	r5, #4294967295	; 0xffffffff
 8002626:	d002      	beq.n	800262e <vListInsert+0x10>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002628:	f100 0208 	add.w	r2, r0, #8
 800262c:	e002      	b.n	8002634 <vListInsert+0x16>
		pxIterator = pxList->xListEnd.pxPrevious;
 800262e:	6902      	ldr	r2, [r0, #16]
 8002630:	e004      	b.n	800263c <vListInsert+0x1e>
		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002632:	461a      	mov	r2, r3
 8002634:	6853      	ldr	r3, [r2, #4]
 8002636:	681c      	ldr	r4, [r3, #0]
 8002638:	42a5      	cmp	r5, r4
 800263a:	d2fa      	bcs.n	8002632 <vListInsert+0x14>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800263c:	6853      	ldr	r3, [r2, #4]
 800263e:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8002640:	6099      	str	r1, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8002642:	608a      	str	r2, [r1, #8]
	pxIterator->pxNext = pxNewListItem;
 8002644:	6051      	str	r1, [r2, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8002646:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
 8002648:	6803      	ldr	r3, [r0, #0]
 800264a:	3301      	adds	r3, #1
 800264c:	6003      	str	r3, [r0, #0]
}
 800264e:	bc30      	pop	{r4, r5}
 8002650:	4770      	bx	lr

08002652 <uxListRemove>:

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8002652:	6903      	ldr	r3, [r0, #16]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8002654:	6842      	ldr	r2, [r0, #4]
 8002656:	6881      	ldr	r1, [r0, #8]
 8002658:	6091      	str	r1, [r2, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800265a:	6882      	ldr	r2, [r0, #8]
 800265c:	6841      	ldr	r1, [r0, #4]
 800265e:	6051      	str	r1, [r2, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8002660:	685a      	ldr	r2, [r3, #4]
 8002662:	4290      	cmp	r0, r2
 8002664:	d006      	beq.n	8002674 <uxListRemove+0x22>
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8002666:	2200      	movs	r2, #0
 8002668:	6102      	str	r2, [r0, #16]
	( pxList->uxNumberOfItems )--;
 800266a:	681a      	ldr	r2, [r3, #0]
 800266c:	3a01      	subs	r2, #1
 800266e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8002670:	6818      	ldr	r0, [r3, #0]
}
 8002672:	4770      	bx	lr
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8002674:	6882      	ldr	r2, [r0, #8]
 8002676:	605a      	str	r2, [r3, #4]
 8002678:	e7f5      	b.n	8002666 <uxListRemove+0x14>
	...

0800267c <prvTaskExitError>:
	return pxTopOfStack;
}
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800267c:	b082      	sub	sp, #8
volatile uint32_t ulDummy = 0;
 800267e:	2300      	movs	r3, #0
 8002680:	9301      	str	r3, [sp, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8002682:	4b0d      	ldr	r3, [pc, #52]	; (80026b8 <prvTaskExitError+0x3c>)
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800268a:	d008      	beq.n	800269e <prvTaskExitError+0x22>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800268c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002690:	f383 8811 	msr	BASEPRI, r3
 8002694:	f3bf 8f6f 	isb	sy
 8002698:	f3bf 8f4f 	dsb	sy
 800269c:	e7fe      	b.n	800269c <prvTaskExitError+0x20>
 800269e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80026a2:	f383 8811 	msr	BASEPRI, r3
 80026a6:	f3bf 8f6f 	isb	sy
 80026aa:	f3bf 8f4f 	dsb	sy
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80026ae:	9b01      	ldr	r3, [sp, #4]
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	d0fc      	beq.n	80026ae <prvTaskExitError+0x32>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80026b4:	b002      	add	sp, #8
 80026b6:	4770      	bx	lr
 80026b8:	20000004 	.word	0x20000004

080026bc <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80026bc:	4808      	ldr	r0, [pc, #32]	; (80026e0 <prvPortStartFirstTask+0x24>)
 80026be:	6800      	ldr	r0, [r0, #0]
 80026c0:	6800      	ldr	r0, [r0, #0]
 80026c2:	f380 8808 	msr	MSP, r0
 80026c6:	f04f 0000 	mov.w	r0, #0
 80026ca:	f380 8814 	msr	CONTROL, r0
 80026ce:	b662      	cpsie	i
 80026d0:	b661      	cpsie	f
 80026d2:	f3bf 8f4f 	dsb	sy
 80026d6:	f3bf 8f6f 	isb	sy
 80026da:	df00      	svc	0
 80026dc:	bf00      	nop
 80026de:	0000      	.short	0x0000
 80026e0:	e000ed08 	.word	0xe000ed08

080026e4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80026e4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80026f4 <vPortEnableVFP+0x10>
 80026e8:	6801      	ldr	r1, [r0, #0]
 80026ea:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80026ee:	6001      	str	r1, [r0, #0]
 80026f0:	4770      	bx	lr
 80026f2:	0000      	.short	0x0000
 80026f4:	e000ed88 	.word	0xe000ed88

080026f8 <pxPortInitialiseStack>:
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80026f8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80026fc:	f840 3c04 	str.w	r3, [r0, #-4]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8002700:	f021 0101 	bic.w	r1, r1, #1
 8002704:	f840 1c08 	str.w	r1, [r0, #-8]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8002708:	4b05      	ldr	r3, [pc, #20]	; (8002720 <pxPortInitialiseStack+0x28>)
 800270a:	f840 3c0c 	str.w	r3, [r0, #-12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800270e:	f840 2c20 	str.w	r2, [r0, #-32]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8002712:	f06f 0302 	mvn.w	r3, #2
 8002716:	f840 3c24 	str.w	r3, [r0, #-36]
}
 800271a:	3844      	subs	r0, #68	; 0x44
 800271c:	4770      	bx	lr
 800271e:	bf00      	nop
 8002720:	0800267d 	.word	0x0800267d
	...

08002730 <SVC_Handler>:
	__asm volatile (
 8002730:	4b07      	ldr	r3, [pc, #28]	; (8002750 <pxCurrentTCBConst2>)
 8002732:	6819      	ldr	r1, [r3, #0]
 8002734:	6808      	ldr	r0, [r1, #0]
 8002736:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800273a:	f380 8809 	msr	PSP, r0
 800273e:	f3bf 8f6f 	isb	sy
 8002742:	f04f 0000 	mov.w	r0, #0
 8002746:	f380 8811 	msr	BASEPRI, r0
 800274a:	4770      	bx	lr
 800274c:	f3af 8000 	nop.w

08002750 <pxCurrentTCBConst2>:
 8002750:	20003cb4 	.word	0x20003cb4

08002754 <vPortEnterCritical>:
 8002754:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002758:	f383 8811 	msr	BASEPRI, r3
 800275c:	f3bf 8f6f 	isb	sy
 8002760:	f3bf 8f4f 	dsb	sy
	uxCriticalNesting++;
 8002764:	4a0a      	ldr	r2, [pc, #40]	; (8002790 <vPortEnterCritical+0x3c>)
 8002766:	6813      	ldr	r3, [r2, #0]
 8002768:	3301      	adds	r3, #1
 800276a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 1 )
 800276c:	2b01      	cmp	r3, #1
 800276e:	d10d      	bne.n	800278c <vPortEnterCritical+0x38>
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8002770:	4b08      	ldr	r3, [pc, #32]	; (8002794 <vPortEnterCritical+0x40>)
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	f013 0fff 	tst.w	r3, #255	; 0xff
 8002778:	d008      	beq.n	800278c <vPortEnterCritical+0x38>
 800277a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800277e:	f383 8811 	msr	BASEPRI, r3
 8002782:	f3bf 8f6f 	isb	sy
 8002786:	f3bf 8f4f 	dsb	sy
 800278a:	e7fe      	b.n	800278a <vPortEnterCritical+0x36>
 800278c:	4770      	bx	lr
 800278e:	bf00      	nop
 8002790:	20000004 	.word	0x20000004
 8002794:	e000ed04 	.word	0xe000ed04

08002798 <vPortExitCritical>:
	configASSERT( uxCriticalNesting );
 8002798:	4b09      	ldr	r3, [pc, #36]	; (80027c0 <vPortExitCritical+0x28>)
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	b943      	cbnz	r3, 80027b0 <vPortExitCritical+0x18>
 800279e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80027a2:	f383 8811 	msr	BASEPRI, r3
 80027a6:	f3bf 8f6f 	isb	sy
 80027aa:	f3bf 8f4f 	dsb	sy
 80027ae:	e7fe      	b.n	80027ae <vPortExitCritical+0x16>
	uxCriticalNesting--;
 80027b0:	3b01      	subs	r3, #1
 80027b2:	4a03      	ldr	r2, [pc, #12]	; (80027c0 <vPortExitCritical+0x28>)
 80027b4:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80027b6:	b90b      	cbnz	r3, 80027bc <vPortExitCritical+0x24>
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80027b8:	f383 8811 	msr	BASEPRI, r3
 80027bc:	4770      	bx	lr
 80027be:	bf00      	nop
 80027c0:	20000004 	.word	0x20000004
	...

080027d0 <PendSV_Handler>:
	__asm volatile
 80027d0:	f3ef 8009 	mrs	r0, PSP
 80027d4:	f3bf 8f6f 	isb	sy
 80027d8:	4b15      	ldr	r3, [pc, #84]	; (8002830 <pxCurrentTCBConst>)
 80027da:	681a      	ldr	r2, [r3, #0]
 80027dc:	f01e 0f10 	tst.w	lr, #16
 80027e0:	bf08      	it	eq
 80027e2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80027e6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80027ea:	6010      	str	r0, [r2, #0]
 80027ec:	e92d 0009 	stmdb	sp!, {r0, r3}
 80027f0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80027f4:	f380 8811 	msr	BASEPRI, r0
 80027f8:	f3bf 8f4f 	dsb	sy
 80027fc:	f3bf 8f6f 	isb	sy
 8002800:	f001 fa70 	bl	8003ce4 <vTaskSwitchContext>
 8002804:	f04f 0000 	mov.w	r0, #0
 8002808:	f380 8811 	msr	BASEPRI, r0
 800280c:	bc09      	pop	{r0, r3}
 800280e:	6819      	ldr	r1, [r3, #0]
 8002810:	6808      	ldr	r0, [r1, #0]
 8002812:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002816:	f01e 0f10 	tst.w	lr, #16
 800281a:	bf08      	it	eq
 800281c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8002820:	f380 8809 	msr	PSP, r0
 8002824:	f3bf 8f6f 	isb	sy
 8002828:	4770      	bx	lr
 800282a:	bf00      	nop
 800282c:	f3af 8000 	nop.w

08002830 <pxCurrentTCBConst>:
 8002830:	20003cb4 	.word	0x20003cb4

08002834 <SysTick_Handler>:
{
 8002834:	b508      	push	{r3, lr}
	__asm volatile
 8002836:	f04f 0350 	mov.w	r3, #80	; 0x50
 800283a:	f383 8811 	msr	BASEPRI, r3
 800283e:	f3bf 8f6f 	isb	sy
 8002842:	f3bf 8f4f 	dsb	sy
		if( xTaskIncrementTick() != pdFALSE )
 8002846:	f001 f943 	bl	8003ad0 <xTaskIncrementTick>
 800284a:	b118      	cbz	r0, 8002854 <SysTick_Handler+0x20>
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800284c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002850:	4b02      	ldr	r3, [pc, #8]	; (800285c <SysTick_Handler+0x28>)
 8002852:	601a      	str	r2, [r3, #0]
	__asm volatile
 8002854:	2300      	movs	r3, #0
 8002856:	f383 8811 	msr	BASEPRI, r3
 800285a:	bd08      	pop	{r3, pc}
 800285c:	e000ed04 	.word	0xe000ed04

08002860 <vPortSetupTimerInterrupt>:
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8002860:	4a08      	ldr	r2, [pc, #32]	; (8002884 <vPortSetupTimerInterrupt+0x24>)
 8002862:	2300      	movs	r3, #0
 8002864:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8002866:	4908      	ldr	r1, [pc, #32]	; (8002888 <vPortSetupTimerInterrupt+0x28>)
 8002868:	600b      	str	r3, [r1, #0]
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800286a:	4b08      	ldr	r3, [pc, #32]	; (800288c <vPortSetupTimerInterrupt+0x2c>)
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	4908      	ldr	r1, [pc, #32]	; (8002890 <vPortSetupTimerInterrupt+0x30>)
 8002870:	fba1 1303 	umull	r1, r3, r1, r3
 8002874:	099b      	lsrs	r3, r3, #6
 8002876:	3b01      	subs	r3, #1
 8002878:	4906      	ldr	r1, [pc, #24]	; (8002894 <vPortSetupTimerInterrupt+0x34>)
 800287a:	600b      	str	r3, [r1, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800287c:	2307      	movs	r3, #7
 800287e:	6013      	str	r3, [r2, #0]
 8002880:	4770      	bx	lr
 8002882:	bf00      	nop
 8002884:	e000e010 	.word	0xe000e010
 8002888:	e000e018 	.word	0xe000e018
 800288c:	20000010 	.word	0x20000010
 8002890:	10624dd3 	.word	0x10624dd3
 8002894:	e000e014 	.word	0xe000e014

08002898 <xPortStartScheduler>:
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8002898:	4b3a      	ldr	r3, [pc, #232]	; (8002984 <xPortStartScheduler+0xec>)
 800289a:	681a      	ldr	r2, [r3, #0]
 800289c:	4b3a      	ldr	r3, [pc, #232]	; (8002988 <xPortStartScheduler+0xf0>)
 800289e:	429a      	cmp	r2, r3
 80028a0:	d108      	bne.n	80028b4 <xPortStartScheduler+0x1c>
	__asm volatile
 80028a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80028a6:	f383 8811 	msr	BASEPRI, r3
 80028aa:	f3bf 8f6f 	isb	sy
 80028ae:	f3bf 8f4f 	dsb	sy
 80028b2:	e7fe      	b.n	80028b2 <xPortStartScheduler+0x1a>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80028b4:	4b33      	ldr	r3, [pc, #204]	; (8002984 <xPortStartScheduler+0xec>)
 80028b6:	681a      	ldr	r2, [r3, #0]
 80028b8:	4b34      	ldr	r3, [pc, #208]	; (800298c <xPortStartScheduler+0xf4>)
 80028ba:	429a      	cmp	r2, r3
 80028bc:	d108      	bne.n	80028d0 <xPortStartScheduler+0x38>
 80028be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80028c2:	f383 8811 	msr	BASEPRI, r3
 80028c6:	f3bf 8f6f 	isb	sy
 80028ca:	f3bf 8f4f 	dsb	sy
 80028ce:	e7fe      	b.n	80028ce <xPortStartScheduler+0x36>
{
 80028d0:	b510      	push	{r4, lr}
 80028d2:	b082      	sub	sp, #8
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80028d4:	4b2e      	ldr	r3, [pc, #184]	; (8002990 <xPortStartScheduler+0xf8>)
 80028d6:	781a      	ldrb	r2, [r3, #0]
 80028d8:	b2d2      	uxtb	r2, r2
 80028da:	9201      	str	r2, [sp, #4]
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80028dc:	22ff      	movs	r2, #255	; 0xff
 80028de:	701a      	strb	r2, [r3, #0]
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80028e0:	781b      	ldrb	r3, [r3, #0]
 80028e2:	b2db      	uxtb	r3, r3
 80028e4:	f88d 3003 	strb.w	r3, [sp, #3]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80028e8:	f89d 3003 	ldrb.w	r3, [sp, #3]
 80028ec:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80028f0:	4a28      	ldr	r2, [pc, #160]	; (8002994 <xPortStartScheduler+0xfc>)
 80028f2:	7013      	strb	r3, [r2, #0]
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80028f4:	2207      	movs	r2, #7
 80028f6:	4b28      	ldr	r3, [pc, #160]	; (8002998 <xPortStartScheduler+0x100>)
 80028f8:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80028fa:	e009      	b.n	8002910 <xPortStartScheduler+0x78>
			ulMaxPRIGROUPValue--;
 80028fc:	4a26      	ldr	r2, [pc, #152]	; (8002998 <xPortStartScheduler+0x100>)
 80028fe:	6813      	ldr	r3, [r2, #0]
 8002900:	3b01      	subs	r3, #1
 8002902:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8002904:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8002908:	005b      	lsls	r3, r3, #1
 800290a:	b2db      	uxtb	r3, r3
 800290c:	f88d 3003 	strb.w	r3, [sp, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8002910:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8002914:	f013 0f80 	tst.w	r3, #128	; 0x80
 8002918:	d1f0      	bne.n	80028fc <xPortStartScheduler+0x64>
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800291a:	4b1f      	ldr	r3, [pc, #124]	; (8002998 <xPortStartScheduler+0x100>)
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	2b03      	cmp	r3, #3
 8002920:	d008      	beq.n	8002934 <xPortStartScheduler+0x9c>
 8002922:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002926:	f383 8811 	msr	BASEPRI, r3
 800292a:	f3bf 8f6f 	isb	sy
 800292e:	f3bf 8f4f 	dsb	sy
 8002932:	e7fe      	b.n	8002932 <xPortStartScheduler+0x9a>
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8002934:	021b      	lsls	r3, r3, #8
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8002936:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800293a:	4a17      	ldr	r2, [pc, #92]	; (8002998 <xPortStartScheduler+0x100>)
 800293c:	6013      	str	r3, [r2, #0]
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800293e:	9b01      	ldr	r3, [sp, #4]
 8002940:	b2db      	uxtb	r3, r3
 8002942:	4a13      	ldr	r2, [pc, #76]	; (8002990 <xPortStartScheduler+0xf8>)
 8002944:	7013      	strb	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8002946:	4b15      	ldr	r3, [pc, #84]	; (800299c <xPortStartScheduler+0x104>)
 8002948:	681a      	ldr	r2, [r3, #0]
 800294a:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
 800294e:	601a      	str	r2, [r3, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8002950:	681a      	ldr	r2, [r3, #0]
 8002952:	f042 4270 	orr.w	r2, r2, #4026531840	; 0xf0000000
 8002956:	601a      	str	r2, [r3, #0]
	vPortSetupTimerInterrupt();
 8002958:	f7ff ff82 	bl	8002860 <vPortSetupTimerInterrupt>
	uxCriticalNesting = 0;
 800295c:	2400      	movs	r4, #0
 800295e:	4b10      	ldr	r3, [pc, #64]	; (80029a0 <xPortStartScheduler+0x108>)
 8002960:	601c      	str	r4, [r3, #0]
	vPortEnableVFP();
 8002962:	f7ff febf 	bl	80026e4 <vPortEnableVFP>
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8002966:	4a0f      	ldr	r2, [pc, #60]	; (80029a4 <xPortStartScheduler+0x10c>)
 8002968:	6813      	ldr	r3, [r2, #0]
 800296a:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800296e:	6013      	str	r3, [r2, #0]
	prvPortStartFirstTask();
 8002970:	f7ff fea4 	bl	80026bc <prvPortStartFirstTask>
	vTaskSwitchContext();
 8002974:	f001 f9b6 	bl	8003ce4 <vTaskSwitchContext>
	prvTaskExitError();
 8002978:	f7ff fe80 	bl	800267c <prvTaskExitError>
}
 800297c:	4620      	mov	r0, r4
 800297e:	b002      	add	sp, #8
 8002980:	bd10      	pop	{r4, pc}
 8002982:	bf00      	nop
 8002984:	e000ed00 	.word	0xe000ed00
 8002988:	410fc271 	.word	0x410fc271
 800298c:	410fc270 	.word	0x410fc270
 8002990:	e000e400 	.word	0xe000e400
 8002994:	20000094 	.word	0x20000094
 8002998:	20000098 	.word	0x20000098
 800299c:	e000ed20 	.word	0xe000ed20
 80029a0:	20000004 	.word	0x20000004
 80029a4:	e000ef34 	.word	0xe000ef34

080029a8 <vPortValidateInterruptPriority>:
	{
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80029a8:	f3ef 8305 	mrs	r3, IPSR

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80029ac:	2b0f      	cmp	r3, #15
 80029ae:	d90f      	bls.n	80029d0 <vPortValidateInterruptPriority+0x28>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80029b0:	4a10      	ldr	r2, [pc, #64]	; (80029f4 <vPortValidateInterruptPriority+0x4c>)
 80029b2:	5c9b      	ldrb	r3, [r3, r2]
 80029b4:	b2db      	uxtb	r3, r3
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80029b6:	4a10      	ldr	r2, [pc, #64]	; (80029f8 <vPortValidateInterruptPriority+0x50>)
 80029b8:	7812      	ldrb	r2, [r2, #0]
 80029ba:	4293      	cmp	r3, r2
 80029bc:	d208      	bcs.n	80029d0 <vPortValidateInterruptPriority+0x28>
 80029be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80029c2:	f383 8811 	msr	BASEPRI, r3
 80029c6:	f3bf 8f6f 	isb	sy
 80029ca:	f3bf 8f4f 	dsb	sy
 80029ce:	e7fe      	b.n	80029ce <vPortValidateInterruptPriority+0x26>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80029d0:	4b0a      	ldr	r3, [pc, #40]	; (80029fc <vPortValidateInterruptPriority+0x54>)
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80029d8:	4a09      	ldr	r2, [pc, #36]	; (8002a00 <vPortValidateInterruptPriority+0x58>)
 80029da:	6812      	ldr	r2, [r2, #0]
 80029dc:	4293      	cmp	r3, r2
 80029de:	d908      	bls.n	80029f2 <vPortValidateInterruptPriority+0x4a>
 80029e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80029e4:	f383 8811 	msr	BASEPRI, r3
 80029e8:	f3bf 8f6f 	isb	sy
 80029ec:	f3bf 8f4f 	dsb	sy
 80029f0:	e7fe      	b.n	80029f0 <vPortValidateInterruptPriority+0x48>
 80029f2:	4770      	bx	lr
 80029f4:	e000e3f0 	.word	0xe000e3f0
 80029f8:	20000094 	.word	0x20000094
 80029fc:	e000ed0c 	.word	0xe000ed0c
 8002a00:	20000098 	.word	0x20000098

08002a04 <prvHeapInit>:
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8002a04:	4a12      	ldr	r2, [pc, #72]	; (8002a50 <prvHeapInit+0x4c>)

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8002a06:	f012 0f07 	tst.w	r2, #7
 8002a0a:	d01e      	beq.n	8002a4a <prvHeapInit+0x46>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8002a0c:	1dd1      	adds	r1, r2, #7
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8002a0e:	f021 0107 	bic.w	r1, r1, #7
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8002a12:	f5c1 5370 	rsb	r3, r1, #15360	; 0x3c00
 8002a16:	4413      	add	r3, r2
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8002a18:	460a      	mov	r2, r1

	pucAlignedHeap = ( uint8_t * ) uxAddress;

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8002a1a:	480e      	ldr	r0, [pc, #56]	; (8002a54 <prvHeapInit+0x50>)
 8002a1c:	6002      	str	r2, [r0, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8002a1e:	2100      	movs	r1, #0
 8002a20:	6041      	str	r1, [r0, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8002a22:	4413      	add	r3, r2
	uxAddress -= xHeapStructSize;
 8002a24:	3b08      	subs	r3, #8
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8002a26:	f023 0307 	bic.w	r3, r3, #7
	pxEnd = ( void * ) uxAddress;
 8002a2a:	480b      	ldr	r0, [pc, #44]	; (8002a58 <prvHeapInit+0x54>)
 8002a2c:	6003      	str	r3, [r0, #0]
	pxEnd->xBlockSize = 0;
 8002a2e:	6059      	str	r1, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8002a30:	6019      	str	r1, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8002a32:	1a99      	subs	r1, r3, r2
 8002a34:	6051      	str	r1, [r2, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8002a36:	6013      	str	r3, [r2, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8002a38:	4b08      	ldr	r3, [pc, #32]	; (8002a5c <prvHeapInit+0x58>)
 8002a3a:	6019      	str	r1, [r3, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8002a3c:	4b08      	ldr	r3, [pc, #32]	; (8002a60 <prvHeapInit+0x5c>)
 8002a3e:	6019      	str	r1, [r3, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8002a40:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8002a44:	4b07      	ldr	r3, [pc, #28]	; (8002a64 <prvHeapInit+0x60>)
 8002a46:	601a      	str	r2, [r3, #0]
 8002a48:	4770      	bx	lr
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8002a4a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8002a4e:	e7e4      	b.n	8002a1a <prvHeapInit+0x16>
 8002a50:	200000a0 	.word	0x200000a0
 8002a54:	20003cac 	.word	0x20003cac
 8002a58:	2000009c 	.word	0x2000009c
 8002a5c:	20003ca8 	.word	0x20003ca8
 8002a60:	20003ca4 	.word	0x20003ca4
 8002a64:	20003ca0 	.word	0x20003ca0

08002a68 <prvInsertBlockIntoFreeList>:
}
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8002a68:	b410      	push	{r4}
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8002a6a:	4b13      	ldr	r3, [pc, #76]	; (8002ab8 <prvInsertBlockIntoFreeList+0x50>)
 8002a6c:	681a      	ldr	r2, [r3, #0]
 8002a6e:	4282      	cmp	r2, r0
 8002a70:	d31b      	bcc.n	8002aaa <prvInsertBlockIntoFreeList+0x42>
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8002a72:	6859      	ldr	r1, [r3, #4]
 8002a74:	185c      	adds	r4, r3, r1
 8002a76:	42a0      	cmp	r0, r4
 8002a78:	d103      	bne.n	8002a82 <prvInsertBlockIntoFreeList+0x1a>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8002a7a:	6840      	ldr	r0, [r0, #4]
 8002a7c:	4401      	add	r1, r0
 8002a7e:	6059      	str	r1, [r3, #4]
		pxBlockToInsert = pxIterator;
 8002a80:	4618      	mov	r0, r3
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8002a82:	6841      	ldr	r1, [r0, #4]
 8002a84:	1844      	adds	r4, r0, r1
 8002a86:	42a2      	cmp	r2, r4
 8002a88:	d113      	bne.n	8002ab2 <prvInsertBlockIntoFreeList+0x4a>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8002a8a:	4c0c      	ldr	r4, [pc, #48]	; (8002abc <prvInsertBlockIntoFreeList+0x54>)
 8002a8c:	6824      	ldr	r4, [r4, #0]
 8002a8e:	42a2      	cmp	r2, r4
 8002a90:	d00d      	beq.n	8002aae <prvInsertBlockIntoFreeList+0x46>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8002a92:	6852      	ldr	r2, [r2, #4]
 8002a94:	4411      	add	r1, r2
 8002a96:	6041      	str	r1, [r0, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8002a98:	681a      	ldr	r2, [r3, #0]
 8002a9a:	6812      	ldr	r2, [r2, #0]
 8002a9c:	6002      	str	r2, [r0, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8002a9e:	4298      	cmp	r0, r3
 8002aa0:	d000      	beq.n	8002aa4 <prvInsertBlockIntoFreeList+0x3c>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8002aa2:	6018      	str	r0, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8002aa4:	f85d 4b04 	ldr.w	r4, [sp], #4
 8002aa8:	4770      	bx	lr
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8002aaa:	4613      	mov	r3, r2
 8002aac:	e7de      	b.n	8002a6c <prvInsertBlockIntoFreeList+0x4>
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8002aae:	6004      	str	r4, [r0, #0]
 8002ab0:	e7f5      	b.n	8002a9e <prvInsertBlockIntoFreeList+0x36>
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8002ab2:	6002      	str	r2, [r0, #0]
 8002ab4:	e7f3      	b.n	8002a9e <prvInsertBlockIntoFreeList+0x36>
 8002ab6:	bf00      	nop
 8002ab8:	20003cac 	.word	0x20003cac
 8002abc:	2000009c 	.word	0x2000009c

08002ac0 <pvPortMalloc>:
{
 8002ac0:	b570      	push	{r4, r5, r6, lr}
 8002ac2:	4604      	mov	r4, r0
	vTaskSuspendAll();
 8002ac4:	f000 ffee 	bl	8003aa4 <vTaskSuspendAll>
		if( pxEnd == NULL )
 8002ac8:	4b3a      	ldr	r3, [pc, #232]	; (8002bb4 <pvPortMalloc+0xf4>)
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	b1bb      	cbz	r3, 8002afe <pvPortMalloc+0x3e>
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8002ace:	4b3a      	ldr	r3, [pc, #232]	; (8002bb8 <pvPortMalloc+0xf8>)
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	421c      	tst	r4, r3
 8002ad4:	d163      	bne.n	8002b9e <pvPortMalloc+0xde>
			if( xWantedSize > 0 )
 8002ad6:	b1ac      	cbz	r4, 8002b04 <pvPortMalloc+0x44>
				xWantedSize += xHeapStructSize;
 8002ad8:	3408      	adds	r4, #8
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8002ada:	f014 0f07 	tst.w	r4, #7
 8002ade:	d011      	beq.n	8002b04 <pvPortMalloc+0x44>
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8002ae0:	f024 0407 	bic.w	r4, r4, #7
 8002ae4:	3408      	adds	r4, #8
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8002ae6:	f004 0307 	and.w	r3, r4, #7
 8002aea:	b15b      	cbz	r3, 8002b04 <pvPortMalloc+0x44>
 8002aec:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002af0:	f383 8811 	msr	BASEPRI, r3
 8002af4:	f3bf 8f6f 	isb	sy
 8002af8:	f3bf 8f4f 	dsb	sy
 8002afc:	e7fe      	b.n	8002afc <pvPortMalloc+0x3c>
			prvHeapInit();
 8002afe:	f7ff ff81 	bl	8002a04 <prvHeapInit>
 8002b02:	e7e4      	b.n	8002ace <pvPortMalloc+0xe>
			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8002b04:	2c00      	cmp	r4, #0
 8002b06:	d04c      	beq.n	8002ba2 <pvPortMalloc+0xe2>
 8002b08:	4b2c      	ldr	r3, [pc, #176]	; (8002bbc <pvPortMalloc+0xfc>)
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	429c      	cmp	r4, r3
 8002b0e:	d84a      	bhi.n	8002ba6 <pvPortMalloc+0xe6>
				pxBlock = xStart.pxNextFreeBlock;
 8002b10:	4b2b      	ldr	r3, [pc, #172]	; (8002bc0 <pvPortMalloc+0x100>)
 8002b12:	681d      	ldr	r5, [r3, #0]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8002b14:	e001      	b.n	8002b1a <pvPortMalloc+0x5a>
					pxPreviousBlock = pxBlock;
 8002b16:	462b      	mov	r3, r5
					pxBlock = pxBlock->pxNextFreeBlock;
 8002b18:	4615      	mov	r5, r2
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8002b1a:	686a      	ldr	r2, [r5, #4]
 8002b1c:	4294      	cmp	r4, r2
 8002b1e:	d902      	bls.n	8002b26 <pvPortMalloc+0x66>
 8002b20:	682a      	ldr	r2, [r5, #0]
 8002b22:	2a00      	cmp	r2, #0
 8002b24:	d1f7      	bne.n	8002b16 <pvPortMalloc+0x56>
				if( pxBlock != pxEnd )
 8002b26:	4a23      	ldr	r2, [pc, #140]	; (8002bb4 <pvPortMalloc+0xf4>)
 8002b28:	6812      	ldr	r2, [r2, #0]
 8002b2a:	4295      	cmp	r5, r2
 8002b2c:	d03d      	beq.n	8002baa <pvPortMalloc+0xea>
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8002b2e:	681e      	ldr	r6, [r3, #0]
 8002b30:	3608      	adds	r6, #8
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8002b32:	682a      	ldr	r2, [r5, #0]
 8002b34:	601a      	str	r2, [r3, #0]
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8002b36:	686b      	ldr	r3, [r5, #4]
 8002b38:	1b1b      	subs	r3, r3, r4
 8002b3a:	2b10      	cmp	r3, #16
 8002b3c:	d910      	bls.n	8002b60 <pvPortMalloc+0xa0>
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8002b3e:	1928      	adds	r0, r5, r4
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8002b40:	f010 0f07 	tst.w	r0, #7
 8002b44:	d008      	beq.n	8002b58 <pvPortMalloc+0x98>
 8002b46:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b4a:	f383 8811 	msr	BASEPRI, r3
 8002b4e:	f3bf 8f6f 	isb	sy
 8002b52:	f3bf 8f4f 	dsb	sy
 8002b56:	e7fe      	b.n	8002b56 <pvPortMalloc+0x96>
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8002b58:	6043      	str	r3, [r0, #4]
						pxBlock->xBlockSize = xWantedSize;
 8002b5a:	606c      	str	r4, [r5, #4]
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8002b5c:	f7ff ff84 	bl	8002a68 <prvInsertBlockIntoFreeList>
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8002b60:	686a      	ldr	r2, [r5, #4]
 8002b62:	4916      	ldr	r1, [pc, #88]	; (8002bbc <pvPortMalloc+0xfc>)
 8002b64:	680b      	ldr	r3, [r1, #0]
 8002b66:	1a9b      	subs	r3, r3, r2
 8002b68:	600b      	str	r3, [r1, #0]
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8002b6a:	4916      	ldr	r1, [pc, #88]	; (8002bc4 <pvPortMalloc+0x104>)
 8002b6c:	6809      	ldr	r1, [r1, #0]
 8002b6e:	428b      	cmp	r3, r1
 8002b70:	d201      	bcs.n	8002b76 <pvPortMalloc+0xb6>
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8002b72:	4914      	ldr	r1, [pc, #80]	; (8002bc4 <pvPortMalloc+0x104>)
 8002b74:	600b      	str	r3, [r1, #0]
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8002b76:	4b10      	ldr	r3, [pc, #64]	; (8002bb8 <pvPortMalloc+0xf8>)
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	4313      	orrs	r3, r2
 8002b7c:	606b      	str	r3, [r5, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8002b7e:	2300      	movs	r3, #0
 8002b80:	602b      	str	r3, [r5, #0]
	( void ) xTaskResumeAll();
 8002b82:	f001 f81b 	bl	8003bbc <xTaskResumeAll>
	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8002b86:	f016 0f07 	tst.w	r6, #7
 8002b8a:	d010      	beq.n	8002bae <pvPortMalloc+0xee>
 8002b8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b90:	f383 8811 	msr	BASEPRI, r3
 8002b94:	f3bf 8f6f 	isb	sy
 8002b98:	f3bf 8f4f 	dsb	sy
 8002b9c:	e7fe      	b.n	8002b9c <pvPortMalloc+0xdc>
void *pvReturn = NULL;
 8002b9e:	2600      	movs	r6, #0
 8002ba0:	e7ef      	b.n	8002b82 <pvPortMalloc+0xc2>
 8002ba2:	2600      	movs	r6, #0
 8002ba4:	e7ed      	b.n	8002b82 <pvPortMalloc+0xc2>
 8002ba6:	2600      	movs	r6, #0
 8002ba8:	e7eb      	b.n	8002b82 <pvPortMalloc+0xc2>
 8002baa:	2600      	movs	r6, #0
 8002bac:	e7e9      	b.n	8002b82 <pvPortMalloc+0xc2>
}
 8002bae:	4630      	mov	r0, r6
 8002bb0:	bd70      	pop	{r4, r5, r6, pc}
 8002bb2:	bf00      	nop
 8002bb4:	2000009c 	.word	0x2000009c
 8002bb8:	20003ca0 	.word	0x20003ca0
 8002bbc:	20003ca4 	.word	0x20003ca4
 8002bc0:	20003cac 	.word	0x20003cac
 8002bc4:	20003ca8 	.word	0x20003ca8

08002bc8 <vPortFree>:
	if( pv != NULL )
 8002bc8:	b380      	cbz	r0, 8002c2c <vPortFree+0x64>
{
 8002bca:	b538      	push	{r3, r4, r5, lr}
 8002bcc:	4604      	mov	r4, r0
		puc -= xHeapStructSize;
 8002bce:	f1a0 0508 	sub.w	r5, r0, #8
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8002bd2:	f850 2c04 	ldr.w	r2, [r0, #-4]
 8002bd6:	4916      	ldr	r1, [pc, #88]	; (8002c30 <vPortFree+0x68>)
 8002bd8:	6809      	ldr	r1, [r1, #0]
 8002bda:	420a      	tst	r2, r1
 8002bdc:	d108      	bne.n	8002bf0 <vPortFree+0x28>
 8002bde:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002be2:	f383 8811 	msr	BASEPRI, r3
 8002be6:	f3bf 8f6f 	isb	sy
 8002bea:	f3bf 8f4f 	dsb	sy
 8002bee:	e7fe      	b.n	8002bee <vPortFree+0x26>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8002bf0:	f850 0c08 	ldr.w	r0, [r0, #-8]
 8002bf4:	b140      	cbz	r0, 8002c08 <vPortFree+0x40>
 8002bf6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002bfa:	f383 8811 	msr	BASEPRI, r3
 8002bfe:	f3bf 8f6f 	isb	sy
 8002c02:	f3bf 8f4f 	dsb	sy
 8002c06:	e7fe      	b.n	8002c06 <vPortFree+0x3e>
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8002c08:	ea22 0201 	bic.w	r2, r2, r1
 8002c0c:	f844 2c04 	str.w	r2, [r4, #-4]
				vTaskSuspendAll();
 8002c10:	f000 ff48 	bl	8003aa4 <vTaskSuspendAll>
					xFreeBytesRemaining += pxLink->xBlockSize;
 8002c14:	f854 1c04 	ldr.w	r1, [r4, #-4]
 8002c18:	4a06      	ldr	r2, [pc, #24]	; (8002c34 <vPortFree+0x6c>)
 8002c1a:	6813      	ldr	r3, [r2, #0]
 8002c1c:	440b      	add	r3, r1
 8002c1e:	6013      	str	r3, [r2, #0]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8002c20:	4628      	mov	r0, r5
 8002c22:	f7ff ff21 	bl	8002a68 <prvInsertBlockIntoFreeList>
				( void ) xTaskResumeAll();
 8002c26:	f000 ffc9 	bl	8003bbc <xTaskResumeAll>
 8002c2a:	bd38      	pop	{r3, r4, r5, pc}
 8002c2c:	4770      	bx	lr
 8002c2e:	bf00      	nop
 8002c30:	20003ca0 	.word	0x20003ca0
 8002c34:	20003ca4 	.word	0x20003ca4

08002c38 <prvGetDisinheritPriorityAfterTimeout>:
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0 )
 8002c38:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8002c3a:	b123      	cbz	r3, 8002c46 <prvGetDisinheritPriorityAfterTimeout+0xe>
		{
			uxHighestPriorityOfWaitingTasks = configMAX_PRIORITIES - listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8002c3c:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8002c3e:	6818      	ldr	r0, [r3, #0]
 8002c40:	f1c0 0007 	rsb	r0, r0, #7
 8002c44:	4770      	bx	lr
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8002c46:	2000      	movs	r0, #0
		}

		return uxHighestPriorityOfWaitingTasks;
	}
 8002c48:	4770      	bx	lr

08002c4a <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8002c4a:	b510      	push	{r4, lr}
 8002c4c:	4604      	mov	r4, r0
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8002c4e:	f7ff fd81 	bl	8002754 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8002c52:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8002c54:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8002c56:	429a      	cmp	r2, r3
 8002c58:	d004      	beq.n	8002c64 <prvIsQueueFull+0x1a>
		{
			xReturn = pdTRUE;
		}
		else
		{
			xReturn = pdFALSE;
 8002c5a:	2400      	movs	r4, #0
		}
	}
	taskEXIT_CRITICAL();
 8002c5c:	f7ff fd9c 	bl	8002798 <vPortExitCritical>

	return xReturn;
}
 8002c60:	4620      	mov	r0, r4
 8002c62:	bd10      	pop	{r4, pc}
			xReturn = pdTRUE;
 8002c64:	2401      	movs	r4, #1
 8002c66:	e7f9      	b.n	8002c5c <prvIsQueueFull+0x12>

08002c68 <prvIsQueueEmpty>:
{
 8002c68:	b510      	push	{r4, lr}
 8002c6a:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
 8002c6c:	f7ff fd72 	bl	8002754 <vPortEnterCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8002c70:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8002c72:	b123      	cbz	r3, 8002c7e <prvIsQueueEmpty+0x16>
			xReturn = pdFALSE;
 8002c74:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 8002c76:	f7ff fd8f 	bl	8002798 <vPortExitCritical>
}
 8002c7a:	4620      	mov	r0, r4
 8002c7c:	bd10      	pop	{r4, pc}
			xReturn = pdTRUE;
 8002c7e:	2401      	movs	r4, #1
 8002c80:	e7f9      	b.n	8002c76 <prvIsQueueEmpty+0xe>

08002c82 <prvCopyDataToQueue>:
{
 8002c82:	b570      	push	{r4, r5, r6, lr}
 8002c84:	4604      	mov	r4, r0
 8002c86:	4616      	mov	r6, r2
	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002c88:	6b85      	ldr	r5, [r0, #56]	; 0x38
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8002c8a:	6c02      	ldr	r2, [r0, #64]	; 0x40
 8002c8c:	b94a      	cbnz	r2, 8002ca2 <prvCopyDataToQueue+0x20>
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8002c8e:	6803      	ldr	r3, [r0, #0]
 8002c90:	bb53      	cbnz	r3, 8002ce8 <prvCopyDataToQueue+0x66>
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 8002c92:	6840      	ldr	r0, [r0, #4]
 8002c94:	f001 f994 	bl	8003fc0 <xTaskPriorityDisinherit>
				pxQueue->pxMutexHolder = NULL;
 8002c98:	2300      	movs	r3, #0
 8002c9a:	6063      	str	r3, [r4, #4]
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8002c9c:	3501      	adds	r5, #1
 8002c9e:	63a5      	str	r5, [r4, #56]	; 0x38
}
 8002ca0:	bd70      	pop	{r4, r5, r6, pc}
	else if( xPosition == queueSEND_TO_BACK )
 8002ca2:	b96e      	cbnz	r6, 8002cc0 <prvCopyDataToQueue+0x3e>
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 8002ca4:	6880      	ldr	r0, [r0, #8]
 8002ca6:	f00b f8fc 	bl	800dea2 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8002caa:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8002cac:	68a3      	ldr	r3, [r4, #8]
 8002cae:	4413      	add	r3, r2
 8002cb0:	60a3      	str	r3, [r4, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8002cb2:	6862      	ldr	r2, [r4, #4]
 8002cb4:	4293      	cmp	r3, r2
 8002cb6:	d319      	bcc.n	8002cec <prvCopyDataToQueue+0x6a>
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8002cb8:	6823      	ldr	r3, [r4, #0]
 8002cba:	60a3      	str	r3, [r4, #8]
BaseType_t xReturn = pdFALSE;
 8002cbc:	2000      	movs	r0, #0
 8002cbe:	e7ed      	b.n	8002c9c <prvCopyDataToQueue+0x1a>
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002cc0:	68c0      	ldr	r0, [r0, #12]
 8002cc2:	f00b f8ee 	bl	800dea2 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8002cc6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002cc8:	425b      	negs	r3, r3
 8002cca:	68e2      	ldr	r2, [r4, #12]
 8002ccc:	441a      	add	r2, r3
 8002cce:	60e2      	str	r2, [r4, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8002cd0:	6821      	ldr	r1, [r4, #0]
 8002cd2:	428a      	cmp	r2, r1
 8002cd4:	d202      	bcs.n	8002cdc <prvCopyDataToQueue+0x5a>
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 8002cd6:	6862      	ldr	r2, [r4, #4]
 8002cd8:	4413      	add	r3, r2
 8002cda:	60e3      	str	r3, [r4, #12]
		if( xPosition == queueOVERWRITE )
 8002cdc:	2e02      	cmp	r6, #2
 8002cde:	d107      	bne.n	8002cf0 <prvCopyDataToQueue+0x6e>
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8002ce0:	b145      	cbz	r5, 8002cf4 <prvCopyDataToQueue+0x72>
				--uxMessagesWaiting;
 8002ce2:	3d01      	subs	r5, #1
BaseType_t xReturn = pdFALSE;
 8002ce4:	2000      	movs	r0, #0
 8002ce6:	e7d9      	b.n	8002c9c <prvCopyDataToQueue+0x1a>
 8002ce8:	2000      	movs	r0, #0
 8002cea:	e7d7      	b.n	8002c9c <prvCopyDataToQueue+0x1a>
 8002cec:	2000      	movs	r0, #0
 8002cee:	e7d5      	b.n	8002c9c <prvCopyDataToQueue+0x1a>
 8002cf0:	2000      	movs	r0, #0
 8002cf2:	e7d3      	b.n	8002c9c <prvCopyDataToQueue+0x1a>
 8002cf4:	2000      	movs	r0, #0
 8002cf6:	e7d1      	b.n	8002c9c <prvCopyDataToQueue+0x1a>

08002cf8 <prvCopyDataFromQueue>:
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8002cf8:	6c02      	ldr	r2, [r0, #64]	; 0x40
 8002cfa:	b172      	cbz	r2, 8002d1a <prvCopyDataFromQueue+0x22>
{
 8002cfc:	b510      	push	{r4, lr}
 8002cfe:	4603      	mov	r3, r0
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8002d00:	68c4      	ldr	r4, [r0, #12]
 8002d02:	4414      	add	r4, r2
 8002d04:	60c4      	str	r4, [r0, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8002d06:	6840      	ldr	r0, [r0, #4]
 8002d08:	4284      	cmp	r4, r0
 8002d0a:	d301      	bcc.n	8002d10 <prvCopyDataFromQueue+0x18>
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 8002d0c:	6818      	ldr	r0, [r3, #0]
 8002d0e:	60d8      	str	r0, [r3, #12]
 8002d10:	4608      	mov	r0, r1
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 8002d12:	68d9      	ldr	r1, [r3, #12]
 8002d14:	f00b f8c5 	bl	800dea2 <memcpy>
 8002d18:	bd10      	pop	{r4, pc}
 8002d1a:	4770      	bx	lr

08002d1c <prvUnlockQueue>:
{
 8002d1c:	b538      	push	{r3, r4, r5, lr}
 8002d1e:	4605      	mov	r5, r0
	taskENTER_CRITICAL();
 8002d20:	f7ff fd18 	bl	8002754 <vPortEnterCritical>
		int8_t cTxLock = pxQueue->cTxLock;
 8002d24:	f895 4045 	ldrb.w	r4, [r5, #69]	; 0x45
 8002d28:	b264      	sxtb	r4, r4
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8002d2a:	e001      	b.n	8002d30 <prvUnlockQueue+0x14>
			--cTxLock;
 8002d2c:	3c01      	subs	r4, #1
 8002d2e:	b264      	sxtb	r4, r4
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8002d30:	2c00      	cmp	r4, #0
 8002d32:	dd0a      	ble.n	8002d4a <prvUnlockQueue+0x2e>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002d34:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8002d36:	b143      	cbz	r3, 8002d4a <prvUnlockQueue+0x2e>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002d38:	f105 0024 	add.w	r0, r5, #36	; 0x24
 8002d3c:	f001 f838 	bl	8003db0 <xTaskRemoveFromEventList>
 8002d40:	2800      	cmp	r0, #0
 8002d42:	d0f3      	beq.n	8002d2c <prvUnlockQueue+0x10>
						vTaskMissedYield();
 8002d44:	f001 f8c6 	bl	8003ed4 <vTaskMissedYield>
 8002d48:	e7f0      	b.n	8002d2c <prvUnlockQueue+0x10>
		pxQueue->cTxLock = queueUNLOCKED;
 8002d4a:	23ff      	movs	r3, #255	; 0xff
 8002d4c:	f885 3045 	strb.w	r3, [r5, #69]	; 0x45
	taskEXIT_CRITICAL();
 8002d50:	f7ff fd22 	bl	8002798 <vPortExitCritical>
	taskENTER_CRITICAL();
 8002d54:	f7ff fcfe 	bl	8002754 <vPortEnterCritical>
		int8_t cRxLock = pxQueue->cRxLock;
 8002d58:	f895 4044 	ldrb.w	r4, [r5, #68]	; 0x44
 8002d5c:	b264      	sxtb	r4, r4
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8002d5e:	e001      	b.n	8002d64 <prvUnlockQueue+0x48>
				--cRxLock;
 8002d60:	3c01      	subs	r4, #1
 8002d62:	b264      	sxtb	r4, r4
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8002d64:	2c00      	cmp	r4, #0
 8002d66:	dd0a      	ble.n	8002d7e <prvUnlockQueue+0x62>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002d68:	692b      	ldr	r3, [r5, #16]
 8002d6a:	b143      	cbz	r3, 8002d7e <prvUnlockQueue+0x62>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002d6c:	f105 0010 	add.w	r0, r5, #16
 8002d70:	f001 f81e 	bl	8003db0 <xTaskRemoveFromEventList>
 8002d74:	2800      	cmp	r0, #0
 8002d76:	d0f3      	beq.n	8002d60 <prvUnlockQueue+0x44>
					vTaskMissedYield();
 8002d78:	f001 f8ac 	bl	8003ed4 <vTaskMissedYield>
 8002d7c:	e7f0      	b.n	8002d60 <prvUnlockQueue+0x44>
		pxQueue->cRxLock = queueUNLOCKED;
 8002d7e:	23ff      	movs	r3, #255	; 0xff
 8002d80:	f885 3044 	strb.w	r3, [r5, #68]	; 0x44
	taskEXIT_CRITICAL();
 8002d84:	f7ff fd08 	bl	8002798 <vPortExitCritical>
 8002d88:	bd38      	pop	{r3, r4, r5, pc}

08002d8a <xQueueGenericReset>:
{
 8002d8a:	b538      	push	{r3, r4, r5, lr}
	configASSERT( pxQueue );
 8002d8c:	b1e8      	cbz	r0, 8002dca <xQueueGenericReset+0x40>
 8002d8e:	4604      	mov	r4, r0
 8002d90:	460d      	mov	r5, r1
	taskENTER_CRITICAL();
 8002d92:	f7ff fcdf 	bl	8002754 <vPortEnterCritical>
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8002d96:	6821      	ldr	r1, [r4, #0]
 8002d98:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8002d9a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002d9c:	fb03 1002 	mla	r0, r3, r2, r1
 8002da0:	6060      	str	r0, [r4, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8002da2:	2000      	movs	r0, #0
 8002da4:	63a0      	str	r0, [r4, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8002da6:	60a1      	str	r1, [r4, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8002da8:	3a01      	subs	r2, #1
 8002daa:	fb02 1303 	mla	r3, r2, r3, r1
 8002dae:	60e3      	str	r3, [r4, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8002db0:	23ff      	movs	r3, #255	; 0xff
 8002db2:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8002db6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
		if( xNewQueue == pdFALSE )
 8002dba:	b97d      	cbnz	r5, 8002ddc <xQueueGenericReset+0x52>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002dbc:	6923      	ldr	r3, [r4, #16]
 8002dbe:	b1ab      	cbz	r3, 8002dec <xQueueGenericReset+0x62>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002dc0:	f104 0010 	add.w	r0, r4, #16
 8002dc4:	f000 fff4 	bl	8003db0 <xTaskRemoveFromEventList>
 8002dc8:	e010      	b.n	8002dec <xQueueGenericReset+0x62>
 8002dca:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002dce:	f383 8811 	msr	BASEPRI, r3
 8002dd2:	f3bf 8f6f 	isb	sy
 8002dd6:	f3bf 8f4f 	dsb	sy
 8002dda:	e7fe      	b.n	8002dda <xQueueGenericReset+0x50>
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8002ddc:	f104 0010 	add.w	r0, r4, #16
 8002de0:	f7ff fc03 	bl	80025ea <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8002de4:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8002de8:	f7ff fbff 	bl	80025ea <vListInitialise>
	taskEXIT_CRITICAL();
 8002dec:	f7ff fcd4 	bl	8002798 <vPortExitCritical>
}
 8002df0:	2001      	movs	r0, #1
 8002df2:	bd38      	pop	{r3, r4, r5, pc}

08002df4 <prvInitialiseNewQueue>:
{
 8002df4:	b510      	push	{r4, lr}
 8002df6:	9b02      	ldr	r3, [sp, #8]
	if( uxItemSize == ( UBaseType_t ) 0 )
 8002df8:	460c      	mov	r4, r1
 8002dfa:	b139      	cbz	r1, 8002e0c <prvInitialiseNewQueue+0x18>
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8002dfc:	601a      	str	r2, [r3, #0]
	pxNewQueue->uxLength = uxQueueLength;
 8002dfe:	63d8      	str	r0, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8002e00:	641c      	str	r4, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8002e02:	2101      	movs	r1, #1
 8002e04:	4618      	mov	r0, r3
 8002e06:	f7ff ffc0 	bl	8002d8a <xQueueGenericReset>
 8002e0a:	bd10      	pop	{r4, pc}
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8002e0c:	601b      	str	r3, [r3, #0]
 8002e0e:	e7f6      	b.n	8002dfe <prvInitialiseNewQueue+0xa>

08002e10 <xQueueGenericCreateStatic>:
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8002e10:	b940      	cbnz	r0, 8002e24 <xQueueGenericCreateStatic+0x14>
 8002e12:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e16:	f383 8811 	msr	BASEPRI, r3
 8002e1a:	f3bf 8f6f 	isb	sy
 8002e1e:	f3bf 8f4f 	dsb	sy
 8002e22:	e7fe      	b.n	8002e22 <xQueueGenericCreateStatic+0x12>
	{
 8002e24:	b510      	push	{r4, lr}
 8002e26:	b084      	sub	sp, #16
 8002e28:	4604      	mov	r4, r0
		configASSERT( pxStaticQueue != NULL );
 8002e2a:	b163      	cbz	r3, 8002e46 <xQueueGenericCreateStatic+0x36>
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8002e2c:	b1a2      	cbz	r2, 8002e58 <xQueueGenericCreateStatic+0x48>
 8002e2e:	b1a9      	cbz	r1, 8002e5c <xQueueGenericCreateStatic+0x4c>
 8002e30:	2001      	movs	r0, #1
 8002e32:	b9a8      	cbnz	r0, 8002e60 <xQueueGenericCreateStatic+0x50>
 8002e34:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e38:	f383 8811 	msr	BASEPRI, r3
 8002e3c:	f3bf 8f6f 	isb	sy
 8002e40:	f3bf 8f4f 	dsb	sy
 8002e44:	e7fe      	b.n	8002e44 <xQueueGenericCreateStatic+0x34>
 8002e46:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e4a:	f383 8811 	msr	BASEPRI, r3
 8002e4e:	f3bf 8f6f 	isb	sy
 8002e52:	f3bf 8f4f 	dsb	sy
 8002e56:	e7fe      	b.n	8002e56 <xQueueGenericCreateStatic+0x46>
 8002e58:	2001      	movs	r0, #1
 8002e5a:	e7ea      	b.n	8002e32 <xQueueGenericCreateStatic+0x22>
 8002e5c:	2000      	movs	r0, #0
 8002e5e:	e7e8      	b.n	8002e32 <xQueueGenericCreateStatic+0x22>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8002e60:	b90a      	cbnz	r2, 8002e66 <xQueueGenericCreateStatic+0x56>
 8002e62:	b101      	cbz	r1, 8002e66 <xQueueGenericCreateStatic+0x56>
 8002e64:	2000      	movs	r0, #0
 8002e66:	b940      	cbnz	r0, 8002e7a <xQueueGenericCreateStatic+0x6a>
 8002e68:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e6c:	f383 8811 	msr	BASEPRI, r3
 8002e70:	f3bf 8f6f 	isb	sy
 8002e74:	f3bf 8f4f 	dsb	sy
 8002e78:	e7fe      	b.n	8002e78 <xQueueGenericCreateStatic+0x68>
			volatile size_t xSize = sizeof( StaticQueue_t );
 8002e7a:	2048      	movs	r0, #72	; 0x48
 8002e7c:	9003      	str	r0, [sp, #12]
			configASSERT( xSize == sizeof( Queue_t ) );
 8002e7e:	9803      	ldr	r0, [sp, #12]
 8002e80:	2848      	cmp	r0, #72	; 0x48
 8002e82:	d008      	beq.n	8002e96 <xQueueGenericCreateStatic+0x86>
 8002e84:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e88:	f383 8811 	msr	BASEPRI, r3
 8002e8c:	f3bf 8f6f 	isb	sy
 8002e90:	f3bf 8f4f 	dsb	sy
 8002e94:	e7fe      	b.n	8002e94 <xQueueGenericCreateStatic+0x84>
 8002e96:	4620      	mov	r0, r4
 8002e98:	461c      	mov	r4, r3
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8002e9a:	2301      	movs	r3, #1
 8002e9c:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8002ea0:	9400      	str	r4, [sp, #0]
 8002ea2:	f89d 3018 	ldrb.w	r3, [sp, #24]
 8002ea6:	f7ff ffa5 	bl	8002df4 <prvInitialiseNewQueue>
	}
 8002eaa:	4620      	mov	r0, r4
 8002eac:	b004      	add	sp, #16
 8002eae:	bd10      	pop	{r4, pc}

08002eb0 <xQueueGenericCreate>:
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8002eb0:	b940      	cbnz	r0, 8002ec4 <xQueueGenericCreate+0x14>
 8002eb2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002eb6:	f383 8811 	msr	BASEPRI, r3
 8002eba:	f3bf 8f6f 	isb	sy
 8002ebe:	f3bf 8f4f 	dsb	sy
 8002ec2:	e7fe      	b.n	8002ec2 <xQueueGenericCreate+0x12>
	{
 8002ec4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002ec6:	b083      	sub	sp, #12
 8002ec8:	4606      	mov	r6, r0
		if( uxItemSize == ( UBaseType_t ) 0 )
 8002eca:	b111      	cbz	r1, 8002ed2 <xQueueGenericCreate+0x22>
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002ecc:	fb01 f000 	mul.w	r0, r1, r0
 8002ed0:	e000      	b.n	8002ed4 <xQueueGenericCreate+0x24>
			xQueueSizeInBytes = ( size_t ) 0;
 8002ed2:	2000      	movs	r0, #0
 8002ed4:	4617      	mov	r7, r2
 8002ed6:	460c      	mov	r4, r1
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 8002ed8:	3048      	adds	r0, #72	; 0x48
 8002eda:	f7ff fdf1 	bl	8002ac0 <pvPortMalloc>
		if( pxNewQueue != NULL )
 8002ede:	4605      	mov	r5, r0
 8002ee0:	b150      	cbz	r0, 8002ef8 <xQueueGenericCreate+0x48>
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8002ee2:	2300      	movs	r3, #0
 8002ee4:	f880 3046 	strb.w	r3, [r0, #70]	; 0x46
			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8002ee8:	9000      	str	r0, [sp, #0]
 8002eea:	463b      	mov	r3, r7
 8002eec:	f100 0248 	add.w	r2, r0, #72	; 0x48
 8002ef0:	4621      	mov	r1, r4
 8002ef2:	4630      	mov	r0, r6
 8002ef4:	f7ff ff7e 	bl	8002df4 <prvInitialiseNewQueue>
	}
 8002ef8:	4628      	mov	r0, r5
 8002efa:	b003      	add	sp, #12
 8002efc:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08002f00 <xQueueGenericSend>:
{
 8002f00:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002f02:	b085      	sub	sp, #20
 8002f04:	9201      	str	r2, [sp, #4]
	configASSERT( pxQueue );
 8002f06:	b160      	cbz	r0, 8002f22 <xQueueGenericSend+0x22>
 8002f08:	4604      	mov	r4, r0
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002f0a:	b199      	cbz	r1, 8002f34 <xQueueGenericSend+0x34>
 8002f0c:	2501      	movs	r5, #1
 8002f0e:	b9bd      	cbnz	r5, 8002f40 <xQueueGenericSend+0x40>
 8002f10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f14:	f383 8811 	msr	BASEPRI, r3
 8002f18:	f3bf 8f6f 	isb	sy
 8002f1c:	f3bf 8f4f 	dsb	sy
 8002f20:	e7fe      	b.n	8002f20 <xQueueGenericSend+0x20>
 8002f22:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f26:	f383 8811 	msr	BASEPRI, r3
 8002f2a:	f3bf 8f6f 	isb	sy
 8002f2e:	f3bf 8f4f 	dsb	sy
 8002f32:	e7fe      	b.n	8002f32 <xQueueGenericSend+0x32>
 8002f34:	6c02      	ldr	r2, [r0, #64]	; 0x40
 8002f36:	b90a      	cbnz	r2, 8002f3c <xQueueGenericSend+0x3c>
 8002f38:	2501      	movs	r5, #1
 8002f3a:	e7e8      	b.n	8002f0e <xQueueGenericSend+0xe>
 8002f3c:	2500      	movs	r5, #0
 8002f3e:	e7e6      	b.n	8002f0e <xQueueGenericSend+0xe>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002f40:	2b02      	cmp	r3, #2
 8002f42:	d009      	beq.n	8002f58 <xQueueGenericSend+0x58>
 8002f44:	b96d      	cbnz	r5, 8002f62 <xQueueGenericSend+0x62>
 8002f46:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f4a:	f383 8811 	msr	BASEPRI, r3
 8002f4e:	f3bf 8f6f 	isb	sy
 8002f52:	f3bf 8f4f 	dsb	sy
 8002f56:	e7fe      	b.n	8002f56 <xQueueGenericSend+0x56>
 8002f58:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8002f5a:	2a01      	cmp	r2, #1
 8002f5c:	d0f2      	beq.n	8002f44 <xQueueGenericSend+0x44>
 8002f5e:	2500      	movs	r5, #0
 8002f60:	e7f0      	b.n	8002f44 <xQueueGenericSend+0x44>
 8002f62:	461e      	mov	r6, r3
 8002f64:	460f      	mov	r7, r1
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002f66:	f000 ffbb 	bl	8003ee0 <xTaskGetSchedulerState>
 8002f6a:	b910      	cbnz	r0, 8002f72 <xQueueGenericSend+0x72>
 8002f6c:	9b01      	ldr	r3, [sp, #4]
 8002f6e:	b103      	cbz	r3, 8002f72 <xQueueGenericSend+0x72>
 8002f70:	2500      	movs	r5, #0
 8002f72:	b945      	cbnz	r5, 8002f86 <xQueueGenericSend+0x86>
 8002f74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f78:	f383 8811 	msr	BASEPRI, r3
 8002f7c:	f3bf 8f6f 	isb	sy
 8002f80:	f3bf 8f4f 	dsb	sy
 8002f84:	e7fe      	b.n	8002f84 <xQueueGenericSend+0x84>
 8002f86:	2500      	movs	r5, #0
 8002f88:	e018      	b.n	8002fbc <xQueueGenericSend+0xbc>
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8002f8a:	4632      	mov	r2, r6
 8002f8c:	4639      	mov	r1, r7
 8002f8e:	4620      	mov	r0, r4
 8002f90:	f7ff fe77 	bl	8002c82 <prvCopyDataToQueue>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002f94:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002f96:	b11b      	cbz	r3, 8002fa0 <xQueueGenericSend+0xa0>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002f98:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8002f9c:	f000 ff08 	bl	8003db0 <xTaskRemoveFromEventList>
				taskEXIT_CRITICAL();
 8002fa0:	f7ff fbfa 	bl	8002798 <vPortExitCritical>
				return pdPASS;
 8002fa4:	2001      	movs	r0, #1
}
 8002fa6:	b005      	add	sp, #20
 8002fa8:	bdf0      	pop	{r4, r5, r6, r7, pc}
					taskEXIT_CRITICAL();
 8002faa:	f7ff fbf5 	bl	8002798 <vPortExitCritical>
					return errQUEUE_FULL;
 8002fae:	2000      	movs	r0, #0
 8002fb0:	e7f9      	b.n	8002fa6 <xQueueGenericSend+0xa6>
				prvUnlockQueue( pxQueue );
 8002fb2:	4620      	mov	r0, r4
 8002fb4:	f7ff feb2 	bl	8002d1c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8002fb8:	f000 fe00 	bl	8003bbc <xTaskResumeAll>
		taskENTER_CRITICAL();
 8002fbc:	f7ff fbca 	bl	8002754 <vPortEnterCritical>
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8002fc0:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8002fc2:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8002fc4:	429a      	cmp	r2, r3
 8002fc6:	d3e0      	bcc.n	8002f8a <xQueueGenericSend+0x8a>
 8002fc8:	2e02      	cmp	r6, #2
 8002fca:	d0de      	beq.n	8002f8a <xQueueGenericSend+0x8a>
				if( xTicksToWait == ( TickType_t ) 0 )
 8002fcc:	9b01      	ldr	r3, [sp, #4]
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	d0eb      	beq.n	8002faa <xQueueGenericSend+0xaa>
				else if( xEntryTimeSet == pdFALSE )
 8002fd2:	b91d      	cbnz	r5, 8002fdc <xQueueGenericSend+0xdc>
					vTaskInternalSetTimeOutState( &xTimeOut );
 8002fd4:	a802      	add	r0, sp, #8
 8002fd6:	f000 ff31 	bl	8003e3c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8002fda:	2501      	movs	r5, #1
		taskEXIT_CRITICAL();
 8002fdc:	f7ff fbdc 	bl	8002798 <vPortExitCritical>
		vTaskSuspendAll();
 8002fe0:	f000 fd60 	bl	8003aa4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8002fe4:	f7ff fbb6 	bl	8002754 <vPortEnterCritical>
 8002fe8:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8002fec:	b25b      	sxtb	r3, r3
 8002fee:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002ff2:	d102      	bne.n	8002ffa <xQueueGenericSend+0xfa>
 8002ff4:	2300      	movs	r3, #0
 8002ff6:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8002ffa:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8002ffe:	b25b      	sxtb	r3, r3
 8003000:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003004:	d102      	bne.n	800300c <xQueueGenericSend+0x10c>
 8003006:	2300      	movs	r3, #0
 8003008:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800300c:	f7ff fbc4 	bl	8002798 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003010:	a901      	add	r1, sp, #4
 8003012:	a802      	add	r0, sp, #8
 8003014:	f000 ff1e 	bl	8003e54 <xTaskCheckForTimeOut>
 8003018:	b9c8      	cbnz	r0, 800304e <xQueueGenericSend+0x14e>
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800301a:	4620      	mov	r0, r4
 800301c:	f7ff fe15 	bl	8002c4a <prvIsQueueFull>
 8003020:	2800      	cmp	r0, #0
 8003022:	d0c6      	beq.n	8002fb2 <xQueueGenericSend+0xb2>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8003024:	9901      	ldr	r1, [sp, #4]
 8003026:	f104 0010 	add.w	r0, r4, #16
 800302a:	f000 fea9 	bl	8003d80 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800302e:	4620      	mov	r0, r4
 8003030:	f7ff fe74 	bl	8002d1c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8003034:	f000 fdc2 	bl	8003bbc <xTaskResumeAll>
 8003038:	2800      	cmp	r0, #0
 800303a:	d1bf      	bne.n	8002fbc <xQueueGenericSend+0xbc>
					portYIELD_WITHIN_API();
 800303c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003040:	4b06      	ldr	r3, [pc, #24]	; (800305c <xQueueGenericSend+0x15c>)
 8003042:	601a      	str	r2, [r3, #0]
 8003044:	f3bf 8f4f 	dsb	sy
 8003048:	f3bf 8f6f 	isb	sy
 800304c:	e7b6      	b.n	8002fbc <xQueueGenericSend+0xbc>
			prvUnlockQueue( pxQueue );
 800304e:	4620      	mov	r0, r4
 8003050:	f7ff fe64 	bl	8002d1c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003054:	f000 fdb2 	bl	8003bbc <xTaskResumeAll>
			return errQUEUE_FULL;
 8003058:	2000      	movs	r0, #0
 800305a:	e7a4      	b.n	8002fa6 <xQueueGenericSend+0xa6>
 800305c:	e000ed04 	.word	0xe000ed04

08003060 <prvInitialiseMutex>:
		if( pxNewQueue != NULL )
 8003060:	b148      	cbz	r0, 8003076 <prvInitialiseMutex+0x16>
	{
 8003062:	b508      	push	{r3, lr}
			pxNewQueue->pxMutexHolder = NULL;
 8003064:	2100      	movs	r1, #0
 8003066:	6041      	str	r1, [r0, #4]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8003068:	6001      	str	r1, [r0, #0]
			pxNewQueue->u.uxRecursiveCallCount = 0;
 800306a:	60c1      	str	r1, [r0, #12]
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800306c:	460b      	mov	r3, r1
 800306e:	460a      	mov	r2, r1
 8003070:	f7ff ff46 	bl	8002f00 <xQueueGenericSend>
 8003074:	bd08      	pop	{r3, pc}
 8003076:	4770      	bx	lr

08003078 <xQueueCreateMutex>:
	{
 8003078:	b510      	push	{r4, lr}
		pxNewQueue = ( Queue_t * ) xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 800307a:	4602      	mov	r2, r0
 800307c:	2100      	movs	r1, #0
 800307e:	2001      	movs	r0, #1
 8003080:	f7ff ff16 	bl	8002eb0 <xQueueGenericCreate>
 8003084:	4604      	mov	r4, r0
		prvInitialiseMutex( pxNewQueue );
 8003086:	f7ff ffeb 	bl	8003060 <prvInitialiseMutex>
	}
 800308a:	4620      	mov	r0, r4
 800308c:	bd10      	pop	{r4, pc}

0800308e <xQueueCreateMutexStatic>:
	{
 800308e:	b510      	push	{r4, lr}
 8003090:	b082      	sub	sp, #8
		pxNewQueue = ( Queue_t * ) xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 8003092:	9000      	str	r0, [sp, #0]
 8003094:	460b      	mov	r3, r1
 8003096:	2200      	movs	r2, #0
 8003098:	4611      	mov	r1, r2
 800309a:	2001      	movs	r0, #1
 800309c:	f7ff feb8 	bl	8002e10 <xQueueGenericCreateStatic>
 80030a0:	4604      	mov	r4, r0
		prvInitialiseMutex( pxNewQueue );
 80030a2:	f7ff ffdd 	bl	8003060 <prvInitialiseMutex>
	}
 80030a6:	4620      	mov	r0, r4
 80030a8:	b002      	add	sp, #8
 80030aa:	bd10      	pop	{r4, pc}

080030ac <xQueueGenericSendFromISR>:
{
 80030ac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	configASSERT( pxQueue );
 80030b0:	b160      	cbz	r0, 80030cc <xQueueGenericSendFromISR+0x20>
 80030b2:	4604      	mov	r4, r0
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80030b4:	b199      	cbz	r1, 80030de <xQueueGenericSendFromISR+0x32>
 80030b6:	2001      	movs	r0, #1
 80030b8:	b9b8      	cbnz	r0, 80030ea <xQueueGenericSendFromISR+0x3e>
 80030ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80030be:	f383 8811 	msr	BASEPRI, r3
 80030c2:	f3bf 8f6f 	isb	sy
 80030c6:	f3bf 8f4f 	dsb	sy
 80030ca:	e7fe      	b.n	80030ca <xQueueGenericSendFromISR+0x1e>
 80030cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80030d0:	f383 8811 	msr	BASEPRI, r3
 80030d4:	f3bf 8f6f 	isb	sy
 80030d8:	f3bf 8f4f 	dsb	sy
 80030dc:	e7fe      	b.n	80030dc <xQueueGenericSendFromISR+0x30>
 80030de:	6c00      	ldr	r0, [r0, #64]	; 0x40
 80030e0:	b908      	cbnz	r0, 80030e6 <xQueueGenericSendFromISR+0x3a>
 80030e2:	2001      	movs	r0, #1
 80030e4:	e7e8      	b.n	80030b8 <xQueueGenericSendFromISR+0xc>
 80030e6:	2000      	movs	r0, #0
 80030e8:	e7e6      	b.n	80030b8 <xQueueGenericSendFromISR+0xc>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80030ea:	2b02      	cmp	r3, #2
 80030ec:	d009      	beq.n	8003102 <xQueueGenericSendFromISR+0x56>
 80030ee:	b968      	cbnz	r0, 800310c <xQueueGenericSendFromISR+0x60>
 80030f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80030f4:	f383 8811 	msr	BASEPRI, r3
 80030f8:	f3bf 8f6f 	isb	sy
 80030fc:	f3bf 8f4f 	dsb	sy
 8003100:	e7fe      	b.n	8003100 <xQueueGenericSendFromISR+0x54>
 8003102:	6be5      	ldr	r5, [r4, #60]	; 0x3c
 8003104:	2d01      	cmp	r5, #1
 8003106:	d0f2      	beq.n	80030ee <xQueueGenericSendFromISR+0x42>
 8003108:	2000      	movs	r0, #0
 800310a:	e7f0      	b.n	80030ee <xQueueGenericSendFromISR+0x42>
 800310c:	461f      	mov	r7, r3
 800310e:	4690      	mov	r8, r2
 8003110:	4689      	mov	r9, r1
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8003112:	f7ff fc49 	bl	80029a8 <vPortValidateInterruptPriority>
	__asm volatile
 8003116:	f3ef 8611 	mrs	r6, BASEPRI
 800311a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800311e:	f383 8811 	msr	BASEPRI, r3
 8003122:	f3bf 8f6f 	isb	sy
 8003126:	f3bf 8f4f 	dsb	sy
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800312a:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 800312c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800312e:	429a      	cmp	r2, r3
 8003130:	d301      	bcc.n	8003136 <xQueueGenericSendFromISR+0x8a>
 8003132:	2f02      	cmp	r7, #2
 8003134:	d121      	bne.n	800317a <xQueueGenericSendFromISR+0xce>
			const int8_t cTxLock = pxQueue->cTxLock;
 8003136:	f894 5045 	ldrb.w	r5, [r4, #69]	; 0x45
 800313a:	b26d      	sxtb	r5, r5
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800313c:	463a      	mov	r2, r7
 800313e:	4649      	mov	r1, r9
 8003140:	4620      	mov	r0, r4
 8003142:	f7ff fd9e 	bl	8002c82 <prvCopyDataToQueue>
			if( cTxLock == queueUNLOCKED )
 8003146:	f1b5 3fff 	cmp.w	r5, #4294967295	; 0xffffffff
 800314a:	d110      	bne.n	800316e <xQueueGenericSendFromISR+0xc2>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800314c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800314e:	b1b3      	cbz	r3, 800317e <xQueueGenericSendFromISR+0xd2>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003150:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8003154:	f000 fe2c 	bl	8003db0 <xTaskRemoveFromEventList>
 8003158:	b198      	cbz	r0, 8003182 <xQueueGenericSendFromISR+0xd6>
							if( pxHigherPriorityTaskWoken != NULL )
 800315a:	f1b8 0f00 	cmp.w	r8, #0
 800315e:	d012      	beq.n	8003186 <xQueueGenericSendFromISR+0xda>
								*pxHigherPriorityTaskWoken = pdTRUE;
 8003160:	2001      	movs	r0, #1
 8003162:	f8c8 0000 	str.w	r0, [r8]
	__asm volatile
 8003166:	f386 8811 	msr	BASEPRI, r6
}
 800316a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800316e:	1c6b      	adds	r3, r5, #1
 8003170:	b25b      	sxtb	r3, r3
 8003172:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
			xReturn = pdPASS;
 8003176:	2001      	movs	r0, #1
 8003178:	e7f5      	b.n	8003166 <xQueueGenericSendFromISR+0xba>
			xReturn = errQUEUE_FULL;
 800317a:	2000      	movs	r0, #0
 800317c:	e7f3      	b.n	8003166 <xQueueGenericSendFromISR+0xba>
			xReturn = pdPASS;
 800317e:	2001      	movs	r0, #1
 8003180:	e7f1      	b.n	8003166 <xQueueGenericSendFromISR+0xba>
 8003182:	2001      	movs	r0, #1
 8003184:	e7ef      	b.n	8003166 <xQueueGenericSendFromISR+0xba>
 8003186:	2001      	movs	r0, #1
 8003188:	e7ed      	b.n	8003166 <xQueueGenericSendFromISR+0xba>

0800318a <xQueueGiveFromISR>:
	configASSERT( pxQueue );
 800318a:	b160      	cbz	r0, 80031a6 <xQueueGiveFromISR+0x1c>
{
 800318c:	b570      	push	{r4, r5, r6, lr}
 800318e:	4604      	mov	r4, r0
	configASSERT( pxQueue->uxItemSize == 0 );
 8003190:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8003192:	b18b      	cbz	r3, 80031b8 <xQueueGiveFromISR+0x2e>
	__asm volatile
 8003194:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003198:	f383 8811 	msr	BASEPRI, r3
 800319c:	f3bf 8f6f 	isb	sy
 80031a0:	f3bf 8f4f 	dsb	sy
 80031a4:	e7fe      	b.n	80031a4 <xQueueGiveFromISR+0x1a>
 80031a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80031aa:	f383 8811 	msr	BASEPRI, r3
 80031ae:	f3bf 8f6f 	isb	sy
 80031b2:	f3bf 8f4f 	dsb	sy
 80031b6:	e7fe      	b.n	80031b6 <xQueueGiveFromISR+0x2c>
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->pxMutexHolder != NULL ) ) );
 80031b8:	6803      	ldr	r3, [r0, #0]
 80031ba:	b153      	cbz	r3, 80031d2 <xQueueGiveFromISR+0x48>
 80031bc:	2301      	movs	r3, #1
 80031be:	b973      	cbnz	r3, 80031de <xQueueGiveFromISR+0x54>
 80031c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80031c4:	f383 8811 	msr	BASEPRI, r3
 80031c8:	f3bf 8f6f 	isb	sy
 80031cc:	f3bf 8f4f 	dsb	sy
 80031d0:	e7fe      	b.n	80031d0 <xQueueGiveFromISR+0x46>
 80031d2:	6843      	ldr	r3, [r0, #4]
 80031d4:	b90b      	cbnz	r3, 80031da <xQueueGiveFromISR+0x50>
 80031d6:	2301      	movs	r3, #1
 80031d8:	e7f1      	b.n	80031be <xQueueGiveFromISR+0x34>
 80031da:	2300      	movs	r3, #0
 80031dc:	e7ef      	b.n	80031be <xQueueGiveFromISR+0x34>
 80031de:	460e      	mov	r6, r1
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80031e0:	f7ff fbe2 	bl	80029a8 <vPortValidateInterruptPriority>
	__asm volatile
 80031e4:	f3ef 8511 	mrs	r5, BASEPRI
 80031e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80031ec:	f383 8811 	msr	BASEPRI, r3
 80031f0:	f3bf 8f6f 	isb	sy
 80031f4:	f3bf 8f4f 	dsb	sy
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80031f8:	6ba2      	ldr	r2, [r4, #56]	; 0x38
		if( uxMessagesWaiting < pxQueue->uxLength )
 80031fa:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80031fc:	429a      	cmp	r2, r3
 80031fe:	d21a      	bcs.n	8003236 <xQueueGiveFromISR+0xac>
			const int8_t cTxLock = pxQueue->cTxLock;
 8003200:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8003204:	b25b      	sxtb	r3, r3
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8003206:	3201      	adds	r2, #1
 8003208:	63a2      	str	r2, [r4, #56]	; 0x38
			if( cTxLock == queueUNLOCKED )
 800320a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800320e:	d10c      	bne.n	800322a <xQueueGiveFromISR+0xa0>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003210:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003212:	b193      	cbz	r3, 800323a <xQueueGiveFromISR+0xb0>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003214:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8003218:	f000 fdca 	bl	8003db0 <xTaskRemoveFromEventList>
 800321c:	b178      	cbz	r0, 800323e <xQueueGiveFromISR+0xb4>
							if( pxHigherPriorityTaskWoken != NULL )
 800321e:	b186      	cbz	r6, 8003242 <xQueueGiveFromISR+0xb8>
								*pxHigherPriorityTaskWoken = pdTRUE;
 8003220:	2001      	movs	r0, #1
 8003222:	6030      	str	r0, [r6, #0]
	__asm volatile
 8003224:	f385 8811 	msr	BASEPRI, r5
}
 8003228:	bd70      	pop	{r4, r5, r6, pc}
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800322a:	3301      	adds	r3, #1
 800322c:	b25b      	sxtb	r3, r3
 800322e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
			xReturn = pdPASS;
 8003232:	2001      	movs	r0, #1
 8003234:	e7f6      	b.n	8003224 <xQueueGiveFromISR+0x9a>
			xReturn = errQUEUE_FULL;
 8003236:	2000      	movs	r0, #0
 8003238:	e7f4      	b.n	8003224 <xQueueGiveFromISR+0x9a>
			xReturn = pdPASS;
 800323a:	2001      	movs	r0, #1
 800323c:	e7f2      	b.n	8003224 <xQueueGiveFromISR+0x9a>
 800323e:	2001      	movs	r0, #1
 8003240:	e7f0      	b.n	8003224 <xQueueGiveFromISR+0x9a>
 8003242:	2001      	movs	r0, #1
 8003244:	e7ee      	b.n	8003224 <xQueueGiveFromISR+0x9a>
	...

08003248 <xQueueReceive>:
{
 8003248:	b5f0      	push	{r4, r5, r6, r7, lr}
 800324a:	b085      	sub	sp, #20
 800324c:	9201      	str	r2, [sp, #4]
	configASSERT( ( pxQueue ) );
 800324e:	b160      	cbz	r0, 800326a <xQueueReceive+0x22>
 8003250:	4604      	mov	r4, r0
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003252:	b199      	cbz	r1, 800327c <xQueueReceive+0x34>
 8003254:	2501      	movs	r5, #1
 8003256:	b9bd      	cbnz	r5, 8003288 <xQueueReceive+0x40>
	__asm volatile
 8003258:	f04f 0350 	mov.w	r3, #80	; 0x50
 800325c:	f383 8811 	msr	BASEPRI, r3
 8003260:	f3bf 8f6f 	isb	sy
 8003264:	f3bf 8f4f 	dsb	sy
 8003268:	e7fe      	b.n	8003268 <xQueueReceive+0x20>
 800326a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800326e:	f383 8811 	msr	BASEPRI, r3
 8003272:	f3bf 8f6f 	isb	sy
 8003276:	f3bf 8f4f 	dsb	sy
 800327a:	e7fe      	b.n	800327a <xQueueReceive+0x32>
 800327c:	6c03      	ldr	r3, [r0, #64]	; 0x40
 800327e:	b90b      	cbnz	r3, 8003284 <xQueueReceive+0x3c>
 8003280:	2501      	movs	r5, #1
 8003282:	e7e8      	b.n	8003256 <xQueueReceive+0xe>
 8003284:	2500      	movs	r5, #0
 8003286:	e7e6      	b.n	8003256 <xQueueReceive+0xe>
 8003288:	460e      	mov	r6, r1
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800328a:	f000 fe29 	bl	8003ee0 <xTaskGetSchedulerState>
 800328e:	b910      	cbnz	r0, 8003296 <xQueueReceive+0x4e>
 8003290:	9b01      	ldr	r3, [sp, #4]
 8003292:	b103      	cbz	r3, 8003296 <xQueueReceive+0x4e>
 8003294:	2500      	movs	r5, #0
 8003296:	b945      	cbnz	r5, 80032aa <xQueueReceive+0x62>
 8003298:	f04f 0350 	mov.w	r3, #80	; 0x50
 800329c:	f383 8811 	msr	BASEPRI, r3
 80032a0:	f3bf 8f6f 	isb	sy
 80032a4:	f3bf 8f4f 	dsb	sy
 80032a8:	e7fe      	b.n	80032a8 <xQueueReceive+0x60>
 80032aa:	2700      	movs	r7, #0
 80032ac:	e026      	b.n	80032fc <xQueueReceive+0xb4>
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80032ae:	4631      	mov	r1, r6
 80032b0:	4620      	mov	r0, r4
 80032b2:	f7ff fd21 	bl	8002cf8 <prvCopyDataFromQueue>
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80032b6:	3d01      	subs	r5, #1
 80032b8:	63a5      	str	r5, [r4, #56]	; 0x38
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80032ba:	6923      	ldr	r3, [r4, #16]
 80032bc:	b11b      	cbz	r3, 80032c6 <xQueueReceive+0x7e>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80032be:	f104 0010 	add.w	r0, r4, #16
 80032c2:	f000 fd75 	bl	8003db0 <xTaskRemoveFromEventList>
				taskEXIT_CRITICAL();
 80032c6:	f7ff fa67 	bl	8002798 <vPortExitCritical>
				return pdPASS;
 80032ca:	2001      	movs	r0, #1
}
 80032cc:	b005      	add	sp, #20
 80032ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
					taskEXIT_CRITICAL();
 80032d0:	f7ff fa62 	bl	8002798 <vPortExitCritical>
					return errQUEUE_EMPTY;
 80032d4:	2000      	movs	r0, #0
 80032d6:	e7f9      	b.n	80032cc <xQueueReceive+0x84>
					vTaskInternalSetTimeOutState( &xTimeOut );
 80032d8:	a802      	add	r0, sp, #8
 80032da:	f000 fdaf 	bl	8003e3c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80032de:	2701      	movs	r7, #1
 80032e0:	e016      	b.n	8003310 <xQueueReceive+0xc8>
		prvLockQueue( pxQueue );
 80032e2:	2300      	movs	r3, #0
 80032e4:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 80032e8:	e01e      	b.n	8003328 <xQueueReceive+0xe0>
 80032ea:	2300      	movs	r3, #0
 80032ec:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80032f0:	e020      	b.n	8003334 <xQueueReceive+0xec>
				prvUnlockQueue( pxQueue );
 80032f2:	4620      	mov	r0, r4
 80032f4:	f7ff fd12 	bl	8002d1c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80032f8:	f000 fc60 	bl	8003bbc <xTaskResumeAll>
		taskENTER_CRITICAL();
 80032fc:	f7ff fa2a 	bl	8002754 <vPortEnterCritical>
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003300:	6ba5      	ldr	r5, [r4, #56]	; 0x38
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003302:	2d00      	cmp	r5, #0
 8003304:	d1d3      	bne.n	80032ae <xQueueReceive+0x66>
				if( xTicksToWait == ( TickType_t ) 0 )
 8003306:	9b01      	ldr	r3, [sp, #4]
 8003308:	2b00      	cmp	r3, #0
 800330a:	d0e1      	beq.n	80032d0 <xQueueReceive+0x88>
				else if( xEntryTimeSet == pdFALSE )
 800330c:	2f00      	cmp	r7, #0
 800330e:	d0e3      	beq.n	80032d8 <xQueueReceive+0x90>
		taskEXIT_CRITICAL();
 8003310:	f7ff fa42 	bl	8002798 <vPortExitCritical>
		vTaskSuspendAll();
 8003314:	f000 fbc6 	bl	8003aa4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003318:	f7ff fa1c 	bl	8002754 <vPortEnterCritical>
 800331c:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8003320:	b25b      	sxtb	r3, r3
 8003322:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003326:	d0dc      	beq.n	80032e2 <xQueueReceive+0x9a>
 8003328:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 800332c:	b25b      	sxtb	r3, r3
 800332e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003332:	d0da      	beq.n	80032ea <xQueueReceive+0xa2>
 8003334:	f7ff fa30 	bl	8002798 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003338:	a901      	add	r1, sp, #4
 800333a:	a802      	add	r0, sp, #8
 800333c:	f000 fd8a 	bl	8003e54 <xTaskCheckForTimeOut>
 8003340:	b9c8      	cbnz	r0, 8003376 <xQueueReceive+0x12e>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003342:	4620      	mov	r0, r4
 8003344:	f7ff fc90 	bl	8002c68 <prvIsQueueEmpty>
 8003348:	2800      	cmp	r0, #0
 800334a:	d0d2      	beq.n	80032f2 <xQueueReceive+0xaa>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800334c:	9901      	ldr	r1, [sp, #4]
 800334e:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8003352:	f000 fd15 	bl	8003d80 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8003356:	4620      	mov	r0, r4
 8003358:	f7ff fce0 	bl	8002d1c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800335c:	f000 fc2e 	bl	8003bbc <xTaskResumeAll>
 8003360:	2800      	cmp	r0, #0
 8003362:	d1cb      	bne.n	80032fc <xQueueReceive+0xb4>
					portYIELD_WITHIN_API();
 8003364:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003368:	4b09      	ldr	r3, [pc, #36]	; (8003390 <xQueueReceive+0x148>)
 800336a:	601a      	str	r2, [r3, #0]
 800336c:	f3bf 8f4f 	dsb	sy
 8003370:	f3bf 8f6f 	isb	sy
 8003374:	e7c2      	b.n	80032fc <xQueueReceive+0xb4>
			prvUnlockQueue( pxQueue );
 8003376:	4620      	mov	r0, r4
 8003378:	f7ff fcd0 	bl	8002d1c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800337c:	f000 fc1e 	bl	8003bbc <xTaskResumeAll>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003380:	4620      	mov	r0, r4
 8003382:	f7ff fc71 	bl	8002c68 <prvIsQueueEmpty>
 8003386:	2800      	cmp	r0, #0
 8003388:	d0b8      	beq.n	80032fc <xQueueReceive+0xb4>
				return errQUEUE_EMPTY;
 800338a:	2000      	movs	r0, #0
 800338c:	e79e      	b.n	80032cc <xQueueReceive+0x84>
 800338e:	bf00      	nop
 8003390:	e000ed04 	.word	0xe000ed04

08003394 <xQueueSemaphoreTake>:
{
 8003394:	b570      	push	{r4, r5, r6, lr}
 8003396:	b084      	sub	sp, #16
 8003398:	9101      	str	r1, [sp, #4]
	configASSERT( ( pxQueue ) );
 800339a:	b158      	cbz	r0, 80033b4 <xQueueSemaphoreTake+0x20>
 800339c:	4604      	mov	r4, r0
	configASSERT( pxQueue->uxItemSize == 0 );
 800339e:	6c03      	ldr	r3, [r0, #64]	; 0x40
 80033a0:	b18b      	cbz	r3, 80033c6 <xQueueSemaphoreTake+0x32>
 80033a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80033a6:	f383 8811 	msr	BASEPRI, r3
 80033aa:	f3bf 8f6f 	isb	sy
 80033ae:	f3bf 8f4f 	dsb	sy
 80033b2:	e7fe      	b.n	80033b2 <xQueueSemaphoreTake+0x1e>
 80033b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80033b8:	f383 8811 	msr	BASEPRI, r3
 80033bc:	f3bf 8f6f 	isb	sy
 80033c0:	f3bf 8f4f 	dsb	sy
 80033c4:	e7fe      	b.n	80033c4 <xQueueSemaphoreTake+0x30>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80033c6:	f000 fd8b 	bl	8003ee0 <xTaskGetSchedulerState>
 80033ca:	b960      	cbnz	r0, 80033e6 <xQueueSemaphoreTake+0x52>
 80033cc:	9b01      	ldr	r3, [sp, #4]
 80033ce:	b963      	cbnz	r3, 80033ea <xQueueSemaphoreTake+0x56>
 80033d0:	2301      	movs	r3, #1
 80033d2:	b963      	cbnz	r3, 80033ee <xQueueSemaphoreTake+0x5a>
 80033d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80033d8:	f383 8811 	msr	BASEPRI, r3
 80033dc:	f3bf 8f6f 	isb	sy
 80033e0:	f3bf 8f4f 	dsb	sy
 80033e4:	e7fe      	b.n	80033e4 <xQueueSemaphoreTake+0x50>
 80033e6:	2301      	movs	r3, #1
 80033e8:	e7f3      	b.n	80033d2 <xQueueSemaphoreTake+0x3e>
 80033ea:	2300      	movs	r3, #0
 80033ec:	e7f1      	b.n	80033d2 <xQueueSemaphoreTake+0x3e>
 80033ee:	2500      	movs	r5, #0
 80033f0:	462e      	mov	r6, r5
 80033f2:	e045      	b.n	8003480 <xQueueSemaphoreTake+0xec>
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 80033f4:	3b01      	subs	r3, #1
 80033f6:	63a3      	str	r3, [r4, #56]	; 0x38
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80033f8:	6823      	ldr	r3, [r4, #0]
 80033fa:	b913      	cbnz	r3, 8003402 <xQueueSemaphoreTake+0x6e>
						pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
 80033fc:	f000 fea0 	bl	8004140 <pvTaskIncrementMutexHeldCount>
 8003400:	6060      	str	r0, [r4, #4]
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003402:	6923      	ldr	r3, [r4, #16]
 8003404:	b11b      	cbz	r3, 800340e <xQueueSemaphoreTake+0x7a>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003406:	f104 0010 	add.w	r0, r4, #16
 800340a:	f000 fcd1 	bl	8003db0 <xTaskRemoveFromEventList>
				taskEXIT_CRITICAL();
 800340e:	f7ff f9c3 	bl	8002798 <vPortExitCritical>
				return pdPASS;
 8003412:	2501      	movs	r5, #1
}
 8003414:	4628      	mov	r0, r5
 8003416:	b004      	add	sp, #16
 8003418:	bd70      	pop	{r4, r5, r6, pc}
						configASSERT( xInheritanceOccurred == pdFALSE );
 800341a:	b145      	cbz	r5, 800342e <xQueueSemaphoreTake+0x9a>
 800341c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003420:	f383 8811 	msr	BASEPRI, r3
 8003424:	f3bf 8f6f 	isb	sy
 8003428:	f3bf 8f4f 	dsb	sy
 800342c:	e7fe      	b.n	800342c <xQueueSemaphoreTake+0x98>
					taskEXIT_CRITICAL();
 800342e:	f7ff f9b3 	bl	8002798 <vPortExitCritical>
					return errQUEUE_EMPTY;
 8003432:	e7ef      	b.n	8003414 <xQueueSemaphoreTake+0x80>
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003434:	a802      	add	r0, sp, #8
 8003436:	f000 fd01 	bl	8003e3c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800343a:	2601      	movs	r6, #1
 800343c:	e02a      	b.n	8003494 <xQueueSemaphoreTake+0x100>
		prvLockQueue( pxQueue );
 800343e:	2300      	movs	r3, #0
 8003440:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8003444:	e032      	b.n	80034ac <xQueueSemaphoreTake+0x118>
 8003446:	2300      	movs	r3, #0
 8003448:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800344c:	e034      	b.n	80034b8 <xQueueSemaphoreTake+0x124>
						taskENTER_CRITICAL();
 800344e:	f7ff f981 	bl	8002754 <vPortEnterCritical>
							xInheritanceOccurred = xTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
 8003452:	6860      	ldr	r0, [r4, #4]
 8003454:	f000 fd54 	bl	8003f00 <xTaskPriorityInherit>
 8003458:	4605      	mov	r5, r0
						taskEXIT_CRITICAL();
 800345a:	f7ff f99d 	bl	8002798 <vPortExitCritical>
 800345e:	e03b      	b.n	80034d8 <xQueueSemaphoreTake+0x144>
				prvUnlockQueue( pxQueue );
 8003460:	4620      	mov	r0, r4
 8003462:	f7ff fc5b 	bl	8002d1c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003466:	f000 fba9 	bl	8003bbc <xTaskResumeAll>
 800346a:	e009      	b.n	8003480 <xQueueSemaphoreTake+0xec>
			prvUnlockQueue( pxQueue );
 800346c:	4620      	mov	r0, r4
 800346e:	f7ff fc55 	bl	8002d1c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003472:	f000 fba3 	bl	8003bbc <xTaskResumeAll>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003476:	4620      	mov	r0, r4
 8003478:	f7ff fbf6 	bl	8002c68 <prvIsQueueEmpty>
 800347c:	2800      	cmp	r0, #0
 800347e:	d140      	bne.n	8003502 <xQueueSemaphoreTake+0x16e>
		taskENTER_CRITICAL();
 8003480:	f7ff f968 	bl	8002754 <vPortEnterCritical>
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8003484:	6ba3      	ldr	r3, [r4, #56]	; 0x38
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8003486:	2b00      	cmp	r3, #0
 8003488:	d1b4      	bne.n	80033f4 <xQueueSemaphoreTake+0x60>
				if( xTicksToWait == ( TickType_t ) 0 )
 800348a:	9b01      	ldr	r3, [sp, #4]
 800348c:	2b00      	cmp	r3, #0
 800348e:	d0c4      	beq.n	800341a <xQueueSemaphoreTake+0x86>
				else if( xEntryTimeSet == pdFALSE )
 8003490:	2e00      	cmp	r6, #0
 8003492:	d0cf      	beq.n	8003434 <xQueueSemaphoreTake+0xa0>
		taskEXIT_CRITICAL();
 8003494:	f7ff f980 	bl	8002798 <vPortExitCritical>
		vTaskSuspendAll();
 8003498:	f000 fb04 	bl	8003aa4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800349c:	f7ff f95a 	bl	8002754 <vPortEnterCritical>
 80034a0:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 80034a4:	b25b      	sxtb	r3, r3
 80034a6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80034aa:	d0c8      	beq.n	800343e <xQueueSemaphoreTake+0xaa>
 80034ac:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 80034b0:	b25b      	sxtb	r3, r3
 80034b2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80034b6:	d0c6      	beq.n	8003446 <xQueueSemaphoreTake+0xb2>
 80034b8:	f7ff f96e 	bl	8002798 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80034bc:	a901      	add	r1, sp, #4
 80034be:	a802      	add	r0, sp, #8
 80034c0:	f000 fcc8 	bl	8003e54 <xTaskCheckForTimeOut>
 80034c4:	2800      	cmp	r0, #0
 80034c6:	d1d1      	bne.n	800346c <xQueueSemaphoreTake+0xd8>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80034c8:	4620      	mov	r0, r4
 80034ca:	f7ff fbcd 	bl	8002c68 <prvIsQueueEmpty>
 80034ce:	2800      	cmp	r0, #0
 80034d0:	d0c6      	beq.n	8003460 <xQueueSemaphoreTake+0xcc>
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80034d2:	6823      	ldr	r3, [r4, #0]
 80034d4:	2b00      	cmp	r3, #0
 80034d6:	d0ba      	beq.n	800344e <xQueueSemaphoreTake+0xba>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80034d8:	9901      	ldr	r1, [sp, #4]
 80034da:	f104 0024 	add.w	r0, r4, #36	; 0x24
 80034de:	f000 fc4f 	bl	8003d80 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80034e2:	4620      	mov	r0, r4
 80034e4:	f7ff fc1a 	bl	8002d1c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80034e8:	f000 fb68 	bl	8003bbc <xTaskResumeAll>
 80034ec:	2800      	cmp	r0, #0
 80034ee:	d1c7      	bne.n	8003480 <xQueueSemaphoreTake+0xec>
					portYIELD_WITHIN_API();
 80034f0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80034f4:	4b0a      	ldr	r3, [pc, #40]	; (8003520 <xQueueSemaphoreTake+0x18c>)
 80034f6:	601a      	str	r2, [r3, #0]
 80034f8:	f3bf 8f4f 	dsb	sy
 80034fc:	f3bf 8f6f 	isb	sy
 8003500:	e7be      	b.n	8003480 <xQueueSemaphoreTake+0xec>
					if( xInheritanceOccurred != pdFALSE )
 8003502:	2d00      	cmp	r5, #0
 8003504:	d086      	beq.n	8003414 <xQueueSemaphoreTake+0x80>
						taskENTER_CRITICAL();
 8003506:	f7ff f925 	bl	8002754 <vPortEnterCritical>
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800350a:	4620      	mov	r0, r4
 800350c:	f7ff fb94 	bl	8002c38 <prvGetDisinheritPriorityAfterTimeout>
							vTaskPriorityDisinheritAfterTimeout( ( void * ) pxQueue->pxMutexHolder, uxHighestWaitingPriority );
 8003510:	4601      	mov	r1, r0
 8003512:	6860      	ldr	r0, [r4, #4]
 8003514:	f000 fdae 	bl	8004074 <vTaskPriorityDisinheritAfterTimeout>
						taskEXIT_CRITICAL();
 8003518:	f7ff f93e 	bl	8002798 <vPortExitCritical>
				return errQUEUE_EMPTY;
 800351c:	2500      	movs	r5, #0
 800351e:	e779      	b.n	8003414 <xQueueSemaphoreTake+0x80>
 8003520:	e000ed04 	.word	0xe000ed04

08003524 <xQueueReceiveFromISR>:
{
 8003524:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	configASSERT( pxQueue );
 8003528:	b160      	cbz	r0, 8003544 <xQueueReceiveFromISR+0x20>
 800352a:	4604      	mov	r4, r0
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800352c:	b199      	cbz	r1, 8003556 <xQueueReceiveFromISR+0x32>
 800352e:	2301      	movs	r3, #1
 8003530:	b9bb      	cbnz	r3, 8003562 <xQueueReceiveFromISR+0x3e>
 8003532:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003536:	f383 8811 	msr	BASEPRI, r3
 800353a:	f3bf 8f6f 	isb	sy
 800353e:	f3bf 8f4f 	dsb	sy
 8003542:	e7fe      	b.n	8003542 <xQueueReceiveFromISR+0x1e>
 8003544:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003548:	f383 8811 	msr	BASEPRI, r3
 800354c:	f3bf 8f6f 	isb	sy
 8003550:	f3bf 8f4f 	dsb	sy
 8003554:	e7fe      	b.n	8003554 <xQueueReceiveFromISR+0x30>
 8003556:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8003558:	b90b      	cbnz	r3, 800355e <xQueueReceiveFromISR+0x3a>
 800355a:	2301      	movs	r3, #1
 800355c:	e7e8      	b.n	8003530 <xQueueReceiveFromISR+0xc>
 800355e:	2300      	movs	r3, #0
 8003560:	e7e6      	b.n	8003530 <xQueueReceiveFromISR+0xc>
 8003562:	4617      	mov	r7, r2
 8003564:	4689      	mov	r9, r1
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8003566:	f7ff fa1f 	bl	80029a8 <vPortValidateInterruptPriority>
	__asm volatile
 800356a:	f3ef 8611 	mrs	r6, BASEPRI
 800356e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003572:	f383 8811 	msr	BASEPRI, r3
 8003576:	f3bf 8f6f 	isb	sy
 800357a:	f3bf 8f4f 	dsb	sy
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800357e:	f8d4 8038 	ldr.w	r8, [r4, #56]	; 0x38
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003582:	f1b8 0f00 	cmp.w	r8, #0
 8003586:	d020      	beq.n	80035ca <xQueueReceiveFromISR+0xa6>
			const int8_t cRxLock = pxQueue->cRxLock;
 8003588:	f894 5044 	ldrb.w	r5, [r4, #68]	; 0x44
 800358c:	b26d      	sxtb	r5, r5
			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800358e:	4649      	mov	r1, r9
 8003590:	4620      	mov	r0, r4
 8003592:	f7ff fbb1 	bl	8002cf8 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8003596:	f108 33ff 	add.w	r3, r8, #4294967295	; 0xffffffff
 800359a:	63a3      	str	r3, [r4, #56]	; 0x38
			if( cRxLock == queueUNLOCKED )
 800359c:	f1b5 3fff 	cmp.w	r5, #4294967295	; 0xffffffff
 80035a0:	d10d      	bne.n	80035be <xQueueReceiveFromISR+0x9a>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80035a2:	6923      	ldr	r3, [r4, #16]
 80035a4:	b19b      	cbz	r3, 80035ce <xQueueReceiveFromISR+0xaa>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80035a6:	f104 0010 	add.w	r0, r4, #16
 80035aa:	f000 fc01 	bl	8003db0 <xTaskRemoveFromEventList>
 80035ae:	b180      	cbz	r0, 80035d2 <xQueueReceiveFromISR+0xae>
						if( pxHigherPriorityTaskWoken != NULL )
 80035b0:	b18f      	cbz	r7, 80035d6 <xQueueReceiveFromISR+0xb2>
							*pxHigherPriorityTaskWoken = pdTRUE;
 80035b2:	2001      	movs	r0, #1
 80035b4:	6038      	str	r0, [r7, #0]
	__asm volatile
 80035b6:	f386 8811 	msr	BASEPRI, r6
}
 80035ba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 80035be:	1c6b      	adds	r3, r5, #1
 80035c0:	b25b      	sxtb	r3, r3
 80035c2:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
			xReturn = pdPASS;
 80035c6:	2001      	movs	r0, #1
 80035c8:	e7f5      	b.n	80035b6 <xQueueReceiveFromISR+0x92>
			xReturn = pdFAIL;
 80035ca:	2000      	movs	r0, #0
 80035cc:	e7f3      	b.n	80035b6 <xQueueReceiveFromISR+0x92>
			xReturn = pdPASS;
 80035ce:	2001      	movs	r0, #1
 80035d0:	e7f1      	b.n	80035b6 <xQueueReceiveFromISR+0x92>
 80035d2:	2001      	movs	r0, #1
 80035d4:	e7ef      	b.n	80035b6 <xQueueReceiveFromISR+0x92>
 80035d6:	2001      	movs	r0, #1
 80035d8:	e7ed      	b.n	80035b6 <xQueueReceiveFromISR+0x92>

080035da <uxQueueMessagesWaiting>:
	configASSERT( xQueue );
 80035da:	b940      	cbnz	r0, 80035ee <uxQueueMessagesWaiting+0x14>
	__asm volatile
 80035dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80035e0:	f383 8811 	msr	BASEPRI, r3
 80035e4:	f3bf 8f6f 	isb	sy
 80035e8:	f3bf 8f4f 	dsb	sy
 80035ec:	e7fe      	b.n	80035ec <uxQueueMessagesWaiting+0x12>
{
 80035ee:	b510      	push	{r4, lr}
 80035f0:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
 80035f2:	f7ff f8af 	bl	8002754 <vPortEnterCritical>
		uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 80035f6:	6ba4      	ldr	r4, [r4, #56]	; 0x38
	taskEXIT_CRITICAL();
 80035f8:	f7ff f8ce 	bl	8002798 <vPortExitCritical>
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 80035fc:	4620      	mov	r0, r4
 80035fe:	bd10      	pop	{r4, pc}

08003600 <uxQueueMessagesWaitingFromISR>:
	configASSERT( xQueue );
 8003600:	b108      	cbz	r0, 8003606 <uxQueueMessagesWaitingFromISR+0x6>
	uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 8003602:	6b80      	ldr	r0, [r0, #56]	; 0x38
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 8003604:	4770      	bx	lr
 8003606:	f04f 0350 	mov.w	r3, #80	; 0x50
 800360a:	f383 8811 	msr	BASEPRI, r3
 800360e:	f3bf 8f6f 	isb	sy
 8003612:	f3bf 8f4f 	dsb	sy
 8003616:	e7fe      	b.n	8003616 <uxQueueMessagesWaitingFromISR+0x16>

08003618 <vQueueUnregisterQueue>:
	{
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8003618:	2300      	movs	r3, #0
 800361a:	2b07      	cmp	r3, #7
 800361c:	d80f      	bhi.n	800363e <vQueueUnregisterQueue+0x26>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 800361e:	4a08      	ldr	r2, [pc, #32]	; (8003640 <vQueueUnregisterQueue+0x28>)
 8003620:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 8003624:	6852      	ldr	r2, [r2, #4]
 8003626:	4282      	cmp	r2, r0
 8003628:	d001      	beq.n	800362e <vQueueUnregisterQueue+0x16>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800362a:	3301      	adds	r3, #1
 800362c:	e7f5      	b.n	800361a <vQueueUnregisterQueue+0x2>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 800362e:	4a04      	ldr	r2, [pc, #16]	; (8003640 <vQueueUnregisterQueue+0x28>)
 8003630:	2100      	movs	r1, #0
 8003632:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 8003636:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800363a:	6059      	str	r1, [r3, #4]
				break;
 800363c:	4770      	bx	lr
 800363e:	4770      	bx	lr
 8003640:	20004228 	.word	0x20004228

08003644 <vQueueDelete>:
	configASSERT( pxQueue );
 8003644:	b150      	cbz	r0, 800365c <vQueueDelete+0x18>
{
 8003646:	b510      	push	{r4, lr}
 8003648:	4604      	mov	r4, r0
		vQueueUnregisterQueue( pxQueue );
 800364a:	f7ff ffe5 	bl	8003618 <vQueueUnregisterQueue>
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 800364e:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 8003652:	b913      	cbnz	r3, 800365a <vQueueDelete+0x16>
			vPortFree( pxQueue );
 8003654:	4620      	mov	r0, r4
 8003656:	f7ff fab7 	bl	8002bc8 <vPortFree>
 800365a:	bd10      	pop	{r4, pc}
 800365c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003660:	f383 8811 	msr	BASEPRI, r3
 8003664:	f3bf 8f6f 	isb	sy
 8003668:	f3bf 8f4f 	dsb	sy
 800366c:	e7fe      	b.n	800366c <vQueueDelete+0x28>
	...

08003670 <prvResetNextTaskUnblockTime>:

static void prvResetNextTaskUnblockTime( void )
{
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003670:	4b0a      	ldr	r3, [pc, #40]	; (800369c <prvResetNextTaskUnblockTime+0x2c>)
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	b94b      	cbnz	r3, 800368c <prvResetNextTaskUnblockTime+0x1c>
 8003678:	2301      	movs	r3, #1
 800367a:	b94b      	cbnz	r3, 8003690 <prvResetNextTaskUnblockTime+0x20>
	{
		/* The new current delayed list is not empty, get the value of
		the item at the head of the delayed list.  This is the time at
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800367c:	4b07      	ldr	r3, [pc, #28]	; (800369c <prvResetNextTaskUnblockTime+0x2c>)
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	68db      	ldr	r3, [r3, #12]
 8003682:	68db      	ldr	r3, [r3, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8003684:	685a      	ldr	r2, [r3, #4]
 8003686:	4b06      	ldr	r3, [pc, #24]	; (80036a0 <prvResetNextTaskUnblockTime+0x30>)
 8003688:	601a      	str	r2, [r3, #0]
 800368a:	4770      	bx	lr
	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800368c:	2300      	movs	r3, #0
 800368e:	e7f4      	b.n	800367a <prvResetNextTaskUnblockTime+0xa>
		xNextTaskUnblockTime = portMAX_DELAY;
 8003690:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003694:	4b02      	ldr	r3, [pc, #8]	; (80036a0 <prvResetNextTaskUnblockTime+0x30>)
 8003696:	601a      	str	r2, [r3, #0]
 8003698:	4770      	bx	lr
 800369a:	bf00      	nop
 800369c:	20003cb8 	.word	0x20003cb8
 80036a0:	20003d8c 	.word	0x20003d8c

080036a4 <prvInitialiseNewTask>:
{
 80036a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80036a8:	4680      	mov	r8, r0
 80036aa:	4699      	mov	r9, r3
 80036ac:	9d08      	ldr	r5, [sp, #32]
 80036ae:	9f09      	ldr	r7, [sp, #36]	; 0x24
 80036b0:	9c0a      	ldr	r4, [sp, #40]	; 0x28
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 80036b2:	6b26      	ldr	r6, [r4, #48]	; 0x30
 80036b4:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 80036b8:	3a01      	subs	r2, #1
 80036ba:	eb06 0682 	add.w	r6, r6, r2, lsl #2
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 80036be:	f026 0607 	bic.w	r6, r6, #7
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80036c2:	2300      	movs	r3, #0
 80036c4:	2b0f      	cmp	r3, #15
 80036c6:	d807      	bhi.n	80036d8 <prvInitialiseNewTask+0x34>
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80036c8:	5cc8      	ldrb	r0, [r1, r3]
 80036ca:	18e2      	adds	r2, r4, r3
 80036cc:	f882 0034 	strb.w	r0, [r2, #52]	; 0x34
		if( pcName[ x ] == 0x00 )
 80036d0:	5cca      	ldrb	r2, [r1, r3]
 80036d2:	b10a      	cbz	r2, 80036d8 <prvInitialiseNewTask+0x34>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80036d4:	3301      	adds	r3, #1
 80036d6:	e7f5      	b.n	80036c4 <prvInitialiseNewTask+0x20>
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80036d8:	2300      	movs	r3, #0
 80036da:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80036de:	2d06      	cmp	r5, #6
 80036e0:	d900      	bls.n	80036e4 <prvInitialiseNewTask+0x40>
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80036e2:	2506      	movs	r5, #6
	pxNewTCB->uxPriority = uxPriority;
 80036e4:	62e5      	str	r5, [r4, #44]	; 0x2c
		pxNewTCB->uxBasePriority = uxPriority;
 80036e6:	6465      	str	r5, [r4, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 80036e8:	f04f 0a00 	mov.w	sl, #0
 80036ec:	f8c4 a048 	str.w	sl, [r4, #72]	; 0x48
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80036f0:	1d20      	adds	r0, r4, #4
 80036f2:	f7fe ff85 	bl	8002600 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80036f6:	f104 0018 	add.w	r0, r4, #24
 80036fa:	f7fe ff81 	bl	8002600 <vListInitialiseItem>
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80036fe:	6124      	str	r4, [r4, #16]
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003700:	f1c5 0507 	rsb	r5, r5, #7
 8003704:	61a5      	str	r5, [r4, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8003706:	6264      	str	r4, [r4, #36]	; 0x24
		pxNewTCB->ulNotifiedValue = 0;
 8003708:	f8c4 a04c 	str.w	sl, [r4, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800370c:	f884 a050 	strb.w	sl, [r4, #80]	; 0x50
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8003710:	464a      	mov	r2, r9
 8003712:	4641      	mov	r1, r8
 8003714:	4630      	mov	r0, r6
 8003716:	f7fe ffef 	bl	80026f8 <pxPortInitialiseStack>
 800371a:	6020      	str	r0, [r4, #0]
	if( ( void * ) pxCreatedTask != NULL )
 800371c:	b107      	cbz	r7, 8003720 <prvInitialiseNewTask+0x7c>
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800371e:	603c      	str	r4, [r7, #0]
 8003720:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08003724 <prvInitialiseTaskLists>:
{
 8003724:	b538      	push	{r3, r4, r5, lr}
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003726:	2400      	movs	r4, #0
 8003728:	e007      	b.n	800373a <prvInitialiseTaskLists+0x16>
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800372a:	eb04 0284 	add.w	r2, r4, r4, lsl #2
 800372e:	0093      	lsls	r3, r2, #2
 8003730:	480e      	ldr	r0, [pc, #56]	; (800376c <prvInitialiseTaskLists+0x48>)
 8003732:	4418      	add	r0, r3
 8003734:	f7fe ff59 	bl	80025ea <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003738:	3401      	adds	r4, #1
 800373a:	2c06      	cmp	r4, #6
 800373c:	d9f5      	bls.n	800372a <prvInitialiseTaskLists+0x6>
	vListInitialise( &xDelayedTaskList1 );
 800373e:	4d0c      	ldr	r5, [pc, #48]	; (8003770 <prvInitialiseTaskLists+0x4c>)
 8003740:	4628      	mov	r0, r5
 8003742:	f7fe ff52 	bl	80025ea <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8003746:	4c0b      	ldr	r4, [pc, #44]	; (8003774 <prvInitialiseTaskLists+0x50>)
 8003748:	4620      	mov	r0, r4
 800374a:	f7fe ff4e 	bl	80025ea <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800374e:	480a      	ldr	r0, [pc, #40]	; (8003778 <prvInitialiseTaskLists+0x54>)
 8003750:	f7fe ff4b 	bl	80025ea <vListInitialise>
		vListInitialise( &xTasksWaitingTermination );
 8003754:	4809      	ldr	r0, [pc, #36]	; (800377c <prvInitialiseTaskLists+0x58>)
 8003756:	f7fe ff48 	bl	80025ea <vListInitialise>
		vListInitialise( &xSuspendedTaskList );
 800375a:	4809      	ldr	r0, [pc, #36]	; (8003780 <prvInitialiseTaskLists+0x5c>)
 800375c:	f7fe ff45 	bl	80025ea <vListInitialise>
	pxDelayedTaskList = &xDelayedTaskList1;
 8003760:	4b08      	ldr	r3, [pc, #32]	; (8003784 <prvInitialiseTaskLists+0x60>)
 8003762:	601d      	str	r5, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8003764:	4b08      	ldr	r3, [pc, #32]	; (8003788 <prvInitialiseTaskLists+0x64>)
 8003766:	601c      	str	r4, [r3, #0]
 8003768:	bd38      	pop	{r3, r4, r5, pc}
 800376a:	bf00      	nop
 800376c:	20003cc0 	.word	0x20003cc0
 8003770:	20003d64 	.word	0x20003d64
 8003774:	20003d78 	.word	0x20003d78
 8003778:	20003d94 	.word	0x20003d94
 800377c:	20003dc0 	.word	0x20003dc0
 8003780:	20003dac 	.word	0x20003dac
 8003784:	20003cb8 	.word	0x20003cb8
 8003788:	20003cbc 	.word	0x20003cbc

0800378c <prvAddNewTaskToReadyList>:
{
 800378c:	b510      	push	{r4, lr}
 800378e:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
 8003790:	f7fe ffe0 	bl	8002754 <vPortEnterCritical>
		uxCurrentNumberOfTasks++;
 8003794:	4a1a      	ldr	r2, [pc, #104]	; (8003800 <prvAddNewTaskToReadyList+0x74>)
 8003796:	6813      	ldr	r3, [r2, #0]
 8003798:	3301      	adds	r3, #1
 800379a:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800379c:	4b19      	ldr	r3, [pc, #100]	; (8003804 <prvAddNewTaskToReadyList+0x78>)
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	b32b      	cbz	r3, 80037ee <prvAddNewTaskToReadyList+0x62>
			if( xSchedulerRunning == pdFALSE )
 80037a2:	4b19      	ldr	r3, [pc, #100]	; (8003808 <prvAddNewTaskToReadyList+0x7c>)
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	b93b      	cbnz	r3, 80037b8 <prvAddNewTaskToReadyList+0x2c>
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80037a8:	4b16      	ldr	r3, [pc, #88]	; (8003804 <prvAddNewTaskToReadyList+0x78>)
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80037ae:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80037b0:	429a      	cmp	r2, r3
 80037b2:	d801      	bhi.n	80037b8 <prvAddNewTaskToReadyList+0x2c>
					pxCurrentTCB = pxNewTCB;
 80037b4:	4b13      	ldr	r3, [pc, #76]	; (8003804 <prvAddNewTaskToReadyList+0x78>)
 80037b6:	601c      	str	r4, [r3, #0]
		uxTaskNumber++;
 80037b8:	4a14      	ldr	r2, [pc, #80]	; (800380c <prvAddNewTaskToReadyList+0x80>)
 80037ba:	6813      	ldr	r3, [r2, #0]
 80037bc:	3301      	adds	r3, #1
 80037be:	6013      	str	r3, [r2, #0]
		prvAddTaskToReadyList( pxNewTCB );
 80037c0:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80037c2:	2201      	movs	r2, #1
 80037c4:	409a      	lsls	r2, r3
 80037c6:	4912      	ldr	r1, [pc, #72]	; (8003810 <prvAddNewTaskToReadyList+0x84>)
 80037c8:	6808      	ldr	r0, [r1, #0]
 80037ca:	4302      	orrs	r2, r0
 80037cc:	600a      	str	r2, [r1, #0]
 80037ce:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80037d2:	009a      	lsls	r2, r3, #2
 80037d4:	1d21      	adds	r1, r4, #4
 80037d6:	480f      	ldr	r0, [pc, #60]	; (8003814 <prvAddNewTaskToReadyList+0x88>)
 80037d8:	4410      	add	r0, r2
 80037da:	f7fe ff14 	bl	8002606 <vListInsertEnd>
	taskEXIT_CRITICAL();
 80037de:	f7fe ffdb 	bl	8002798 <vPortExitCritical>
	if( xSchedulerRunning != pdFALSE )
 80037e2:	4b09      	ldr	r3, [pc, #36]	; (8003808 <prvAddNewTaskToReadyList+0x7c>)
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	b10b      	cbz	r3, 80037ec <prvAddNewTaskToReadyList+0x60>
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80037e8:	4b06      	ldr	r3, [pc, #24]	; (8003804 <prvAddNewTaskToReadyList+0x78>)
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	bd10      	pop	{r4, pc}
			pxCurrentTCB = pxNewTCB;
 80037ee:	4b05      	ldr	r3, [pc, #20]	; (8003804 <prvAddNewTaskToReadyList+0x78>)
 80037f0:	601c      	str	r4, [r3, #0]
			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80037f2:	6813      	ldr	r3, [r2, #0]
 80037f4:	2b01      	cmp	r3, #1
 80037f6:	d1df      	bne.n	80037b8 <prvAddNewTaskToReadyList+0x2c>
				prvInitialiseTaskLists();
 80037f8:	f7ff ff94 	bl	8003724 <prvInitialiseTaskLists>
 80037fc:	e7dc      	b.n	80037b8 <prvAddNewTaskToReadyList+0x2c>
 80037fe:	bf00      	nop
 8003800:	20003d4c 	.word	0x20003d4c
 8003804:	20003cb4 	.word	0x20003cb4
 8003808:	20003da8 	.word	0x20003da8
 800380c:	20003d5c 	.word	0x20003d5c
 8003810:	20003d60 	.word	0x20003d60
 8003814:	20003cc0 	.word	0x20003cc0

08003818 <prvDeleteTCB>:
	{
 8003818:	b510      	push	{r4, lr}
 800381a:	4604      	mov	r4, r0
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800381c:	f890 3051 	ldrb.w	r3, [r0, #81]	; 0x51
 8003820:	b163      	cbz	r3, 800383c <prvDeleteTCB+0x24>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8003822:	2b01      	cmp	r3, #1
 8003824:	d011      	beq.n	800384a <prvDeleteTCB+0x32>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8003826:	2b02      	cmp	r3, #2
 8003828:	d012      	beq.n	8003850 <prvDeleteTCB+0x38>
 800382a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800382e:	f383 8811 	msr	BASEPRI, r3
 8003832:	f3bf 8f6f 	isb	sy
 8003836:	f3bf 8f4f 	dsb	sy
 800383a:	e7fe      	b.n	800383a <prvDeleteTCB+0x22>
				vPortFree( pxTCB->pxStack );
 800383c:	6b00      	ldr	r0, [r0, #48]	; 0x30
 800383e:	f7ff f9c3 	bl	8002bc8 <vPortFree>
				vPortFree( pxTCB );
 8003842:	4620      	mov	r0, r4
 8003844:	f7ff f9c0 	bl	8002bc8 <vPortFree>
 8003848:	bd10      	pop	{r4, pc}
				vPortFree( pxTCB );
 800384a:	f7ff f9bd 	bl	8002bc8 <vPortFree>
 800384e:	bd10      	pop	{r4, pc}
 8003850:	bd10      	pop	{r4, pc}
	...

08003854 <prvCheckTasksWaitingTermination>:
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003854:	4b0f      	ldr	r3, [pc, #60]	; (8003894 <prvCheckTasksWaitingTermination+0x40>)
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	b1d3      	cbz	r3, 8003890 <prvCheckTasksWaitingTermination+0x3c>
{
 800385a:	b510      	push	{r4, lr}
			taskENTER_CRITICAL();
 800385c:	f7fe ff7a 	bl	8002754 <vPortEnterCritical>
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8003860:	4b0d      	ldr	r3, [pc, #52]	; (8003898 <prvCheckTasksWaitingTermination+0x44>)
 8003862:	68db      	ldr	r3, [r3, #12]
 8003864:	68dc      	ldr	r4, [r3, #12]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003866:	1d20      	adds	r0, r4, #4
 8003868:	f7fe fef3 	bl	8002652 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800386c:	4a0b      	ldr	r2, [pc, #44]	; (800389c <prvCheckTasksWaitingTermination+0x48>)
 800386e:	6813      	ldr	r3, [r2, #0]
 8003870:	3b01      	subs	r3, #1
 8003872:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8003874:	4a07      	ldr	r2, [pc, #28]	; (8003894 <prvCheckTasksWaitingTermination+0x40>)
 8003876:	6813      	ldr	r3, [r2, #0]
 8003878:	3b01      	subs	r3, #1
 800387a:	6013      	str	r3, [r2, #0]
			taskEXIT_CRITICAL();
 800387c:	f7fe ff8c 	bl	8002798 <vPortExitCritical>
			prvDeleteTCB( pxTCB );
 8003880:	4620      	mov	r0, r4
 8003882:	f7ff ffc9 	bl	8003818 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003886:	4b03      	ldr	r3, [pc, #12]	; (8003894 <prvCheckTasksWaitingTermination+0x40>)
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	2b00      	cmp	r3, #0
 800388c:	d1e6      	bne.n	800385c <prvCheckTasksWaitingTermination+0x8>
}
 800388e:	bd10      	pop	{r4, pc}
 8003890:	4770      	bx	lr
 8003892:	bf00      	nop
 8003894:	20003d50 	.word	0x20003d50
 8003898:	20003dc0 	.word	0x20003dc0
 800389c:	20003d4c 	.word	0x20003d4c

080038a0 <prvIdleTask>:
{
 80038a0:	b508      	push	{r3, lr}
		prvCheckTasksWaitingTermination();
 80038a2:	f7ff ffd7 	bl	8003854 <prvCheckTasksWaitingTermination>
			taskYIELD();
 80038a6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80038aa:	4b03      	ldr	r3, [pc, #12]	; (80038b8 <prvIdleTask+0x18>)
 80038ac:	601a      	str	r2, [r3, #0]
 80038ae:	f3bf 8f4f 	dsb	sy
 80038b2:	f3bf 8f6f 	isb	sy
 80038b6:	e7f4      	b.n	80038a2 <prvIdleTask+0x2>
 80038b8:	e000ed04 	.word	0xe000ed04

080038bc <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80038bc:	b570      	push	{r4, r5, r6, lr}
 80038be:	4604      	mov	r4, r0
 80038c0:	460e      	mov	r6, r1
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80038c2:	4b1d      	ldr	r3, [pc, #116]	; (8003938 <prvAddCurrentTaskToDelayedList+0x7c>)
 80038c4:	681d      	ldr	r5, [r3, #0]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80038c6:	4b1d      	ldr	r3, [pc, #116]	; (800393c <prvAddCurrentTaskToDelayedList+0x80>)
 80038c8:	6818      	ldr	r0, [r3, #0]
 80038ca:	3004      	adds	r0, #4
 80038cc:	f7fe fec1 	bl	8002652 <uxListRemove>
 80038d0:	b950      	cbnz	r0, 80038e8 <prvAddCurrentTaskToDelayedList+0x2c>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 80038d2:	4b1a      	ldr	r3, [pc, #104]	; (800393c <prvAddCurrentTaskToDelayedList+0x80>)
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80038d8:	2301      	movs	r3, #1
 80038da:	fa03 f202 	lsl.w	r2, r3, r2
 80038de:	4918      	ldr	r1, [pc, #96]	; (8003940 <prvAddCurrentTaskToDelayedList+0x84>)
 80038e0:	680b      	ldr	r3, [r1, #0]
 80038e2:	ea23 0302 	bic.w	r3, r3, r2
 80038e6:	600b      	str	r3, [r1, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80038e8:	f1b4 3fff 	cmp.w	r4, #4294967295	; 0xffffffff
 80038ec:	d013      	beq.n	8003916 <prvAddCurrentTaskToDelayedList+0x5a>
		else
		{
			/* Calculate the time at which the task should be woken if the event
			does not occur.  This may overflow but this doesn't matter, the
			kernel will manage it correctly. */
			xTimeToWake = xConstTickCount + xTicksToWait;
 80038ee:	442c      	add	r4, r5

			/* The list item will be inserted in wake time order. */
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80038f0:	4b12      	ldr	r3, [pc, #72]	; (800393c <prvAddCurrentTaskToDelayedList+0x80>)
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	605c      	str	r4, [r3, #4]

			if( xTimeToWake < xConstTickCount )
 80038f6:	42a5      	cmp	r5, r4
 80038f8:	d816      	bhi.n	8003928 <prvAddCurrentTaskToDelayedList+0x6c>
			}
			else
			{
				/* The wake time has not overflowed, so the current block list
				is used. */
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80038fa:	4b12      	ldr	r3, [pc, #72]	; (8003944 <prvAddCurrentTaskToDelayedList+0x88>)
 80038fc:	6818      	ldr	r0, [r3, #0]
 80038fe:	4b0f      	ldr	r3, [pc, #60]	; (800393c <prvAddCurrentTaskToDelayedList+0x80>)
 8003900:	6819      	ldr	r1, [r3, #0]
 8003902:	3104      	adds	r1, #4
 8003904:	f7fe fe8b 	bl	800261e <vListInsert>

				/* If the task entering the blocked state was placed at the
				head of the list of blocked tasks then xNextTaskUnblockTime
				needs to be updated too. */
				if( xTimeToWake < xNextTaskUnblockTime )
 8003908:	4b0f      	ldr	r3, [pc, #60]	; (8003948 <prvAddCurrentTaskToDelayedList+0x8c>)
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	429c      	cmp	r4, r3
 800390e:	d201      	bcs.n	8003914 <prvAddCurrentTaskToDelayedList+0x58>
				{
					xNextTaskUnblockTime = xTimeToWake;
 8003910:	4b0d      	ldr	r3, [pc, #52]	; (8003948 <prvAddCurrentTaskToDelayedList+0x8c>)
 8003912:	601c      	str	r4, [r3, #0]
 8003914:	bd70      	pop	{r4, r5, r6, pc}
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8003916:	2e00      	cmp	r6, #0
 8003918:	d0e9      	beq.n	80038ee <prvAddCurrentTaskToDelayedList+0x32>
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800391a:	4b08      	ldr	r3, [pc, #32]	; (800393c <prvAddCurrentTaskToDelayedList+0x80>)
 800391c:	6819      	ldr	r1, [r3, #0]
 800391e:	3104      	adds	r1, #4
 8003920:	480a      	ldr	r0, [pc, #40]	; (800394c <prvAddCurrentTaskToDelayedList+0x90>)
 8003922:	f7fe fe70 	bl	8002606 <vListInsertEnd>
 8003926:	bd70      	pop	{r4, r5, r6, pc}
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003928:	4b09      	ldr	r3, [pc, #36]	; (8003950 <prvAddCurrentTaskToDelayedList+0x94>)
 800392a:	6818      	ldr	r0, [r3, #0]
 800392c:	4b03      	ldr	r3, [pc, #12]	; (800393c <prvAddCurrentTaskToDelayedList+0x80>)
 800392e:	6819      	ldr	r1, [r3, #0]
 8003930:	3104      	adds	r1, #4
 8003932:	f7fe fe74 	bl	800261e <vListInsert>
 8003936:	bd70      	pop	{r4, r5, r6, pc}
 8003938:	20003dd4 	.word	0x20003dd4
 800393c:	20003cb4 	.word	0x20003cb4
 8003940:	20003d60 	.word	0x20003d60
 8003944:	20003cb8 	.word	0x20003cb8
 8003948:	20003d8c 	.word	0x20003d8c
 800394c:	20003dac 	.word	0x20003dac
 8003950:	20003cbc 	.word	0x20003cbc

08003954 <xTaskCreateStatic>:
	{
 8003954:	b570      	push	{r4, r5, r6, lr}
 8003956:	b086      	sub	sp, #24
 8003958:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 800395a:	9c0c      	ldr	r4, [sp, #48]	; 0x30
		configASSERT( puxStackBuffer != NULL );
 800395c:	b175      	cbz	r5, 800397c <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800395e:	b1b4      	cbz	r4, 800398e <xTaskCreateStatic+0x3a>
			volatile size_t xSize = sizeof( StaticTask_t );
 8003960:	2654      	movs	r6, #84	; 0x54
 8003962:	9604      	str	r6, [sp, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8003964:	9e04      	ldr	r6, [sp, #16]
 8003966:	2e54      	cmp	r6, #84	; 0x54
 8003968:	d01a      	beq.n	80039a0 <xTaskCreateStatic+0x4c>
 800396a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800396e:	f383 8811 	msr	BASEPRI, r3
 8003972:	f3bf 8f6f 	isb	sy
 8003976:	f3bf 8f4f 	dsb	sy
 800397a:	e7fe      	b.n	800397a <xTaskCreateStatic+0x26>
 800397c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003980:	f383 8811 	msr	BASEPRI, r3
 8003984:	f3bf 8f6f 	isb	sy
 8003988:	f3bf 8f4f 	dsb	sy
 800398c:	e7fe      	b.n	800398c <xTaskCreateStatic+0x38>
 800398e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003992:	f383 8811 	msr	BASEPRI, r3
 8003996:	f3bf 8f6f 	isb	sy
 800399a:	f3bf 8f4f 	dsb	sy
 800399e:	e7fe      	b.n	800399e <xTaskCreateStatic+0x4a>
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80039a0:	6325      	str	r5, [r4, #48]	; 0x30
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80039a2:	2502      	movs	r5, #2
 80039a4:	f884 5051 	strb.w	r5, [r4, #81]	; 0x51
			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80039a8:	2500      	movs	r5, #0
 80039aa:	9503      	str	r5, [sp, #12]
 80039ac:	9402      	str	r4, [sp, #8]
 80039ae:	ad05      	add	r5, sp, #20
 80039b0:	9501      	str	r5, [sp, #4]
 80039b2:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 80039b4:	9500      	str	r5, [sp, #0]
 80039b6:	f7ff fe75 	bl	80036a4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80039ba:	4620      	mov	r0, r4
 80039bc:	f7ff fee6 	bl	800378c <prvAddNewTaskToReadyList>
	}
 80039c0:	9805      	ldr	r0, [sp, #20]
 80039c2:	b006      	add	sp, #24
 80039c4:	bd70      	pop	{r4, r5, r6, pc}

080039c6 <xTaskCreate>:
	{
 80039c6:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80039ca:	b085      	sub	sp, #20
 80039cc:	4606      	mov	r6, r0
 80039ce:	460f      	mov	r7, r1
 80039d0:	4615      	mov	r5, r2
 80039d2:	4698      	mov	r8, r3
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80039d4:	0090      	lsls	r0, r2, #2
 80039d6:	f7ff f873 	bl	8002ac0 <pvPortMalloc>
			if( pxStack != NULL )
 80039da:	b310      	cbz	r0, 8003a22 <xTaskCreate+0x5c>
 80039dc:	4681      	mov	r9, r0
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 80039de:	2054      	movs	r0, #84	; 0x54
 80039e0:	f7ff f86e 	bl	8002ac0 <pvPortMalloc>
				if( pxNewTCB != NULL )
 80039e4:	4604      	mov	r4, r0
 80039e6:	b1c0      	cbz	r0, 8003a1a <xTaskCreate+0x54>
					pxNewTCB->pxStack = pxStack;
 80039e8:	f8c0 9030 	str.w	r9, [r0, #48]	; 0x30
		if( pxNewTCB != NULL )
 80039ec:	b1dc      	cbz	r4, 8003a26 <xTaskCreate+0x60>
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80039ee:	2300      	movs	r3, #0
 80039f0:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80039f4:	9303      	str	r3, [sp, #12]
 80039f6:	9402      	str	r4, [sp, #8]
 80039f8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80039fa:	9301      	str	r3, [sp, #4]
 80039fc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80039fe:	9300      	str	r3, [sp, #0]
 8003a00:	4643      	mov	r3, r8
 8003a02:	462a      	mov	r2, r5
 8003a04:	4639      	mov	r1, r7
 8003a06:	4630      	mov	r0, r6
 8003a08:	f7ff fe4c 	bl	80036a4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003a0c:	4620      	mov	r0, r4
 8003a0e:	f7ff febd 	bl	800378c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8003a12:	2001      	movs	r0, #1
	}
 8003a14:	b005      	add	sp, #20
 8003a16:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
					vPortFree( pxStack );
 8003a1a:	4648      	mov	r0, r9
 8003a1c:	f7ff f8d4 	bl	8002bc8 <vPortFree>
 8003a20:	e7e4      	b.n	80039ec <xTaskCreate+0x26>
				pxNewTCB = NULL;
 8003a22:	2400      	movs	r4, #0
 8003a24:	e7e2      	b.n	80039ec <xTaskCreate+0x26>
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8003a26:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
		return xReturn;
 8003a2a:	e7f3      	b.n	8003a14 <xTaskCreate+0x4e>

08003a2c <vTaskStartScheduler>:
{
 8003a2c:	b510      	push	{r4, lr}
 8003a2e:	b088      	sub	sp, #32
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8003a30:	2400      	movs	r4, #0
 8003a32:	9405      	str	r4, [sp, #20]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8003a34:	9406      	str	r4, [sp, #24]
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8003a36:	aa07      	add	r2, sp, #28
 8003a38:	a906      	add	r1, sp, #24
 8003a3a:	a805      	add	r0, sp, #20
 8003a3c:	f009 fca2 	bl	800d384 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8003a40:	9b05      	ldr	r3, [sp, #20]
 8003a42:	9302      	str	r3, [sp, #8]
 8003a44:	9b06      	ldr	r3, [sp, #24]
 8003a46:	9301      	str	r3, [sp, #4]
 8003a48:	9400      	str	r4, [sp, #0]
 8003a4a:	4623      	mov	r3, r4
 8003a4c:	9a07      	ldr	r2, [sp, #28]
 8003a4e:	4910      	ldr	r1, [pc, #64]	; (8003a90 <vTaskStartScheduler+0x64>)
 8003a50:	4810      	ldr	r0, [pc, #64]	; (8003a94 <vTaskStartScheduler+0x68>)
 8003a52:	f7ff ff7f 	bl	8003954 <xTaskCreateStatic>
		if( xIdleTaskHandle != NULL )
 8003a56:	b118      	cbz	r0, 8003a60 <vTaskStartScheduler+0x34>
			xReturn = pdPASS;
 8003a58:	2301      	movs	r3, #1
	if( xReturn == pdPASS )
 8003a5a:	b91b      	cbnz	r3, 8003a64 <vTaskStartScheduler+0x38>
}
 8003a5c:	b008      	add	sp, #32
 8003a5e:	bd10      	pop	{r4, pc}
			xReturn = pdFAIL;
 8003a60:	2300      	movs	r3, #0
 8003a62:	e7fa      	b.n	8003a5a <vTaskStartScheduler+0x2e>
 8003a64:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a68:	f383 8811 	msr	BASEPRI, r3
 8003a6c:	f3bf 8f6f 	isb	sy
 8003a70:	f3bf 8f4f 	dsb	sy
		xNextTaskUnblockTime = portMAX_DELAY;
 8003a74:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003a78:	4b07      	ldr	r3, [pc, #28]	; (8003a98 <vTaskStartScheduler+0x6c>)
 8003a7a:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8003a7c:	2201      	movs	r2, #1
 8003a7e:	4b07      	ldr	r3, [pc, #28]	; (8003a9c <vTaskStartScheduler+0x70>)
 8003a80:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8003a82:	2200      	movs	r2, #0
 8003a84:	4b06      	ldr	r3, [pc, #24]	; (8003aa0 <vTaskStartScheduler+0x74>)
 8003a86:	601a      	str	r2, [r3, #0]
		if( xPortStartScheduler() != pdFALSE )
 8003a88:	f7fe ff06 	bl	8002898 <xPortStartScheduler>
 8003a8c:	e7e6      	b.n	8003a5c <vTaskStartScheduler+0x30>
 8003a8e:	bf00      	nop
 8003a90:	0800e2fc 	.word	0x0800e2fc
 8003a94:	080038a1 	.word	0x080038a1
 8003a98:	20003d8c 	.word	0x20003d8c
 8003a9c:	20003da8 	.word	0x20003da8
 8003aa0:	20003dd4 	.word	0x20003dd4

08003aa4 <vTaskSuspendAll>:
	++uxSchedulerSuspended;
 8003aa4:	4a02      	ldr	r2, [pc, #8]	; (8003ab0 <vTaskSuspendAll+0xc>)
 8003aa6:	6813      	ldr	r3, [r2, #0]
 8003aa8:	3301      	adds	r3, #1
 8003aaa:	6013      	str	r3, [r2, #0]
 8003aac:	4770      	bx	lr
 8003aae:	bf00      	nop
 8003ab0:	20003d58 	.word	0x20003d58

08003ab4 <xTaskGetTickCount>:
		xTicks = xTickCount;
 8003ab4:	4b01      	ldr	r3, [pc, #4]	; (8003abc <xTaskGetTickCount+0x8>)
 8003ab6:	6818      	ldr	r0, [r3, #0]
}
 8003ab8:	4770      	bx	lr
 8003aba:	bf00      	nop
 8003abc:	20003dd4 	.word	0x20003dd4

08003ac0 <xTaskGetTickCountFromISR>:
{
 8003ac0:	b508      	push	{r3, lr}
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8003ac2:	f7fe ff71 	bl	80029a8 <vPortValidateInterruptPriority>
		xReturn = xTickCount;
 8003ac6:	4b01      	ldr	r3, [pc, #4]	; (8003acc <xTaskGetTickCountFromISR+0xc>)
 8003ac8:	6818      	ldr	r0, [r3, #0]
}
 8003aca:	bd08      	pop	{r3, pc}
 8003acc:	20003dd4 	.word	0x20003dd4

08003ad0 <xTaskIncrementTick>:
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003ad0:	4b31      	ldr	r3, [pc, #196]	; (8003b98 <xTaskIncrementTick+0xc8>)
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	2b00      	cmp	r3, #0
 8003ad6:	d158      	bne.n	8003b8a <xTaskIncrementTick+0xba>
{
 8003ad8:	b570      	push	{r4, r5, r6, lr}
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8003ada:	4b30      	ldr	r3, [pc, #192]	; (8003b9c <xTaskIncrementTick+0xcc>)
 8003adc:	681c      	ldr	r4, [r3, #0]
 8003ade:	3401      	adds	r4, #1
		xTickCount = xConstTickCount;
 8003ae0:	601c      	str	r4, [r3, #0]
		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8003ae2:	b9c4      	cbnz	r4, 8003b16 <xTaskIncrementTick+0x46>
			taskSWITCH_DELAYED_LISTS();
 8003ae4:	4b2e      	ldr	r3, [pc, #184]	; (8003ba0 <xTaskIncrementTick+0xd0>)
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	b143      	cbz	r3, 8003afe <xTaskIncrementTick+0x2e>
 8003aec:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003af0:	f383 8811 	msr	BASEPRI, r3
 8003af4:	f3bf 8f6f 	isb	sy
 8003af8:	f3bf 8f4f 	dsb	sy
 8003afc:	e7fe      	b.n	8003afc <xTaskIncrementTick+0x2c>
 8003afe:	4a28      	ldr	r2, [pc, #160]	; (8003ba0 <xTaskIncrementTick+0xd0>)
 8003b00:	6811      	ldr	r1, [r2, #0]
 8003b02:	4b28      	ldr	r3, [pc, #160]	; (8003ba4 <xTaskIncrementTick+0xd4>)
 8003b04:	6818      	ldr	r0, [r3, #0]
 8003b06:	6010      	str	r0, [r2, #0]
 8003b08:	6019      	str	r1, [r3, #0]
 8003b0a:	4a27      	ldr	r2, [pc, #156]	; (8003ba8 <xTaskIncrementTick+0xd8>)
 8003b0c:	6813      	ldr	r3, [r2, #0]
 8003b0e:	3301      	adds	r3, #1
 8003b10:	6013      	str	r3, [r2, #0]
 8003b12:	f7ff fdad 	bl	8003670 <prvResetNextTaskUnblockTime>
		if( xConstTickCount >= xNextTaskUnblockTime )
 8003b16:	4b25      	ldr	r3, [pc, #148]	; (8003bac <xTaskIncrementTick+0xdc>)
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	429c      	cmp	r4, r3
 8003b1c:	d21a      	bcs.n	8003b54 <xTaskIncrementTick+0x84>
}
 8003b1e:	2000      	movs	r0, #0
 8003b20:	bd70      	pop	{r4, r5, r6, pc}
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003b22:	2301      	movs	r3, #1
 8003b24:	e01c      	b.n	8003b60 <xTaskIncrementTick+0x90>
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003b26:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003b2a:	4b20      	ldr	r3, [pc, #128]	; (8003bac <xTaskIncrementTick+0xdc>)
 8003b2c:	601a      	str	r2, [r3, #0]
					break;
 8003b2e:	e7f6      	b.n	8003b1e <xTaskIncrementTick+0x4e>
						xNextTaskUnblockTime = xItemValue;
 8003b30:	4a1e      	ldr	r2, [pc, #120]	; (8003bac <xTaskIncrementTick+0xdc>)
 8003b32:	6013      	str	r3, [r2, #0]
						break;
 8003b34:	e7f3      	b.n	8003b1e <xTaskIncrementTick+0x4e>
					prvAddTaskToReadyList( pxTCB );
 8003b36:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8003b38:	2201      	movs	r2, #1
 8003b3a:	409a      	lsls	r2, r3
 8003b3c:	491c      	ldr	r1, [pc, #112]	; (8003bb0 <xTaskIncrementTick+0xe0>)
 8003b3e:	6808      	ldr	r0, [r1, #0]
 8003b40:	4302      	orrs	r2, r0
 8003b42:	600a      	str	r2, [r1, #0]
 8003b44:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8003b48:	009a      	lsls	r2, r3, #2
 8003b4a:	4631      	mov	r1, r6
 8003b4c:	4819      	ldr	r0, [pc, #100]	; (8003bb4 <xTaskIncrementTick+0xe4>)
 8003b4e:	4410      	add	r0, r2
 8003b50:	f7fe fd59 	bl	8002606 <vListInsertEnd>
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003b54:	4b12      	ldr	r3, [pc, #72]	; (8003ba0 <xTaskIncrementTick+0xd0>)
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	d0e1      	beq.n	8003b22 <xTaskIncrementTick+0x52>
 8003b5e:	2300      	movs	r3, #0
 8003b60:	2b00      	cmp	r3, #0
 8003b62:	d1e0      	bne.n	8003b26 <xTaskIncrementTick+0x56>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8003b64:	4b0e      	ldr	r3, [pc, #56]	; (8003ba0 <xTaskIncrementTick+0xd0>)
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	68db      	ldr	r3, [r3, #12]
 8003b6a:	68dd      	ldr	r5, [r3, #12]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8003b6c:	686b      	ldr	r3, [r5, #4]
					if( xConstTickCount < xItemValue )
 8003b6e:	429c      	cmp	r4, r3
 8003b70:	d3de      	bcc.n	8003b30 <xTaskIncrementTick+0x60>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003b72:	1d2e      	adds	r6, r5, #4
 8003b74:	4630      	mov	r0, r6
 8003b76:	f7fe fd6c 	bl	8002652 <uxListRemove>
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8003b7a:	6aab      	ldr	r3, [r5, #40]	; 0x28
 8003b7c:	2b00      	cmp	r3, #0
 8003b7e:	d0da      	beq.n	8003b36 <xTaskIncrementTick+0x66>
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003b80:	f105 0018 	add.w	r0, r5, #24
 8003b84:	f7fe fd65 	bl	8002652 <uxListRemove>
 8003b88:	e7d5      	b.n	8003b36 <xTaskIncrementTick+0x66>
		++uxPendedTicks;
 8003b8a:	4a0b      	ldr	r2, [pc, #44]	; (8003bb8 <xTaskIncrementTick+0xe8>)
 8003b8c:	6813      	ldr	r3, [r2, #0]
 8003b8e:	3301      	adds	r3, #1
 8003b90:	6013      	str	r3, [r2, #0]
}
 8003b92:	2000      	movs	r0, #0
 8003b94:	4770      	bx	lr
 8003b96:	bf00      	nop
 8003b98:	20003d58 	.word	0x20003d58
 8003b9c:	20003dd4 	.word	0x20003dd4
 8003ba0:	20003cb8 	.word	0x20003cb8
 8003ba4:	20003cbc 	.word	0x20003cbc
 8003ba8:	20003d90 	.word	0x20003d90
 8003bac:	20003d8c 	.word	0x20003d8c
 8003bb0:	20003d60 	.word	0x20003d60
 8003bb4:	20003cc0 	.word	0x20003cc0
 8003bb8:	20003d54 	.word	0x20003d54

08003bbc <xTaskResumeAll>:
{
 8003bbc:	b538      	push	{r3, r4, r5, lr}
	configASSERT( uxSchedulerSuspended );
 8003bbe:	4b2d      	ldr	r3, [pc, #180]	; (8003c74 <xTaskResumeAll+0xb8>)
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	b943      	cbnz	r3, 8003bd6 <xTaskResumeAll+0x1a>
 8003bc4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003bc8:	f383 8811 	msr	BASEPRI, r3
 8003bcc:	f3bf 8f6f 	isb	sy
 8003bd0:	f3bf 8f4f 	dsb	sy
 8003bd4:	e7fe      	b.n	8003bd4 <xTaskResumeAll+0x18>
	taskENTER_CRITICAL();
 8003bd6:	f7fe fdbd 	bl	8002754 <vPortEnterCritical>
		--uxSchedulerSuspended;
 8003bda:	4b26      	ldr	r3, [pc, #152]	; (8003c74 <xTaskResumeAll+0xb8>)
 8003bdc:	681a      	ldr	r2, [r3, #0]
 8003bde:	3a01      	subs	r2, #1
 8003be0:	601a      	str	r2, [r3, #0]
		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	b913      	cbnz	r3, 8003bec <xTaskResumeAll+0x30>
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8003be6:	4b24      	ldr	r3, [pc, #144]	; (8003c78 <xTaskResumeAll+0xbc>)
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	b91b      	cbnz	r3, 8003bf4 <xTaskResumeAll+0x38>
	taskEXIT_CRITICAL();
 8003bec:	f7fe fdd4 	bl	8002798 <vPortExitCritical>
}
 8003bf0:	2000      	movs	r0, #0
 8003bf2:	bd38      	pop	{r3, r4, r5, pc}
 8003bf4:	2400      	movs	r4, #0
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003bf6:	4b21      	ldr	r3, [pc, #132]	; (8003c7c <xTaskResumeAll+0xc0>)
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	b31b      	cbz	r3, 8003c44 <xTaskResumeAll+0x88>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8003bfc:	4b1f      	ldr	r3, [pc, #124]	; (8003c7c <xTaskResumeAll+0xc0>)
 8003bfe:	68db      	ldr	r3, [r3, #12]
 8003c00:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003c02:	f104 0018 	add.w	r0, r4, #24
 8003c06:	f7fe fd24 	bl	8002652 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003c0a:	1d25      	adds	r5, r4, #4
 8003c0c:	4628      	mov	r0, r5
 8003c0e:	f7fe fd20 	bl	8002652 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8003c12:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8003c14:	2201      	movs	r2, #1
 8003c16:	409a      	lsls	r2, r3
 8003c18:	4919      	ldr	r1, [pc, #100]	; (8003c80 <xTaskResumeAll+0xc4>)
 8003c1a:	6808      	ldr	r0, [r1, #0]
 8003c1c:	4302      	orrs	r2, r0
 8003c1e:	600a      	str	r2, [r1, #0]
 8003c20:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8003c24:	009a      	lsls	r2, r3, #2
 8003c26:	4629      	mov	r1, r5
 8003c28:	4816      	ldr	r0, [pc, #88]	; (8003c84 <xTaskResumeAll+0xc8>)
 8003c2a:	4410      	add	r0, r2
 8003c2c:	f7fe fceb 	bl	8002606 <vListInsertEnd>
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003c30:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8003c32:	4b15      	ldr	r3, [pc, #84]	; (8003c88 <xTaskResumeAll+0xcc>)
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c38:	429a      	cmp	r2, r3
 8003c3a:	d3dc      	bcc.n	8003bf6 <xTaskResumeAll+0x3a>
						xYieldPending = pdTRUE;
 8003c3c:	2201      	movs	r2, #1
 8003c3e:	4b13      	ldr	r3, [pc, #76]	; (8003c8c <xTaskResumeAll+0xd0>)
 8003c40:	601a      	str	r2, [r3, #0]
 8003c42:	e7d8      	b.n	8003bf6 <xTaskResumeAll+0x3a>
				if( pxTCB != NULL )
 8003c44:	b10c      	cbz	r4, 8003c4a <xTaskResumeAll+0x8e>
					prvResetNextTaskUnblockTime();
 8003c46:	f7ff fd13 	bl	8003670 <prvResetNextTaskUnblockTime>
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8003c4a:	4b11      	ldr	r3, [pc, #68]	; (8003c90 <xTaskResumeAll+0xd4>)
 8003c4c:	681c      	ldr	r4, [r3, #0]
					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8003c4e:	b924      	cbnz	r4, 8003c5a <xTaskResumeAll+0x9e>
				if( xYieldPending != pdFALSE )
 8003c50:	4b0e      	ldr	r3, [pc, #56]	; (8003c8c <xTaskResumeAll+0xd0>)
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	e7ca      	b.n	8003bec <xTaskResumeAll+0x30>
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8003c56:	3c01      	subs	r4, #1
 8003c58:	d007      	beq.n	8003c6a <xTaskResumeAll+0xae>
							if( xTaskIncrementTick() != pdFALSE )
 8003c5a:	f7ff ff39 	bl	8003ad0 <xTaskIncrementTick>
 8003c5e:	2800      	cmp	r0, #0
 8003c60:	d0f9      	beq.n	8003c56 <xTaskResumeAll+0x9a>
								xYieldPending = pdTRUE;
 8003c62:	2201      	movs	r2, #1
 8003c64:	4b09      	ldr	r3, [pc, #36]	; (8003c8c <xTaskResumeAll+0xd0>)
 8003c66:	601a      	str	r2, [r3, #0]
 8003c68:	e7f5      	b.n	8003c56 <xTaskResumeAll+0x9a>
						uxPendedTicks = 0;
 8003c6a:	2200      	movs	r2, #0
 8003c6c:	4b08      	ldr	r3, [pc, #32]	; (8003c90 <xTaskResumeAll+0xd4>)
 8003c6e:	601a      	str	r2, [r3, #0]
 8003c70:	e7ee      	b.n	8003c50 <xTaskResumeAll+0x94>
 8003c72:	bf00      	nop
 8003c74:	20003d58 	.word	0x20003d58
 8003c78:	20003d4c 	.word	0x20003d4c
 8003c7c:	20003d94 	.word	0x20003d94
 8003c80:	20003d60 	.word	0x20003d60
 8003c84:	20003cc0 	.word	0x20003cc0
 8003c88:	20003cb4 	.word	0x20003cb4
 8003c8c:	20003dd8 	.word	0x20003dd8
 8003c90:	20003d54 	.word	0x20003d54

08003c94 <vTaskDelay>:
	{
 8003c94:	b510      	push	{r4, lr}
		if( xTicksToDelay > ( TickType_t ) 0U )
 8003c96:	b1a8      	cbz	r0, 8003cc4 <vTaskDelay+0x30>
 8003c98:	4604      	mov	r4, r0
			configASSERT( uxSchedulerSuspended == 0 );
 8003c9a:	4b10      	ldr	r3, [pc, #64]	; (8003cdc <vTaskDelay+0x48>)
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	b143      	cbz	r3, 8003cb2 <vTaskDelay+0x1e>
 8003ca0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ca4:	f383 8811 	msr	BASEPRI, r3
 8003ca8:	f3bf 8f6f 	isb	sy
 8003cac:	f3bf 8f4f 	dsb	sy
 8003cb0:	e7fe      	b.n	8003cb0 <vTaskDelay+0x1c>
			vTaskSuspendAll();
 8003cb2:	f7ff fef7 	bl	8003aa4 <vTaskSuspendAll>
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8003cb6:	2100      	movs	r1, #0
 8003cb8:	4620      	mov	r0, r4
 8003cba:	f7ff fdff 	bl	80038bc <prvAddCurrentTaskToDelayedList>
			xAlreadyYielded = xTaskResumeAll();
 8003cbe:	f7ff ff7d 	bl	8003bbc <xTaskResumeAll>
 8003cc2:	e000      	b.n	8003cc6 <vTaskDelay+0x32>
	BaseType_t xAlreadyYielded = pdFALSE;
 8003cc4:	2000      	movs	r0, #0
		if( xAlreadyYielded == pdFALSE )
 8003cc6:	b938      	cbnz	r0, 8003cd8 <vTaskDelay+0x44>
			portYIELD_WITHIN_API();
 8003cc8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003ccc:	4b04      	ldr	r3, [pc, #16]	; (8003ce0 <vTaskDelay+0x4c>)
 8003cce:	601a      	str	r2, [r3, #0]
 8003cd0:	f3bf 8f4f 	dsb	sy
 8003cd4:	f3bf 8f6f 	isb	sy
 8003cd8:	bd10      	pop	{r4, pc}
 8003cda:	bf00      	nop
 8003cdc:	20003d58 	.word	0x20003d58
 8003ce0:	e000ed04 	.word	0xe000ed04

08003ce4 <vTaskSwitchContext>:
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8003ce4:	4b21      	ldr	r3, [pc, #132]	; (8003d6c <vTaskSwitchContext+0x88>)
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	b9c3      	cbnz	r3, 8003d1c <vTaskSwitchContext+0x38>
		xYieldPending = pdFALSE;
 8003cea:	2200      	movs	r2, #0
 8003cec:	4b20      	ldr	r3, [pc, #128]	; (8003d70 <vTaskSwitchContext+0x8c>)
 8003cee:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8003cf0:	4b20      	ldr	r3, [pc, #128]	; (8003d74 <vTaskSwitchContext+0x90>)
 8003cf2:	681b      	ldr	r3, [r3, #0]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8003cf4:	fab3 f383 	clz	r3, r3
 8003cf8:	b2db      	uxtb	r3, r3
 8003cfa:	f1c3 031f 	rsb	r3, r3, #31
 8003cfe:	eb03 0183 	add.w	r1, r3, r3, lsl #2
 8003d02:	008a      	lsls	r2, r1, #2
 8003d04:	491c      	ldr	r1, [pc, #112]	; (8003d78 <vTaskSwitchContext+0x94>)
 8003d06:	588a      	ldr	r2, [r1, r2]
 8003d08:	b962      	cbnz	r2, 8003d24 <vTaskSwitchContext+0x40>
	__asm volatile
 8003d0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d0e:	f383 8811 	msr	BASEPRI, r3
 8003d12:	f3bf 8f6f 	isb	sy
 8003d16:	f3bf 8f4f 	dsb	sy
 8003d1a:	e7fe      	b.n	8003d1a <vTaskSwitchContext+0x36>
		xYieldPending = pdTRUE;
 8003d1c:	2201      	movs	r2, #1
 8003d1e:	4b14      	ldr	r3, [pc, #80]	; (8003d70 <vTaskSwitchContext+0x8c>)
 8003d20:	601a      	str	r2, [r3, #0]
 8003d22:	4770      	bx	lr
{
 8003d24:	b410      	push	{r4}
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8003d26:	4814      	ldr	r0, [pc, #80]	; (8003d78 <vTaskSwitchContext+0x94>)
 8003d28:	009a      	lsls	r2, r3, #2
 8003d2a:	18d4      	adds	r4, r2, r3
 8003d2c:	00a1      	lsls	r1, r4, #2
 8003d2e:	4401      	add	r1, r0
 8003d30:	684c      	ldr	r4, [r1, #4]
 8003d32:	6864      	ldr	r4, [r4, #4]
 8003d34:	604c      	str	r4, [r1, #4]
 8003d36:	441a      	add	r2, r3
 8003d38:	0091      	lsls	r1, r2, #2
 8003d3a:	3108      	adds	r1, #8
 8003d3c:	4408      	add	r0, r1
 8003d3e:	4284      	cmp	r4, r0
 8003d40:	d00b      	beq.n	8003d5a <vTaskSwitchContext+0x76>
 8003d42:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8003d46:	009a      	lsls	r2, r3, #2
 8003d48:	4b0b      	ldr	r3, [pc, #44]	; (8003d78 <vTaskSwitchContext+0x94>)
 8003d4a:	4413      	add	r3, r2
 8003d4c:	685b      	ldr	r3, [r3, #4]
 8003d4e:	68da      	ldr	r2, [r3, #12]
 8003d50:	4b0a      	ldr	r3, [pc, #40]	; (8003d7c <vTaskSwitchContext+0x98>)
 8003d52:	601a      	str	r2, [r3, #0]
}
 8003d54:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003d58:	4770      	bx	lr
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8003d5a:	6860      	ldr	r0, [r4, #4]
 8003d5c:	eb03 0283 	add.w	r2, r3, r3, lsl #2
 8003d60:	0091      	lsls	r1, r2, #2
 8003d62:	4a05      	ldr	r2, [pc, #20]	; (8003d78 <vTaskSwitchContext+0x94>)
 8003d64:	440a      	add	r2, r1
 8003d66:	6050      	str	r0, [r2, #4]
 8003d68:	e7eb      	b.n	8003d42 <vTaskSwitchContext+0x5e>
 8003d6a:	bf00      	nop
 8003d6c:	20003d58 	.word	0x20003d58
 8003d70:	20003dd8 	.word	0x20003dd8
 8003d74:	20003d60 	.word	0x20003d60
 8003d78:	20003cc0 	.word	0x20003cc0
 8003d7c:	20003cb4 	.word	0x20003cb4

08003d80 <vTaskPlaceOnEventList>:
	configASSERT( pxEventList );
 8003d80:	b940      	cbnz	r0, 8003d94 <vTaskPlaceOnEventList+0x14>
 8003d82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d86:	f383 8811 	msr	BASEPRI, r3
 8003d8a:	f3bf 8f6f 	isb	sy
 8003d8e:	f3bf 8f4f 	dsb	sy
 8003d92:	e7fe      	b.n	8003d92 <vTaskPlaceOnEventList+0x12>
{
 8003d94:	b510      	push	{r4, lr}
 8003d96:	460c      	mov	r4, r1
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003d98:	4b04      	ldr	r3, [pc, #16]	; (8003dac <vTaskPlaceOnEventList+0x2c>)
 8003d9a:	6819      	ldr	r1, [r3, #0]
 8003d9c:	3118      	adds	r1, #24
 8003d9e:	f7fe fc3e 	bl	800261e <vListInsert>
	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8003da2:	2101      	movs	r1, #1
 8003da4:	4620      	mov	r0, r4
 8003da6:	f7ff fd89 	bl	80038bc <prvAddCurrentTaskToDelayedList>
 8003daa:	bd10      	pop	{r4, pc}
 8003dac:	20003cb4 	.word	0x20003cb4

08003db0 <xTaskRemoveFromEventList>:
{
 8003db0:	b538      	push	{r3, r4, r5, lr}
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8003db2:	68c3      	ldr	r3, [r0, #12]
 8003db4:	68dc      	ldr	r4, [r3, #12]
	configASSERT( pxUnblockedTCB );
 8003db6:	b324      	cbz	r4, 8003e02 <xTaskRemoveFromEventList+0x52>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8003db8:	f104 0518 	add.w	r5, r4, #24
 8003dbc:	4628      	mov	r0, r5
 8003dbe:	f7fe fc48 	bl	8002652 <uxListRemove>
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003dc2:	4b18      	ldr	r3, [pc, #96]	; (8003e24 <xTaskRemoveFromEventList+0x74>)
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	bb2b      	cbnz	r3, 8003e14 <xTaskRemoveFromEventList+0x64>
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8003dc8:	1d25      	adds	r5, r4, #4
 8003dca:	4628      	mov	r0, r5
 8003dcc:	f7fe fc41 	bl	8002652 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8003dd0:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8003dd2:	2201      	movs	r2, #1
 8003dd4:	409a      	lsls	r2, r3
 8003dd6:	4914      	ldr	r1, [pc, #80]	; (8003e28 <xTaskRemoveFromEventList+0x78>)
 8003dd8:	6808      	ldr	r0, [r1, #0]
 8003dda:	4302      	orrs	r2, r0
 8003ddc:	600a      	str	r2, [r1, #0]
 8003dde:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8003de2:	009a      	lsls	r2, r3, #2
 8003de4:	4629      	mov	r1, r5
 8003de6:	4811      	ldr	r0, [pc, #68]	; (8003e2c <xTaskRemoveFromEventList+0x7c>)
 8003de8:	4410      	add	r0, r2
 8003dea:	f7fe fc0c 	bl	8002606 <vListInsertEnd>
	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8003dee:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8003df0:	4b0f      	ldr	r3, [pc, #60]	; (8003e30 <xTaskRemoveFromEventList+0x80>)
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003df6:	429a      	cmp	r2, r3
 8003df8:	d911      	bls.n	8003e1e <xTaskRemoveFromEventList+0x6e>
		xYieldPending = pdTRUE;
 8003dfa:	2001      	movs	r0, #1
 8003dfc:	4b0d      	ldr	r3, [pc, #52]	; (8003e34 <xTaskRemoveFromEventList+0x84>)
 8003dfe:	6018      	str	r0, [r3, #0]
 8003e00:	bd38      	pop	{r3, r4, r5, pc}
 8003e02:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e06:	f383 8811 	msr	BASEPRI, r3
 8003e0a:	f3bf 8f6f 	isb	sy
 8003e0e:	f3bf 8f4f 	dsb	sy
 8003e12:	e7fe      	b.n	8003e12 <xTaskRemoveFromEventList+0x62>
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8003e14:	4629      	mov	r1, r5
 8003e16:	4808      	ldr	r0, [pc, #32]	; (8003e38 <xTaskRemoveFromEventList+0x88>)
 8003e18:	f7fe fbf5 	bl	8002606 <vListInsertEnd>
 8003e1c:	e7e7      	b.n	8003dee <xTaskRemoveFromEventList+0x3e>
		xReturn = pdFALSE;
 8003e1e:	2000      	movs	r0, #0
}
 8003e20:	bd38      	pop	{r3, r4, r5, pc}
 8003e22:	bf00      	nop
 8003e24:	20003d58 	.word	0x20003d58
 8003e28:	20003d60 	.word	0x20003d60
 8003e2c:	20003cc0 	.word	0x20003cc0
 8003e30:	20003cb4 	.word	0x20003cb4
 8003e34:	20003dd8 	.word	0x20003dd8
 8003e38:	20003d94 	.word	0x20003d94

08003e3c <vTaskInternalSetTimeOutState>:
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8003e3c:	4b03      	ldr	r3, [pc, #12]	; (8003e4c <vTaskInternalSetTimeOutState+0x10>)
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	6003      	str	r3, [r0, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8003e42:	4b03      	ldr	r3, [pc, #12]	; (8003e50 <vTaskInternalSetTimeOutState+0x14>)
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	6043      	str	r3, [r0, #4]
 8003e48:	4770      	bx	lr
 8003e4a:	bf00      	nop
 8003e4c:	20003d90 	.word	0x20003d90
 8003e50:	20003dd4 	.word	0x20003dd4

08003e54 <xTaskCheckForTimeOut>:
{
 8003e54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	configASSERT( pxTimeOut );
 8003e56:	b1e0      	cbz	r0, 8003e92 <xTaskCheckForTimeOut+0x3e>
 8003e58:	4605      	mov	r5, r0
	configASSERT( pxTicksToWait );
 8003e5a:	b319      	cbz	r1, 8003ea4 <xTaskCheckForTimeOut+0x50>
 8003e5c:	460c      	mov	r4, r1
	taskENTER_CRITICAL();
 8003e5e:	f7fe fc79 	bl	8002754 <vPortEnterCritical>
		const TickType_t xConstTickCount = xTickCount;
 8003e62:	4b1a      	ldr	r3, [pc, #104]	; (8003ecc <xTaskCheckForTimeOut+0x78>)
 8003e64:	6818      	ldr	r0, [r3, #0]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8003e66:	6869      	ldr	r1, [r5, #4]
 8003e68:	1a42      	subs	r2, r0, r1
			if( *pxTicksToWait == portMAX_DELAY )
 8003e6a:	6823      	ldr	r3, [r4, #0]
 8003e6c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003e70:	d028      	beq.n	8003ec4 <xTaskCheckForTimeOut+0x70>
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8003e72:	682f      	ldr	r7, [r5, #0]
 8003e74:	4e16      	ldr	r6, [pc, #88]	; (8003ed0 <xTaskCheckForTimeOut+0x7c>)
 8003e76:	6836      	ldr	r6, [r6, #0]
 8003e78:	42b7      	cmp	r7, r6
 8003e7a:	d001      	beq.n	8003e80 <xTaskCheckForTimeOut+0x2c>
 8003e7c:	4288      	cmp	r0, r1
 8003e7e:	d223      	bcs.n	8003ec8 <xTaskCheckForTimeOut+0x74>
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8003e80:	429a      	cmp	r2, r3
 8003e82:	d318      	bcc.n	8003eb6 <xTaskCheckForTimeOut+0x62>
			*pxTicksToWait = 0;
 8003e84:	2300      	movs	r3, #0
 8003e86:	6023      	str	r3, [r4, #0]
			xReturn = pdTRUE;
 8003e88:	2401      	movs	r4, #1
	taskEXIT_CRITICAL();
 8003e8a:	f7fe fc85 	bl	8002798 <vPortExitCritical>
}
 8003e8e:	4620      	mov	r0, r4
 8003e90:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003e92:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e96:	f383 8811 	msr	BASEPRI, r3
 8003e9a:	f3bf 8f6f 	isb	sy
 8003e9e:	f3bf 8f4f 	dsb	sy
 8003ea2:	e7fe      	b.n	8003ea2 <xTaskCheckForTimeOut+0x4e>
 8003ea4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ea8:	f383 8811 	msr	BASEPRI, r3
 8003eac:	f3bf 8f6f 	isb	sy
 8003eb0:	f3bf 8f4f 	dsb	sy
 8003eb4:	e7fe      	b.n	8003eb4 <xTaskCheckForTimeOut+0x60>
			*pxTicksToWait -= xElapsedTime;
 8003eb6:	1a9b      	subs	r3, r3, r2
 8003eb8:	6023      	str	r3, [r4, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8003eba:	4628      	mov	r0, r5
 8003ebc:	f7ff ffbe 	bl	8003e3c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8003ec0:	2400      	movs	r4, #0
 8003ec2:	e7e2      	b.n	8003e8a <xTaskCheckForTimeOut+0x36>
				xReturn = pdFALSE;
 8003ec4:	2400      	movs	r4, #0
 8003ec6:	e7e0      	b.n	8003e8a <xTaskCheckForTimeOut+0x36>
			xReturn = pdTRUE;
 8003ec8:	2401      	movs	r4, #1
 8003eca:	e7de      	b.n	8003e8a <xTaskCheckForTimeOut+0x36>
 8003ecc:	20003dd4 	.word	0x20003dd4
 8003ed0:	20003d90 	.word	0x20003d90

08003ed4 <vTaskMissedYield>:
	xYieldPending = pdTRUE;
 8003ed4:	2201      	movs	r2, #1
 8003ed6:	4b01      	ldr	r3, [pc, #4]	; (8003edc <vTaskMissedYield+0x8>)
 8003ed8:	601a      	str	r2, [r3, #0]
 8003eda:	4770      	bx	lr
 8003edc:	20003dd8 	.word	0x20003dd8

08003ee0 <xTaskGetSchedulerState>:
		if( xSchedulerRunning == pdFALSE )
 8003ee0:	4b05      	ldr	r3, [pc, #20]	; (8003ef8 <xTaskGetSchedulerState+0x18>)
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	b123      	cbz	r3, 8003ef0 <xTaskGetSchedulerState+0x10>
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003ee6:	4b05      	ldr	r3, [pc, #20]	; (8003efc <xTaskGetSchedulerState+0x1c>)
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	b91b      	cbnz	r3, 8003ef4 <xTaskGetSchedulerState+0x14>
				xReturn = taskSCHEDULER_RUNNING;
 8003eec:	2002      	movs	r0, #2
 8003eee:	4770      	bx	lr
			xReturn = taskSCHEDULER_NOT_STARTED;
 8003ef0:	2001      	movs	r0, #1
 8003ef2:	4770      	bx	lr
				xReturn = taskSCHEDULER_SUSPENDED;
 8003ef4:	2000      	movs	r0, #0
	}
 8003ef6:	4770      	bx	lr
 8003ef8:	20003da8 	.word	0x20003da8
 8003efc:	20003d58 	.word	0x20003d58

08003f00 <xTaskPriorityInherit>:
		if( pxMutexHolder != NULL )
 8003f00:	2800      	cmp	r0, #0
 8003f02:	d054      	beq.n	8003fae <xTaskPriorityInherit+0xae>
	{
 8003f04:	b538      	push	{r3, r4, r5, lr}
 8003f06:	4604      	mov	r4, r0
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8003f08:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
 8003f0a:	492a      	ldr	r1, [pc, #168]	; (8003fb4 <xTaskPriorityInherit+0xb4>)
 8003f0c:	6809      	ldr	r1, [r1, #0]
 8003f0e:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
 8003f10:	428a      	cmp	r2, r1
 8003f12:	d242      	bcs.n	8003f9a <xTaskPriorityInherit+0x9a>
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8003f14:	6981      	ldr	r1, [r0, #24]
 8003f16:	2900      	cmp	r1, #0
 8003f18:	db05      	blt.n	8003f26 <xTaskPriorityInherit+0x26>
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003f1a:	4926      	ldr	r1, [pc, #152]	; (8003fb4 <xTaskPriorityInherit+0xb4>)
 8003f1c:	6809      	ldr	r1, [r1, #0]
 8003f1e:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
 8003f20:	f1c1 0107 	rsb	r1, r1, #7
 8003f24:	6181      	str	r1, [r0, #24]
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8003f26:	6960      	ldr	r0, [r4, #20]
 8003f28:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8003f2c:	0091      	lsls	r1, r2, #2
 8003f2e:	4a22      	ldr	r2, [pc, #136]	; (8003fb8 <xTaskPriorityInherit+0xb8>)
 8003f30:	440a      	add	r2, r1
 8003f32:	4290      	cmp	r0, r2
 8003f34:	d007      	beq.n	8003f46 <xTaskPriorityInherit+0x46>
 8003f36:	2200      	movs	r2, #0
 8003f38:	b93a      	cbnz	r2, 8003f4a <xTaskPriorityInherit+0x4a>
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8003f3a:	4a1e      	ldr	r2, [pc, #120]	; (8003fb4 <xTaskPriorityInherit+0xb4>)
 8003f3c:	6812      	ldr	r2, [r2, #0]
 8003f3e:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8003f40:	62e2      	str	r2, [r4, #44]	; 0x2c
				xReturn = pdTRUE;
 8003f42:	2001      	movs	r0, #1
 8003f44:	bd38      	pop	{r3, r4, r5, pc}
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8003f46:	2201      	movs	r2, #1
 8003f48:	e7f6      	b.n	8003f38 <xTaskPriorityInherit+0x38>
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003f4a:	1d25      	adds	r5, r4, #4
 8003f4c:	4628      	mov	r0, r5
 8003f4e:	f7fe fb80 	bl	8002652 <uxListRemove>
 8003f52:	b968      	cbnz	r0, 8003f70 <xTaskPriorityInherit+0x70>
						taskRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority );
 8003f54:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8003f56:	eb03 0183 	add.w	r1, r3, r3, lsl #2
 8003f5a:	008a      	lsls	r2, r1, #2
 8003f5c:	4916      	ldr	r1, [pc, #88]	; (8003fb8 <xTaskPriorityInherit+0xb8>)
 8003f5e:	588a      	ldr	r2, [r1, r2]
 8003f60:	b932      	cbnz	r2, 8003f70 <xTaskPriorityInherit+0x70>
 8003f62:	2201      	movs	r2, #1
 8003f64:	409a      	lsls	r2, r3
 8003f66:	4915      	ldr	r1, [pc, #84]	; (8003fbc <xTaskPriorityInherit+0xbc>)
 8003f68:	680b      	ldr	r3, [r1, #0]
 8003f6a:	ea23 0302 	bic.w	r3, r3, r2
 8003f6e:	600b      	str	r3, [r1, #0]
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8003f70:	4b10      	ldr	r3, [pc, #64]	; (8003fb4 <xTaskPriorityInherit+0xb4>)
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f76:	62e3      	str	r3, [r4, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8003f78:	2401      	movs	r4, #1
 8003f7a:	fa04 f203 	lsl.w	r2, r4, r3
 8003f7e:	490f      	ldr	r1, [pc, #60]	; (8003fbc <xTaskPriorityInherit+0xbc>)
 8003f80:	6808      	ldr	r0, [r1, #0]
 8003f82:	4302      	orrs	r2, r0
 8003f84:	600a      	str	r2, [r1, #0]
 8003f86:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8003f8a:	009a      	lsls	r2, r3, #2
 8003f8c:	4629      	mov	r1, r5
 8003f8e:	480a      	ldr	r0, [pc, #40]	; (8003fb8 <xTaskPriorityInherit+0xb8>)
 8003f90:	4410      	add	r0, r2
 8003f92:	f7fe fb38 	bl	8002606 <vListInsertEnd>
				xReturn = pdTRUE;
 8003f96:	4620      	mov	r0, r4
 8003f98:	bd38      	pop	{r3, r4, r5, pc}
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8003f9a:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8003f9c:	4b05      	ldr	r3, [pc, #20]	; (8003fb4 <xTaskPriorityInherit+0xb4>)
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fa2:	429a      	cmp	r2, r3
 8003fa4:	d201      	bcs.n	8003faa <xTaskPriorityInherit+0xaa>
					xReturn = pdTRUE;
 8003fa6:	2001      	movs	r0, #1
	}
 8003fa8:	bd38      	pop	{r3, r4, r5, pc}
	BaseType_t xReturn = pdFALSE;
 8003faa:	2000      	movs	r0, #0
 8003fac:	bd38      	pop	{r3, r4, r5, pc}
 8003fae:	2000      	movs	r0, #0
 8003fb0:	4770      	bx	lr
 8003fb2:	bf00      	nop
 8003fb4:	20003cb4 	.word	0x20003cb4
 8003fb8:	20003cc0 	.word	0x20003cc0
 8003fbc:	20003d60 	.word	0x20003d60

08003fc0 <xTaskPriorityDisinherit>:
		if( pxMutexHolder != NULL )
 8003fc0:	2800      	cmp	r0, #0
 8003fc2:	d04a      	beq.n	800405a <xTaskPriorityDisinherit+0x9a>
	{
 8003fc4:	b538      	push	{r3, r4, r5, lr}
 8003fc6:	4604      	mov	r4, r0
			configASSERT( pxTCB == pxCurrentTCB );
 8003fc8:	4a27      	ldr	r2, [pc, #156]	; (8004068 <xTaskPriorityDisinherit+0xa8>)
 8003fca:	6812      	ldr	r2, [r2, #0]
 8003fcc:	4290      	cmp	r0, r2
 8003fce:	d008      	beq.n	8003fe2 <xTaskPriorityDisinherit+0x22>
 8003fd0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003fd4:	f383 8811 	msr	BASEPRI, r3
 8003fd8:	f3bf 8f6f 	isb	sy
 8003fdc:	f3bf 8f4f 	dsb	sy
 8003fe0:	e7fe      	b.n	8003fe0 <xTaskPriorityDisinherit+0x20>
			configASSERT( pxTCB->uxMutexesHeld );
 8003fe2:	6c82      	ldr	r2, [r0, #72]	; 0x48
 8003fe4:	b942      	cbnz	r2, 8003ff8 <xTaskPriorityDisinherit+0x38>
 8003fe6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003fea:	f383 8811 	msr	BASEPRI, r3
 8003fee:	f3bf 8f6f 	isb	sy
 8003ff2:	f3bf 8f4f 	dsb	sy
 8003ff6:	e7fe      	b.n	8003ff6 <xTaskPriorityDisinherit+0x36>
			( pxTCB->uxMutexesHeld )--;
 8003ff8:	3a01      	subs	r2, #1
 8003ffa:	6482      	str	r2, [r0, #72]	; 0x48
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8003ffc:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
 8003ffe:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8004000:	4288      	cmp	r0, r1
 8004002:	d02c      	beq.n	800405e <xTaskPriorityDisinherit+0x9e>
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8004004:	bb6a      	cbnz	r2, 8004062 <xTaskPriorityDisinherit+0xa2>
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004006:	1d25      	adds	r5, r4, #4
 8004008:	4628      	mov	r0, r5
 800400a:	f7fe fb22 	bl	8002652 <uxListRemove>
 800400e:	b970      	cbnz	r0, 800402e <xTaskPriorityDisinherit+0x6e>
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8004010:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8004012:	eb02 0182 	add.w	r1, r2, r2, lsl #2
 8004016:	008b      	lsls	r3, r1, #2
 8004018:	4914      	ldr	r1, [pc, #80]	; (800406c <xTaskPriorityDisinherit+0xac>)
 800401a:	58cb      	ldr	r3, [r1, r3]
 800401c:	b93b      	cbnz	r3, 800402e <xTaskPriorityDisinherit+0x6e>
 800401e:	2301      	movs	r3, #1
 8004020:	fa03 f202 	lsl.w	r2, r3, r2
 8004024:	4912      	ldr	r1, [pc, #72]	; (8004070 <xTaskPriorityDisinherit+0xb0>)
 8004026:	680b      	ldr	r3, [r1, #0]
 8004028:	ea23 0302 	bic.w	r3, r3, r2
 800402c:	600b      	str	r3, [r1, #0]
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800402e:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8004030:	62e3      	str	r3, [r4, #44]	; 0x2c
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004032:	f1c3 0207 	rsb	r2, r3, #7
 8004036:	61a2      	str	r2, [r4, #24]
					prvAddTaskToReadyList( pxTCB );
 8004038:	2401      	movs	r4, #1
 800403a:	fa04 f203 	lsl.w	r2, r4, r3
 800403e:	490c      	ldr	r1, [pc, #48]	; (8004070 <xTaskPriorityDisinherit+0xb0>)
 8004040:	6808      	ldr	r0, [r1, #0]
 8004042:	4302      	orrs	r2, r0
 8004044:	600a      	str	r2, [r1, #0]
 8004046:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800404a:	009a      	lsls	r2, r3, #2
 800404c:	4629      	mov	r1, r5
 800404e:	4807      	ldr	r0, [pc, #28]	; (800406c <xTaskPriorityDisinherit+0xac>)
 8004050:	4410      	add	r0, r2
 8004052:	f7fe fad8 	bl	8002606 <vListInsertEnd>
					xReturn = pdTRUE;
 8004056:	4620      	mov	r0, r4
 8004058:	bd38      	pop	{r3, r4, r5, pc}
	BaseType_t xReturn = pdFALSE;
 800405a:	2000      	movs	r0, #0
 800405c:	4770      	bx	lr
 800405e:	2000      	movs	r0, #0
 8004060:	bd38      	pop	{r3, r4, r5, pc}
 8004062:	2000      	movs	r0, #0
	}
 8004064:	bd38      	pop	{r3, r4, r5, pc}
 8004066:	bf00      	nop
 8004068:	20003cb4 	.word	0x20003cb4
 800406c:	20003cc0 	.word	0x20003cc0
 8004070:	20003d60 	.word	0x20003d60

08004074 <vTaskPriorityDisinheritAfterTimeout>:
		if( pxMutexHolder != NULL )
 8004074:	2800      	cmp	r0, #0
 8004076:	d05b      	beq.n	8004130 <vTaskPriorityDisinheritAfterTimeout+0xbc>
	{
 8004078:	b538      	push	{r3, r4, r5, lr}
 800407a:	4604      	mov	r4, r0
			configASSERT( pxTCB->uxMutexesHeld );
 800407c:	6c80      	ldr	r0, [r0, #72]	; 0x48
 800407e:	b940      	cbnz	r0, 8004092 <vTaskPriorityDisinheritAfterTimeout+0x1e>
 8004080:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004084:	f383 8811 	msr	BASEPRI, r3
 8004088:	f3bf 8f6f 	isb	sy
 800408c:	f3bf 8f4f 	dsb	sy
 8004090:	e7fe      	b.n	8004090 <vTaskPriorityDisinheritAfterTimeout+0x1c>
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8004092:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8004094:	428a      	cmp	r2, r1
 8004096:	d200      	bcs.n	800409a <vTaskPriorityDisinheritAfterTimeout+0x26>
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8004098:	460a      	mov	r2, r1
			if( pxTCB->uxPriority != uxPriorityToUse )
 800409a:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 800409c:	428a      	cmp	r2, r1
 800409e:	d001      	beq.n	80040a4 <vTaskPriorityDisinheritAfterTimeout+0x30>
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 80040a0:	2801      	cmp	r0, #1
 80040a2:	d000      	beq.n	80040a6 <vTaskPriorityDisinheritAfterTimeout+0x32>
 80040a4:	bd38      	pop	{r3, r4, r5, pc}
					configASSERT( pxTCB != pxCurrentTCB );
 80040a6:	4823      	ldr	r0, [pc, #140]	; (8004134 <vTaskPriorityDisinheritAfterTimeout+0xc0>)
 80040a8:	6800      	ldr	r0, [r0, #0]
 80040aa:	4284      	cmp	r4, r0
 80040ac:	d108      	bne.n	80040c0 <vTaskPriorityDisinheritAfterTimeout+0x4c>
 80040ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80040b2:	f383 8811 	msr	BASEPRI, r3
 80040b6:	f3bf 8f6f 	isb	sy
 80040ba:	f3bf 8f4f 	dsb	sy
 80040be:	e7fe      	b.n	80040be <vTaskPriorityDisinheritAfterTimeout+0x4a>
					pxTCB->uxPriority = uxPriorityToUse;
 80040c0:	62e2      	str	r2, [r4, #44]	; 0x2c
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80040c2:	69a0      	ldr	r0, [r4, #24]
 80040c4:	2800      	cmp	r0, #0
 80040c6:	db02      	blt.n	80040ce <vTaskPriorityDisinheritAfterTimeout+0x5a>
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80040c8:	f1c2 0207 	rsb	r2, r2, #7
 80040cc:	61a2      	str	r2, [r4, #24]
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 80040ce:	6963      	ldr	r3, [r4, #20]
 80040d0:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 80040d4:	0088      	lsls	r0, r1, #2
 80040d6:	4a18      	ldr	r2, [pc, #96]	; (8004138 <vTaskPriorityDisinheritAfterTimeout+0xc4>)
 80040d8:	4402      	add	r2, r0
 80040da:	4293      	cmp	r3, r2
 80040dc:	d126      	bne.n	800412c <vTaskPriorityDisinheritAfterTimeout+0xb8>
 80040de:	2201      	movs	r2, #1
 80040e0:	2a00      	cmp	r2, #0
 80040e2:	d0df      	beq.n	80040a4 <vTaskPriorityDisinheritAfterTimeout+0x30>
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80040e4:	1d25      	adds	r5, r4, #4
 80040e6:	4628      	mov	r0, r5
 80040e8:	f7fe fab3 	bl	8002652 <uxListRemove>
 80040ec:	b970      	cbnz	r0, 800410c <vTaskPriorityDisinheritAfterTimeout+0x98>
							taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 80040ee:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80040f0:	eb02 0182 	add.w	r1, r2, r2, lsl #2
 80040f4:	008b      	lsls	r3, r1, #2
 80040f6:	4910      	ldr	r1, [pc, #64]	; (8004138 <vTaskPriorityDisinheritAfterTimeout+0xc4>)
 80040f8:	58cb      	ldr	r3, [r1, r3]
 80040fa:	b93b      	cbnz	r3, 800410c <vTaskPriorityDisinheritAfterTimeout+0x98>
 80040fc:	2301      	movs	r3, #1
 80040fe:	fa03 f202 	lsl.w	r2, r3, r2
 8004102:	490e      	ldr	r1, [pc, #56]	; (800413c <vTaskPriorityDisinheritAfterTimeout+0xc8>)
 8004104:	680b      	ldr	r3, [r1, #0]
 8004106:	ea23 0302 	bic.w	r3, r3, r2
 800410a:	600b      	str	r3, [r1, #0]
						prvAddTaskToReadyList( pxTCB );
 800410c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800410e:	2201      	movs	r2, #1
 8004110:	409a      	lsls	r2, r3
 8004112:	490a      	ldr	r1, [pc, #40]	; (800413c <vTaskPriorityDisinheritAfterTimeout+0xc8>)
 8004114:	6808      	ldr	r0, [r1, #0]
 8004116:	4302      	orrs	r2, r0
 8004118:	600a      	str	r2, [r1, #0]
 800411a:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800411e:	009a      	lsls	r2, r3, #2
 8004120:	4629      	mov	r1, r5
 8004122:	4805      	ldr	r0, [pc, #20]	; (8004138 <vTaskPriorityDisinheritAfterTimeout+0xc4>)
 8004124:	4410      	add	r0, r2
 8004126:	f7fe fa6e 	bl	8002606 <vListInsertEnd>
	}
 800412a:	e7bb      	b.n	80040a4 <vTaskPriorityDisinheritAfterTimeout+0x30>
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800412c:	2200      	movs	r2, #0
 800412e:	e7d7      	b.n	80040e0 <vTaskPriorityDisinheritAfterTimeout+0x6c>
 8004130:	4770      	bx	lr
 8004132:	bf00      	nop
 8004134:	20003cb4 	.word	0x20003cb4
 8004138:	20003cc0 	.word	0x20003cc0
 800413c:	20003d60 	.word	0x20003d60

08004140 <pvTaskIncrementMutexHeldCount>:
		if( pxCurrentTCB != NULL )
 8004140:	4b05      	ldr	r3, [pc, #20]	; (8004158 <pvTaskIncrementMutexHeldCount+0x18>)
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	b123      	cbz	r3, 8004150 <pvTaskIncrementMutexHeldCount+0x10>
			( pxCurrentTCB->uxMutexesHeld )++;
 8004146:	4b04      	ldr	r3, [pc, #16]	; (8004158 <pvTaskIncrementMutexHeldCount+0x18>)
 8004148:	681a      	ldr	r2, [r3, #0]
 800414a:	6c93      	ldr	r3, [r2, #72]	; 0x48
 800414c:	3301      	adds	r3, #1
 800414e:	6493      	str	r3, [r2, #72]	; 0x48
		return pxCurrentTCB;
 8004150:	4b01      	ldr	r3, [pc, #4]	; (8004158 <pvTaskIncrementMutexHeldCount+0x18>)
 8004152:	6818      	ldr	r0, [r3, #0]
	}
 8004154:	4770      	bx	lr
 8004156:	bf00      	nop
 8004158:	20003cb4 	.word	0x20003cb4

0800415c <netconn_apimsg>:
 * @param apimsg a struct containing the function to call and its parameters
 * @return ERR_OK if the function was called, another err_t if not
 */
static err_t
netconn_apimsg(tcpip_callback_fn fn, struct api_msg *apimsg)
{
 800415c:	b510      	push	{r4, lr}
 800415e:	460c      	mov	r4, r1

#if LWIP_NETCONN_SEM_PER_THREAD
  apimsg->op_completed_sem = LWIP_NETCONN_THREAD_SEM_GET();
#endif /* LWIP_NETCONN_SEM_PER_THREAD */

  err = tcpip_send_msg_wait_sem(fn, apimsg, LWIP_API_MSG_SEM(apimsg));
 8004160:	680a      	ldr	r2, [r1, #0]
 8004162:	320c      	adds	r2, #12
 8004164:	f002 f9e8 	bl	8006538 <tcpip_send_msg_wait_sem>
  if (err == ERR_OK) {
 8004168:	4603      	mov	r3, r0
 800416a:	b908      	cbnz	r0, 8004170 <netconn_apimsg+0x14>
    return apimsg->err;
 800416c:	f994 3004 	ldrsb.w	r3, [r4, #4]
  }
  return err;
}
 8004170:	4618      	mov	r0, r3
 8004172:	bd10      	pop	{r4, pc}

08004174 <netconn_close_shutdown>:
 * @param how fully close or only shutdown one side?
 * @return ERR_OK if the netconn was closed, any other err_t on error
 */
static err_t
netconn_close_shutdown(struct netconn *conn, u8_t how)
{
 8004174:	b500      	push	{lr}
 8004176:	b087      	sub	sp, #28
  API_MSG_VAR_DECLARE(msg);
  err_t err;
  LWIP_UNUSED_ARG(how);

  LWIP_ERROR("netconn_close: invalid conn",  (conn != NULL), return ERR_ARG;);
 8004178:	b160      	cbz	r0, 8004194 <netconn_close_shutdown+0x20>

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 800417a:	9001      	str	r0, [sp, #4]
#if LWIP_TCP
  /* shutting down both ends is the same as closing */
  API_MSG_VAR_REF(msg).msg.sd.shut = how;
 800417c:	f88d 100c 	strb.w	r1, [sp, #12]
#if LWIP_SO_SNDTIMEO || LWIP_SO_LINGER
  /* get the time we started, which is later compared to
     sys_now() + conn->send_timeout */
  API_MSG_VAR_REF(msg).msg.sd.time_started = sys_now();
#else /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
  API_MSG_VAR_REF(msg).msg.sd.polls_left =
 8004180:	2329      	movs	r3, #41	; 0x29
 8004182:	f88d 300d 	strb.w	r3, [sp, #13]
    ((LWIP_TCP_CLOSE_TIMEOUT_MS_DEFAULT + TCP_SLOW_INTERVAL - 1) / TCP_SLOW_INTERVAL) + 1;
#endif /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
#endif /* LWIP_TCP */
  err = netconn_apimsg(lwip_netconn_do_close, &API_MSG_VAR_REF(msg));
 8004186:	a901      	add	r1, sp, #4
 8004188:	4807      	ldr	r0, [pc, #28]	; (80041a8 <netconn_close_shutdown+0x34>)
 800418a:	f7ff ffe7 	bl	800415c <netconn_apimsg>
  API_MSG_VAR_FREE(msg);

  return err;
}
 800418e:	b007      	add	sp, #28
 8004190:	f85d fb04 	ldr.w	pc, [sp], #4
  LWIP_ERROR("netconn_close: invalid conn",  (conn != NULL), return ERR_ARG;);
 8004194:	4b05      	ldr	r3, [pc, #20]	; (80041ac <netconn_close_shutdown+0x38>)
 8004196:	f44f 724a 	mov.w	r2, #808	; 0x328
 800419a:	4905      	ldr	r1, [pc, #20]	; (80041b0 <netconn_close_shutdown+0x3c>)
 800419c:	4805      	ldr	r0, [pc, #20]	; (80041b4 <netconn_close_shutdown+0x40>)
 800419e:	f009 fd14 	bl	800dbca <iprintf>
 80041a2:	f06f 000f 	mvn.w	r0, #15
 80041a6:	e7f2      	b.n	800418e <netconn_close_shutdown+0x1a>
 80041a8:	080057f1 	.word	0x080057f1
 80041ac:	0800e360 	.word	0x0800e360
 80041b0:	0800e394 	.word	0x0800e394
 80041b4:	0800e3b0 	.word	0x0800e3b0

080041b8 <netconn_recv_data>:
{
 80041b8:	b570      	push	{r4, r5, r6, lr}
 80041ba:	b086      	sub	sp, #24
  void *buf = NULL;
 80041bc:	2300      	movs	r3, #0
 80041be:	9305      	str	r3, [sp, #20]
  LWIP_ERROR("netconn_recv: invalid pointer", (new_buf != NULL), return ERR_ARG;);
 80041c0:	b1b1      	cbz	r1, 80041f0 <netconn_recv_data+0x38>
 80041c2:	4604      	mov	r4, r0
 80041c4:	460d      	mov	r5, r1
  *new_buf = NULL;
 80041c6:	2300      	movs	r3, #0
 80041c8:	600b      	str	r3, [r1, #0]
  LWIP_ERROR("netconn_recv: invalid conn",    (conn != NULL),    return ERR_ARG;);
 80041ca:	b1d8      	cbz	r0, 8004204 <netconn_recv_data+0x4c>
  if (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP)
 80041cc:	7803      	ldrb	r3, [r0, #0]
 80041ce:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80041d2:	2b10      	cmp	r3, #16
 80041d4:	d020      	beq.n	8004218 <netconn_recv_data+0x60>
  LWIP_ERROR("netconn_recv: invalid recvmbox", sys_mbox_valid(&conn->recvmbox), return ERR_CONN;);
 80041d6:	f104 0610 	add.w	r6, r4, #16
 80041da:	4630      	mov	r0, r6
 80041dc:	f008 fdbc 	bl	800cd58 <sys_mbox_valid>
 80041e0:	b340      	cbz	r0, 8004234 <netconn_recv_data+0x7c>
  if (ERR_IS_FATAL(conn->last_err)) {
 80041e2:	f994 0008 	ldrsb.w	r0, [r4, #8]
 80041e6:	f110 0f0c 	cmn.w	r0, #12
 80041ea:	da2d      	bge.n	8004248 <netconn_recv_data+0x90>
}
 80041ec:	b006      	add	sp, #24
 80041ee:	bd70      	pop	{r4, r5, r6, pc}
  LWIP_ERROR("netconn_recv: invalid pointer", (new_buf != NULL), return ERR_ARG;);
 80041f0:	4b3a      	ldr	r3, [pc, #232]	; (80042dc <netconn_recv_data+0x124>)
 80041f2:	f240 12e7 	movw	r2, #487	; 0x1e7
 80041f6:	493a      	ldr	r1, [pc, #232]	; (80042e0 <netconn_recv_data+0x128>)
 80041f8:	483a      	ldr	r0, [pc, #232]	; (80042e4 <netconn_recv_data+0x12c>)
 80041fa:	f009 fce6 	bl	800dbca <iprintf>
 80041fe:	f06f 000f 	mvn.w	r0, #15
 8004202:	e7f3      	b.n	80041ec <netconn_recv_data+0x34>
  LWIP_ERROR("netconn_recv: invalid conn",    (conn != NULL),    return ERR_ARG;);
 8004204:	4b35      	ldr	r3, [pc, #212]	; (80042dc <netconn_recv_data+0x124>)
 8004206:	f240 12e9 	movw	r2, #489	; 0x1e9
 800420a:	4937      	ldr	r1, [pc, #220]	; (80042e8 <netconn_recv_data+0x130>)
 800420c:	4835      	ldr	r0, [pc, #212]	; (80042e4 <netconn_recv_data+0x12c>)
 800420e:	f009 fcdc 	bl	800dbca <iprintf>
 8004212:	f06f 000f 	mvn.w	r0, #15
 8004216:	e7e9      	b.n	80041ec <netconn_recv_data+0x34>
    if (!sys_mbox_valid(&conn->recvmbox)) {
 8004218:	3010      	adds	r0, #16
 800421a:	f008 fd9d 	bl	800cd58 <sys_mbox_valid>
 800421e:	2800      	cmp	r0, #0
 8004220:	d1d9      	bne.n	80041d6 <netconn_recv_data+0x1e>
      return sys_mbox_valid(&conn->acceptmbox) ? ERR_CONN : ERR_CLSD;
 8004222:	f104 0014 	add.w	r0, r4, #20
 8004226:	f008 fd97 	bl	800cd58 <sys_mbox_valid>
 800422a:	2800      	cmp	r0, #0
 800422c:	d053      	beq.n	80042d6 <netconn_recv_data+0x11e>
 800422e:	f06f 000a 	mvn.w	r0, #10
 8004232:	e7db      	b.n	80041ec <netconn_recv_data+0x34>
  LWIP_ERROR("netconn_recv: invalid recvmbox", sys_mbox_valid(&conn->recvmbox), return ERR_CONN;);
 8004234:	4b29      	ldr	r3, [pc, #164]	; (80042dc <netconn_recv_data+0x124>)
 8004236:	f240 12f5 	movw	r2, #501	; 0x1f5
 800423a:	492c      	ldr	r1, [pc, #176]	; (80042ec <netconn_recv_data+0x134>)
 800423c:	4829      	ldr	r0, [pc, #164]	; (80042e4 <netconn_recv_data+0x12c>)
 800423e:	f009 fcc4 	bl	800dbca <iprintf>
 8004242:	f06f 000a 	mvn.w	r0, #10
 8004246:	e7d1      	b.n	80041ec <netconn_recv_data+0x34>
  sys_arch_mbox_fetch(&conn->recvmbox, &buf, 0);
 8004248:	2200      	movs	r2, #0
 800424a:	a905      	add	r1, sp, #20
 800424c:	4630      	mov	r0, r6
 800424e:	f008 fd44 	bl	800ccda <sys_arch_mbox_fetch>
  if (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP)
 8004252:	7823      	ldrb	r3, [r4, #0]
 8004254:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004258:	2b10      	cmp	r3, #16
 800425a:	d00e      	beq.n	800427a <netconn_recv_data+0xc2>
    LWIP_ASSERT("buf != NULL", buf != NULL);
 800425c:	9b05      	ldr	r3, [sp, #20]
 800425e:	2b00      	cmp	r3, #0
 8004260:	d031      	beq.n	80042c6 <netconn_recv_data+0x10e>
    len = netbuf_len((struct netbuf*)buf);
 8004262:	9b05      	ldr	r3, [sp, #20]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	891a      	ldrh	r2, [r3, #8]
  API_EVENT(conn, NETCONN_EVT_RCVMINUS, len);
 8004268:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800426a:	b113      	cbz	r3, 8004272 <netconn_recv_data+0xba>
 800426c:	2101      	movs	r1, #1
 800426e:	4620      	mov	r0, r4
 8004270:	4798      	blx	r3
  *new_buf = buf;
 8004272:	9b05      	ldr	r3, [sp, #20]
 8004274:	602b      	str	r3, [r5, #0]
  return ERR_OK;
 8004276:	2000      	movs	r0, #0
 8004278:	e7b8      	b.n	80041ec <netconn_recv_data+0x34>
    API_MSG_VAR_REF(msg).conn = conn;
 800427a:	9400      	str	r4, [sp, #0]
    if (buf != NULL) {
 800427c:	9b05      	ldr	r3, [sp, #20]
 800427e:	b14b      	cbz	r3, 8004294 <netconn_recv_data+0xdc>
      API_MSG_VAR_REF(msg).msg.r.len = ((struct pbuf *)buf)->tot_len;
 8004280:	891b      	ldrh	r3, [r3, #8]
 8004282:	9302      	str	r3, [sp, #8]
    netconn_apimsg(lwip_netconn_do_recv, &API_MSG_VAR_REF(msg));
 8004284:	4669      	mov	r1, sp
 8004286:	481a      	ldr	r0, [pc, #104]	; (80042f0 <netconn_recv_data+0x138>)
 8004288:	f7ff ff68 	bl	800415c <netconn_apimsg>
    if (buf == NULL) {
 800428c:	9b05      	ldr	r3, [sp, #20]
 800428e:	b123      	cbz	r3, 800429a <netconn_recv_data+0xe2>
    len = ((struct pbuf *)buf)->tot_len;
 8004290:	891a      	ldrh	r2, [r3, #8]
 8004292:	e7e9      	b.n	8004268 <netconn_recv_data+0xb0>
      API_MSG_VAR_REF(msg).msg.r.len = 1;
 8004294:	2301      	movs	r3, #1
 8004296:	9302      	str	r3, [sp, #8]
 8004298:	e7f4      	b.n	8004284 <netconn_recv_data+0xcc>
      API_EVENT(conn, NETCONN_EVT_RCVMINUS, 0);
 800429a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800429c:	b11b      	cbz	r3, 80042a6 <netconn_recv_data+0xee>
 800429e:	2200      	movs	r2, #0
 80042a0:	2101      	movs	r1, #1
 80042a2:	4620      	mov	r0, r4
 80042a4:	4798      	blx	r3
      if (conn->pcb.ip == NULL) {
 80042a6:	6863      	ldr	r3, [r4, #4]
 80042a8:	b933      	cbnz	r3, 80042b8 <netconn_recv_data+0x100>
        return conn->last_err == ERR_OK ? ERR_RST : conn->last_err;
 80042aa:	f994 0008 	ldrsb.w	r0, [r4, #8]
 80042ae:	2800      	cmp	r0, #0
 80042b0:	d19c      	bne.n	80041ec <netconn_recv_data+0x34>
 80042b2:	f06f 000d 	mvn.w	r0, #13
 80042b6:	e799      	b.n	80041ec <netconn_recv_data+0x34>
      netconn_close_shutdown(conn, NETCONN_SHUT_RD);
 80042b8:	2101      	movs	r1, #1
 80042ba:	4620      	mov	r0, r4
 80042bc:	f7ff ff5a 	bl	8004174 <netconn_close_shutdown>
      return ERR_CLSD;
 80042c0:	f06f 000e 	mvn.w	r0, #14
 80042c4:	e792      	b.n	80041ec <netconn_recv_data+0x34>
    LWIP_ASSERT("buf != NULL", buf != NULL);
 80042c6:	4b05      	ldr	r3, [pc, #20]	; (80042dc <netconn_recv_data+0x124>)
 80042c8:	f240 223e 	movw	r2, #574	; 0x23e
 80042cc:	4909      	ldr	r1, [pc, #36]	; (80042f4 <netconn_recv_data+0x13c>)
 80042ce:	4805      	ldr	r0, [pc, #20]	; (80042e4 <netconn_recv_data+0x12c>)
 80042d0:	f009 fc7b 	bl	800dbca <iprintf>
 80042d4:	e7c5      	b.n	8004262 <netconn_recv_data+0xaa>
      return sys_mbox_valid(&conn->acceptmbox) ? ERR_CONN : ERR_CLSD;
 80042d6:	f06f 000e 	mvn.w	r0, #14
 80042da:	e787      	b.n	80041ec <netconn_recv_data+0x34>
 80042dc:	0800e360 	.word	0x0800e360
 80042e0:	0800e4d4 	.word	0x0800e4d4
 80042e4:	0800e3b0 	.word	0x0800e3b0
 80042e8:	0800e4f4 	.word	0x0800e4f4
 80042ec:	0800e510 	.word	0x0800e510
 80042f0:	08005617 	.word	0x08005617
 80042f4:	0800e530 	.word	0x0800e530

080042f8 <netconn_new_with_proto_and_callback>:
{
 80042f8:	b570      	push	{r4, r5, r6, lr}
 80042fa:	b086      	sub	sp, #24
 80042fc:	460d      	mov	r5, r1
  conn = netconn_alloc(t, callback);
 80042fe:	4611      	mov	r1, r2
 8004300:	f000 febc 	bl	800507c <netconn_alloc>
  if (conn != NULL) {
 8004304:	4604      	mov	r4, r0
 8004306:	b140      	cbz	r0, 800431a <netconn_new_with_proto_and_callback+0x22>
    API_MSG_VAR_REF(msg).msg.n.proto = proto;
 8004308:	f88d 500c 	strb.w	r5, [sp, #12]
    API_MSG_VAR_REF(msg).conn = conn;
 800430c:	a906      	add	r1, sp, #24
 800430e:	f841 0d14 	str.w	r0, [r1, #-20]!
    err = netconn_apimsg(lwip_netconn_do_newconn, &API_MSG_VAR_REF(msg));
 8004312:	4820      	ldr	r0, [pc, #128]	; (8004394 <netconn_new_with_proto_and_callback+0x9c>)
 8004314:	f7ff ff22 	bl	800415c <netconn_apimsg>
    if (err != ERR_OK) {
 8004318:	b910      	cbnz	r0, 8004320 <netconn_new_with_proto_and_callback+0x28>
}
 800431a:	4620      	mov	r0, r4
 800431c:	b006      	add	sp, #24
 800431e:	bd70      	pop	{r4, r5, r6, pc}
      LWIP_ASSERT("freeing conn without freeing pcb", conn->pcb.tcp == NULL);
 8004320:	6863      	ldr	r3, [r4, #4]
 8004322:	b12b      	cbz	r3, 8004330 <netconn_new_with_proto_and_callback+0x38>
 8004324:	4b1c      	ldr	r3, [pc, #112]	; (8004398 <netconn_new_with_proto_and_callback+0xa0>)
 8004326:	2289      	movs	r2, #137	; 0x89
 8004328:	491c      	ldr	r1, [pc, #112]	; (800439c <netconn_new_with_proto_and_callback+0xa4>)
 800432a:	481d      	ldr	r0, [pc, #116]	; (80043a0 <netconn_new_with_proto_and_callback+0xa8>)
 800432c:	f009 fc4d 	bl	800dbca <iprintf>
      LWIP_ASSERT("conn has no recvmbox", sys_mbox_valid(&conn->recvmbox));
 8004330:	f104 0510 	add.w	r5, r4, #16
 8004334:	4628      	mov	r0, r5
 8004336:	f008 fd0f 	bl	800cd58 <sys_mbox_valid>
 800433a:	b1b0      	cbz	r0, 800436a <netconn_new_with_proto_and_callback+0x72>
      LWIP_ASSERT("conn->acceptmbox shouldn't exist", !sys_mbox_valid(&conn->acceptmbox));
 800433c:	f104 0014 	add.w	r0, r4, #20
 8004340:	f008 fd0a 	bl	800cd58 <sys_mbox_valid>
 8004344:	b9c0      	cbnz	r0, 8004378 <netconn_new_with_proto_and_callback+0x80>
      LWIP_ASSERT("conn has no op_completed", sys_sem_valid(&conn->op_completed));
 8004346:	f104 060c 	add.w	r6, r4, #12
 800434a:	4630      	mov	r0, r6
 800434c:	f008 fd4e 	bl	800cdec <sys_sem_valid>
 8004350:	b1c8      	cbz	r0, 8004386 <netconn_new_with_proto_and_callback+0x8e>
      sys_sem_free(&conn->op_completed);
 8004352:	4630      	mov	r0, r6
 8004354:	f008 fd45 	bl	800cde2 <sys_sem_free>
      sys_mbox_free(&conn->recvmbox);
 8004358:	4628      	mov	r0, r5
 800435a:	f008 fc9f 	bl	800cc9c <sys_mbox_free>
      memp_free(MEMP_NETCONN, conn);
 800435e:	4621      	mov	r1, r4
 8004360:	2007      	movs	r0, #7
 8004362:	f003 ff99 	bl	8008298 <memp_free>
      return NULL;
 8004366:	2400      	movs	r4, #0
 8004368:	e7d7      	b.n	800431a <netconn_new_with_proto_and_callback+0x22>
      LWIP_ASSERT("conn has no recvmbox", sys_mbox_valid(&conn->recvmbox));
 800436a:	4b0b      	ldr	r3, [pc, #44]	; (8004398 <netconn_new_with_proto_and_callback+0xa0>)
 800436c:	228a      	movs	r2, #138	; 0x8a
 800436e:	490d      	ldr	r1, [pc, #52]	; (80043a4 <netconn_new_with_proto_and_callback+0xac>)
 8004370:	480b      	ldr	r0, [pc, #44]	; (80043a0 <netconn_new_with_proto_and_callback+0xa8>)
 8004372:	f009 fc2a 	bl	800dbca <iprintf>
 8004376:	e7e1      	b.n	800433c <netconn_new_with_proto_and_callback+0x44>
      LWIP_ASSERT("conn->acceptmbox shouldn't exist", !sys_mbox_valid(&conn->acceptmbox));
 8004378:	4b07      	ldr	r3, [pc, #28]	; (8004398 <netconn_new_with_proto_and_callback+0xa0>)
 800437a:	228c      	movs	r2, #140	; 0x8c
 800437c:	490a      	ldr	r1, [pc, #40]	; (80043a8 <netconn_new_with_proto_and_callback+0xb0>)
 800437e:	4808      	ldr	r0, [pc, #32]	; (80043a0 <netconn_new_with_proto_and_callback+0xa8>)
 8004380:	f009 fc23 	bl	800dbca <iprintf>
 8004384:	e7df      	b.n	8004346 <netconn_new_with_proto_and_callback+0x4e>
      LWIP_ASSERT("conn has no op_completed", sys_sem_valid(&conn->op_completed));
 8004386:	4b04      	ldr	r3, [pc, #16]	; (8004398 <netconn_new_with_proto_and_callback+0xa0>)
 8004388:	228f      	movs	r2, #143	; 0x8f
 800438a:	4908      	ldr	r1, [pc, #32]	; (80043ac <netconn_new_with_proto_and_callback+0xb4>)
 800438c:	4804      	ldr	r0, [pc, #16]	; (80043a0 <netconn_new_with_proto_and_callback+0xa8>)
 800438e:	f009 fc1c 	bl	800dbca <iprintf>
 8004392:	e7de      	b.n	8004352 <netconn_new_with_proto_and_callback+0x5a>
 8004394:	08005041 	.word	0x08005041
 8004398:	0800e360 	.word	0x0800e360
 800439c:	0800e458 	.word	0x0800e458
 80043a0:	0800e3b0 	.word	0x0800e3b0
 80043a4:	0800e47c 	.word	0x0800e47c
 80043a8:	0800e494 	.word	0x0800e494
 80043ac:	0800e4b8 	.word	0x0800e4b8

080043b0 <netconn_delete>:
{
 80043b0:	b530      	push	{r4, r5, lr}
 80043b2:	b087      	sub	sp, #28
  if (conn == NULL) {
 80043b4:	b188      	cbz	r0, 80043da <netconn_delete+0x2a>
 80043b6:	4604      	mov	r4, r0
  API_MSG_VAR_REF(msg).conn = conn;
 80043b8:	9001      	str	r0, [sp, #4]
  API_MSG_VAR_REF(msg).msg.sd.polls_left =
 80043ba:	2329      	movs	r3, #41	; 0x29
 80043bc:	f88d 300d 	strb.w	r3, [sp, #13]
  err = netconn_apimsg(lwip_netconn_do_delconn, &API_MSG_VAR_REF(msg));
 80043c0:	a901      	add	r1, sp, #4
 80043c2:	4807      	ldr	r0, [pc, #28]	; (80043e0 <netconn_delete+0x30>)
 80043c4:	f7ff feca 	bl	800415c <netconn_apimsg>
  if (err != ERR_OK) {
 80043c8:	4605      	mov	r5, r0
 80043ca:	b110      	cbz	r0, 80043d2 <netconn_delete+0x22>
}
 80043cc:	4628      	mov	r0, r5
 80043ce:	b007      	add	sp, #28
 80043d0:	bd30      	pop	{r4, r5, pc}
  netconn_free(conn);
 80043d2:	4620      	mov	r0, r4
 80043d4:	f000 fe98 	bl	8005108 <netconn_free>
  return ERR_OK;
 80043d8:	e7f8      	b.n	80043cc <netconn_delete+0x1c>
    return ERR_OK;
 80043da:	2500      	movs	r5, #0
 80043dc:	e7f6      	b.n	80043cc <netconn_delete+0x1c>
 80043de:	bf00      	nop
 80043e0:	08005325 	.word	0x08005325

080043e4 <netconn_getaddr>:
{
 80043e4:	b510      	push	{r4, lr}
 80043e6:	b086      	sub	sp, #24
  LWIP_ERROR("netconn_getaddr: invalid conn", (conn != NULL), return ERR_ARG;);
 80043e8:	b160      	cbz	r0, 8004404 <netconn_getaddr+0x20>
  LWIP_ERROR("netconn_getaddr: invalid addr", (addr != NULL), return ERR_ARG;);
 80043ea:	b1a1      	cbz	r1, 8004416 <netconn_getaddr+0x32>
  LWIP_ERROR("netconn_getaddr: invalid port", (port != NULL), return ERR_ARG;);
 80043ec:	b1e2      	cbz	r2, 8004428 <netconn_getaddr+0x44>
  API_MSG_VAR_REF(msg).conn = conn;
 80043ee:	9001      	str	r0, [sp, #4]
  API_MSG_VAR_REF(msg).msg.ad.local = local;
 80043f0:	f88d 3014 	strb.w	r3, [sp, #20]
  msg.msg.ad.ipaddr = addr;
 80043f4:	9103      	str	r1, [sp, #12]
  msg.msg.ad.port = port;
 80043f6:	9204      	str	r2, [sp, #16]
  err = netconn_apimsg(lwip_netconn_do_getaddr, &msg);
 80043f8:	a901      	add	r1, sp, #4
 80043fa:	4810      	ldr	r0, [pc, #64]	; (800443c <netconn_getaddr+0x58>)
 80043fc:	f7ff feae 	bl	800415c <netconn_apimsg>
}
 8004400:	b006      	add	sp, #24
 8004402:	bd10      	pop	{r4, pc}
  LWIP_ERROR("netconn_getaddr: invalid conn", (conn != NULL), return ERR_ARG;);
 8004404:	4b0e      	ldr	r3, [pc, #56]	; (8004440 <netconn_getaddr+0x5c>)
 8004406:	22d9      	movs	r2, #217	; 0xd9
 8004408:	490e      	ldr	r1, [pc, #56]	; (8004444 <netconn_getaddr+0x60>)
 800440a:	480f      	ldr	r0, [pc, #60]	; (8004448 <netconn_getaddr+0x64>)
 800440c:	f009 fbdd 	bl	800dbca <iprintf>
 8004410:	f06f 000f 	mvn.w	r0, #15
 8004414:	e7f4      	b.n	8004400 <netconn_getaddr+0x1c>
  LWIP_ERROR("netconn_getaddr: invalid addr", (addr != NULL), return ERR_ARG;);
 8004416:	4b0a      	ldr	r3, [pc, #40]	; (8004440 <netconn_getaddr+0x5c>)
 8004418:	22da      	movs	r2, #218	; 0xda
 800441a:	490c      	ldr	r1, [pc, #48]	; (800444c <netconn_getaddr+0x68>)
 800441c:	480a      	ldr	r0, [pc, #40]	; (8004448 <netconn_getaddr+0x64>)
 800441e:	f009 fbd4 	bl	800dbca <iprintf>
 8004422:	f06f 000f 	mvn.w	r0, #15
 8004426:	e7eb      	b.n	8004400 <netconn_getaddr+0x1c>
  LWIP_ERROR("netconn_getaddr: invalid port", (port != NULL), return ERR_ARG;);
 8004428:	4b05      	ldr	r3, [pc, #20]	; (8004440 <netconn_getaddr+0x5c>)
 800442a:	22db      	movs	r2, #219	; 0xdb
 800442c:	4908      	ldr	r1, [pc, #32]	; (8004450 <netconn_getaddr+0x6c>)
 800442e:	4806      	ldr	r0, [pc, #24]	; (8004448 <netconn_getaddr+0x64>)
 8004430:	f009 fbcb 	bl	800dbca <iprintf>
 8004434:	f06f 000f 	mvn.w	r0, #15
 8004438:	e7e2      	b.n	8004400 <netconn_getaddr+0x1c>
 800443a:	bf00      	nop
 800443c:	0800572d 	.word	0x0800572d
 8004440:	0800e360 	.word	0x0800e360
 8004444:	0800e3d8 	.word	0x0800e3d8
 8004448:	0800e3b0 	.word	0x0800e3b0
 800444c:	0800e3f8 	.word	0x0800e3f8
 8004450:	0800e418 	.word	0x0800e418

08004454 <netconn_bind>:
{
 8004454:	b500      	push	{lr}
 8004456:	b087      	sub	sp, #28
  LWIP_ERROR("netconn_bind: invalid conn", (conn != NULL), return ERR_ARG;);
 8004458:	b160      	cbz	r0, 8004474 <netconn_bind+0x20>
 800445a:	4603      	mov	r3, r0
  if (addr == NULL) {
 800445c:	b199      	cbz	r1, 8004486 <netconn_bind+0x32>
  API_MSG_VAR_REF(msg).conn = conn;
 800445e:	9301      	str	r3, [sp, #4]
  API_MSG_VAR_REF(msg).msg.bc.ipaddr = API_MSG_VAR_REF(addr);
 8004460:	9103      	str	r1, [sp, #12]
  API_MSG_VAR_REF(msg).msg.bc.port = port;
 8004462:	f8ad 2010 	strh.w	r2, [sp, #16]
  err = netconn_apimsg(lwip_netconn_do_bind, &API_MSG_VAR_REF(msg));
 8004466:	a901      	add	r1, sp, #4
 8004468:	4808      	ldr	r0, [pc, #32]	; (800448c <netconn_bind+0x38>)
 800446a:	f7ff fe77 	bl	800415c <netconn_apimsg>
}
 800446e:	b007      	add	sp, #28
 8004470:	f85d fb04 	ldr.w	pc, [sp], #4
  LWIP_ERROR("netconn_bind: invalid conn", (conn != NULL), return ERR_ARG;);
 8004474:	4b06      	ldr	r3, [pc, #24]	; (8004490 <netconn_bind+0x3c>)
 8004476:	22ff      	movs	r2, #255	; 0xff
 8004478:	4906      	ldr	r1, [pc, #24]	; (8004494 <netconn_bind+0x40>)
 800447a:	4807      	ldr	r0, [pc, #28]	; (8004498 <netconn_bind+0x44>)
 800447c:	f009 fba5 	bl	800dbca <iprintf>
 8004480:	f06f 000f 	mvn.w	r0, #15
 8004484:	e7f3      	b.n	800446e <netconn_bind+0x1a>
    addr = IP4_ADDR_ANY;
 8004486:	4905      	ldr	r1, [pc, #20]	; (800449c <netconn_bind+0x48>)
 8004488:	e7e9      	b.n	800445e <netconn_bind+0xa>
 800448a:	bf00      	nop
 800448c:	08005445 	.word	0x08005445
 8004490:	0800e360 	.word	0x0800e360
 8004494:	0800e344 	.word	0x0800e344
 8004498:	0800e3b0 	.word	0x0800e3b0
 800449c:	0800ef98 	.word	0x0800ef98

080044a0 <netconn_listen_with_backlog>:
{
 80044a0:	b500      	push	{lr}
 80044a2:	b087      	sub	sp, #28
  LWIP_ERROR("netconn_listen: invalid conn", (conn != NULL), return ERR_ARG;);
 80044a4:	b140      	cbz	r0, 80044b8 <netconn_listen_with_backlog+0x18>
  API_MSG_VAR_REF(msg).conn = conn;
 80044a6:	a906      	add	r1, sp, #24
 80044a8:	f841 0d14 	str.w	r0, [r1, #-20]!
  err = netconn_apimsg(lwip_netconn_do_listen, &API_MSG_VAR_REF(msg));
 80044ac:	4807      	ldr	r0, [pc, #28]	; (80044cc <netconn_listen_with_backlog+0x2c>)
 80044ae:	f7ff fe55 	bl	800415c <netconn_apimsg>
}
 80044b2:	b007      	add	sp, #28
 80044b4:	f85d fb04 	ldr.w	pc, [sp], #4
  LWIP_ERROR("netconn_listen: invalid conn", (conn != NULL), return ERR_ARG;);
 80044b8:	4b05      	ldr	r3, [pc, #20]	; (80044d0 <netconn_listen_with_backlog+0x30>)
 80044ba:	f44f 72b4 	mov.w	r2, #360	; 0x168
 80044be:	4905      	ldr	r1, [pc, #20]	; (80044d4 <netconn_listen_with_backlog+0x34>)
 80044c0:	4805      	ldr	r0, [pc, #20]	; (80044d8 <netconn_listen_with_backlog+0x38>)
 80044c2:	f009 fb82 	bl	800dbca <iprintf>
 80044c6:	f06f 000f 	mvn.w	r0, #15
 80044ca:	e7f2      	b.n	80044b2 <netconn_listen_with_backlog+0x12>
 80044cc:	080054b1 	.word	0x080054b1
 80044d0:	0800e360 	.word	0x0800e360
 80044d4:	0800e438 	.word	0x0800e438
 80044d8:	0800e3b0 	.word	0x0800e3b0

080044dc <netconn_accept>:
{
 80044dc:	b570      	push	{r4, r5, r6, lr}
 80044de:	b082      	sub	sp, #8
  LWIP_ERROR("netconn_accept: invalid pointer",    (new_conn != NULL),                  return ERR_ARG;);
 80044e0:	b159      	cbz	r1, 80044fa <netconn_accept+0x1e>
 80044e2:	4604      	mov	r4, r0
 80044e4:	460d      	mov	r5, r1
  *new_conn = NULL;
 80044e6:	2300      	movs	r3, #0
 80044e8:	600b      	str	r3, [r1, #0]
  LWIP_ERROR("netconn_accept: invalid conn",       (conn != NULL),                      return ERR_ARG;);
 80044ea:	b180      	cbz	r0, 800450e <netconn_accept+0x32>
  if (ERR_IS_FATAL(conn->last_err)) {
 80044ec:	f990 0008 	ldrsb.w	r0, [r0, #8]
 80044f0:	f110 0f0c 	cmn.w	r0, #12
 80044f4:	da15      	bge.n	8004522 <netconn_accept+0x46>
}
 80044f6:	b002      	add	sp, #8
 80044f8:	bd70      	pop	{r4, r5, r6, pc}
  LWIP_ERROR("netconn_accept: invalid pointer",    (new_conn != NULL),                  return ERR_ARG;);
 80044fa:	4b21      	ldr	r3, [pc, #132]	; (8004580 <netconn_accept+0xa4>)
 80044fc:	f240 128d 	movw	r2, #397	; 0x18d
 8004500:	4920      	ldr	r1, [pc, #128]	; (8004584 <netconn_accept+0xa8>)
 8004502:	4821      	ldr	r0, [pc, #132]	; (8004588 <netconn_accept+0xac>)
 8004504:	f009 fb61 	bl	800dbca <iprintf>
 8004508:	f06f 000f 	mvn.w	r0, #15
 800450c:	e7f3      	b.n	80044f6 <netconn_accept+0x1a>
  LWIP_ERROR("netconn_accept: invalid conn",       (conn != NULL),                      return ERR_ARG;);
 800450e:	4b1c      	ldr	r3, [pc, #112]	; (8004580 <netconn_accept+0xa4>)
 8004510:	f240 128f 	movw	r2, #399	; 0x18f
 8004514:	491d      	ldr	r1, [pc, #116]	; (800458c <netconn_accept+0xb0>)
 8004516:	481c      	ldr	r0, [pc, #112]	; (8004588 <netconn_accept+0xac>)
 8004518:	f009 fb57 	bl	800dbca <iprintf>
 800451c:	f06f 000f 	mvn.w	r0, #15
 8004520:	e7e9      	b.n	80044f6 <netconn_accept+0x1a>
  if (!sys_mbox_valid(&conn->acceptmbox)) {
 8004522:	f104 0614 	add.w	r6, r4, #20
 8004526:	4630      	mov	r0, r6
 8004528:	f008 fc16 	bl	800cd58 <sys_mbox_valid>
 800452c:	b308      	cbz	r0, 8004572 <netconn_accept+0x96>
  sys_arch_mbox_fetch(&conn->acceptmbox, &accept_ptr, 0);
 800452e:	2200      	movs	r2, #0
 8004530:	a901      	add	r1, sp, #4
 8004532:	4630      	mov	r0, r6
 8004534:	f008 fbd1 	bl	800ccda <sys_arch_mbox_fetch>
  newconn = (struct netconn *)accept_ptr;
 8004538:	9e01      	ldr	r6, [sp, #4]
  API_EVENT(conn, NETCONN_EVT_RCVMINUS, 0);
 800453a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800453c:	b11b      	cbz	r3, 8004546 <netconn_accept+0x6a>
 800453e:	2200      	movs	r2, #0
 8004540:	2101      	movs	r1, #1
 8004542:	4620      	mov	r0, r4
 8004544:	4798      	blx	r3
  if (accept_ptr == &netconn_aborted) {
 8004546:	4b12      	ldr	r3, [pc, #72]	; (8004590 <netconn_accept+0xb4>)
 8004548:	9a01      	ldr	r2, [sp, #4]
 800454a:	429a      	cmp	r2, r3
 800454c:	d014      	beq.n	8004578 <netconn_accept+0x9c>
  if (newconn == NULL) {
 800454e:	b116      	cbz	r6, 8004556 <netconn_accept+0x7a>
  *new_conn = newconn;
 8004550:	602e      	str	r6, [r5, #0]
  return ERR_OK;
 8004552:	2000      	movs	r0, #0
 8004554:	e7cf      	b.n	80044f6 <netconn_accept+0x1a>
    NETCONN_SET_SAFE_ERR(conn, ERR_CLSD);
 8004556:	f008 fc91 	bl	800ce7c <sys_arch_protect>
 800455a:	f994 3008 	ldrsb.w	r3, [r4, #8]
 800455e:	f113 0f0c 	cmn.w	r3, #12
 8004562:	db01      	blt.n	8004568 <netconn_accept+0x8c>
 8004564:	23f1      	movs	r3, #241	; 0xf1
 8004566:	7223      	strb	r3, [r4, #8]
 8004568:	f008 fc94 	bl	800ce94 <sys_arch_unprotect>
    return ERR_CLSD;
 800456c:	f06f 000e 	mvn.w	r0, #14
 8004570:	e7c1      	b.n	80044f6 <netconn_accept+0x1a>
    return ERR_CLSD;
 8004572:	f06f 000e 	mvn.w	r0, #14
 8004576:	e7be      	b.n	80044f6 <netconn_accept+0x1a>
    return ERR_ABRT;
 8004578:	f06f 000c 	mvn.w	r0, #12
 800457c:	e7bb      	b.n	80044f6 <netconn_accept+0x1a>
 800457e:	bf00      	nop
 8004580:	0800e360 	.word	0x0800e360
 8004584:	0800e304 	.word	0x0800e304
 8004588:	0800e3b0 	.word	0x0800e3b0
 800458c:	0800e324 	.word	0x0800e324
 8004590:	20004268 	.word	0x20004268

08004594 <netconn_recv_tcp_pbuf>:
{
 8004594:	b508      	push	{r3, lr}
  LWIP_ERROR("netconn_recv: invalid conn", (conn != NULL) &&
 8004596:	b138      	cbz	r0, 80045a8 <netconn_recv_tcp_pbuf+0x14>
 8004598:	7803      	ldrb	r3, [r0, #0]
 800459a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800459e:	2b10      	cmp	r3, #16
 80045a0:	d102      	bne.n	80045a8 <netconn_recv_tcp_pbuf+0x14>
  return netconn_recv_data(conn, (void **)new_buf);
 80045a2:	f7ff fe09 	bl	80041b8 <netconn_recv_data>
}
 80045a6:	bd08      	pop	{r3, pc}
  LWIP_ERROR("netconn_recv: invalid conn", (conn != NULL) &&
 80045a8:	4b04      	ldr	r3, [pc, #16]	; (80045bc <netconn_recv_tcp_pbuf+0x28>)
 80045aa:	f240 225e 	movw	r2, #606	; 0x25e
 80045ae:	4904      	ldr	r1, [pc, #16]	; (80045c0 <netconn_recv_tcp_pbuf+0x2c>)
 80045b0:	4804      	ldr	r0, [pc, #16]	; (80045c4 <netconn_recv_tcp_pbuf+0x30>)
 80045b2:	f009 fb0a 	bl	800dbca <iprintf>
 80045b6:	f06f 000f 	mvn.w	r0, #15
 80045ba:	bd08      	pop	{r3, pc}
 80045bc:	0800e360 	.word	0x0800e360
 80045c0:	0800e4f4 	.word	0x0800e4f4
 80045c4:	0800e3b0 	.word	0x0800e3b0

080045c8 <netconn_recv>:
{
 80045c8:	b570      	push	{r4, r5, r6, lr}
 80045ca:	b082      	sub	sp, #8
  LWIP_ERROR("netconn_recv: invalid pointer", (new_buf != NULL), return ERR_ARG;);
 80045cc:	b179      	cbz	r1, 80045ee <netconn_recv+0x26>
 80045ce:	4604      	mov	r4, r0
 80045d0:	460d      	mov	r5, r1
  *new_buf = NULL;
 80045d2:	2300      	movs	r3, #0
 80045d4:	600b      	str	r3, [r1, #0]
  LWIP_ERROR("netconn_recv: invalid conn",    (conn != NULL),    return ERR_ARG;);
 80045d6:	b1a0      	cbz	r0, 8004602 <netconn_recv+0x3a>
  if (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP)
 80045d8:	7803      	ldrb	r3, [r0, #0]
 80045da:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80045de:	2b10      	cmp	r3, #16
 80045e0:	d019      	beq.n	8004616 <netconn_recv+0x4e>
    return netconn_recv_data(conn, (void **)new_buf);
 80045e2:	f7ff fde9 	bl	80041b8 <netconn_recv_data>
 80045e6:	4604      	mov	r4, r0
}
 80045e8:	4620      	mov	r0, r4
 80045ea:	b002      	add	sp, #8
 80045ec:	bd70      	pop	{r4, r5, r6, pc}
  LWIP_ERROR("netconn_recv: invalid pointer", (new_buf != NULL), return ERR_ARG;);
 80045ee:	4b1e      	ldr	r3, [pc, #120]	; (8004668 <netconn_recv+0xa0>)
 80045f0:	f44f 721d 	mov.w	r2, #628	; 0x274
 80045f4:	491d      	ldr	r1, [pc, #116]	; (800466c <netconn_recv+0xa4>)
 80045f6:	481e      	ldr	r0, [pc, #120]	; (8004670 <netconn_recv+0xa8>)
 80045f8:	f009 fae7 	bl	800dbca <iprintf>
 80045fc:	f06f 040f 	mvn.w	r4, #15
 8004600:	e7f2      	b.n	80045e8 <netconn_recv+0x20>
  LWIP_ERROR("netconn_recv: invalid conn",    (conn != NULL),    return ERR_ARG;);
 8004602:	4b19      	ldr	r3, [pc, #100]	; (8004668 <netconn_recv+0xa0>)
 8004604:	f240 2276 	movw	r2, #630	; 0x276
 8004608:	491a      	ldr	r1, [pc, #104]	; (8004674 <netconn_recv+0xac>)
 800460a:	4819      	ldr	r0, [pc, #100]	; (8004670 <netconn_recv+0xa8>)
 800460c:	f009 fadd 	bl	800dbca <iprintf>
 8004610:	f06f 040f 	mvn.w	r4, #15
 8004614:	e7e8      	b.n	80045e8 <netconn_recv+0x20>
    struct pbuf *p = NULL;
 8004616:	2300      	movs	r3, #0
 8004618:	9301      	str	r3, [sp, #4]
    buf = (struct netbuf *)memp_malloc(MEMP_NETBUF);
 800461a:	2006      	movs	r0, #6
 800461c:	f003 fe22 	bl	8008264 <memp_malloc>
    if (buf == NULL) {
 8004620:	4606      	mov	r6, r0
 8004622:	b1e8      	cbz	r0, 8004660 <netconn_recv+0x98>
    err = netconn_recv_data(conn, (void **)&p);
 8004624:	a901      	add	r1, sp, #4
 8004626:	4620      	mov	r0, r4
 8004628:	f7ff fdc6 	bl	80041b8 <netconn_recv_data>
    if (err != ERR_OK) {
 800462c:	4604      	mov	r4, r0
 800462e:	b950      	cbnz	r0, 8004646 <netconn_recv+0x7e>
    LWIP_ASSERT("p != NULL", p != NULL);
 8004630:	9b01      	ldr	r3, [sp, #4]
 8004632:	b16b      	cbz	r3, 8004650 <netconn_recv+0x88>
    buf->p = p;
 8004634:	9b01      	ldr	r3, [sp, #4]
 8004636:	6033      	str	r3, [r6, #0]
    buf->ptr = p;
 8004638:	9b01      	ldr	r3, [sp, #4]
 800463a:	6073      	str	r3, [r6, #4]
    buf->port = 0;
 800463c:	2300      	movs	r3, #0
 800463e:	81b3      	strh	r3, [r6, #12]
    ip_addr_set_zero(&buf->addr);
 8004640:	60b3      	str	r3, [r6, #8]
    *new_buf = buf;
 8004642:	602e      	str	r6, [r5, #0]
    return ERR_OK;
 8004644:	e7d0      	b.n	80045e8 <netconn_recv+0x20>
      memp_free(MEMP_NETBUF, buf);
 8004646:	4631      	mov	r1, r6
 8004648:	2006      	movs	r0, #6
 800464a:	f003 fe25 	bl	8008298 <memp_free>
      return err;
 800464e:	e7cb      	b.n	80045e8 <netconn_recv+0x20>
    LWIP_ASSERT("p != NULL", p != NULL);
 8004650:	4b05      	ldr	r3, [pc, #20]	; (8004668 <netconn_recv+0xa0>)
 8004652:	f240 228a 	movw	r2, #650	; 0x28a
 8004656:	4908      	ldr	r1, [pc, #32]	; (8004678 <netconn_recv+0xb0>)
 8004658:	4805      	ldr	r0, [pc, #20]	; (8004670 <netconn_recv+0xa8>)
 800465a:	f009 fab6 	bl	800dbca <iprintf>
 800465e:	e7e9      	b.n	8004634 <netconn_recv+0x6c>
      return ERR_MEM;
 8004660:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8004664:	e7c0      	b.n	80045e8 <netconn_recv+0x20>
 8004666:	bf00      	nop
 8004668:	0800e360 	.word	0x0800e360
 800466c:	0800e4d4 	.word	0x0800e4d4
 8004670:	0800e3b0 	.word	0x0800e3b0
 8004674:	0800e4f4 	.word	0x0800e4f4
 8004678:	0800e730 	.word	0x0800e730

0800467c <netconn_send>:
{
 800467c:	b500      	push	{lr}
 800467e:	b087      	sub	sp, #28
  LWIP_ERROR("netconn_send: invalid conn",  (conn != NULL), return ERR_ARG;);
 8004680:	b140      	cbz	r0, 8004694 <netconn_send+0x18>
  API_MSG_VAR_REF(msg).conn = conn;
 8004682:	9001      	str	r0, [sp, #4]
  API_MSG_VAR_REF(msg).msg.b = buf;
 8004684:	9103      	str	r1, [sp, #12]
  err = netconn_apimsg(lwip_netconn_do_send, &API_MSG_VAR_REF(msg));
 8004686:	a901      	add	r1, sp, #4
 8004688:	4807      	ldr	r0, [pc, #28]	; (80046a8 <netconn_send+0x2c>)
 800468a:	f7ff fd67 	bl	800415c <netconn_apimsg>
}
 800468e:	b007      	add	sp, #28
 8004690:	f85d fb04 	ldr.w	pc, [sp], #4
  LWIP_ERROR("netconn_send: invalid conn",  (conn != NULL), return ERR_ARG;);
 8004694:	4b05      	ldr	r3, [pc, #20]	; (80046ac <netconn_send+0x30>)
 8004696:	f240 22c3 	movw	r2, #707	; 0x2c3
 800469a:	4905      	ldr	r1, [pc, #20]	; (80046b0 <netconn_send+0x34>)
 800469c:	4805      	ldr	r0, [pc, #20]	; (80046b4 <netconn_send+0x38>)
 800469e:	f009 fa94 	bl	800dbca <iprintf>
 80046a2:	f06f 000f 	mvn.w	r0, #15
 80046a6:	e7f2      	b.n	800468e <netconn_send+0x12>
 80046a8:	080055a9 	.word	0x080055a9
 80046ac:	0800e360 	.word	0x0800e360
 80046b0:	0800e53c 	.word	0x0800e53c
 80046b4:	0800e3b0 	.word	0x0800e3b0

080046b8 <netconn_write_partly>:
{
 80046b8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80046ba:	b087      	sub	sp, #28
 80046bc:	9d0c      	ldr	r5, [sp, #48]	; 0x30
  LWIP_ERROR("netconn_write: invalid conn",  (conn != NULL), return ERR_ARG;);
 80046be:	b188      	cbz	r0, 80046e4 <netconn_write_partly+0x2c>
 80046c0:	4616      	mov	r6, r2
 80046c2:	4604      	mov	r4, r0
  LWIP_ERROR("netconn_write: invalid conn->type",  (NETCONNTYPE_GROUP(conn->type)== NETCONN_TCP), return ERR_VAL;);
 80046c4:	7802      	ldrb	r2, [r0, #0]
 80046c6:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
 80046ca:	2a10      	cmp	r2, #16
 80046cc:	d114      	bne.n	80046f8 <netconn_write_partly+0x40>
  if (size == 0) {
 80046ce:	2e00      	cmp	r6, #0
 80046d0:	d035      	beq.n	800473e <netconn_write_partly+0x86>
  dontblock = netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK);
 80046d2:	7f02      	ldrb	r2, [r0, #28]
 80046d4:	f012 0f02 	tst.w	r2, #2
 80046d8:	d118      	bne.n	800470c <netconn_write_partly+0x54>
 80046da:	f013 0f04 	tst.w	r3, #4
 80046de:	d029      	beq.n	8004734 <netconn_write_partly+0x7c>
 80046e0:	2201      	movs	r2, #1
 80046e2:	e014      	b.n	800470e <netconn_write_partly+0x56>
  LWIP_ERROR("netconn_write: invalid conn",  (conn != NULL), return ERR_ARG;);
 80046e4:	4b19      	ldr	r3, [pc, #100]	; (800474c <netconn_write_partly+0x94>)
 80046e6:	f240 22e6 	movw	r2, #742	; 0x2e6
 80046ea:	4919      	ldr	r1, [pc, #100]	; (8004750 <netconn_write_partly+0x98>)
 80046ec:	4819      	ldr	r0, [pc, #100]	; (8004754 <netconn_write_partly+0x9c>)
 80046ee:	f009 fa6c 	bl	800dbca <iprintf>
 80046f2:	f06f 030f 	mvn.w	r3, #15
 80046f6:	e023      	b.n	8004740 <netconn_write_partly+0x88>
  LWIP_ERROR("netconn_write: invalid conn->type",  (NETCONNTYPE_GROUP(conn->type)== NETCONN_TCP), return ERR_VAL;);
 80046f8:	4b14      	ldr	r3, [pc, #80]	; (800474c <netconn_write_partly+0x94>)
 80046fa:	f240 22e7 	movw	r2, #743	; 0x2e7
 80046fe:	4916      	ldr	r1, [pc, #88]	; (8004758 <netconn_write_partly+0xa0>)
 8004700:	4814      	ldr	r0, [pc, #80]	; (8004754 <netconn_write_partly+0x9c>)
 8004702:	f009 fa62 	bl	800dbca <iprintf>
 8004706:	f06f 0305 	mvn.w	r3, #5
 800470a:	e019      	b.n	8004740 <netconn_write_partly+0x88>
  dontblock = netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK);
 800470c:	2201      	movs	r2, #1
  if (dontblock && !bytes_written) {
 800470e:	f002 07ff 	and.w	r7, r2, #255	; 0xff
 8004712:	b102      	cbz	r2, 8004716 <netconn_write_partly+0x5e>
 8004714:	b1bd      	cbz	r5, 8004746 <netconn_write_partly+0x8e>
  API_MSG_VAR_REF(msg).conn = conn;
 8004716:	9401      	str	r4, [sp, #4]
  API_MSG_VAR_REF(msg).msg.w.dataptr = dataptr;
 8004718:	9103      	str	r1, [sp, #12]
  API_MSG_VAR_REF(msg).msg.w.apiflags = apiflags;
 800471a:	f88d 3014 	strb.w	r3, [sp, #20]
  API_MSG_VAR_REF(msg).msg.w.len = size;
 800471e:	9604      	str	r6, [sp, #16]
  err = netconn_apimsg(lwip_netconn_do_write, &API_MSG_VAR_REF(msg));
 8004720:	a901      	add	r1, sp, #4
 8004722:	480e      	ldr	r0, [pc, #56]	; (800475c <netconn_write_partly+0xa4>)
 8004724:	f7ff fd1a 	bl	800415c <netconn_apimsg>
  if ((err == ERR_OK) && (bytes_written != NULL)) {
 8004728:	4603      	mov	r3, r0
 800472a:	b948      	cbnz	r0, 8004740 <netconn_write_partly+0x88>
 800472c:	b145      	cbz	r5, 8004740 <netconn_write_partly+0x88>
    if (dontblock) {
 800472e:	b91f      	cbnz	r7, 8004738 <netconn_write_partly+0x80>
      *bytes_written = size;
 8004730:	602e      	str	r6, [r5, #0]
 8004732:	e005      	b.n	8004740 <netconn_write_partly+0x88>
  dontblock = netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK);
 8004734:	2200      	movs	r2, #0
 8004736:	e7ea      	b.n	800470e <netconn_write_partly+0x56>
      *bytes_written = API_MSG_VAR_REF(msg).msg.w.len;
 8004738:	9a04      	ldr	r2, [sp, #16]
 800473a:	602a      	str	r2, [r5, #0]
 800473c:	e000      	b.n	8004740 <netconn_write_partly+0x88>
    return ERR_OK;
 800473e:	2300      	movs	r3, #0
}
 8004740:	4618      	mov	r0, r3
 8004742:	b007      	add	sp, #28
 8004744:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return ERR_VAL;
 8004746:	f06f 0305 	mvn.w	r3, #5
 800474a:	e7f9      	b.n	8004740 <netconn_write_partly+0x88>
 800474c:	0800e360 	.word	0x0800e360
 8004750:	0800e558 	.word	0x0800e558
 8004754:	0800e3b0 	.word	0x0800e3b0
 8004758:	0800e574 	.word	0x0800e574
 800475c:	08005679 	.word	0x08005679

08004760 <recv_udp>:
 * @see udp.h (struct udp_pcb.recv) for parameters
 */
static void
recv_udp(void *arg, struct udp_pcb *pcb, struct pbuf *p,
   const ip_addr_t *addr, u16_t port)
{
 8004760:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004764:	4604      	mov	r4, r0
 8004766:	4616      	mov	r6, r2
 8004768:	4698      	mov	r8, r3
#if LWIP_SO_RCVBUF
  int recv_avail;
#endif /* LWIP_SO_RCVBUF */

  LWIP_UNUSED_ARG(pcb); /* only used for asserts... */
  LWIP_ASSERT("recv_udp must have a pcb argument", pcb != NULL);
 800476a:	460d      	mov	r5, r1
 800476c:	2900      	cmp	r1, #0
 800476e:	d030      	beq.n	80047d2 <recv_udp+0x72>
  LWIP_ASSERT("recv_udp must have an argument", arg != NULL);
 8004770:	2c00      	cmp	r4, #0
 8004772:	d035      	beq.n	80047e0 <recv_udp+0x80>
  conn = (struct netconn *)arg;

  if (conn == NULL) {
 8004774:	2c00      	cmp	r4, #0
 8004776:	d03a      	beq.n	80047ee <recv_udp+0x8e>
    pbuf_free(p);
    return;
  }

  LWIP_ASSERT("recv_udp: recv for wrong pcb!", conn->pcb.udp == pcb);
 8004778:	6863      	ldr	r3, [r4, #4]
 800477a:	429d      	cmp	r5, r3
 800477c:	d005      	beq.n	800478a <recv_udp+0x2a>
 800477e:	4b27      	ldr	r3, [pc, #156]	; (800481c <recv_udp+0xbc>)
 8004780:	22ba      	movs	r2, #186	; 0xba
 8004782:	4927      	ldr	r1, [pc, #156]	; (8004820 <recv_udp+0xc0>)
 8004784:	4827      	ldr	r0, [pc, #156]	; (8004824 <recv_udp+0xc4>)
 8004786:	f009 fa20 	bl	800dbca <iprintf>
#if LWIP_SO_RCVBUF
  SYS_ARCH_GET(conn->recv_avail, recv_avail);
  if (!sys_mbox_valid(&conn->recvmbox) ||
      ((recv_avail + (int)(p->tot_len)) > conn->recv_bufsize)) {
#else  /* LWIP_SO_RCVBUF */
  if (!sys_mbox_valid(&conn->recvmbox)) {
 800478a:	f104 0710 	add.w	r7, r4, #16
 800478e:	4638      	mov	r0, r7
 8004790:	f008 fae2 	bl	800cd58 <sys_mbox_valid>
 8004794:	b380      	cbz	r0, 80047f8 <recv_udp+0x98>
#endif /* LWIP_SO_RCVBUF */
    pbuf_free(p);
    return;
  }

  buf = (struct netbuf *)memp_malloc(MEMP_NETBUF);
 8004796:	2006      	movs	r0, #6
 8004798:	f003 fd64 	bl	8008264 <memp_malloc>
  if (buf == NULL) {
 800479c:	4605      	mov	r5, r0
 800479e:	b380      	cbz	r0, 8004802 <recv_udp+0xa2>
    pbuf_free(p);
    return;
  } else {
    buf->p = p;
 80047a0:	6006      	str	r6, [r0, #0]
    buf->ptr = p;
 80047a2:	6046      	str	r6, [r0, #4]
    ip_addr_set(&buf->addr, addr);
 80047a4:	f1b8 0f00 	cmp.w	r8, #0
 80047a8:	d030      	beq.n	800480c <recv_udp+0xac>
 80047aa:	f8d8 3000 	ldr.w	r3, [r8]
 80047ae:	60ab      	str	r3, [r5, #8]
    buf->port = port;
 80047b0:	f8bd 3018 	ldrh.w	r3, [sp, #24]
 80047b4:	81ab      	strh	r3, [r5, #12]
      buf->toport_chksum = udphdr->dest;
    }
#endif /* LWIP_NETBUF_RECVINFO */
  }

  len = p->tot_len;
 80047b6:	8936      	ldrh	r6, [r6, #8]
  if (sys_mbox_trypost(&conn->recvmbox, buf) != ERR_OK) {
 80047b8:	4629      	mov	r1, r5
 80047ba:	4638      	mov	r0, r7
 80047bc:	f008 fa83 	bl	800ccc6 <sys_mbox_trypost>
 80047c0:	bb30      	cbnz	r0, 8004810 <recv_udp+0xb0>
  } else {
#if LWIP_SO_RCVBUF
    SYS_ARCH_INC(conn->recv_avail, len);
#endif /* LWIP_SO_RCVBUF */
    /* Register event with callback */
    API_EVENT(conn, NETCONN_EVT_RCVPLUS, len);
 80047c2:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80047c4:	b11b      	cbz	r3, 80047ce <recv_udp+0x6e>
 80047c6:	4632      	mov	r2, r6
 80047c8:	2100      	movs	r1, #0
 80047ca:	4620      	mov	r0, r4
 80047cc:	4798      	blx	r3
 80047ce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  LWIP_ASSERT("recv_udp must have a pcb argument", pcb != NULL);
 80047d2:	4b12      	ldr	r3, [pc, #72]	; (800481c <recv_udp+0xbc>)
 80047d4:	22b1      	movs	r2, #177	; 0xb1
 80047d6:	4914      	ldr	r1, [pc, #80]	; (8004828 <recv_udp+0xc8>)
 80047d8:	4812      	ldr	r0, [pc, #72]	; (8004824 <recv_udp+0xc4>)
 80047da:	f009 f9f6 	bl	800dbca <iprintf>
 80047de:	e7c7      	b.n	8004770 <recv_udp+0x10>
  LWIP_ASSERT("recv_udp must have an argument", arg != NULL);
 80047e0:	4b0e      	ldr	r3, [pc, #56]	; (800481c <recv_udp+0xbc>)
 80047e2:	22b2      	movs	r2, #178	; 0xb2
 80047e4:	4911      	ldr	r1, [pc, #68]	; (800482c <recv_udp+0xcc>)
 80047e6:	480f      	ldr	r0, [pc, #60]	; (8004824 <recv_udp+0xc4>)
 80047e8:	f009 f9ef 	bl	800dbca <iprintf>
 80047ec:	e7c2      	b.n	8004774 <recv_udp+0x14>
    pbuf_free(p);
 80047ee:	4630      	mov	r0, r6
 80047f0:	f003 ff28 	bl	8008644 <pbuf_free>
    return;
 80047f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    pbuf_free(p);
 80047f8:	4630      	mov	r0, r6
 80047fa:	f003 ff23 	bl	8008644 <pbuf_free>
    return;
 80047fe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    pbuf_free(p);
 8004802:	4630      	mov	r0, r6
 8004804:	f003 ff1e 	bl	8008644 <pbuf_free>
    return;
 8004808:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    ip_addr_set(&buf->addr, addr);
 800480c:	2300      	movs	r3, #0
 800480e:	e7ce      	b.n	80047ae <recv_udp+0x4e>
    netbuf_delete(buf);
 8004810:	4628      	mov	r0, r5
 8004812:	f001 f84f 	bl	80058b4 <netbuf_delete>
    return;
 8004816:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800481a:	bf00      	nop
 800481c:	0800e8f0 	.word	0x0800e8f0
 8004820:	0800e968 	.word	0x0800e968
 8004824:	0800e3b0 	.word	0x0800e3b0
 8004828:	0800e924 	.word	0x0800e924
 800482c:	0800e948 	.word	0x0800e948

08004830 <setup_tcp>:
 *
 * @param conn the TCP netconn to setup
 */
static void
setup_tcp(struct netconn *conn)
{
 8004830:	b510      	push	{r4, lr}
 8004832:	4601      	mov	r1, r0
  struct tcp_pcb *pcb;

  pcb = conn->pcb.tcp;
 8004834:	6844      	ldr	r4, [r0, #4]
  tcp_arg(pcb, conn);
 8004836:	4620      	mov	r0, r4
 8004838:	f004 fc1b 	bl	8009072 <tcp_arg>
  tcp_recv(pcb, recv_tcp);
 800483c:	4908      	ldr	r1, [pc, #32]	; (8004860 <setup_tcp+0x30>)
 800483e:	4620      	mov	r0, r4
 8004840:	f004 fc1a 	bl	8009078 <tcp_recv>
  tcp_sent(pcb, sent_tcp);
 8004844:	4907      	ldr	r1, [pc, #28]	; (8004864 <setup_tcp+0x34>)
 8004846:	4620      	mov	r0, r4
 8004848:	f004 fc30 	bl	80090ac <tcp_sent>
  tcp_poll(pcb, poll_tcp, NETCONN_TCP_POLL_INTERVAL);
 800484c:	2202      	movs	r2, #2
 800484e:	4906      	ldr	r1, [pc, #24]	; (8004868 <setup_tcp+0x38>)
 8004850:	4620      	mov	r0, r4
 8004852:	f004 fc65 	bl	8009120 <tcp_poll>
  tcp_err(pcb, err_tcp);
 8004856:	4905      	ldr	r1, [pc, #20]	; (800486c <setup_tcp+0x3c>)
 8004858:	4620      	mov	r0, r4
 800485a:	f004 fc3f 	bl	80090dc <tcp_err>
 800485e:	bd10      	pop	{r4, pc}
 8004860:	08004f71 	.word	0x08004f71
 8004864:	08004f01 	.word	0x08004f01
 8004868:	08004e85 	.word	0x08004e85
 800486c:	080048f9 	.word	0x080048f9

08004870 <pcb_new>:
 *
 * @param msg the api_msg_msg describing the connection type
 */
static void
pcb_new(struct api_msg *msg)
{
 8004870:	b538      	push	{r3, r4, r5, lr}
 8004872:	4604      	mov	r4, r0
  enum lwip_ip_addr_type iptype = IPADDR_TYPE_V4;

  LWIP_ASSERT("pcb_new: pcb already allocated", msg->conn->pcb.tcp == NULL);
 8004874:	6803      	ldr	r3, [r0, #0]
 8004876:	685b      	ldr	r3, [r3, #4]
 8004878:	b133      	cbz	r3, 8004888 <pcb_new+0x18>
 800487a:	4b1b      	ldr	r3, [pc, #108]	; (80048e8 <pcb_new+0x78>)
 800487c:	f44f 720b 	mov.w	r2, #556	; 0x22c
 8004880:	491a      	ldr	r1, [pc, #104]	; (80048ec <pcb_new+0x7c>)
 8004882:	481b      	ldr	r0, [pc, #108]	; (80048f0 <pcb_new+0x80>)
 8004884:	f009 f9a1 	bl	800dbca <iprintf>
    iptype = IPADDR_TYPE_ANY;
  }
#endif
  
  /* Allocate a PCB for this connection */
  switch(NETCONNTYPE_GROUP(msg->conn->type)) {
 8004888:	6825      	ldr	r5, [r4, #0]
 800488a:	782b      	ldrb	r3, [r5, #0]
 800488c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004890:	2b10      	cmp	r3, #16
 8004892:	d018      	beq.n	80048c6 <pcb_new+0x56>
 8004894:	2b20      	cmp	r3, #32
 8004896:	d121      	bne.n	80048dc <pcb_new+0x6c>
    }
    break;
#endif /* LWIP_RAW */
#if LWIP_UDP
  case NETCONN_UDP:
    msg->conn->pcb.udp = udp_new_ip_type(iptype);
 8004898:	2000      	movs	r0, #0
 800489a:	f008 f941 	bl	800cb20 <udp_new_ip_type>
 800489e:	6068      	str	r0, [r5, #4]
    if (msg->conn->pcb.udp != NULL) {
 80048a0:	6823      	ldr	r3, [r4, #0]
 80048a2:	685a      	ldr	r2, [r3, #4]
 80048a4:	b142      	cbz	r2, 80048b8 <pcb_new+0x48>
#if LWIP_UDPLITE
      if (NETCONNTYPE_ISUDPLITE(msg->conn->type)) {
        udp_setflags(msg->conn->pcb.udp, UDP_FLAGS_UDPLITE);
      }
#endif /* LWIP_UDPLITE */
      if (NETCONNTYPE_ISUDPNOCHKSUM(msg->conn->type)) {
 80048a6:	781b      	ldrb	r3, [r3, #0]
 80048a8:	2b22      	cmp	r3, #34	; 0x22
 80048aa:	d009      	beq.n	80048c0 <pcb_new+0x50>
        udp_setflags(msg->conn->pcb.udp, UDP_FLAGS_NOCHKSUM);
      }
      udp_recv(msg->conn->pcb.udp, recv_udp, msg->conn);
 80048ac:	6823      	ldr	r3, [r4, #0]
 80048ae:	461a      	mov	r2, r3
 80048b0:	4910      	ldr	r1, [pc, #64]	; (80048f4 <pcb_new+0x84>)
 80048b2:	6858      	ldr	r0, [r3, #4]
 80048b4:	f008 f907 	bl	800cac6 <udp_recv>
  default:
    /* Unsupported netconn type, e.g. protocol disabled */
    msg->err = ERR_VAL;
    return;
  }
  if (msg->conn->pcb.ip == NULL) {
 80048b8:	6823      	ldr	r3, [r4, #0]
 80048ba:	685b      	ldr	r3, [r3, #4]
 80048bc:	b18b      	cbz	r3, 80048e2 <pcb_new+0x72>
 80048be:	bd38      	pop	{r3, r4, r5, pc}
        udp_setflags(msg->conn->pcb.udp, UDP_FLAGS_NOCHKSUM);
 80048c0:	2301      	movs	r3, #1
 80048c2:	7413      	strb	r3, [r2, #16]
 80048c4:	e7f2      	b.n	80048ac <pcb_new+0x3c>
    msg->conn->pcb.tcp = tcp_new_ip_type(iptype);
 80048c6:	2000      	movs	r0, #0
 80048c8:	f005 f99c 	bl	8009c04 <tcp_new_ip_type>
 80048cc:	6068      	str	r0, [r5, #4]
    if (msg->conn->pcb.tcp != NULL) {
 80048ce:	6820      	ldr	r0, [r4, #0]
 80048d0:	6843      	ldr	r3, [r0, #4]
 80048d2:	2b00      	cmp	r3, #0
 80048d4:	d0f0      	beq.n	80048b8 <pcb_new+0x48>
      setup_tcp(msg->conn);
 80048d6:	f7ff ffab 	bl	8004830 <setup_tcp>
 80048da:	e7ed      	b.n	80048b8 <pcb_new+0x48>
    msg->err = ERR_VAL;
 80048dc:	23fa      	movs	r3, #250	; 0xfa
 80048de:	7123      	strb	r3, [r4, #4]
    return;
 80048e0:	bd38      	pop	{r3, r4, r5, pc}
    msg->err = ERR_MEM;
 80048e2:	23ff      	movs	r3, #255	; 0xff
 80048e4:	7123      	strb	r3, [r4, #4]
 80048e6:	e7ea      	b.n	80048be <pcb_new+0x4e>
 80048e8:	0800e8f0 	.word	0x0800e8f0
 80048ec:	0800e86c 	.word	0x0800e86c
 80048f0:	0800e3b0 	.word	0x0800e3b0
 80048f4:	08004761 	.word	0x08004761

080048f8 <err_tcp>:
{
 80048f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80048fa:	460e      	mov	r6, r1
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 80048fc:	4604      	mov	r4, r0
 80048fe:	2800      	cmp	r0, #0
 8004900:	d038      	beq.n	8004974 <err_tcp+0x7c>
  conn->pcb.tcp = NULL;
 8004902:	2300      	movs	r3, #0
 8004904:	6063      	str	r3, [r4, #4]
  old_state = conn->state;
 8004906:	7865      	ldrb	r5, [r4, #1]
  conn->state = NETCONN_NONE;
 8004908:	7063      	strb	r3, [r4, #1]
  if (old_state == NETCONN_CLOSE) {
 800490a:	2d04      	cmp	r5, #4
 800490c:	d03a      	beq.n	8004984 <err_tcp+0x8c>
    SYS_ARCH_SET(conn->last_err, err);
 800490e:	f008 fab5 	bl	800ce7c <sys_arch_protect>
 8004912:	7226      	strb	r6, [r4, #8]
 8004914:	f008 fabe 	bl	800ce94 <sys_arch_unprotect>
  API_EVENT(conn, NETCONN_EVT_ERROR, 0);
 8004918:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800491a:	b11b      	cbz	r3, 8004924 <err_tcp+0x2c>
 800491c:	2200      	movs	r2, #0
 800491e:	2104      	movs	r1, #4
 8004920:	4620      	mov	r0, r4
 8004922:	4798      	blx	r3
  API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 8004924:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8004926:	b11b      	cbz	r3, 8004930 <err_tcp+0x38>
 8004928:	2200      	movs	r2, #0
 800492a:	4611      	mov	r1, r2
 800492c:	4620      	mov	r0, r4
 800492e:	4798      	blx	r3
  API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 8004930:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8004932:	b11b      	cbz	r3, 800493c <err_tcp+0x44>
 8004934:	2200      	movs	r2, #0
 8004936:	2102      	movs	r1, #2
 8004938:	4620      	mov	r0, r4
 800493a:	4798      	blx	r3
  if (sys_mbox_valid(&conn->recvmbox)) {
 800493c:	f104 0710 	add.w	r7, r4, #16
 8004940:	4638      	mov	r0, r7
 8004942:	f008 fa09 	bl	800cd58 <sys_mbox_valid>
 8004946:	bb68      	cbnz	r0, 80049a4 <err_tcp+0xac>
  if (sys_mbox_valid(&conn->acceptmbox)) {
 8004948:	f104 0714 	add.w	r7, r4, #20
 800494c:	4638      	mov	r0, r7
 800494e:	f008 fa03 	bl	800cd58 <sys_mbox_valid>
 8004952:	bb60      	cbnz	r0, 80049ae <err_tcp+0xb6>
  if ((old_state == NETCONN_WRITE) || (old_state == NETCONN_CLOSE) ||
 8004954:	2d01      	cmp	r5, #1
 8004956:	d02f      	beq.n	80049b8 <err_tcp+0xc0>
 8004958:	2d04      	cmp	r5, #4
 800495a:	d02d      	beq.n	80049b8 <err_tcp+0xc0>
 800495c:	2d03      	cmp	r5, #3
 800495e:	d02b      	beq.n	80049b8 <err_tcp+0xc0>
    LWIP_ASSERT("conn->current_msg == NULL", conn->current_msg == NULL);
 8004960:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004962:	b133      	cbz	r3, 8004972 <err_tcp+0x7a>
 8004964:	4b2e      	ldr	r3, [pc, #184]	; (8004a20 <err_tcp+0x128>)
 8004966:	f240 12bd 	movw	r2, #445	; 0x1bd
 800496a:	492e      	ldr	r1, [pc, #184]	; (8004a24 <err_tcp+0x12c>)
 800496c:	482e      	ldr	r0, [pc, #184]	; (8004a28 <err_tcp+0x130>)
 800496e:	f009 f92c 	bl	800dbca <iprintf>
 8004972:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 8004974:	4b2a      	ldr	r3, [pc, #168]	; (8004a20 <err_tcp+0x128>)
 8004976:	f44f 72c2 	mov.w	r2, #388	; 0x184
 800497a:	492c      	ldr	r1, [pc, #176]	; (8004a2c <err_tcp+0x134>)
 800497c:	482a      	ldr	r0, [pc, #168]	; (8004a28 <err_tcp+0x130>)
 800497e:	f009 f924 	bl	800dbca <iprintf>
 8004982:	e7be      	b.n	8004902 <err_tcp+0xa>
    NETCONN_SET_SAFE_ERR(conn, ERR_OK);
 8004984:	b164      	cbz	r4, 80049a0 <err_tcp+0xa8>
 8004986:	f008 fa79 	bl	800ce7c <sys_arch_protect>
 800498a:	f994 3008 	ldrsb.w	r3, [r4, #8]
 800498e:	f113 0f0c 	cmn.w	r3, #12
 8004992:	db01      	blt.n	8004998 <err_tcp+0xa0>
 8004994:	2300      	movs	r3, #0
 8004996:	7223      	strb	r3, [r4, #8]
 8004998:	f008 fa7c 	bl	800ce94 <sys_arch_unprotect>
    err = ERR_OK;
 800499c:	2600      	movs	r6, #0
 800499e:	e7bb      	b.n	8004918 <err_tcp+0x20>
 80049a0:	2600      	movs	r6, #0
 80049a2:	e7b9      	b.n	8004918 <err_tcp+0x20>
    sys_mbox_trypost(&conn->recvmbox, NULL);
 80049a4:	2100      	movs	r1, #0
 80049a6:	4638      	mov	r0, r7
 80049a8:	f008 f98d 	bl	800ccc6 <sys_mbox_trypost>
 80049ac:	e7cc      	b.n	8004948 <err_tcp+0x50>
    sys_mbox_trypost(&conn->acceptmbox, NULL);
 80049ae:	2100      	movs	r1, #0
 80049b0:	4638      	mov	r0, r7
 80049b2:	f008 f988 	bl	800ccc6 <sys_mbox_trypost>
 80049b6:	e7cd      	b.n	8004954 <err_tcp+0x5c>
    int was_nonblocking_connect = IN_NONBLOCKING_CONNECT(conn);
 80049b8:	7f23      	ldrb	r3, [r4, #28]
    SET_NONBLOCKING_CONNECT(conn, 0);
 80049ba:	f023 0204 	bic.w	r2, r3, #4
 80049be:	7722      	strb	r2, [r4, #28]
    if (!was_nonblocking_connect) {
 80049c0:	f013 0f04 	tst.w	r3, #4
 80049c4:	d1d5      	bne.n	8004972 <err_tcp+0x7a>
      LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 80049c6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80049c8:	b1cb      	cbz	r3, 80049fe <err_tcp+0x106>
      conn->current_msg->err = err;
 80049ca:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80049cc:	711e      	strb	r6, [r3, #4]
      op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 80049ce:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80049d0:	681d      	ldr	r5, [r3, #0]
 80049d2:	350c      	adds	r5, #12
      LWIP_ASSERT("inavlid op_completed_sem", sys_sem_valid(op_completed_sem));
 80049d4:	4628      	mov	r0, r5
 80049d6:	f008 fa09 	bl	800cdec <sys_sem_valid>
 80049da:	b1c0      	cbz	r0, 8004a0e <err_tcp+0x116>
      conn->current_msg = NULL;
 80049dc:	2300      	movs	r3, #0
 80049de:	6263      	str	r3, [r4, #36]	; 0x24
      NETCONN_SET_SAFE_ERR(conn, err);
 80049e0:	b14c      	cbz	r4, 80049f6 <err_tcp+0xfe>
 80049e2:	f008 fa4b 	bl	800ce7c <sys_arch_protect>
 80049e6:	f994 3008 	ldrsb.w	r3, [r4, #8]
 80049ea:	f113 0f0c 	cmn.w	r3, #12
 80049ee:	db00      	blt.n	80049f2 <err_tcp+0xfa>
 80049f0:	7226      	strb	r6, [r4, #8]
 80049f2:	f008 fa4f 	bl	800ce94 <sys_arch_unprotect>
      sys_sem_signal(op_completed_sem);
 80049f6:	4628      	mov	r0, r5
 80049f8:	f008 f9ee 	bl	800cdd8 <sys_sem_signal>
 80049fc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 80049fe:	4b08      	ldr	r3, [pc, #32]	; (8004a20 <err_tcp+0x128>)
 8004a00:	f240 12b3 	movw	r2, #435	; 0x1b3
 8004a04:	490a      	ldr	r1, [pc, #40]	; (8004a30 <err_tcp+0x138>)
 8004a06:	4808      	ldr	r0, [pc, #32]	; (8004a28 <err_tcp+0x130>)
 8004a08:	f009 f8df 	bl	800dbca <iprintf>
 8004a0c:	e7dd      	b.n	80049ca <err_tcp+0xd2>
      LWIP_ASSERT("inavlid op_completed_sem", sys_sem_valid(op_completed_sem));
 8004a0e:	4b04      	ldr	r3, [pc, #16]	; (8004a20 <err_tcp+0x128>)
 8004a10:	f44f 72db 	mov.w	r2, #438	; 0x1b6
 8004a14:	4907      	ldr	r1, [pc, #28]	; (8004a34 <err_tcp+0x13c>)
 8004a16:	4804      	ldr	r0, [pc, #16]	; (8004a28 <err_tcp+0x130>)
 8004a18:	f009 f8d7 	bl	800dbca <iprintf>
 8004a1c:	e7de      	b.n	80049dc <err_tcp+0xe4>
 8004a1e:	bf00      	nop
 8004a20:	0800e8f0 	.word	0x0800e8f0
 8004a24:	0800e5e0 	.word	0x0800e5e0
 8004a28:	0800e3b0 	.word	0x0800e3b0
 8004a2c:	0800e598 	.word	0x0800e598
 8004a30:	0800e5a8 	.word	0x0800e5a8
 8004a34:	0800e5c4 	.word	0x0800e5c4

08004a38 <lwip_netconn_do_writemore>:
 * @return ERR_OK
 *         ERR_MEM if LWIP_TCPIP_CORE_LOCKING=1 and sending hasn't yet finished
 */
static err_t
lwip_netconn_do_writemore(struct netconn *conn  WRITE_DELAYED_PARAM)
{
 8004a38:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  u8_t write_finished = 0;
  size_t diff;
  u8_t dontblock;
  u8_t apiflags;

  LWIP_ASSERT("conn != NULL", conn != NULL);
 8004a3c:	4604      	mov	r4, r0
 8004a3e:	b1f0      	cbz	r0, 8004a7e <lwip_netconn_do_writemore+0x46>
  LWIP_ASSERT("conn->state == NETCONN_WRITE", (conn->state == NETCONN_WRITE));
 8004a40:	7863      	ldrb	r3, [r4, #1]
 8004a42:	2b01      	cmp	r3, #1
 8004a44:	d006      	beq.n	8004a54 <lwip_netconn_do_writemore+0x1c>
 8004a46:	4b75      	ldr	r3, [pc, #468]	; (8004c1c <lwip_netconn_do_writemore+0x1e4>)
 8004a48:	f240 52e4 	movw	r2, #1508	; 0x5e4
 8004a4c:	4974      	ldr	r1, [pc, #464]	; (8004c20 <lwip_netconn_do_writemore+0x1e8>)
 8004a4e:	4875      	ldr	r0, [pc, #468]	; (8004c24 <lwip_netconn_do_writemore+0x1ec>)
 8004a50:	f009 f8bb 	bl	800dbca <iprintf>
  LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 8004a54:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004a56:	b1d3      	cbz	r3, 8004a8e <lwip_netconn_do_writemore+0x56>
  LWIP_ASSERT("conn->pcb.tcp != NULL", conn->pcb.tcp != NULL);
 8004a58:	6863      	ldr	r3, [r4, #4]
 8004a5a:	b303      	cbz	r3, 8004a9e <lwip_netconn_do_writemore+0x66>
  LWIP_ASSERT("conn->write_offset < conn->current_msg->msg.w.len",
 8004a5c:	6a22      	ldr	r2, [r4, #32]
 8004a5e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004a60:	68db      	ldr	r3, [r3, #12]
 8004a62:	429a      	cmp	r2, r3
 8004a64:	d223      	bcs.n	8004aae <lwip_netconn_do_writemore+0x76>
    conn->write_offset < conn->current_msg->msg.w.len);

  apiflags = conn->current_msg->msg.w.apiflags;
 8004a66:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8004a68:	f892 8010 	ldrb.w	r8, [r2, #16]
  dontblock = netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK);
 8004a6c:	7f23      	ldrb	r3, [r4, #28]
 8004a6e:	f013 0f02 	tst.w	r3, #2
 8004a72:	d124      	bne.n	8004abe <lwip_netconn_do_writemore+0x86>
 8004a74:	f018 0f04 	tst.w	r8, #4
 8004a78:	d039      	beq.n	8004aee <lwip_netconn_do_writemore+0xb6>
 8004a7a:	2601      	movs	r6, #1
 8004a7c:	e020      	b.n	8004ac0 <lwip_netconn_do_writemore+0x88>
  LWIP_ASSERT("conn != NULL", conn != NULL);
 8004a7e:	4b67      	ldr	r3, [pc, #412]	; (8004c1c <lwip_netconn_do_writemore+0x1e4>)
 8004a80:	f240 52e3 	movw	r2, #1507	; 0x5e3
 8004a84:	4968      	ldr	r1, [pc, #416]	; (8004c28 <lwip_netconn_do_writemore+0x1f0>)
 8004a86:	4867      	ldr	r0, [pc, #412]	; (8004c24 <lwip_netconn_do_writemore+0x1ec>)
 8004a88:	f009 f89f 	bl	800dbca <iprintf>
 8004a8c:	e7d8      	b.n	8004a40 <lwip_netconn_do_writemore+0x8>
  LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 8004a8e:	4b63      	ldr	r3, [pc, #396]	; (8004c1c <lwip_netconn_do_writemore+0x1e4>)
 8004a90:	f240 52e5 	movw	r2, #1509	; 0x5e5
 8004a94:	4965      	ldr	r1, [pc, #404]	; (8004c2c <lwip_netconn_do_writemore+0x1f4>)
 8004a96:	4863      	ldr	r0, [pc, #396]	; (8004c24 <lwip_netconn_do_writemore+0x1ec>)
 8004a98:	f009 f897 	bl	800dbca <iprintf>
 8004a9c:	e7dc      	b.n	8004a58 <lwip_netconn_do_writemore+0x20>
  LWIP_ASSERT("conn->pcb.tcp != NULL", conn->pcb.tcp != NULL);
 8004a9e:	4b5f      	ldr	r3, [pc, #380]	; (8004c1c <lwip_netconn_do_writemore+0x1e4>)
 8004aa0:	f240 52e6 	movw	r2, #1510	; 0x5e6
 8004aa4:	4962      	ldr	r1, [pc, #392]	; (8004c30 <lwip_netconn_do_writemore+0x1f8>)
 8004aa6:	485f      	ldr	r0, [pc, #380]	; (8004c24 <lwip_netconn_do_writemore+0x1ec>)
 8004aa8:	f009 f88f 	bl	800dbca <iprintf>
 8004aac:	e7d6      	b.n	8004a5c <lwip_netconn_do_writemore+0x24>
  LWIP_ASSERT("conn->write_offset < conn->current_msg->msg.w.len",
 8004aae:	4b5b      	ldr	r3, [pc, #364]	; (8004c1c <lwip_netconn_do_writemore+0x1e4>)
 8004ab0:	f44f 62bd 	mov.w	r2, #1512	; 0x5e8
 8004ab4:	495f      	ldr	r1, [pc, #380]	; (8004c34 <lwip_netconn_do_writemore+0x1fc>)
 8004ab6:	485b      	ldr	r0, [pc, #364]	; (8004c24 <lwip_netconn_do_writemore+0x1ec>)
 8004ab8:	f009 f887 	bl	800dbca <iprintf>
 8004abc:	e7d3      	b.n	8004a66 <lwip_netconn_do_writemore+0x2e>
  dontblock = netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK);
 8004abe:	2601      	movs	r6, #1
 8004ac0:	b2f6      	uxtb	r6, r6
      conn->write_offset = 0;
    }
  } else
#endif /* LWIP_SO_SNDTIMEO */
  {
    dataptr = (const u8_t*)conn->current_msg->msg.w.dataptr + conn->write_offset;
 8004ac2:	6897      	ldr	r7, [r2, #8]
 8004ac4:	6a23      	ldr	r3, [r4, #32]
 8004ac6:	441f      	add	r7, r3
    diff = conn->current_msg->msg.w.len - conn->write_offset;
 8004ac8:	68d2      	ldr	r2, [r2, #12]
 8004aca:	1ad5      	subs	r5, r2, r3
    if (diff > 0xffffUL) { /* max_u16_t */
 8004acc:	f5b5 3f80 	cmp.w	r5, #65536	; 0x10000
 8004ad0:	d30f      	bcc.n	8004af2 <lwip_netconn_do_writemore+0xba>
      len = 0xffff;
      apiflags |= TCP_WRITE_FLAG_MORE;
 8004ad2:	f048 0802 	orr.w	r8, r8, #2
      len = 0xffff;
 8004ad6:	f64f 75ff 	movw	r5, #65535	; 0xffff
    } else {
      len = (u16_t)diff;
    }
    available = tcp_sndbuf(conn->pcb.tcp);
 8004ada:	6861      	ldr	r1, [r4, #4]
 8004adc:	f8b1 1060 	ldrh.w	r1, [r1, #96]	; 0x60
    if (available < len) {
 8004ae0:	428d      	cmp	r5, r1
 8004ae2:	d90b      	bls.n	8004afc <lwip_netconn_do_writemore+0xc4>
      /* don't try to write more than sendbuf */
      len = available;
      if (dontblock) {
 8004ae4:	b13e      	cbz	r6, 8004af6 <lwip_netconn_do_writemore+0xbe>
        if (!len) {
 8004ae6:	2900      	cmp	r1, #0
 8004ae8:	d039      	beq.n	8004b5e <lwip_netconn_do_writemore+0x126>
      len = available;
 8004aea:	460d      	mov	r5, r1
 8004aec:	e006      	b.n	8004afc <lwip_netconn_do_writemore+0xc4>
  dontblock = netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK);
 8004aee:	2600      	movs	r6, #0
 8004af0:	e7e6      	b.n	8004ac0 <lwip_netconn_do_writemore+0x88>
      len = (u16_t)diff;
 8004af2:	b2ad      	uxth	r5, r5
 8004af4:	e7f1      	b.n	8004ada <lwip_netconn_do_writemore+0xa2>
          err = ERR_WOULDBLOCK;
          goto err_mem;
        }
      } else {
        apiflags |= TCP_WRITE_FLAG_MORE;
 8004af6:	f048 0802 	orr.w	r8, r8, #2
      len = available;
 8004afa:	460d      	mov	r5, r1
      }
    }
    LWIP_ASSERT("lwip_netconn_do_writemore: invalid length!", ((conn->write_offset + len) <= conn->current_msg->msg.w.len));
 8004afc:	442b      	add	r3, r5
 8004afe:	429a      	cmp	r2, r3
 8004b00:	d325      	bcc.n	8004b4e <lwip_netconn_do_writemore+0x116>
    err = tcp_write(conn->pcb.tcp, dataptr, len, apiflags);
 8004b02:	4643      	mov	r3, r8
 8004b04:	462a      	mov	r2, r5
 8004b06:	4639      	mov	r1, r7
 8004b08:	6860      	ldr	r0, [r4, #4]
 8004b0a:	f006 fe67 	bl	800b7dc <tcp_write>
 8004b0e:	4607      	mov	r7, r0
    /* if OK or memory error, check available space */
    if ((err == ERR_OK) || (err == ERR_MEM)) {
 8004b10:	1c43      	adds	r3, r0, #1
 8004b12:	b2db      	uxtb	r3, r3
 8004b14:	2b01      	cmp	r3, #1
 8004b16:	d925      	bls.n	8004b64 <lwip_netconn_do_writemore+0x12c>
           let select mark this pcb as non-writable. */
        API_EVENT(conn, NETCONN_EVT_SENDMINUS, len);
      }
    }

    if (err == ERR_OK) {
 8004b18:	2f00      	cmp	r7, #0
 8004b1a:	d145      	bne.n	8004ba8 <lwip_netconn_do_writemore+0x170>
      err_t out_err;
      conn->write_offset += len;
 8004b1c:	6a23      	ldr	r3, [r4, #32]
 8004b1e:	441d      	add	r5, r3
 8004b20:	6225      	str	r5, [r4, #32]
      if ((conn->write_offset == conn->current_msg->msg.w.len) || dontblock) {
 8004b22:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004b24:	68da      	ldr	r2, [r3, #12]
 8004b26:	4295      	cmp	r5, r2
 8004b28:	d000      	beq.n	8004b2c <lwip_netconn_do_writemore+0xf4>
 8004b2a:	b10e      	cbz	r6, 8004b30 <lwip_netconn_do_writemore+0xf8>
        /* return sent length */
        conn->current_msg->msg.w.len = conn->write_offset;
 8004b2c:	60dd      	str	r5, [r3, #12]
        /* everything was written */
        write_finished = 1;
 8004b2e:	2601      	movs	r6, #1
      }
      out_err = tcp_output(conn->pcb.tcp);
 8004b30:	6860      	ldr	r0, [r4, #4]
 8004b32:	f007 fa01 	bl	800bf38 <tcp_output>
      if (ERR_IS_FATAL(out_err) || (out_err == ERR_RTE)) {
 8004b36:	f110 0f0c 	cmn.w	r0, #12
 8004b3a:	db02      	blt.n	8004b42 <lwip_netconn_do_writemore+0x10a>
 8004b3c:	f110 0f04 	cmn.w	r0, #4
 8004b40:	d139      	bne.n	8004bb6 <lwip_netconn_do_writemore+0x17e>
        /* If tcp_output fails with fatal error or no route is found,
           don't try writing any more but return the error
           to the application thread. */
        err = out_err;
        write_finished = 1;
        conn->current_msg->msg.w.len = 0;
 8004b42:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004b44:	2200      	movs	r2, #0
 8004b46:	60da      	str	r2, [r3, #12]
        err = out_err;
 8004b48:	4607      	mov	r7, r0
        write_finished = 1;
 8004b4a:	2601      	movs	r6, #1
 8004b4c:	e033      	b.n	8004bb6 <lwip_netconn_do_writemore+0x17e>
    LWIP_ASSERT("lwip_netconn_do_writemore: invalid length!", ((conn->write_offset + len) <= conn->current_msg->msg.w.len));
 8004b4e:	4b33      	ldr	r3, [pc, #204]	; (8004c1c <lwip_netconn_do_writemore+0x1e4>)
 8004b50:	f240 6213 	movw	r2, #1555	; 0x613
 8004b54:	4938      	ldr	r1, [pc, #224]	; (8004c38 <lwip_netconn_do_writemore+0x200>)
 8004b56:	4833      	ldr	r0, [pc, #204]	; (8004c24 <lwip_netconn_do_writemore+0x1ec>)
 8004b58:	f009 f837 	bl	800dbca <iprintf>
 8004b5c:	e7d1      	b.n	8004b02 <lwip_netconn_do_writemore+0xca>
      len = available;
 8004b5e:	460d      	mov	r5, r1
          err = ERR_WOULDBLOCK;
 8004b60:	f06f 0706 	mvn.w	r7, #6
      if (dontblock && (len < conn->current_msg->msg.w.len)) {
 8004b64:	b176      	cbz	r6, 8004b84 <lwip_netconn_do_writemore+0x14c>
 8004b66:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004b68:	68db      	ldr	r3, [r3, #12]
 8004b6a:	429d      	cmp	r5, r3
 8004b6c:	d20a      	bcs.n	8004b84 <lwip_netconn_do_writemore+0x14c>
        API_EVENT(conn, NETCONN_EVT_SENDMINUS, len);
 8004b6e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8004b70:	b11b      	cbz	r3, 8004b7a <lwip_netconn_do_writemore+0x142>
 8004b72:	462a      	mov	r2, r5
 8004b74:	2103      	movs	r1, #3
 8004b76:	4620      	mov	r0, r4
 8004b78:	4798      	blx	r3
        conn->flags |= NETCONN_FLAG_CHECK_WRITESPACE;
 8004b7a:	7f23      	ldrb	r3, [r4, #28]
 8004b7c:	f043 0310 	orr.w	r3, r3, #16
 8004b80:	7723      	strb	r3, [r4, #28]
 8004b82:	e7c9      	b.n	8004b18 <lwip_netconn_do_writemore+0xe0>
      } else if ((tcp_sndbuf(conn->pcb.tcp) <= TCP_SNDLOWAT) ||
 8004b84:	6863      	ldr	r3, [r4, #4]
 8004b86:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8004b8a:	f5b2 6f86 	cmp.w	r2, #1072	; 0x430
 8004b8e:	d303      	bcc.n	8004b98 <lwip_netconn_do_writemore+0x160>
                 (tcp_sndqueuelen(conn->pcb.tcp) >= TCP_SNDQUEUELOWAT)) {
 8004b90:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
      } else if ((tcp_sndbuf(conn->pcb.tcp) <= TCP_SNDLOWAT) ||
 8004b94:	2b04      	cmp	r3, #4
 8004b96:	d9bf      	bls.n	8004b18 <lwip_netconn_do_writemore+0xe0>
        API_EVENT(conn, NETCONN_EVT_SENDMINUS, len);
 8004b98:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8004b9a:	2b00      	cmp	r3, #0
 8004b9c:	d0bc      	beq.n	8004b18 <lwip_netconn_do_writemore+0xe0>
 8004b9e:	462a      	mov	r2, r5
 8004ba0:	2103      	movs	r1, #3
 8004ba2:	4620      	mov	r0, r4
 8004ba4:	4798      	blx	r3
 8004ba6:	e7b7      	b.n	8004b18 <lwip_netconn_do_writemore+0xe0>
      }
    } else if (err == ERR_MEM) {
 8004ba8:	f1b7 3fff 	cmp.w	r7, #4294967295	; 0xffffffff
 8004bac:	d01d      	beq.n	8004bea <lwip_netconn_do_writemore+0x1b2>
      }
    } else {
      /* On errors != ERR_MEM, we don't try writing any more but return
         the error to the application thread. */
      write_finished = 1;
      conn->current_msg->msg.w.len = 0;
 8004bae:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004bb0:	2200      	movs	r2, #0
 8004bb2:	60da      	str	r2, [r3, #12]
      write_finished = 1;
 8004bb4:	2601      	movs	r6, #1
    }
  }
  if (write_finished) {
 8004bb6:	b1ae      	cbz	r6, 8004be4 <lwip_netconn_do_writemore+0x1ac>
    /* everything was written: set back connection state
       and back to application task */
    sys_sem_t* op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 8004bb8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004bba:	681d      	ldr	r5, [r3, #0]
 8004bbc:	350c      	adds	r5, #12
    conn->current_msg->err = err;
 8004bbe:	711f      	strb	r7, [r3, #4]
    conn->current_msg = NULL;
 8004bc0:	2300      	movs	r3, #0
 8004bc2:	6263      	str	r3, [r4, #36]	; 0x24
    conn->write_offset = 0;
 8004bc4:	6223      	str	r3, [r4, #32]
    conn->state = NETCONN_NONE;
 8004bc6:	7063      	strb	r3, [r4, #1]
    NETCONN_SET_SAFE_ERR(conn, err);
 8004bc8:	b14c      	cbz	r4, 8004bde <lwip_netconn_do_writemore+0x1a6>
 8004bca:	f008 f957 	bl	800ce7c <sys_arch_protect>
 8004bce:	f994 3008 	ldrsb.w	r3, [r4, #8]
 8004bd2:	f113 0f0c 	cmn.w	r3, #12
 8004bd6:	db00      	blt.n	8004bda <lwip_netconn_do_writemore+0x1a2>
 8004bd8:	7227      	strb	r7, [r4, #8]
 8004bda:	f008 f95b 	bl	800ce94 <sys_arch_unprotect>
#if LWIP_TCPIP_CORE_LOCKING
    if (delayed)
#endif
    {
      sys_sem_signal(op_completed_sem);
 8004bde:	4628      	mov	r0, r5
 8004be0:	f008 f8fa 	bl	800cdd8 <sys_sem_signal>
  else {
    return ERR_MEM;
  }
#endif
  return ERR_OK;
}
 8004be4:	2000      	movs	r0, #0
 8004be6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      err_t out_err = tcp_output(conn->pcb.tcp);
 8004bea:	6860      	ldr	r0, [r4, #4]
 8004bec:	f007 f9a4 	bl	800bf38 <tcp_output>
      if (ERR_IS_FATAL(out_err) || (out_err == ERR_RTE)) {
 8004bf0:	f110 0f0c 	cmn.w	r0, #12
 8004bf4:	db0b      	blt.n	8004c0e <lwip_netconn_do_writemore+0x1d6>
 8004bf6:	f110 0f04 	cmn.w	r0, #4
 8004bfa:	d008      	beq.n	8004c0e <lwip_netconn_do_writemore+0x1d6>
      } else if (dontblock) {
 8004bfc:	2e00      	cmp	r6, #0
 8004bfe:	d0da      	beq.n	8004bb6 <lwip_netconn_do_writemore+0x17e>
        conn->current_msg->msg.w.len = 0;
 8004c00:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004c02:	2200      	movs	r2, #0
 8004c04:	60da      	str	r2, [r3, #12]
        write_finished = 1;
 8004c06:	2601      	movs	r6, #1
        err = ERR_WOULDBLOCK;
 8004c08:	f06f 0706 	mvn.w	r7, #6
 8004c0c:	e7d3      	b.n	8004bb6 <lwip_netconn_do_writemore+0x17e>
        conn->current_msg->msg.w.len = 0;
 8004c0e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004c10:	2200      	movs	r2, #0
 8004c12:	60da      	str	r2, [r3, #12]
        err = out_err;
 8004c14:	4607      	mov	r7, r0
        write_finished = 1;
 8004c16:	2601      	movs	r6, #1
        conn->current_msg->msg.w.len = 0;
 8004c18:	e7cd      	b.n	8004bb6 <lwip_netconn_do_writemore+0x17e>
 8004c1a:	bf00      	nop
 8004c1c:	0800e8f0 	.word	0x0800e8f0
 8004c20:	0800e704 	.word	0x0800e704
 8004c24:	0800e3b0 	.word	0x0800e3b0
 8004c28:	0800e598 	.word	0x0800e598
 8004c2c:	0800e5a8 	.word	0x0800e5a8
 8004c30:	0800e724 	.word	0x0800e724
 8004c34:	0800e73c 	.word	0x0800e73c
 8004c38:	0800e770 	.word	0x0800e770

08004c3c <lwip_netconn_do_close_internal>:
{
 8004c3c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  LWIP_ASSERT("invalid conn", (conn != NULL));
 8004c40:	4604      	mov	r4, r0
 8004c42:	2800      	cmp	r0, #0
 8004c44:	d035      	beq.n	8004cb2 <lwip_netconn_do_close_internal+0x76>
  LWIP_ASSERT("this is for tcp netconns only", (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP));
 8004c46:	7823      	ldrb	r3, [r4, #0]
 8004c48:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004c4c:	2b10      	cmp	r3, #16
 8004c4e:	d006      	beq.n	8004c5e <lwip_netconn_do_close_internal+0x22>
 8004c50:	4b80      	ldr	r3, [pc, #512]	; (8004e54 <lwip_netconn_do_close_internal+0x218>)
 8004c52:	f44f 7251 	mov.w	r2, #836	; 0x344
 8004c56:	4980      	ldr	r1, [pc, #512]	; (8004e58 <lwip_netconn_do_close_internal+0x21c>)
 8004c58:	4880      	ldr	r0, [pc, #512]	; (8004e5c <lwip_netconn_do_close_internal+0x220>)
 8004c5a:	f008 ffb6 	bl	800dbca <iprintf>
  LWIP_ASSERT("conn must be in state NETCONN_CLOSE", (conn->state == NETCONN_CLOSE));
 8004c5e:	7863      	ldrb	r3, [r4, #1]
 8004c60:	2b04      	cmp	r3, #4
 8004c62:	d006      	beq.n	8004c72 <lwip_netconn_do_close_internal+0x36>
 8004c64:	4b7b      	ldr	r3, [pc, #492]	; (8004e54 <lwip_netconn_do_close_internal+0x218>)
 8004c66:	f240 3245 	movw	r2, #837	; 0x345
 8004c6a:	497d      	ldr	r1, [pc, #500]	; (8004e60 <lwip_netconn_do_close_internal+0x224>)
 8004c6c:	487b      	ldr	r0, [pc, #492]	; (8004e5c <lwip_netconn_do_close_internal+0x220>)
 8004c6e:	f008 ffac 	bl	800dbca <iprintf>
  LWIP_ASSERT("pcb already closed", (conn->pcb.tcp != NULL));
 8004c72:	6863      	ldr	r3, [r4, #4]
 8004c74:	b32b      	cbz	r3, 8004cc2 <lwip_netconn_do_close_internal+0x86>
  LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 8004c76:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004c78:	b35b      	cbz	r3, 8004cd2 <lwip_netconn_do_close_internal+0x96>
  tpcb = conn->pcb.tcp;
 8004c7a:	6865      	ldr	r5, [r4, #4]
  shut = conn->current_msg->msg.sd.shut;
 8004c7c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004c7e:	7a1b      	ldrb	r3, [r3, #8]
  shut_rx = shut & NETCONN_SHUT_RD;
 8004c80:	f003 0901 	and.w	r9, r3, #1
  shut_tx = shut & NETCONN_SHUT_WR;
 8004c84:	f003 0802 	and.w	r8, r3, #2
  if (shut == NETCONN_SHUT_RDWR) {
 8004c88:	2b03      	cmp	r3, #3
 8004c8a:	d02a      	beq.n	8004ce2 <lwip_netconn_do_close_internal+0xa6>
  } else if (shut_rx &&
 8004c8c:	f1b9 0f00 	cmp.w	r9, #0
 8004c90:	d006      	beq.n	8004ca0 <lwip_netconn_do_close_internal+0x64>
             ((tpcb->state == FIN_WAIT_1) ||
 8004c92:	7d2a      	ldrb	r2, [r5, #20]
 8004c94:	1f53      	subs	r3, r2, #5
 8004c96:	b2db      	uxtb	r3, r3
  } else if (shut_rx &&
 8004c98:	2b01      	cmp	r3, #1
 8004c9a:	d93a      	bls.n	8004d12 <lwip_netconn_do_close_internal+0xd6>
              (tpcb->state == FIN_WAIT_2) ||
 8004c9c:	2a08      	cmp	r2, #8
 8004c9e:	d03a      	beq.n	8004d16 <lwip_netconn_do_close_internal+0xda>
  } else if (shut_tx && ((tpcb->flags & TF_RXCLOSED) != 0)) {
 8004ca0:	f1b8 0f00 	cmp.w	r8, #0
 8004ca4:	d039      	beq.n	8004d1a <lwip_netconn_do_close_internal+0xde>
 8004ca6:	7eab      	ldrb	r3, [r5, #26]
 8004ca8:	f013 0f10 	tst.w	r3, #16
 8004cac:	d137      	bne.n	8004d1e <lwip_netconn_do_close_internal+0xe2>
    close = 0;
 8004cae:	2700      	movs	r7, #0
 8004cb0:	e018      	b.n	8004ce4 <lwip_netconn_do_close_internal+0xa8>
  LWIP_ASSERT("invalid conn", (conn != NULL));
 8004cb2:	4b68      	ldr	r3, [pc, #416]	; (8004e54 <lwip_netconn_do_close_internal+0x218>)
 8004cb4:	f240 3243 	movw	r2, #835	; 0x343
 8004cb8:	496a      	ldr	r1, [pc, #424]	; (8004e64 <lwip_netconn_do_close_internal+0x228>)
 8004cba:	4868      	ldr	r0, [pc, #416]	; (8004e5c <lwip_netconn_do_close_internal+0x220>)
 8004cbc:	f008 ff85 	bl	800dbca <iprintf>
 8004cc0:	e7c1      	b.n	8004c46 <lwip_netconn_do_close_internal+0xa>
  LWIP_ASSERT("pcb already closed", (conn->pcb.tcp != NULL));
 8004cc2:	4b64      	ldr	r3, [pc, #400]	; (8004e54 <lwip_netconn_do_close_internal+0x218>)
 8004cc4:	f240 3246 	movw	r2, #838	; 0x346
 8004cc8:	4967      	ldr	r1, [pc, #412]	; (8004e68 <lwip_netconn_do_close_internal+0x22c>)
 8004cca:	4864      	ldr	r0, [pc, #400]	; (8004e5c <lwip_netconn_do_close_internal+0x220>)
 8004ccc:	f008 ff7d 	bl	800dbca <iprintf>
 8004cd0:	e7d1      	b.n	8004c76 <lwip_netconn_do_close_internal+0x3a>
  LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 8004cd2:	4b60      	ldr	r3, [pc, #384]	; (8004e54 <lwip_netconn_do_close_internal+0x218>)
 8004cd4:	f240 3247 	movw	r2, #839	; 0x347
 8004cd8:	4964      	ldr	r1, [pc, #400]	; (8004e6c <lwip_netconn_do_close_internal+0x230>)
 8004cda:	4860      	ldr	r0, [pc, #384]	; (8004e5c <lwip_netconn_do_close_internal+0x220>)
 8004cdc:	f008 ff75 	bl	800dbca <iprintf>
 8004ce0:	e7cb      	b.n	8004c7a <lwip_netconn_do_close_internal+0x3e>
    close = 1;
 8004ce2:	2701      	movs	r7, #1
  if (close) {
 8004ce4:	b9ef      	cbnz	r7, 8004d22 <lwip_netconn_do_close_internal+0xe6>
  if (tpcb->state == LISTEN) {
 8004ce6:	7d2b      	ldrb	r3, [r5, #20]
 8004ce8:	2b01      	cmp	r3, #1
 8004cea:	d01f      	beq.n	8004d2c <lwip_netconn_do_close_internal+0xf0>
    if (shut_rx) {
 8004cec:	f1b9 0f00 	cmp.w	r9, #0
 8004cf0:	d121      	bne.n	8004d36 <lwip_netconn_do_close_internal+0xfa>
    if (shut_tx) {
 8004cf2:	f1b8 0f00 	cmp.w	r8, #0
 8004cf6:	d127      	bne.n	8004d48 <lwip_netconn_do_close_internal+0x10c>
    if (close) {
 8004cf8:	bb5f      	cbnz	r7, 8004d52 <lwip_netconn_do_close_internal+0x116>
  if (close) {
 8004cfa:	b3a7      	cbz	r7, 8004d66 <lwip_netconn_do_close_internal+0x12a>
      err = tcp_close(tpcb);
 8004cfc:	4628      	mov	r0, r5
 8004cfe:	f004 fd49 	bl	8009794 <tcp_close>
 8004d02:	4606      	mov	r6, r0
  if (err == ERR_OK) {
 8004d04:	2e00      	cmp	r6, #0
 8004d06:	d042      	beq.n	8004d8e <lwip_netconn_do_close_internal+0x152>
    if (err == ERR_MEM) {
 8004d08:	f1b6 3fff 	cmp.w	r6, #4294967295	; 0xffffffff
 8004d0c:	d032      	beq.n	8004d74 <lwip_netconn_do_close_internal+0x138>
      close_finished = 1;
 8004d0e:	2301      	movs	r3, #1
 8004d10:	e03e      	b.n	8004d90 <lwip_netconn_do_close_internal+0x154>
    close = 1;
 8004d12:	2701      	movs	r7, #1
 8004d14:	e7e6      	b.n	8004ce4 <lwip_netconn_do_close_internal+0xa8>
 8004d16:	2701      	movs	r7, #1
 8004d18:	e7e4      	b.n	8004ce4 <lwip_netconn_do_close_internal+0xa8>
    close = 0;
 8004d1a:	2700      	movs	r7, #0
 8004d1c:	e7e2      	b.n	8004ce4 <lwip_netconn_do_close_internal+0xa8>
    close = 1;
 8004d1e:	2701      	movs	r7, #1
 8004d20:	e7e0      	b.n	8004ce4 <lwip_netconn_do_close_internal+0xa8>
    tcp_arg(tpcb, NULL);
 8004d22:	2100      	movs	r1, #0
 8004d24:	4628      	mov	r0, r5
 8004d26:	f004 f9a4 	bl	8009072 <tcp_arg>
 8004d2a:	e7dc      	b.n	8004ce6 <lwip_netconn_do_close_internal+0xaa>
    tcp_accept(tpcb, NULL);
 8004d2c:	2100      	movs	r1, #0
 8004d2e:	4628      	mov	r0, r5
 8004d30:	f004 f9ee 	bl	8009110 <tcp_accept>
 8004d34:	e7e1      	b.n	8004cfa <lwip_netconn_do_close_internal+0xbe>
      tcp_recv(tpcb, NULL);
 8004d36:	2100      	movs	r1, #0
 8004d38:	4628      	mov	r0, r5
 8004d3a:	f004 f99d 	bl	8009078 <tcp_recv>
      tcp_accept(tpcb, NULL);
 8004d3e:	2100      	movs	r1, #0
 8004d40:	4628      	mov	r0, r5
 8004d42:	f004 f9e5 	bl	8009110 <tcp_accept>
 8004d46:	e7d4      	b.n	8004cf2 <lwip_netconn_do_close_internal+0xb6>
      tcp_sent(tpcb, NULL);
 8004d48:	2100      	movs	r1, #0
 8004d4a:	4628      	mov	r0, r5
 8004d4c:	f004 f9ae 	bl	80090ac <tcp_sent>
 8004d50:	e7d2      	b.n	8004cf8 <lwip_netconn_do_close_internal+0xbc>
      tcp_poll(tpcb, NULL, 0);
 8004d52:	2200      	movs	r2, #0
 8004d54:	4611      	mov	r1, r2
 8004d56:	4628      	mov	r0, r5
 8004d58:	f004 f9e2 	bl	8009120 <tcp_poll>
      tcp_err(tpcb, NULL);
 8004d5c:	2100      	movs	r1, #0
 8004d5e:	4628      	mov	r0, r5
 8004d60:	f004 f9bc 	bl	80090dc <tcp_err>
 8004d64:	e7c9      	b.n	8004cfa <lwip_netconn_do_close_internal+0xbe>
    err = tcp_shutdown(tpcb, shut_rx, shut_tx);
 8004d66:	4642      	mov	r2, r8
 8004d68:	4649      	mov	r1, r9
 8004d6a:	4628      	mov	r0, r5
 8004d6c:	f004 fdba 	bl	80098e4 <tcp_shutdown>
 8004d70:	4606      	mov	r6, r0
 8004d72:	e7c7      	b.n	8004d04 <lwip_netconn_do_close_internal+0xc8>
      if (conn->current_msg->msg.sd.polls_left == 0) {
 8004d74:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004d76:	7a5b      	ldrb	r3, [r3, #9]
 8004d78:	2b00      	cmp	r3, #0
 8004d7a:	d13f      	bne.n	8004dfc <lwip_netconn_do_close_internal+0x1c0>
        if (close) {
 8004d7c:	b90f      	cbnz	r7, 8004d82 <lwip_netconn_do_close_internal+0x146>
        close_finished = 1;
 8004d7e:	2301      	movs	r3, #1
 8004d80:	e006      	b.n	8004d90 <lwip_netconn_do_close_internal+0x154>
          tcp_abort(tpcb);
 8004d82:	4628      	mov	r0, r5
 8004d84:	f004 fe56 	bl	8009a34 <tcp_abort>
        close_finished = 1;
 8004d88:	463b      	mov	r3, r7
          err = ERR_OK;
 8004d8a:	2600      	movs	r6, #0
 8004d8c:	e000      	b.n	8004d90 <lwip_netconn_do_close_internal+0x154>
    close_finished = 1;
 8004d8e:	2301      	movs	r3, #1
  if (close_finished) {
 8004d90:	2b00      	cmp	r3, #0
 8004d92:	d035      	beq.n	8004e00 <lwip_netconn_do_close_internal+0x1c4>
    sys_sem_t* op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 8004d94:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004d96:	681d      	ldr	r5, [r3, #0]
 8004d98:	350c      	adds	r5, #12
    conn->current_msg->err = err;
 8004d9a:	711e      	strb	r6, [r3, #4]
    conn->current_msg = NULL;
 8004d9c:	2300      	movs	r3, #0
 8004d9e:	6263      	str	r3, [r4, #36]	; 0x24
    conn->state = NETCONN_NONE;
 8004da0:	7063      	strb	r3, [r4, #1]
    if (err == ERR_OK) {
 8004da2:	b9ce      	cbnz	r6, 8004dd8 <lwip_netconn_do_close_internal+0x19c>
      if (close) {
 8004da4:	b137      	cbz	r7, 8004db4 <lwip_netconn_do_close_internal+0x178>
        conn->pcb.tcp = NULL;
 8004da6:	6063      	str	r3, [r4, #4]
        API_EVENT(conn, NETCONN_EVT_ERROR, 0);
 8004da8:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8004daa:	b11b      	cbz	r3, 8004db4 <lwip_netconn_do_close_internal+0x178>
 8004dac:	2200      	movs	r2, #0
 8004dae:	2104      	movs	r1, #4
 8004db0:	4620      	mov	r0, r4
 8004db2:	4798      	blx	r3
      if (shut_rx) {
 8004db4:	f1b9 0f00 	cmp.w	r9, #0
 8004db8:	d005      	beq.n	8004dc6 <lwip_netconn_do_close_internal+0x18a>
        API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 8004dba:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8004dbc:	b11b      	cbz	r3, 8004dc6 <lwip_netconn_do_close_internal+0x18a>
 8004dbe:	2200      	movs	r2, #0
 8004dc0:	4611      	mov	r1, r2
 8004dc2:	4620      	mov	r0, r4
 8004dc4:	4798      	blx	r3
      if (shut_tx) {
 8004dc6:	f1b8 0f00 	cmp.w	r8, #0
 8004dca:	d005      	beq.n	8004dd8 <lwip_netconn_do_close_internal+0x19c>
        API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 8004dcc:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8004dce:	b11b      	cbz	r3, 8004dd8 <lwip_netconn_do_close_internal+0x19c>
 8004dd0:	2200      	movs	r2, #0
 8004dd2:	2102      	movs	r1, #2
 8004dd4:	4620      	mov	r0, r4
 8004dd6:	4798      	blx	r3
    NETCONN_SET_SAFE_ERR(conn, err);
 8004dd8:	b14c      	cbz	r4, 8004dee <lwip_netconn_do_close_internal+0x1b2>
 8004dda:	f008 f84f 	bl	800ce7c <sys_arch_protect>
 8004dde:	f994 3008 	ldrsb.w	r3, [r4, #8]
 8004de2:	f113 0f0c 	cmn.w	r3, #12
 8004de6:	db00      	blt.n	8004dea <lwip_netconn_do_close_internal+0x1ae>
 8004de8:	7226      	strb	r6, [r4, #8]
 8004dea:	f008 f853 	bl	800ce94 <sys_arch_unprotect>
      sys_sem_signal(op_completed_sem);
 8004dee:	4628      	mov	r0, r5
 8004df0:	f007 fff2 	bl	800cdd8 <sys_sem_signal>
    return ERR_OK;
 8004df4:	2600      	movs	r6, #0
}
 8004df6:	4630      	mov	r0, r6
 8004df8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  u8_t close_finished = 0;
 8004dfc:	2300      	movs	r3, #0
 8004dfe:	e7c7      	b.n	8004d90 <lwip_netconn_do_close_internal+0x154>
    LWIP_ASSERT("Closing a listen pcb may not fail!", (tpcb->state != LISTEN));
 8004e00:	7d2b      	ldrb	r3, [r5, #20]
 8004e02:	2b01      	cmp	r3, #1
 8004e04:	d019      	beq.n	8004e3a <lwip_netconn_do_close_internal+0x1fe>
    if (shut_tx) {
 8004e06:	f1b8 0f00 	cmp.w	r8, #0
 8004e0a:	d11e      	bne.n	8004e4a <lwip_netconn_do_close_internal+0x20e>
    tcp_poll(tpcb, poll_tcp, 1);
 8004e0c:	2201      	movs	r2, #1
 8004e0e:	4918      	ldr	r1, [pc, #96]	; (8004e70 <lwip_netconn_do_close_internal+0x234>)
 8004e10:	4628      	mov	r0, r5
 8004e12:	f004 f985 	bl	8009120 <tcp_poll>
    tcp_err(tpcb, err_tcp);
 8004e16:	4917      	ldr	r1, [pc, #92]	; (8004e74 <lwip_netconn_do_close_internal+0x238>)
 8004e18:	4628      	mov	r0, r5
 8004e1a:	f004 f95f 	bl	80090dc <tcp_err>
    tcp_arg(tpcb, conn);
 8004e1e:	4621      	mov	r1, r4
 8004e20:	4628      	mov	r0, r5
 8004e22:	f004 f926 	bl	8009072 <tcp_arg>
  LWIP_ASSERT("err != ERR_OK", err != ERR_OK);
 8004e26:	2e00      	cmp	r6, #0
 8004e28:	d1e5      	bne.n	8004df6 <lwip_netconn_do_close_internal+0x1ba>
 8004e2a:	4b0a      	ldr	r3, [pc, #40]	; (8004e54 <lwip_netconn_do_close_internal+0x218>)
 8004e2c:	f240 32ef 	movw	r2, #1007	; 0x3ef
 8004e30:	4911      	ldr	r1, [pc, #68]	; (8004e78 <lwip_netconn_do_close_internal+0x23c>)
 8004e32:	480a      	ldr	r0, [pc, #40]	; (8004e5c <lwip_netconn_do_close_internal+0x220>)
 8004e34:	f008 fec9 	bl	800dbca <iprintf>
 8004e38:	e7dd      	b.n	8004df6 <lwip_netconn_do_close_internal+0x1ba>
    LWIP_ASSERT("Closing a listen pcb may not fail!", (tpcb->state != LISTEN));
 8004e3a:	4b06      	ldr	r3, [pc, #24]	; (8004e54 <lwip_netconn_do_close_internal+0x218>)
 8004e3c:	f240 32e3 	movw	r2, #995	; 0x3e3
 8004e40:	490e      	ldr	r1, [pc, #56]	; (8004e7c <lwip_netconn_do_close_internal+0x240>)
 8004e42:	4806      	ldr	r0, [pc, #24]	; (8004e5c <lwip_netconn_do_close_internal+0x220>)
 8004e44:	f008 fec1 	bl	800dbca <iprintf>
 8004e48:	e7dd      	b.n	8004e06 <lwip_netconn_do_close_internal+0x1ca>
      tcp_sent(tpcb, sent_tcp);
 8004e4a:	490d      	ldr	r1, [pc, #52]	; (8004e80 <lwip_netconn_do_close_internal+0x244>)
 8004e4c:	4628      	mov	r0, r5
 8004e4e:	f004 f92d 	bl	80090ac <tcp_sent>
 8004e52:	e7db      	b.n	8004e0c <lwip_netconn_do_close_internal+0x1d0>
 8004e54:	0800e8f0 	.word	0x0800e8f0
 8004e58:	0800e5fc 	.word	0x0800e5fc
 8004e5c:	0800e3b0 	.word	0x0800e3b0
 8004e60:	0800e61c 	.word	0x0800e61c
 8004e64:	0800e448 	.word	0x0800e448
 8004e68:	0800e640 	.word	0x0800e640
 8004e6c:	0800e5a8 	.word	0x0800e5a8
 8004e70:	08004e85 	.word	0x08004e85
 8004e74:	080048f9 	.word	0x080048f9
 8004e78:	0800e678 	.word	0x0800e678
 8004e7c:	0800e654 	.word	0x0800e654
 8004e80:	08004f01 	.word	0x08004f01

08004e84 <poll_tcp>:
{
 8004e84:	b510      	push	{r4, lr}
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 8004e86:	4604      	mov	r4, r0
 8004e88:	b1f0      	cbz	r0, 8004ec8 <poll_tcp+0x44>
  if (conn->state == NETCONN_WRITE) {
 8004e8a:	7863      	ldrb	r3, [r4, #1]
 8004e8c:	2b01      	cmp	r3, #1
 8004e8e:	d023      	beq.n	8004ed8 <poll_tcp+0x54>
  } else if (conn->state == NETCONN_CLOSE) {
 8004e90:	2b04      	cmp	r3, #4
 8004e92:	d025      	beq.n	8004ee0 <poll_tcp+0x5c>
  if (conn->flags & NETCONN_FLAG_CHECK_WRITESPACE) {
 8004e94:	7f23      	ldrb	r3, [r4, #28]
 8004e96:	f013 0f10 	tst.w	r3, #16
 8004e9a:	d013      	beq.n	8004ec4 <poll_tcp+0x40>
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 8004e9c:	6862      	ldr	r2, [r4, #4]
 8004e9e:	b18a      	cbz	r2, 8004ec4 <poll_tcp+0x40>
 8004ea0:	f8b2 1060 	ldrh.w	r1, [r2, #96]	; 0x60
 8004ea4:	f5b1 6f86 	cmp.w	r1, #1072	; 0x430
 8004ea8:	d30c      	bcc.n	8004ec4 <poll_tcp+0x40>
      (tcp_sndqueuelen(conn->pcb.tcp) < TCP_SNDQUEUELOWAT)) {
 8004eaa:	f8b2 2062 	ldrh.w	r2, [r2, #98]	; 0x62
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 8004eae:	2a04      	cmp	r2, #4
 8004eb0:	d808      	bhi.n	8004ec4 <poll_tcp+0x40>
      conn->flags &= ~NETCONN_FLAG_CHECK_WRITESPACE;
 8004eb2:	f023 0310 	bic.w	r3, r3, #16
 8004eb6:	7723      	strb	r3, [r4, #28]
      API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 8004eb8:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8004eba:	b11b      	cbz	r3, 8004ec4 <poll_tcp+0x40>
 8004ebc:	2200      	movs	r2, #0
 8004ebe:	2102      	movs	r1, #2
 8004ec0:	4620      	mov	r0, r4
 8004ec2:	4798      	blx	r3
}
 8004ec4:	2000      	movs	r0, #0
 8004ec6:	bd10      	pop	{r4, pc}
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 8004ec8:	4b0a      	ldr	r3, [pc, #40]	; (8004ef4 <poll_tcp+0x70>)
 8004eca:	f44f 729c 	mov.w	r2, #312	; 0x138
 8004ece:	490a      	ldr	r1, [pc, #40]	; (8004ef8 <poll_tcp+0x74>)
 8004ed0:	480a      	ldr	r0, [pc, #40]	; (8004efc <poll_tcp+0x78>)
 8004ed2:	f008 fe7a 	bl	800dbca <iprintf>
 8004ed6:	e7d8      	b.n	8004e8a <poll_tcp+0x6>
    lwip_netconn_do_writemore(conn  WRITE_DELAYED);
 8004ed8:	4620      	mov	r0, r4
 8004eda:	f7ff fdad 	bl	8004a38 <lwip_netconn_do_writemore>
 8004ede:	e7d9      	b.n	8004e94 <poll_tcp+0x10>
    if (conn->current_msg && conn->current_msg->msg.sd.polls_left) {
 8004ee0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004ee2:	b11b      	cbz	r3, 8004eec <poll_tcp+0x68>
 8004ee4:	7a5a      	ldrb	r2, [r3, #9]
 8004ee6:	b10a      	cbz	r2, 8004eec <poll_tcp+0x68>
      conn->current_msg->msg.sd.polls_left--;
 8004ee8:	3a01      	subs	r2, #1
 8004eea:	725a      	strb	r2, [r3, #9]
    lwip_netconn_do_close_internal(conn  WRITE_DELAYED);
 8004eec:	4620      	mov	r0, r4
 8004eee:	f7ff fea5 	bl	8004c3c <lwip_netconn_do_close_internal>
 8004ef2:	e7cf      	b.n	8004e94 <poll_tcp+0x10>
 8004ef4:	0800e8f0 	.word	0x0800e8f0
 8004ef8:	0800e598 	.word	0x0800e598
 8004efc:	0800e3b0 	.word	0x0800e3b0

08004f00 <sent_tcp>:
{
 8004f00:	b538      	push	{r3, r4, r5, lr}
 8004f02:	4615      	mov	r5, r2
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 8004f04:	4604      	mov	r4, r0
 8004f06:	b1e0      	cbz	r0, 8004f42 <sent_tcp+0x42>
  if (conn) {
 8004f08:	b1cc      	cbz	r4, 8004f3e <sent_tcp+0x3e>
    if (conn->state == NETCONN_WRITE) {
 8004f0a:	7863      	ldrb	r3, [r4, #1]
 8004f0c:	2b01      	cmp	r3, #1
 8004f0e:	d020      	beq.n	8004f52 <sent_tcp+0x52>
    } else if (conn->state == NETCONN_CLOSE) {
 8004f10:	2b04      	cmp	r3, #4
 8004f12:	d022      	beq.n	8004f5a <sent_tcp+0x5a>
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 8004f14:	6863      	ldr	r3, [r4, #4]
 8004f16:	b193      	cbz	r3, 8004f3e <sent_tcp+0x3e>
 8004f18:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8004f1c:	f5b2 6f86 	cmp.w	r2, #1072	; 0x430
 8004f20:	d30d      	bcc.n	8004f3e <sent_tcp+0x3e>
      (tcp_sndqueuelen(conn->pcb.tcp) < TCP_SNDQUEUELOWAT)) {
 8004f22:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 8004f26:	2b04      	cmp	r3, #4
 8004f28:	d809      	bhi.n	8004f3e <sent_tcp+0x3e>
      conn->flags &= ~NETCONN_FLAG_CHECK_WRITESPACE;
 8004f2a:	7f23      	ldrb	r3, [r4, #28]
 8004f2c:	f023 0310 	bic.w	r3, r3, #16
 8004f30:	7723      	strb	r3, [r4, #28]
      API_EVENT(conn, NETCONN_EVT_SENDPLUS, len);
 8004f32:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8004f34:	b11b      	cbz	r3, 8004f3e <sent_tcp+0x3e>
 8004f36:	462a      	mov	r2, r5
 8004f38:	2102      	movs	r1, #2
 8004f3a:	4620      	mov	r0, r4
 8004f3c:	4798      	blx	r3
}
 8004f3e:	2000      	movs	r0, #0
 8004f40:	bd38      	pop	{r3, r4, r5, pc}
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 8004f42:	4b08      	ldr	r3, [pc, #32]	; (8004f64 <sent_tcp+0x64>)
 8004f44:	f240 1261 	movw	r2, #353	; 0x161
 8004f48:	4907      	ldr	r1, [pc, #28]	; (8004f68 <sent_tcp+0x68>)
 8004f4a:	4808      	ldr	r0, [pc, #32]	; (8004f6c <sent_tcp+0x6c>)
 8004f4c:	f008 fe3d 	bl	800dbca <iprintf>
 8004f50:	e7da      	b.n	8004f08 <sent_tcp+0x8>
      lwip_netconn_do_writemore(conn  WRITE_DELAYED);
 8004f52:	4620      	mov	r0, r4
 8004f54:	f7ff fd70 	bl	8004a38 <lwip_netconn_do_writemore>
 8004f58:	e7dc      	b.n	8004f14 <sent_tcp+0x14>
      lwip_netconn_do_close_internal(conn  WRITE_DELAYED);
 8004f5a:	4620      	mov	r0, r4
 8004f5c:	f7ff fe6e 	bl	8004c3c <lwip_netconn_do_close_internal>
 8004f60:	e7d8      	b.n	8004f14 <sent_tcp+0x14>
 8004f62:	bf00      	nop
 8004f64:	0800e8f0 	.word	0x0800e8f0
 8004f68:	0800e598 	.word	0x0800e598
 8004f6c:	0800e3b0 	.word	0x0800e3b0

08004f70 <recv_tcp>:
{
 8004f70:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004f74:	4604      	mov	r4, r0
 8004f76:	4615      	mov	r5, r2
 8004f78:	4698      	mov	r8, r3
  LWIP_ASSERT("recv_tcp must have a pcb argument", pcb != NULL);
 8004f7a:	460f      	mov	r7, r1
 8004f7c:	b1e9      	cbz	r1, 8004fba <recv_tcp+0x4a>
  LWIP_ASSERT("recv_tcp must have an argument", arg != NULL);
 8004f7e:	b31c      	cbz	r4, 8004fc8 <recv_tcp+0x58>
  if (conn == NULL) {
 8004f80:	2c00      	cmp	r4, #0
 8004f82:	d04a      	beq.n	800501a <recv_tcp+0xaa>
  LWIP_ASSERT("recv_tcp: recv for wrong pcb!", conn->pcb.tcp == pcb);
 8004f84:	6863      	ldr	r3, [r4, #4]
 8004f86:	429f      	cmp	r7, r3
 8004f88:	d006      	beq.n	8004f98 <recv_tcp+0x28>
 8004f8a:	4b28      	ldr	r3, [pc, #160]	; (800502c <recv_tcp+0xbc>)
 8004f8c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004f90:	4927      	ldr	r1, [pc, #156]	; (8005030 <recv_tcp+0xc0>)
 8004f92:	4828      	ldr	r0, [pc, #160]	; (8005034 <recv_tcp+0xc4>)
 8004f94:	f008 fe19 	bl	800dbca <iprintf>
  if (!sys_mbox_valid(&conn->recvmbox)) {
 8004f98:	f104 0610 	add.w	r6, r4, #16
 8004f9c:	4630      	mov	r0, r6
 8004f9e:	f007 fedb 	bl	800cd58 <sys_mbox_valid>
 8004fa2:	b9c0      	cbnz	r0, 8004fd6 <recv_tcp+0x66>
    if (p != NULL) {
 8004fa4:	2d00      	cmp	r5, #0
 8004fa6:	d03b      	beq.n	8005020 <recv_tcp+0xb0>
      tcp_recved(pcb, p->tot_len);
 8004fa8:	8929      	ldrh	r1, [r5, #8]
 8004faa:	4638      	mov	r0, r7
 8004fac:	f003 fff4 	bl	8008f98 <tcp_recved>
      pbuf_free(p);
 8004fb0:	4628      	mov	r0, r5
 8004fb2:	f003 fb47 	bl	8008644 <pbuf_free>
    return ERR_OK;
 8004fb6:	2500      	movs	r5, #0
 8004fb8:	e01e      	b.n	8004ff8 <recv_tcp+0x88>
  LWIP_ASSERT("recv_tcp must have a pcb argument", pcb != NULL);
 8004fba:	4b1c      	ldr	r3, [pc, #112]	; (800502c <recv_tcp+0xbc>)
 8004fbc:	22f9      	movs	r2, #249	; 0xf9
 8004fbe:	491e      	ldr	r1, [pc, #120]	; (8005038 <recv_tcp+0xc8>)
 8004fc0:	481c      	ldr	r0, [pc, #112]	; (8005034 <recv_tcp+0xc4>)
 8004fc2:	f008 fe02 	bl	800dbca <iprintf>
 8004fc6:	e7da      	b.n	8004f7e <recv_tcp+0xe>
  LWIP_ASSERT("recv_tcp must have an argument", arg != NULL);
 8004fc8:	4b18      	ldr	r3, [pc, #96]	; (800502c <recv_tcp+0xbc>)
 8004fca:	22fa      	movs	r2, #250	; 0xfa
 8004fcc:	491b      	ldr	r1, [pc, #108]	; (800503c <recv_tcp+0xcc>)
 8004fce:	4819      	ldr	r0, [pc, #100]	; (8005034 <recv_tcp+0xc4>)
 8004fd0:	f008 fdfb 	bl	800dbca <iprintf>
 8004fd4:	e7d4      	b.n	8004f80 <recv_tcp+0x10>
  if (err != ERR_OK) {
 8004fd6:	f1b8 0f00 	cmp.w	r8, #0
 8004fda:	d110      	bne.n	8004ffe <recv_tcp+0x8e>
  if (p != NULL) {
 8004fdc:	b1dd      	cbz	r5, 8005016 <recv_tcp+0xa6>
    len = p->tot_len;
 8004fde:	892f      	ldrh	r7, [r5, #8]
  if (sys_mbox_trypost(&conn->recvmbox, p) != ERR_OK) {
 8004fe0:	4629      	mov	r1, r5
 8004fe2:	4630      	mov	r0, r6
 8004fe4:	f007 fe6f 	bl	800ccc6 <sys_mbox_trypost>
 8004fe8:	4605      	mov	r5, r0
 8004fea:	b9d8      	cbnz	r0, 8005024 <recv_tcp+0xb4>
    API_EVENT(conn, NETCONN_EVT_RCVPLUS, len);
 8004fec:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8004fee:	b11b      	cbz	r3, 8004ff8 <recv_tcp+0x88>
 8004ff0:	463a      	mov	r2, r7
 8004ff2:	2100      	movs	r1, #0
 8004ff4:	4620      	mov	r0, r4
 8004ff6:	4798      	blx	r3
}
 8004ff8:	4628      	mov	r0, r5
 8004ffa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    NETCONN_SET_SAFE_ERR(conn, err);
 8004ffe:	f007 ff3d 	bl	800ce7c <sys_arch_protect>
 8005002:	f994 3008 	ldrsb.w	r3, [r4, #8]
 8005006:	f113 0f0c 	cmn.w	r3, #12
 800500a:	db01      	blt.n	8005010 <recv_tcp+0xa0>
 800500c:	f884 8008 	strb.w	r8, [r4, #8]
 8005010:	f007 ff40 	bl	800ce94 <sys_arch_unprotect>
 8005014:	e7e2      	b.n	8004fdc <recv_tcp+0x6c>
    len = 0;
 8005016:	2700      	movs	r7, #0
 8005018:	e7e2      	b.n	8004fe0 <recv_tcp+0x70>
    return ERR_VAL;
 800501a:	f06f 0505 	mvn.w	r5, #5
 800501e:	e7eb      	b.n	8004ff8 <recv_tcp+0x88>
    return ERR_OK;
 8005020:	2500      	movs	r5, #0
 8005022:	e7e9      	b.n	8004ff8 <recv_tcp+0x88>
    return ERR_MEM;
 8005024:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8005028:	e7e6      	b.n	8004ff8 <recv_tcp+0x88>
 800502a:	bf00      	nop
 800502c:	0800e8f0 	.word	0x0800e8f0
 8005030:	0800e8d0 	.word	0x0800e8d0
 8005034:	0800e3b0 	.word	0x0800e3b0
 8005038:	0800e88c 	.word	0x0800e88c
 800503c:	0800e8b0 	.word	0x0800e8b0

08005040 <lwip_netconn_do_newconn>:
{
 8005040:	b510      	push	{r4, lr}
 8005042:	4604      	mov	r4, r0
  msg->err = ERR_OK;
 8005044:	2300      	movs	r3, #0
 8005046:	7103      	strb	r3, [r0, #4]
  if (msg->conn->pcb.tcp == NULL) {
 8005048:	6803      	ldr	r3, [r0, #0]
 800504a:	685b      	ldr	r3, [r3, #4]
 800504c:	b19b      	cbz	r3, 8005076 <lwip_netconn_do_newconn+0x36>
  TCPIP_APIMSG_ACK(msg);
 800504e:	6823      	ldr	r3, [r4, #0]
 8005050:	b163      	cbz	r3, 800506c <lwip_netconn_do_newconn+0x2c>
 8005052:	f007 ff13 	bl	800ce7c <sys_arch_protect>
 8005056:	6823      	ldr	r3, [r4, #0]
 8005058:	f993 2008 	ldrsb.w	r2, [r3, #8]
 800505c:	f112 0f0c 	cmn.w	r2, #12
 8005060:	db02      	blt.n	8005068 <lwip_netconn_do_newconn+0x28>
 8005062:	f994 2004 	ldrsb.w	r2, [r4, #4]
 8005066:	721a      	strb	r2, [r3, #8]
 8005068:	f007 ff14 	bl	800ce94 <sys_arch_unprotect>
 800506c:	6820      	ldr	r0, [r4, #0]
 800506e:	300c      	adds	r0, #12
 8005070:	f007 feb2 	bl	800cdd8 <sys_sem_signal>
 8005074:	bd10      	pop	{r4, pc}
    pcb_new(msg);
 8005076:	f7ff fbfb 	bl	8004870 <pcb_new>
 800507a:	e7e8      	b.n	800504e <lwip_netconn_do_newconn+0xe>

0800507c <netconn_alloc>:
{
 800507c:	b570      	push	{r4, r5, r6, lr}
 800507e:	4605      	mov	r5, r0
 8005080:	460e      	mov	r6, r1
  conn = (struct netconn *)memp_malloc(MEMP_NETCONN);
 8005082:	2007      	movs	r0, #7
 8005084:	f003 f8ee 	bl	8008264 <memp_malloc>
  if (conn == NULL) {
 8005088:	4604      	mov	r4, r0
 800508a:	b318      	cbz	r0, 80050d4 <netconn_alloc+0x58>
  conn->last_err = ERR_OK;
 800508c:	2300      	movs	r3, #0
 800508e:	7203      	strb	r3, [r0, #8]
  conn->type = t;
 8005090:	7005      	strb	r5, [r0, #0]
  conn->pcb.tcp = NULL;
 8005092:	6043      	str	r3, [r0, #4]
  switch(NETCONNTYPE_GROUP(t)) {
 8005094:	f005 05f0 	and.w	r5, r5, #240	; 0xf0
 8005098:	2d10      	cmp	r5, #16
 800509a:	d001      	beq.n	80050a0 <netconn_alloc+0x24>
 800509c:	2d20      	cmp	r5, #32
 800509e:	d11b      	bne.n	80050d8 <netconn_alloc+0x5c>
  if (sys_mbox_new(&conn->recvmbox, size) != ERR_OK) {
 80050a0:	f104 0510 	add.w	r5, r4, #16
 80050a4:	2106      	movs	r1, #6
 80050a6:	4628      	mov	r0, r5
 80050a8:	f007 fde4 	bl	800cc74 <sys_mbox_new>
 80050ac:	b9d8      	cbnz	r0, 80050e6 <netconn_alloc+0x6a>
  if (sys_sem_new(&conn->op_completed, 0) != ERR_OK) {
 80050ae:	2100      	movs	r1, #0
 80050b0:	f104 000c 	add.w	r0, r4, #12
 80050b4:	f007 fe59 	bl	800cd6a <sys_sem_new>
 80050b8:	b9d8      	cbnz	r0, 80050f2 <netconn_alloc+0x76>
  sys_mbox_set_invalid(&conn->acceptmbox);
 80050ba:	f104 0014 	add.w	r0, r4, #20
 80050be:	f007 fe51 	bl	800cd64 <sys_mbox_set_invalid>
  conn->state        = NETCONN_NONE;
 80050c2:	2300      	movs	r3, #0
 80050c4:	7063      	strb	r3, [r4, #1]
  conn->socket       = -1;
 80050c6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80050ca:	61a2      	str	r2, [r4, #24]
  conn->callback     = callback;
 80050cc:	62a6      	str	r6, [r4, #40]	; 0x28
  conn->current_msg  = NULL;
 80050ce:	6263      	str	r3, [r4, #36]	; 0x24
  conn->write_offset = 0;
 80050d0:	6223      	str	r3, [r4, #32]
  conn->flags = 0;
 80050d2:	7723      	strb	r3, [r4, #28]
}
 80050d4:	4620      	mov	r0, r4
 80050d6:	bd70      	pop	{r4, r5, r6, pc}
    LWIP_ASSERT("netconn_alloc: undefined netconn_type", 0);
 80050d8:	4b08      	ldr	r3, [pc, #32]	; (80050fc <netconn_alloc+0x80>)
 80050da:	f44f 722a 	mov.w	r2, #680	; 0x2a8
 80050de:	4908      	ldr	r1, [pc, #32]	; (8005100 <netconn_alloc+0x84>)
 80050e0:	4808      	ldr	r0, [pc, #32]	; (8005104 <netconn_alloc+0x88>)
 80050e2:	f008 fd72 	bl	800dbca <iprintf>
  memp_free(MEMP_NETCONN, conn);
 80050e6:	4621      	mov	r1, r4
 80050e8:	2007      	movs	r0, #7
 80050ea:	f003 f8d5 	bl	8008298 <memp_free>
  return NULL;
 80050ee:	2400      	movs	r4, #0
 80050f0:	e7f0      	b.n	80050d4 <netconn_alloc+0x58>
    sys_mbox_free(&conn->recvmbox);
 80050f2:	4628      	mov	r0, r5
 80050f4:	f007 fdd2 	bl	800cc9c <sys_mbox_free>
    goto free_and_return;
 80050f8:	e7f5      	b.n	80050e6 <netconn_alloc+0x6a>
 80050fa:	bf00      	nop
 80050fc:	0800e8f0 	.word	0x0800e8f0
 8005100:	0800e79c 	.word	0x0800e79c
 8005104:	0800e3b0 	.word	0x0800e3b0

08005108 <netconn_free>:
{
 8005108:	b538      	push	{r3, r4, r5, lr}
 800510a:	4604      	mov	r4, r0
  LWIP_ASSERT("PCB must be deallocated outside this function", conn->pcb.tcp == NULL);
 800510c:	6843      	ldr	r3, [r0, #4]
 800510e:	b133      	cbz	r3, 800511e <netconn_free+0x16>
 8005110:	4b16      	ldr	r3, [pc, #88]	; (800516c <netconn_free+0x64>)
 8005112:	f44f 7238 	mov.w	r2, #736	; 0x2e0
 8005116:	4916      	ldr	r1, [pc, #88]	; (8005170 <netconn_free+0x68>)
 8005118:	4816      	ldr	r0, [pc, #88]	; (8005174 <netconn_free+0x6c>)
 800511a:	f008 fd56 	bl	800dbca <iprintf>
  LWIP_ASSERT("recvmbox must be deallocated before calling this function",
 800511e:	f104 0010 	add.w	r0, r4, #16
 8005122:	f007 fe19 	bl	800cd58 <sys_mbox_valid>
 8005126:	b988      	cbnz	r0, 800514c <netconn_free+0x44>
  LWIP_ASSERT("acceptmbox must be deallocated before calling this function",
 8005128:	f104 0014 	add.w	r0, r4, #20
 800512c:	f007 fe14 	bl	800cd58 <sys_mbox_valid>
 8005130:	b9a0      	cbnz	r0, 800515c <netconn_free+0x54>
  sys_sem_free(&conn->op_completed);
 8005132:	f104 050c 	add.w	r5, r4, #12
 8005136:	4628      	mov	r0, r5
 8005138:	f007 fe53 	bl	800cde2 <sys_sem_free>
  sys_sem_set_invalid(&conn->op_completed);
 800513c:	4628      	mov	r0, r5
 800513e:	f007 fe5b 	bl	800cdf8 <sys_sem_set_invalid>
  memp_free(MEMP_NETCONN, conn);
 8005142:	4621      	mov	r1, r4
 8005144:	2007      	movs	r0, #7
 8005146:	f003 f8a7 	bl	8008298 <memp_free>
 800514a:	bd38      	pop	{r3, r4, r5, pc}
  LWIP_ASSERT("recvmbox must be deallocated before calling this function",
 800514c:	4b07      	ldr	r3, [pc, #28]	; (800516c <netconn_free+0x64>)
 800514e:	f240 22e2 	movw	r2, #738	; 0x2e2
 8005152:	4909      	ldr	r1, [pc, #36]	; (8005178 <netconn_free+0x70>)
 8005154:	4807      	ldr	r0, [pc, #28]	; (8005174 <netconn_free+0x6c>)
 8005156:	f008 fd38 	bl	800dbca <iprintf>
 800515a:	e7e5      	b.n	8005128 <netconn_free+0x20>
  LWIP_ASSERT("acceptmbox must be deallocated before calling this function",
 800515c:	4b03      	ldr	r3, [pc, #12]	; (800516c <netconn_free+0x64>)
 800515e:	f240 22e5 	movw	r2, #741	; 0x2e5
 8005162:	4906      	ldr	r1, [pc, #24]	; (800517c <netconn_free+0x74>)
 8005164:	4803      	ldr	r0, [pc, #12]	; (8005174 <netconn_free+0x6c>)
 8005166:	f008 fd30 	bl	800dbca <iprintf>
 800516a:	e7e2      	b.n	8005132 <netconn_free+0x2a>
 800516c:	0800e8f0 	.word	0x0800e8f0
 8005170:	0800e7c4 	.word	0x0800e7c4
 8005174:	0800e3b0 	.word	0x0800e3b0
 8005178:	0800e7f4 	.word	0x0800e7f4
 800517c:	0800e830 	.word	0x0800e830

08005180 <netconn_drain>:
{
 8005180:	b570      	push	{r4, r5, r6, lr}
 8005182:	b082      	sub	sp, #8
 8005184:	4605      	mov	r5, r0
  if (sys_mbox_valid(&conn->recvmbox)) {
 8005186:	f100 0410 	add.w	r4, r0, #16
 800518a:	4620      	mov	r0, r4
 800518c:	f007 fde4 	bl	800cd58 <sys_mbox_valid>
 8005190:	bb38      	cbnz	r0, 80051e2 <netconn_drain+0x62>
  if (sys_mbox_valid(&conn->acceptmbox)) {
 8005192:	3514      	adds	r5, #20
 8005194:	4628      	mov	r0, r5
 8005196:	f007 fddf 	bl	800cd58 <sys_mbox_valid>
 800519a:	2800      	cmp	r0, #0
 800519c:	d03e      	beq.n	800521c <netconn_drain+0x9c>
    while (sys_mbox_tryfetch(&conn->acceptmbox, &mem) != SYS_MBOX_EMPTY) {
 800519e:	a901      	add	r1, sp, #4
 80051a0:	4628      	mov	r0, r5
 80051a2:	f007 fdc6 	bl	800cd32 <sys_arch_mbox_tryfetch>
 80051a6:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 80051aa:	d031      	beq.n	8005210 <netconn_drain+0x90>
      if (mem != &netconn_aborted) {
 80051ac:	9c01      	ldr	r4, [sp, #4]
 80051ae:	4b1c      	ldr	r3, [pc, #112]	; (8005220 <netconn_drain+0xa0>)
 80051b0:	429c      	cmp	r4, r3
 80051b2:	d0f4      	beq.n	800519e <netconn_drain+0x1e>
        netconn_drain(newconn);
 80051b4:	4620      	mov	r0, r4
 80051b6:	f7ff ffe3 	bl	8005180 <netconn_drain>
        if (newconn->pcb.tcp != NULL) {
 80051ba:	6860      	ldr	r0, [r4, #4]
 80051bc:	b118      	cbz	r0, 80051c6 <netconn_drain+0x46>
          tcp_abort(newconn->pcb.tcp);
 80051be:	f004 fc39 	bl	8009a34 <tcp_abort>
          newconn->pcb.tcp = NULL;
 80051c2:	2300      	movs	r3, #0
 80051c4:	6063      	str	r3, [r4, #4]
        netconn_free(newconn);
 80051c6:	4620      	mov	r0, r4
 80051c8:	f7ff ff9e 	bl	8005108 <netconn_free>
 80051cc:	e7e7      	b.n	800519e <netconn_drain+0x1e>
        if (mem != NULL) {
 80051ce:	9e01      	ldr	r6, [sp, #4]
 80051d0:	b13e      	cbz	r6, 80051e2 <netconn_drain+0x62>
          if (conn->pcb.tcp != NULL) {
 80051d2:	6868      	ldr	r0, [r5, #4]
 80051d4:	b110      	cbz	r0, 80051dc <netconn_drain+0x5c>
            tcp_recved(conn->pcb.tcp, p->tot_len);
 80051d6:	8931      	ldrh	r1, [r6, #8]
 80051d8:	f003 fede 	bl	8008f98 <tcp_recved>
          pbuf_free(p);
 80051dc:	4630      	mov	r0, r6
 80051de:	f003 fa31 	bl	8008644 <pbuf_free>
    while (sys_mbox_tryfetch(&conn->recvmbox, &mem) != SYS_MBOX_EMPTY) {
 80051e2:	a901      	add	r1, sp, #4
 80051e4:	4620      	mov	r0, r4
 80051e6:	f007 fda4 	bl	800cd32 <sys_arch_mbox_tryfetch>
 80051ea:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 80051ee:	d008      	beq.n	8005202 <netconn_drain+0x82>
      if (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP) {
 80051f0:	782b      	ldrb	r3, [r5, #0]
 80051f2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80051f6:	2b10      	cmp	r3, #16
 80051f8:	d0e9      	beq.n	80051ce <netconn_drain+0x4e>
        netbuf_delete((struct netbuf *)mem);
 80051fa:	9801      	ldr	r0, [sp, #4]
 80051fc:	f000 fb5a 	bl	80058b4 <netbuf_delete>
 8005200:	e7ef      	b.n	80051e2 <netconn_drain+0x62>
    sys_mbox_free(&conn->recvmbox);
 8005202:	4620      	mov	r0, r4
 8005204:	f007 fd4a 	bl	800cc9c <sys_mbox_free>
    sys_mbox_set_invalid(&conn->recvmbox);
 8005208:	4620      	mov	r0, r4
 800520a:	f007 fdab 	bl	800cd64 <sys_mbox_set_invalid>
 800520e:	e7c0      	b.n	8005192 <netconn_drain+0x12>
    sys_mbox_free(&conn->acceptmbox);
 8005210:	4628      	mov	r0, r5
 8005212:	f007 fd43 	bl	800cc9c <sys_mbox_free>
    sys_mbox_set_invalid(&conn->acceptmbox);
 8005216:	4628      	mov	r0, r5
 8005218:	f007 fda4 	bl	800cd64 <sys_mbox_set_invalid>
}
 800521c:	b002      	add	sp, #8
 800521e:	bd70      	pop	{r4, r5, r6, pc}
 8005220:	20004268 	.word	0x20004268

08005224 <accept_function>:
{
 8005224:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if (conn == NULL) {
 8005228:	2800      	cmp	r0, #0
 800522a:	d067      	beq.n	80052fc <accept_function+0xd8>
 800522c:	4604      	mov	r4, r0
 800522e:	4616      	mov	r6, r2
 8005230:	460d      	mov	r5, r1
  if (!sys_mbox_valid(&conn->acceptmbox)) {
 8005232:	f100 0814 	add.w	r8, r0, #20
 8005236:	4640      	mov	r0, r8
 8005238:	f007 fd8e 	bl	800cd58 <sys_mbox_valid>
 800523c:	2800      	cmp	r0, #0
 800523e:	d060      	beq.n	8005302 <accept_function+0xde>
  if (newpcb == NULL) {
 8005240:	b1c5      	cbz	r5, 8005274 <accept_function+0x50>
  newconn = netconn_alloc(conn->type, conn->callback);
 8005242:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8005244:	7820      	ldrb	r0, [r4, #0]
 8005246:	f7ff ff19 	bl	800507c <netconn_alloc>
  if (newconn == NULL) {
 800524a:	4607      	mov	r7, r0
 800524c:	b310      	cbz	r0, 8005294 <accept_function+0x70>
  newconn->pcb.tcp = newpcb;
 800524e:	6045      	str	r5, [r0, #4]
  setup_tcp(newconn);
 8005250:	f7ff faee 	bl	8004830 <setup_tcp>
  newconn->last_err = err;
 8005254:	723e      	strb	r6, [r7, #8]
  if (sys_mbox_trypost(&conn->acceptmbox, newconn) != ERR_OK) {
 8005256:	4639      	mov	r1, r7
 8005258:	4640      	mov	r0, r8
 800525a:	f007 fd34 	bl	800ccc6 <sys_mbox_trypost>
 800525e:	4605      	mov	r5, r0
 8005260:	bb30      	cbnz	r0, 80052b0 <accept_function+0x8c>
    API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 8005262:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8005264:	b11b      	cbz	r3, 800526e <accept_function+0x4a>
 8005266:	2200      	movs	r2, #0
 8005268:	4611      	mov	r1, r2
 800526a:	4620      	mov	r0, r4
 800526c:	4798      	blx	r3
}
 800526e:	4628      	mov	r0, r5
 8005270:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (sys_mbox_trypost(&conn->acceptmbox, &netconn_aborted) == ERR_OK) {
 8005274:	492a      	ldr	r1, [pc, #168]	; (8005320 <accept_function+0xfc>)
 8005276:	4640      	mov	r0, r8
 8005278:	f007 fd25 	bl	800ccc6 <sys_mbox_trypost>
 800527c:	2800      	cmp	r0, #0
 800527e:	d143      	bne.n	8005308 <accept_function+0xe4>
      API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 8005280:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8005282:	2b00      	cmp	r3, #0
 8005284:	d043      	beq.n	800530e <accept_function+0xea>
 8005286:	2200      	movs	r2, #0
 8005288:	4611      	mov	r1, r2
 800528a:	4620      	mov	r0, r4
 800528c:	4798      	blx	r3
    return ERR_VAL;
 800528e:	f06f 0505 	mvn.w	r5, #5
 8005292:	e7ec      	b.n	800526e <accept_function+0x4a>
    if (sys_mbox_trypost(&conn->acceptmbox, &netconn_aborted) == ERR_OK) {
 8005294:	4922      	ldr	r1, [pc, #136]	; (8005320 <accept_function+0xfc>)
 8005296:	4640      	mov	r0, r8
 8005298:	f007 fd15 	bl	800ccc6 <sys_mbox_trypost>
 800529c:	bbd0      	cbnz	r0, 8005314 <accept_function+0xf0>
      API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 800529e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80052a0:	b3db      	cbz	r3, 800531a <accept_function+0xf6>
 80052a2:	2200      	movs	r2, #0
 80052a4:	4611      	mov	r1, r2
 80052a6:	4620      	mov	r0, r4
 80052a8:	4798      	blx	r3
    return ERR_MEM;
 80052aa:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 80052ae:	e7de      	b.n	800526e <accept_function+0x4a>
    struct tcp_pcb* pcb = newconn->pcb.tcp;
 80052b0:	687c      	ldr	r4, [r7, #4]
    tcp_arg(pcb, NULL);
 80052b2:	2100      	movs	r1, #0
 80052b4:	4620      	mov	r0, r4
 80052b6:	f003 fedc 	bl	8009072 <tcp_arg>
    tcp_recv(pcb, NULL);
 80052ba:	2100      	movs	r1, #0
 80052bc:	4620      	mov	r0, r4
 80052be:	f003 fedb 	bl	8009078 <tcp_recv>
    tcp_sent(pcb, NULL);
 80052c2:	2100      	movs	r1, #0
 80052c4:	4620      	mov	r0, r4
 80052c6:	f003 fef1 	bl	80090ac <tcp_sent>
    tcp_poll(pcb, NULL, 0);
 80052ca:	2200      	movs	r2, #0
 80052cc:	4611      	mov	r1, r2
 80052ce:	4620      	mov	r0, r4
 80052d0:	f003 ff26 	bl	8009120 <tcp_poll>
    tcp_err(pcb, NULL);
 80052d4:	2100      	movs	r1, #0
 80052d6:	4620      	mov	r0, r4
 80052d8:	f003 ff00 	bl	80090dc <tcp_err>
    newconn->pcb.tcp = NULL;
 80052dc:	2300      	movs	r3, #0
 80052de:	607b      	str	r3, [r7, #4]
    sys_mbox_free(&newconn->recvmbox);
 80052e0:	f107 0410 	add.w	r4, r7, #16
 80052e4:	4620      	mov	r0, r4
 80052e6:	f007 fcd9 	bl	800cc9c <sys_mbox_free>
    sys_mbox_set_invalid(&newconn->recvmbox);
 80052ea:	4620      	mov	r0, r4
 80052ec:	f007 fd3a 	bl	800cd64 <sys_mbox_set_invalid>
    netconn_free(newconn);
 80052f0:	4638      	mov	r0, r7
 80052f2:	f7ff ff09 	bl	8005108 <netconn_free>
    return ERR_MEM;
 80052f6:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 80052fa:	e7b8      	b.n	800526e <accept_function+0x4a>
    return ERR_VAL;
 80052fc:	f06f 0505 	mvn.w	r5, #5
 8005300:	e7b5      	b.n	800526e <accept_function+0x4a>
    return ERR_VAL;
 8005302:	f06f 0505 	mvn.w	r5, #5
 8005306:	e7b2      	b.n	800526e <accept_function+0x4a>
    return ERR_VAL;
 8005308:	f06f 0505 	mvn.w	r5, #5
 800530c:	e7af      	b.n	800526e <accept_function+0x4a>
 800530e:	f06f 0505 	mvn.w	r5, #5
 8005312:	e7ac      	b.n	800526e <accept_function+0x4a>
    return ERR_MEM;
 8005314:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8005318:	e7a9      	b.n	800526e <accept_function+0x4a>
 800531a:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 800531e:	e7a6      	b.n	800526e <accept_function+0x4a>
 8005320:	20004268 	.word	0x20004268

08005324 <lwip_netconn_do_delconn>:
{
 8005324:	b538      	push	{r3, r4, r5, lr}
 8005326:	4604      	mov	r4, r0
  enum netconn_state state = msg->conn->state;
 8005328:	6803      	ldr	r3, [r0, #0]
 800532a:	785d      	ldrb	r5, [r3, #1]
  LWIP_ASSERT("netconn state error", /* this only happens for TCP netconns */
 800532c:	b15d      	cbz	r5, 8005346 <lwip_netconn_do_delconn+0x22>
 800532e:	781b      	ldrb	r3, [r3, #0]
 8005330:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005334:	2b10      	cmp	r3, #16
 8005336:	d006      	beq.n	8005346 <lwip_netconn_do_delconn+0x22>
 8005338:	4b3d      	ldr	r3, [pc, #244]	; (8005430 <lwip_netconn_do_delconn+0x10c>)
 800533a:	f240 4201 	movw	r2, #1025	; 0x401
 800533e:	493d      	ldr	r1, [pc, #244]	; (8005434 <lwip_netconn_do_delconn+0x110>)
 8005340:	483d      	ldr	r0, [pc, #244]	; (8005438 <lwip_netconn_do_delconn+0x114>)
 8005342:	f008 fc42 	bl	800dbca <iprintf>
  if (((state != NETCONN_NONE) &&
 8005346:	b1f5      	cbz	r5, 8005386 <lwip_netconn_do_delconn+0x62>
 8005348:	2d02      	cmp	r5, #2
 800534a:	d01c      	beq.n	8005386 <lwip_netconn_do_delconn+0x62>
       (state != NETCONN_LISTEN) &&
 800534c:	2d03      	cmp	r5, #3
 800534e:	d01a      	beq.n	8005386 <lwip_netconn_do_delconn+0x62>
    msg->err = ERR_INPROGRESS;
 8005350:	23fb      	movs	r3, #251	; 0xfb
 8005352:	7123      	strb	r3, [r4, #4]
  if (sys_sem_valid(LWIP_API_MSG_SEM(msg))) {
 8005354:	6820      	ldr	r0, [r4, #0]
 8005356:	300c      	adds	r0, #12
 8005358:	f007 fd48 	bl	800cdec <sys_sem_valid>
 800535c:	b190      	cbz	r0, 8005384 <lwip_netconn_do_delconn+0x60>
    TCPIP_APIMSG_ACK(msg);
 800535e:	6823      	ldr	r3, [r4, #0]
 8005360:	b163      	cbz	r3, 800537c <lwip_netconn_do_delconn+0x58>
 8005362:	f007 fd8b 	bl	800ce7c <sys_arch_protect>
 8005366:	6823      	ldr	r3, [r4, #0]
 8005368:	f993 2008 	ldrsb.w	r2, [r3, #8]
 800536c:	f112 0f0c 	cmn.w	r2, #12
 8005370:	db02      	blt.n	8005378 <lwip_netconn_do_delconn+0x54>
 8005372:	f994 2004 	ldrsb.w	r2, [r4, #4]
 8005376:	721a      	strb	r2, [r3, #8]
 8005378:	f007 fd8c 	bl	800ce94 <sys_arch_unprotect>
 800537c:	6820      	ldr	r0, [r4, #0]
 800537e:	300c      	adds	r0, #12
 8005380:	f007 fd2a 	bl	800cdd8 <sys_sem_signal>
 8005384:	bd38      	pop	{r3, r4, r5, pc}
       (state != NETCONN_CONNECT)) ||
 8005386:	2d03      	cmp	r5, #3
 8005388:	d027      	beq.n	80053da <lwip_netconn_do_delconn+0xb6>
    LWIP_ASSERT("blocking connect in progress",
 800538a:	2d03      	cmp	r5, #3
 800538c:	d02b      	beq.n	80053e6 <lwip_netconn_do_delconn+0xc2>
    msg->err = ERR_OK;
 800538e:	2300      	movs	r3, #0
 8005390:	7123      	strb	r3, [r4, #4]
    netconn_drain(msg->conn);
 8005392:	6820      	ldr	r0, [r4, #0]
 8005394:	f7ff fef4 	bl	8005180 <netconn_drain>
    if (msg->conn->pcb.tcp != NULL) {
 8005398:	6822      	ldr	r2, [r4, #0]
 800539a:	6851      	ldr	r1, [r2, #4]
 800539c:	b179      	cbz	r1, 80053be <lwip_netconn_do_delconn+0x9a>
      switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 800539e:	7813      	ldrb	r3, [r2, #0]
 80053a0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80053a4:	2b10      	cmp	r3, #16
 80053a6:	d02b      	beq.n	8005400 <lwip_netconn_do_delconn+0xdc>
 80053a8:	2b20      	cmp	r3, #32
 80053aa:	d105      	bne.n	80053b8 <lwip_netconn_do_delconn+0x94>
        msg->conn->pcb.udp->recv_arg = NULL;
 80053ac:	2300      	movs	r3, #0
 80053ae:	61cb      	str	r3, [r1, #28]
        udp_remove(msg->conn->pcb.udp);
 80053b0:	6823      	ldr	r3, [r4, #0]
 80053b2:	6858      	ldr	r0, [r3, #4]
 80053b4:	f007 fb8a 	bl	800cacc <udp_remove>
      msg->conn->pcb.tcp = NULL;
 80053b8:	6823      	ldr	r3, [r4, #0]
 80053ba:	2200      	movs	r2, #0
 80053bc:	605a      	str	r2, [r3, #4]
    API_EVENT(msg->conn, NETCONN_EVT_RCVPLUS, 0);
 80053be:	6820      	ldr	r0, [r4, #0]
 80053c0:	6a83      	ldr	r3, [r0, #40]	; 0x28
 80053c2:	b113      	cbz	r3, 80053ca <lwip_netconn_do_delconn+0xa6>
 80053c4:	2200      	movs	r2, #0
 80053c6:	4611      	mov	r1, r2
 80053c8:	4798      	blx	r3
    API_EVENT(msg->conn, NETCONN_EVT_SENDPLUS, 0);
 80053ca:	6820      	ldr	r0, [r4, #0]
 80053cc:	6a83      	ldr	r3, [r0, #40]	; 0x28
 80053ce:	2b00      	cmp	r3, #0
 80053d0:	d0c0      	beq.n	8005354 <lwip_netconn_do_delconn+0x30>
 80053d2:	2200      	movs	r2, #0
 80053d4:	2102      	movs	r1, #2
 80053d6:	4798      	blx	r3
 80053d8:	e7bc      	b.n	8005354 <lwip_netconn_do_delconn+0x30>
      ((state == NETCONN_CONNECT) && !IN_NONBLOCKING_CONNECT(msg->conn))) {
 80053da:	6823      	ldr	r3, [r4, #0]
 80053dc:	7f1b      	ldrb	r3, [r3, #28]
 80053de:	f013 0f04 	tst.w	r3, #4
 80053e2:	d1d2      	bne.n	800538a <lwip_netconn_do_delconn+0x66>
 80053e4:	e7b4      	b.n	8005350 <lwip_netconn_do_delconn+0x2c>
    LWIP_ASSERT("blocking connect in progress",
 80053e6:	6823      	ldr	r3, [r4, #0]
 80053e8:	7f1b      	ldrb	r3, [r3, #28]
 80053ea:	f013 0f04 	tst.w	r3, #4
 80053ee:	d1ce      	bne.n	800538e <lwip_netconn_do_delconn+0x6a>
 80053f0:	4b0f      	ldr	r3, [pc, #60]	; (8005430 <lwip_netconn_do_delconn+0x10c>)
 80053f2:	f240 421f 	movw	r2, #1055	; 0x41f
 80053f6:	4911      	ldr	r1, [pc, #68]	; (800543c <lwip_netconn_do_delconn+0x118>)
 80053f8:	480f      	ldr	r0, [pc, #60]	; (8005438 <lwip_netconn_do_delconn+0x114>)
 80053fa:	f008 fbe6 	bl	800dbca <iprintf>
 80053fe:	e7c6      	b.n	800538e <lwip_netconn_do_delconn+0x6a>
        LWIP_ASSERT("already writing or closing", msg->conn->current_msg == NULL &&
 8005400:	6a53      	ldr	r3, [r2, #36]	; 0x24
 8005402:	b18b      	cbz	r3, 8005428 <lwip_netconn_do_delconn+0x104>
 8005404:	4b0a      	ldr	r3, [pc, #40]	; (8005430 <lwip_netconn_do_delconn+0x10c>)
 8005406:	f240 4235 	movw	r2, #1077	; 0x435
 800540a:	490d      	ldr	r1, [pc, #52]	; (8005440 <lwip_netconn_do_delconn+0x11c>)
 800540c:	480a      	ldr	r0, [pc, #40]	; (8005438 <lwip_netconn_do_delconn+0x114>)
 800540e:	f008 fbdc 	bl	800dbca <iprintf>
        msg->conn->state = NETCONN_CLOSE;
 8005412:	6823      	ldr	r3, [r4, #0]
 8005414:	2204      	movs	r2, #4
 8005416:	705a      	strb	r2, [r3, #1]
        msg->msg.sd.shut = NETCONN_SHUT_RDWR;
 8005418:	2303      	movs	r3, #3
 800541a:	7223      	strb	r3, [r4, #8]
        msg->conn->current_msg = msg;
 800541c:	6823      	ldr	r3, [r4, #0]
 800541e:	625c      	str	r4, [r3, #36]	; 0x24
        lwip_netconn_do_close_internal(msg->conn);
 8005420:	6820      	ldr	r0, [r4, #0]
 8005422:	f7ff fc0b 	bl	8004c3c <lwip_netconn_do_close_internal>
        return;
 8005426:	bd38      	pop	{r3, r4, r5, pc}
        LWIP_ASSERT("already writing or closing", msg->conn->current_msg == NULL &&
 8005428:	6a13      	ldr	r3, [r2, #32]
 800542a:	2b00      	cmp	r3, #0
 800542c:	d1ea      	bne.n	8005404 <lwip_netconn_do_delconn+0xe0>
 800542e:	e7f0      	b.n	8005412 <lwip_netconn_do_delconn+0xee>
 8005430:	0800e8f0 	.word	0x0800e8f0
 8005434:	0800e688 	.word	0x0800e688
 8005438:	0800e3b0 	.word	0x0800e3b0
 800543c:	0800e69c 	.word	0x0800e69c
 8005440:	0800e6bc 	.word	0x0800e6bc

08005444 <lwip_netconn_do_bind>:
{
 8005444:	b510      	push	{r4, lr}
 8005446:	4604      	mov	r4, r0
  if (ERR_IS_FATAL(msg->conn->last_err)) {
 8005448:	6803      	ldr	r3, [r0, #0]
 800544a:	f993 2008 	ldrsb.w	r2, [r3, #8]
 800544e:	f112 0f0c 	cmn.w	r2, #12
 8005452:	da14      	bge.n	800547e <lwip_netconn_do_bind+0x3a>
    msg->err = msg->conn->last_err;
 8005454:	7102      	strb	r2, [r0, #4]
  TCPIP_APIMSG_ACK(msg);
 8005456:	6823      	ldr	r3, [r4, #0]
 8005458:	b163      	cbz	r3, 8005474 <lwip_netconn_do_bind+0x30>
 800545a:	f007 fd0f 	bl	800ce7c <sys_arch_protect>
 800545e:	6823      	ldr	r3, [r4, #0]
 8005460:	f993 2008 	ldrsb.w	r2, [r3, #8]
 8005464:	f112 0f0c 	cmn.w	r2, #12
 8005468:	db02      	blt.n	8005470 <lwip_netconn_do_bind+0x2c>
 800546a:	f994 2004 	ldrsb.w	r2, [r4, #4]
 800546e:	721a      	strb	r2, [r3, #8]
 8005470:	f007 fd10 	bl	800ce94 <sys_arch_unprotect>
 8005474:	6820      	ldr	r0, [r4, #0]
 8005476:	300c      	adds	r0, #12
 8005478:	f007 fcae 	bl	800cdd8 <sys_sem_signal>
 800547c:	bd10      	pop	{r4, pc}
    msg->err = ERR_VAL;
 800547e:	22fa      	movs	r2, #250	; 0xfa
 8005480:	7102      	strb	r2, [r0, #4]
    if (msg->conn->pcb.tcp != NULL) {
 8005482:	6858      	ldr	r0, [r3, #4]
 8005484:	2800      	cmp	r0, #0
 8005486:	d0e6      	beq.n	8005456 <lwip_netconn_do_bind+0x12>
      switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 8005488:	781b      	ldrb	r3, [r3, #0]
 800548a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800548e:	2b10      	cmp	r3, #16
 8005490:	d007      	beq.n	80054a2 <lwip_netconn_do_bind+0x5e>
 8005492:	2b20      	cmp	r3, #32
 8005494:	d1df      	bne.n	8005456 <lwip_netconn_do_bind+0x12>
        msg->err = udp_bind(msg->conn->pcb.udp, API_EXPR_REF(msg->msg.bc.ipaddr), msg->msg.bc.port);
 8005496:	89a2      	ldrh	r2, [r4, #12]
 8005498:	68a1      	ldr	r1, [r4, #8]
 800549a:	f007 fa21 	bl	800c8e0 <udp_bind>
 800549e:	7120      	strb	r0, [r4, #4]
        break;
 80054a0:	e7d9      	b.n	8005456 <lwip_netconn_do_bind+0x12>
        msg->err = tcp_bind(msg->conn->pcb.tcp, API_EXPR_REF(msg->msg.bc.ipaddr), msg->msg.bc.port);
 80054a2:	89a2      	ldrh	r2, [r4, #12]
 80054a4:	68a1      	ldr	r1, [r4, #8]
 80054a6:	f003 fc89 	bl	8008dbc <tcp_bind>
 80054aa:	7120      	strb	r0, [r4, #4]
        break;
 80054ac:	e7d3      	b.n	8005456 <lwip_netconn_do_bind+0x12>
	...

080054b0 <lwip_netconn_do_listen>:
{
 80054b0:	b530      	push	{r4, r5, lr}
 80054b2:	b083      	sub	sp, #12
 80054b4:	4604      	mov	r4, r0
  if (ERR_IS_FATAL(msg->conn->last_err)) {
 80054b6:	6803      	ldr	r3, [r0, #0]
 80054b8:	f993 2008 	ldrsb.w	r2, [r3, #8]
 80054bc:	f112 0f0c 	cmn.w	r2, #12
 80054c0:	da15      	bge.n	80054ee <lwip_netconn_do_listen+0x3e>
    msg->err = msg->conn->last_err;
 80054c2:	7102      	strb	r2, [r0, #4]
  TCPIP_APIMSG_ACK(msg);
 80054c4:	6823      	ldr	r3, [r4, #0]
 80054c6:	b163      	cbz	r3, 80054e2 <lwip_netconn_do_listen+0x32>
 80054c8:	f007 fcd8 	bl	800ce7c <sys_arch_protect>
 80054cc:	6823      	ldr	r3, [r4, #0]
 80054ce:	f993 2008 	ldrsb.w	r2, [r3, #8]
 80054d2:	f112 0f0c 	cmn.w	r2, #12
 80054d6:	db02      	blt.n	80054de <lwip_netconn_do_listen+0x2e>
 80054d8:	f994 2004 	ldrsb.w	r2, [r4, #4]
 80054dc:	721a      	strb	r2, [r3, #8]
 80054de:	f007 fcd9 	bl	800ce94 <sys_arch_unprotect>
 80054e2:	6820      	ldr	r0, [r4, #0]
 80054e4:	300c      	adds	r0, #12
 80054e6:	f007 fc77 	bl	800cdd8 <sys_sem_signal>
}
 80054ea:	b003      	add	sp, #12
 80054ec:	bd30      	pop	{r4, r5, pc}
    msg->err = ERR_CONN;
 80054ee:	22f5      	movs	r2, #245	; 0xf5
 80054f0:	7102      	strb	r2, [r0, #4]
    if (msg->conn->pcb.tcp != NULL) {
 80054f2:	6858      	ldr	r0, [r3, #4]
 80054f4:	2800      	cmp	r0, #0
 80054f6:	d0e5      	beq.n	80054c4 <lwip_netconn_do_listen+0x14>
      if (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) {
 80054f8:	781a      	ldrb	r2, [r3, #0]
 80054fa:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
 80054fe:	2a10      	cmp	r2, #16
 8005500:	d002      	beq.n	8005508 <lwip_netconn_do_listen+0x58>
        msg->err = ERR_ARG;
 8005502:	23f0      	movs	r3, #240	; 0xf0
 8005504:	7123      	strb	r3, [r4, #4]
 8005506:	e7dd      	b.n	80054c4 <lwip_netconn_do_listen+0x14>
        if (msg->conn->state == NETCONN_NONE) {
 8005508:	785b      	ldrb	r3, [r3, #1]
 800550a:	2b00      	cmp	r3, #0
 800550c:	d145      	bne.n	800559a <lwip_netconn_do_listen+0xea>
          if (msg->conn->pcb.tcp->state != CLOSED) {
 800550e:	7d03      	ldrb	r3, [r0, #20]
 8005510:	b113      	cbz	r3, 8005518 <lwip_netconn_do_listen+0x68>
            msg->err = ERR_VAL;
 8005512:	23fa      	movs	r3, #250	; 0xfa
 8005514:	7123      	strb	r3, [r4, #4]
 8005516:	e7d5      	b.n	80054c4 <lwip_netconn_do_listen+0x14>
            lpcb = tcp_listen_with_backlog_and_err(msg->conn->pcb.tcp, backlog, &err);
 8005518:	f10d 0207 	add.w	r2, sp, #7
 800551c:	21ff      	movs	r1, #255	; 0xff
 800551e:	f003 fcab 	bl	8008e78 <tcp_listen_with_backlog_and_err>
            if (lpcb == NULL) {
 8005522:	4605      	mov	r5, r0
 8005524:	b1f0      	cbz	r0, 8005564 <lwip_netconn_do_listen+0xb4>
              if (sys_mbox_valid(&msg->conn->recvmbox)) {
 8005526:	6820      	ldr	r0, [r4, #0]
 8005528:	3010      	adds	r0, #16
 800552a:	f007 fc15 	bl	800cd58 <sys_mbox_valid>
 800552e:	b9e8      	cbnz	r0, 800556c <lwip_netconn_do_listen+0xbc>
              msg->err = ERR_OK;
 8005530:	2300      	movs	r3, #0
 8005532:	7123      	strb	r3, [r4, #4]
              if (!sys_mbox_valid(&msg->conn->acceptmbox)) {
 8005534:	6820      	ldr	r0, [r4, #0]
 8005536:	3014      	adds	r0, #20
 8005538:	f007 fc0e 	bl	800cd58 <sys_mbox_valid>
 800553c:	b1f8      	cbz	r0, 800557e <lwip_netconn_do_listen+0xce>
              if (msg->err == ERR_OK) {
 800553e:	f994 3004 	ldrsb.w	r3, [r4, #4]
 8005542:	bb1b      	cbnz	r3, 800558c <lwip_netconn_do_listen+0xdc>
                msg->conn->state = NETCONN_LISTEN;
 8005544:	6823      	ldr	r3, [r4, #0]
 8005546:	2202      	movs	r2, #2
 8005548:	705a      	strb	r2, [r3, #1]
                msg->conn->pcb.tcp = lpcb;
 800554a:	6823      	ldr	r3, [r4, #0]
 800554c:	605d      	str	r5, [r3, #4]
                tcp_arg(msg->conn->pcb.tcp, msg->conn);
 800554e:	6823      	ldr	r3, [r4, #0]
 8005550:	4619      	mov	r1, r3
 8005552:	6858      	ldr	r0, [r3, #4]
 8005554:	f003 fd8d 	bl	8009072 <tcp_arg>
                tcp_accept(msg->conn->pcb.tcp, accept_function);
 8005558:	6823      	ldr	r3, [r4, #0]
 800555a:	4912      	ldr	r1, [pc, #72]	; (80055a4 <lwip_netconn_do_listen+0xf4>)
 800555c:	6858      	ldr	r0, [r3, #4]
 800555e:	f003 fdd7 	bl	8009110 <tcp_accept>
 8005562:	e7af      	b.n	80054c4 <lwip_netconn_do_listen+0x14>
              msg->err = err;
 8005564:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8005568:	7123      	strb	r3, [r4, #4]
 800556a:	e7ab      	b.n	80054c4 <lwip_netconn_do_listen+0x14>
                sys_mbox_free(&msg->conn->recvmbox);
 800556c:	6820      	ldr	r0, [r4, #0]
 800556e:	3010      	adds	r0, #16
 8005570:	f007 fb94 	bl	800cc9c <sys_mbox_free>
                sys_mbox_set_invalid(&msg->conn->recvmbox);
 8005574:	6820      	ldr	r0, [r4, #0]
 8005576:	3010      	adds	r0, #16
 8005578:	f007 fbf4 	bl	800cd64 <sys_mbox_set_invalid>
 800557c:	e7d8      	b.n	8005530 <lwip_netconn_do_listen+0x80>
                msg->err = sys_mbox_new(&msg->conn->acceptmbox, DEFAULT_ACCEPTMBOX_SIZE);
 800557e:	6820      	ldr	r0, [r4, #0]
 8005580:	2106      	movs	r1, #6
 8005582:	3014      	adds	r0, #20
 8005584:	f007 fb76 	bl	800cc74 <sys_mbox_new>
 8005588:	7120      	strb	r0, [r4, #4]
 800558a:	e7d8      	b.n	800553e <lwip_netconn_do_listen+0x8e>
                tcp_close(lpcb);
 800558c:	4628      	mov	r0, r5
 800558e:	f004 f901 	bl	8009794 <tcp_close>
                msg->conn->pcb.tcp = NULL;
 8005592:	6823      	ldr	r3, [r4, #0]
 8005594:	2200      	movs	r2, #0
 8005596:	605a      	str	r2, [r3, #4]
 8005598:	e794      	b.n	80054c4 <lwip_netconn_do_listen+0x14>
        } else if (msg->conn->state == NETCONN_LISTEN) {
 800559a:	2b02      	cmp	r3, #2
 800559c:	d192      	bne.n	80054c4 <lwip_netconn_do_listen+0x14>
          msg->err = ERR_OK;
 800559e:	2300      	movs	r3, #0
 80055a0:	7123      	strb	r3, [r4, #4]
 80055a2:	e78f      	b.n	80054c4 <lwip_netconn_do_listen+0x14>
 80055a4:	08005225 	.word	0x08005225

080055a8 <lwip_netconn_do_send>:
{
 80055a8:	b510      	push	{r4, lr}
 80055aa:	4604      	mov	r4, r0
  if (ERR_IS_FATAL(msg->conn->last_err)) {
 80055ac:	6803      	ldr	r3, [r0, #0]
 80055ae:	f993 2008 	ldrsb.w	r2, [r3, #8]
 80055b2:	f112 0f0c 	cmn.w	r2, #12
 80055b6:	da14      	bge.n	80055e2 <lwip_netconn_do_send+0x3a>
    msg->err = msg->conn->last_err;
 80055b8:	7102      	strb	r2, [r0, #4]
  TCPIP_APIMSG_ACK(msg);
 80055ba:	6823      	ldr	r3, [r4, #0]
 80055bc:	b163      	cbz	r3, 80055d8 <lwip_netconn_do_send+0x30>
 80055be:	f007 fc5d 	bl	800ce7c <sys_arch_protect>
 80055c2:	6823      	ldr	r3, [r4, #0]
 80055c4:	f993 2008 	ldrsb.w	r2, [r3, #8]
 80055c8:	f112 0f0c 	cmn.w	r2, #12
 80055cc:	db02      	blt.n	80055d4 <lwip_netconn_do_send+0x2c>
 80055ce:	f994 2004 	ldrsb.w	r2, [r4, #4]
 80055d2:	721a      	strb	r2, [r3, #8]
 80055d4:	f007 fc5e 	bl	800ce94 <sys_arch_unprotect>
 80055d8:	6820      	ldr	r0, [r4, #0]
 80055da:	300c      	adds	r0, #12
 80055dc:	f007 fbfc 	bl	800cdd8 <sys_sem_signal>
 80055e0:	bd10      	pop	{r4, pc}
    msg->err = ERR_CONN;
 80055e2:	22f5      	movs	r2, #245	; 0xf5
 80055e4:	7102      	strb	r2, [r0, #4]
    if (msg->conn->pcb.tcp != NULL) {
 80055e6:	6858      	ldr	r0, [r3, #4]
 80055e8:	2800      	cmp	r0, #0
 80055ea:	d0e6      	beq.n	80055ba <lwip_netconn_do_send+0x12>
      switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 80055ec:	781b      	ldrb	r3, [r3, #0]
 80055ee:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80055f2:	2b20      	cmp	r3, #32
 80055f4:	d1e1      	bne.n	80055ba <lwip_netconn_do_send+0x12>
        if (ip_addr_isany_val(msg->msg.b->addr) || IP_IS_ANY_TYPE_VAL(msg->msg.b->addr)) {
 80055f6:	68a1      	ldr	r1, [r4, #8]
 80055f8:	688b      	ldr	r3, [r1, #8]
 80055fa:	b923      	cbnz	r3, 8005606 <lwip_netconn_do_send+0x5e>
          msg->err = udp_send(msg->conn->pcb.udp, msg->msg.b->p);
 80055fc:	6809      	ldr	r1, [r1, #0]
 80055fe:	f007 fa58 	bl	800cab2 <udp_send>
 8005602:	7120      	strb	r0, [r4, #4]
 8005604:	e7d9      	b.n	80055ba <lwip_netconn_do_send+0x12>
          msg->err = udp_sendto(msg->conn->pcb.udp, msg->msg.b->p, &msg->msg.b->addr, msg->msg.b->port);
 8005606:	898b      	ldrh	r3, [r1, #12]
 8005608:	f101 0208 	add.w	r2, r1, #8
 800560c:	6809      	ldr	r1, [r1, #0]
 800560e:	f007 fa32 	bl	800ca76 <udp_sendto>
 8005612:	7120      	strb	r0, [r4, #4]
 8005614:	e7d1      	b.n	80055ba <lwip_netconn_do_send+0x12>

08005616 <lwip_netconn_do_recv>:
{
 8005616:	b570      	push	{r4, r5, r6, lr}
 8005618:	4606      	mov	r6, r0
  msg->err = ERR_OK;
 800561a:	2300      	movs	r3, #0
 800561c:	7103      	strb	r3, [r0, #4]
  if (msg->conn->pcb.tcp != NULL) {
 800561e:	6803      	ldr	r3, [r0, #0]
 8005620:	685a      	ldr	r2, [r3, #4]
 8005622:	b122      	cbz	r2, 800562e <lwip_netconn_do_recv+0x18>
    if (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) {
 8005624:	781b      	ldrb	r3, [r3, #0]
 8005626:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800562a:	2b10      	cmp	r3, #16
 800562c:	d013      	beq.n	8005656 <lwip_netconn_do_recv+0x40>
  TCPIP_APIMSG_ACK(msg);
 800562e:	6833      	ldr	r3, [r6, #0]
 8005630:	b163      	cbz	r3, 800564c <lwip_netconn_do_recv+0x36>
 8005632:	f007 fc23 	bl	800ce7c <sys_arch_protect>
 8005636:	6833      	ldr	r3, [r6, #0]
 8005638:	f993 2008 	ldrsb.w	r2, [r3, #8]
 800563c:	f112 0f0c 	cmn.w	r2, #12
 8005640:	db02      	blt.n	8005648 <lwip_netconn_do_recv+0x32>
 8005642:	f996 2004 	ldrsb.w	r2, [r6, #4]
 8005646:	721a      	strb	r2, [r3, #8]
 8005648:	f007 fc24 	bl	800ce94 <sys_arch_unprotect>
 800564c:	6830      	ldr	r0, [r6, #0]
 800564e:	300c      	adds	r0, #12
 8005650:	f007 fbc2 	bl	800cdd8 <sys_sem_signal>
 8005654:	bd70      	pop	{r4, r5, r6, pc}
      u32_t remaining = msg->msg.r.len;
 8005656:	6884      	ldr	r4, [r0, #8]
 8005658:	e008      	b.n	800566c <lwip_netconn_do_recv+0x56>
        u16_t recved = (remaining > 0xffff) ? 0xffff : (u16_t)remaining;
 800565a:	f64f 75ff 	movw	r5, #65535	; 0xffff
        tcp_recved(msg->conn->pcb.tcp, recved);
 800565e:	6833      	ldr	r3, [r6, #0]
 8005660:	4629      	mov	r1, r5
 8005662:	6858      	ldr	r0, [r3, #4]
 8005664:	f003 fc98 	bl	8008f98 <tcp_recved>
      } while (remaining != 0);
 8005668:	1b64      	subs	r4, r4, r5
 800566a:	d0e0      	beq.n	800562e <lwip_netconn_do_recv+0x18>
        u16_t recved = (remaining > 0xffff) ? 0xffff : (u16_t)remaining;
 800566c:	f5b4 3f80 	cmp.w	r4, #65536	; 0x10000
 8005670:	d2f3      	bcs.n	800565a <lwip_netconn_do_recv+0x44>
 8005672:	b2a5      	uxth	r5, r4
 8005674:	e7f3      	b.n	800565e <lwip_netconn_do_recv+0x48>
	...

08005678 <lwip_netconn_do_write>:
 *
 * @param m the api_msg_msg pointing to the connection
 */
void
lwip_netconn_do_write(void *m)
{
 8005678:	b510      	push	{r4, lr}
 800567a:	4604      	mov	r4, r0
  struct api_msg *msg = (struct api_msg*)m;

  if (ERR_IS_FATAL(msg->conn->last_err)) {
 800567c:	6803      	ldr	r3, [r0, #0]
 800567e:	f993 2008 	ldrsb.w	r2, [r3, #8]
 8005682:	f112 0f0c 	cmn.w	r2, #12
 8005686:	da13      	bge.n	80056b0 <lwip_netconn_do_write+0x38>
    msg->err = msg->conn->last_err;
 8005688:	7102      	strb	r2, [r0, #4]
    } else {
      msg->err = ERR_VAL;
#endif /* (LWIP_UDP || LWIP_RAW) */
    }
  }
  TCPIP_APIMSG_ACK(msg);
 800568a:	b163      	cbz	r3, 80056a6 <lwip_netconn_do_write+0x2e>
 800568c:	f007 fbf6 	bl	800ce7c <sys_arch_protect>
 8005690:	6823      	ldr	r3, [r4, #0]
 8005692:	f993 2008 	ldrsb.w	r2, [r3, #8]
 8005696:	f112 0f0c 	cmn.w	r2, #12
 800569a:	db02      	blt.n	80056a2 <lwip_netconn_do_write+0x2a>
 800569c:	f994 2004 	ldrsb.w	r2, [r4, #4]
 80056a0:	721a      	strb	r2, [r3, #8]
 80056a2:	f007 fbf7 	bl	800ce94 <sys_arch_unprotect>
 80056a6:	6820      	ldr	r0, [r4, #0]
 80056a8:	300c      	adds	r0, #12
 80056aa:	f007 fb95 	bl	800cdd8 <sys_sem_signal>
 80056ae:	bd10      	pop	{r4, pc}
    if (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) {
 80056b0:	781a      	ldrb	r2, [r3, #0]
 80056b2:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
 80056b6:	2a10      	cmp	r2, #16
 80056b8:	d002      	beq.n	80056c0 <lwip_netconn_do_write+0x48>
      msg->err = ERR_VAL;
 80056ba:	22fa      	movs	r2, #250	; 0xfa
 80056bc:	7102      	strb	r2, [r0, #4]
 80056be:	e7e4      	b.n	800568a <lwip_netconn_do_write+0x12>
      if (msg->conn->state != NETCONN_NONE) {
 80056c0:	785a      	ldrb	r2, [r3, #1]
 80056c2:	b112      	cbz	r2, 80056ca <lwip_netconn_do_write+0x52>
        msg->err = ERR_INPROGRESS;
 80056c4:	22fb      	movs	r2, #251	; 0xfb
 80056c6:	7102      	strb	r2, [r0, #4]
 80056c8:	e7df      	b.n	800568a <lwip_netconn_do_write+0x12>
      } else if (msg->conn->pcb.tcp != NULL) {
 80056ca:	685a      	ldr	r2, [r3, #4]
 80056cc:	b312      	cbz	r2, 8005714 <lwip_netconn_do_write+0x9c>
        msg->conn->state = NETCONN_WRITE;
 80056ce:	2201      	movs	r2, #1
 80056d0:	705a      	strb	r2, [r3, #1]
        LWIP_ASSERT("already writing or closing", msg->conn->current_msg == NULL &&
 80056d2:	6803      	ldr	r3, [r0, #0]
 80056d4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80056d6:	b18a      	cbz	r2, 80056fc <lwip_netconn_do_write+0x84>
 80056d8:	4b10      	ldr	r3, [pc, #64]	; (800571c <lwip_netconn_do_write+0xa4>)
 80056da:	f240 6283 	movw	r2, #1667	; 0x683
 80056de:	4910      	ldr	r1, [pc, #64]	; (8005720 <lwip_netconn_do_write+0xa8>)
 80056e0:	4810      	ldr	r0, [pc, #64]	; (8005724 <lwip_netconn_do_write+0xac>)
 80056e2:	f008 fa72 	bl	800dbca <iprintf>
        LWIP_ASSERT("msg->msg.w.len != 0", msg->msg.w.len != 0);
 80056e6:	68e3      	ldr	r3, [r4, #12]
 80056e8:	b163      	cbz	r3, 8005704 <lwip_netconn_do_write+0x8c>
        msg->conn->current_msg = msg;
 80056ea:	6823      	ldr	r3, [r4, #0]
 80056ec:	625c      	str	r4, [r3, #36]	; 0x24
        msg->conn->write_offset = 0;
 80056ee:	6823      	ldr	r3, [r4, #0]
 80056f0:	2200      	movs	r2, #0
 80056f2:	621a      	str	r2, [r3, #32]
        lwip_netconn_do_writemore(msg->conn);
 80056f4:	6820      	ldr	r0, [r4, #0]
 80056f6:	f7ff f99f 	bl	8004a38 <lwip_netconn_do_writemore>
        return;
 80056fa:	bd10      	pop	{r4, pc}
        LWIP_ASSERT("already writing or closing", msg->conn->current_msg == NULL &&
 80056fc:	6a1b      	ldr	r3, [r3, #32]
 80056fe:	2b00      	cmp	r3, #0
 8005700:	d0f1      	beq.n	80056e6 <lwip_netconn_do_write+0x6e>
 8005702:	e7e9      	b.n	80056d8 <lwip_netconn_do_write+0x60>
        LWIP_ASSERT("msg->msg.w.len != 0", msg->msg.w.len != 0);
 8005704:	4b05      	ldr	r3, [pc, #20]	; (800571c <lwip_netconn_do_write+0xa4>)
 8005706:	f240 6284 	movw	r2, #1668	; 0x684
 800570a:	4907      	ldr	r1, [pc, #28]	; (8005728 <lwip_netconn_do_write+0xb0>)
 800570c:	4805      	ldr	r0, [pc, #20]	; (8005724 <lwip_netconn_do_write+0xac>)
 800570e:	f008 fa5c 	bl	800dbca <iprintf>
 8005712:	e7ea      	b.n	80056ea <lwip_netconn_do_write+0x72>
        msg->err = ERR_CONN;
 8005714:	22f5      	movs	r2, #245	; 0xf5
 8005716:	7102      	strb	r2, [r0, #4]
 8005718:	e7b7      	b.n	800568a <lwip_netconn_do_write+0x12>
 800571a:	bf00      	nop
 800571c:	0800e8f0 	.word	0x0800e8f0
 8005720:	0800e6bc 	.word	0x0800e6bc
 8005724:	0800e3b0 	.word	0x0800e3b0
 8005728:	0800e6f0 	.word	0x0800e6f0

0800572c <lwip_netconn_do_getaddr>:
 *
 * @param m the api_msg_msg pointing to the connection
 */
void
lwip_netconn_do_getaddr(void *m)
{
 800572c:	b510      	push	{r4, lr}
 800572e:	4604      	mov	r4, r0
  struct api_msg *msg = (struct api_msg*)m;

  if (msg->conn->pcb.ip != NULL) {
 8005730:	6803      	ldr	r3, [r0, #0]
 8005732:	685b      	ldr	r3, [r3, #4]
 8005734:	2b00      	cmp	r3, #0
 8005736:	d052      	beq.n	80057de <lwip_netconn_do_getaddr+0xb2>
    if (msg->msg.ad.local) {
 8005738:	7c02      	ldrb	r2, [r0, #16]
 800573a:	b19a      	cbz	r2, 8005764 <lwip_netconn_do_getaddr+0x38>
      ip_addr_copy(API_EXPR_DEREF(msg->msg.ad.ipaddr),
 800573c:	6882      	ldr	r2, [r0, #8]
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	6013      	str	r3, [r2, #0]
    } else {
      ip_addr_copy(API_EXPR_DEREF(msg->msg.ad.ipaddr),
        msg->conn->pcb.ip->remote_ip);
    }

    msg->err = ERR_OK;
 8005742:	2300      	movs	r3, #0
 8005744:	7123      	strb	r3, [r4, #4]
    switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 8005746:	6822      	ldr	r2, [r4, #0]
 8005748:	7813      	ldrb	r3, [r2, #0]
 800574a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800574e:	2b10      	cmp	r3, #16
 8005750:	d018      	beq.n	8005784 <lwip_netconn_do_getaddr+0x58>
 8005752:	2b20      	cmp	r3, #32
 8005754:	d128      	bne.n	80057a8 <lwip_netconn_do_getaddr+0x7c>
      }
      break;
#endif /* LWIP_RAW */
#if LWIP_UDP
    case NETCONN_UDP:
      if (msg->msg.ad.local) {
 8005756:	7c23      	ldrb	r3, [r4, #16]
 8005758:	b143      	cbz	r3, 800576c <lwip_netconn_do_getaddr+0x40>
        API_EXPR_DEREF(msg->msg.ad.port) = msg->conn->pcb.udp->local_port;
 800575a:	68e3      	ldr	r3, [r4, #12]
 800575c:	6852      	ldr	r2, [r2, #4]
 800575e:	8a52      	ldrh	r2, [r2, #18]
 8005760:	801a      	strh	r2, [r3, #0]
 8005762:	e028      	b.n	80057b6 <lwip_netconn_do_getaddr+0x8a>
      ip_addr_copy(API_EXPR_DEREF(msg->msg.ad.ipaddr),
 8005764:	6882      	ldr	r2, [r0, #8]
 8005766:	685b      	ldr	r3, [r3, #4]
 8005768:	6013      	str	r3, [r2, #0]
 800576a:	e7ea      	b.n	8005742 <lwip_netconn_do_getaddr+0x16>
      } else {
        if ((msg->conn->pcb.udp->flags & UDP_FLAGS_CONNECTED) == 0) {
 800576c:	6853      	ldr	r3, [r2, #4]
 800576e:	7c1a      	ldrb	r2, [r3, #16]
 8005770:	f012 0f04 	tst.w	r2, #4
 8005774:	d102      	bne.n	800577c <lwip_netconn_do_getaddr+0x50>
          msg->err = ERR_CONN;
 8005776:	23f5      	movs	r3, #245	; 0xf5
 8005778:	7123      	strb	r3, [r4, #4]
 800577a:	e01c      	b.n	80057b6 <lwip_netconn_do_getaddr+0x8a>
        } else {
          API_EXPR_DEREF(msg->msg.ad.port) = msg->conn->pcb.udp->remote_port;
 800577c:	68e2      	ldr	r2, [r4, #12]
 800577e:	8a9b      	ldrh	r3, [r3, #20]
 8005780:	8013      	strh	r3, [r2, #0]
 8005782:	e018      	b.n	80057b6 <lwip_netconn_do_getaddr+0x8a>
      }
      break;
#endif /* LWIP_UDP */
#if LWIP_TCP
    case NETCONN_TCP:
      if ((msg->msg.ad.local == 0) &&
 8005784:	7c23      	ldrb	r3, [r4, #16]
 8005786:	b91b      	cbnz	r3, 8005790 <lwip_netconn_do_getaddr+0x64>
          ((msg->conn->pcb.tcp->state == CLOSED) || (msg->conn->pcb.tcp->state == LISTEN))) {
 8005788:	6851      	ldr	r1, [r2, #4]
 800578a:	7d09      	ldrb	r1, [r1, #20]
      if ((msg->msg.ad.local == 0) &&
 800578c:	2901      	cmp	r1, #1
 800578e:	d905      	bls.n	800579c <lwip_netconn_do_getaddr+0x70>
        /* pcb is not connected and remote name is requested */
        msg->err = ERR_CONN;
      } else {
        API_EXPR_DEREF(msg->msg.ad.port) = (msg->msg.ad.local ? msg->conn->pcb.tcp->local_port : msg->conn->pcb.tcp->remote_port);
 8005790:	68e1      	ldr	r1, [r4, #12]
 8005792:	b133      	cbz	r3, 80057a2 <lwip_netconn_do_getaddr+0x76>
 8005794:	6853      	ldr	r3, [r2, #4]
 8005796:	8adb      	ldrh	r3, [r3, #22]
 8005798:	800b      	strh	r3, [r1, #0]
 800579a:	e00c      	b.n	80057b6 <lwip_netconn_do_getaddr+0x8a>
        msg->err = ERR_CONN;
 800579c:	23f5      	movs	r3, #245	; 0xf5
 800579e:	7123      	strb	r3, [r4, #4]
 80057a0:	e009      	b.n	80057b6 <lwip_netconn_do_getaddr+0x8a>
        API_EXPR_DEREF(msg->msg.ad.port) = (msg->msg.ad.local ? msg->conn->pcb.tcp->local_port : msg->conn->pcb.tcp->remote_port);
 80057a2:	6853      	ldr	r3, [r2, #4]
 80057a4:	8b1b      	ldrh	r3, [r3, #24]
 80057a6:	e7f7      	b.n	8005798 <lwip_netconn_do_getaddr+0x6c>
      }
      break;
#endif /* LWIP_TCP */
    default:
      LWIP_ASSERT("invalid netconn_type", 0);
 80057a8:	4b0e      	ldr	r3, [pc, #56]	; (80057e4 <lwip_netconn_do_getaddr+0xb8>)
 80057aa:	f240 62dd 	movw	r2, #1757	; 0x6dd
 80057ae:	490e      	ldr	r1, [pc, #56]	; (80057e8 <lwip_netconn_do_getaddr+0xbc>)
 80057b0:	480e      	ldr	r0, [pc, #56]	; (80057ec <lwip_netconn_do_getaddr+0xc0>)
 80057b2:	f008 fa0a 	bl	800dbca <iprintf>
      break;
    }
  } else {
    msg->err = ERR_CONN;
  }
  TCPIP_APIMSG_ACK(msg);
 80057b6:	6823      	ldr	r3, [r4, #0]
 80057b8:	b163      	cbz	r3, 80057d4 <lwip_netconn_do_getaddr+0xa8>
 80057ba:	f007 fb5f 	bl	800ce7c <sys_arch_protect>
 80057be:	6823      	ldr	r3, [r4, #0]
 80057c0:	f993 2008 	ldrsb.w	r2, [r3, #8]
 80057c4:	f112 0f0c 	cmn.w	r2, #12
 80057c8:	db02      	blt.n	80057d0 <lwip_netconn_do_getaddr+0xa4>
 80057ca:	f994 2004 	ldrsb.w	r2, [r4, #4]
 80057ce:	721a      	strb	r2, [r3, #8]
 80057d0:	f007 fb60 	bl	800ce94 <sys_arch_unprotect>
 80057d4:	6820      	ldr	r0, [r4, #0]
 80057d6:	300c      	adds	r0, #12
 80057d8:	f007 fafe 	bl	800cdd8 <sys_sem_signal>
 80057dc:	bd10      	pop	{r4, pc}
    msg->err = ERR_CONN;
 80057de:	23f5      	movs	r3, #245	; 0xf5
 80057e0:	7103      	strb	r3, [r0, #4]
 80057e2:	e7e8      	b.n	80057b6 <lwip_netconn_do_getaddr+0x8a>
 80057e4:	0800e8f0 	.word	0x0800e8f0
 80057e8:	0800e6d8 	.word	0x0800e6d8
 80057ec:	0800e3b0 	.word	0x0800e3b0

080057f0 <lwip_netconn_do_close>:
 *
 * @param m the api_msg_msg pointing to the connection
 */
void
lwip_netconn_do_close(void *m)
{
 80057f0:	b510      	push	{r4, lr}
 80057f2:	4604      	mov	r4, r0
  struct api_msg *msg = (struct api_msg*)m;

#if LWIP_TCP
  enum netconn_state state = msg->conn->state;
 80057f4:	6800      	ldr	r0, [r0, #0]
 80057f6:	7842      	ldrb	r2, [r0, #1]
  /* First check if this is a TCP netconn and if it is in a correct state
      (LISTEN doesn't support half shutdown) */
  if ((msg->conn->pcb.tcp != NULL) &&
 80057f8:	6843      	ldr	r3, [r0, #4]
 80057fa:	b123      	cbz	r3, 8005806 <lwip_netconn_do_close+0x16>
      (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) &&
 80057fc:	7803      	ldrb	r3, [r0, #0]
  if ((msg->conn->pcb.tcp != NULL) &&
 80057fe:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005802:	2b10      	cmp	r3, #16
 8005804:	d014      	beq.n	8005830 <lwip_netconn_do_close+0x40>
      return;
    }
  } else
#endif /* LWIP_TCP */
  {
    msg->err = ERR_CONN;
 8005806:	23f5      	movs	r3, #245	; 0xf5
 8005808:	7123      	strb	r3, [r4, #4]
  }
  TCPIP_APIMSG_ACK(msg);
 800580a:	b160      	cbz	r0, 8005826 <lwip_netconn_do_close+0x36>
 800580c:	f007 fb36 	bl	800ce7c <sys_arch_protect>
 8005810:	6823      	ldr	r3, [r4, #0]
 8005812:	f993 2008 	ldrsb.w	r2, [r3, #8]
 8005816:	f112 0f0c 	cmn.w	r2, #12
 800581a:	db02      	blt.n	8005822 <lwip_netconn_do_close+0x32>
 800581c:	f994 2004 	ldrsb.w	r2, [r4, #4]
 8005820:	721a      	strb	r2, [r3, #8]
 8005822:	f007 fb37 	bl	800ce94 <sys_arch_unprotect>
 8005826:	6820      	ldr	r0, [r4, #0]
 8005828:	300c      	adds	r0, #12
 800582a:	f007 fad5 	bl	800cdd8 <sys_sem_signal>
 800582e:	bd10      	pop	{r4, pc}
      ((msg->msg.sd.shut == NETCONN_SHUT_RDWR) || (state != NETCONN_LISTEN))) {
 8005830:	7a23      	ldrb	r3, [r4, #8]
      (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) &&
 8005832:	2b03      	cmp	r3, #3
 8005834:	d001      	beq.n	800583a <lwip_netconn_do_close+0x4a>
      ((msg->msg.sd.shut == NETCONN_SHUT_RDWR) || (state != NETCONN_LISTEN))) {
 8005836:	2a02      	cmp	r2, #2
 8005838:	d0e5      	beq.n	8005806 <lwip_netconn_do_close+0x16>
    if (state == NETCONN_CONNECT) {
 800583a:	2a03      	cmp	r2, #3
 800583c:	d017      	beq.n	800586e <lwip_netconn_do_close+0x7e>
    } else if (state == NETCONN_WRITE) {
 800583e:	2a01      	cmp	r2, #1
 8005840:	d018      	beq.n	8005874 <lwip_netconn_do_close+0x84>
      if (msg->msg.sd.shut & NETCONN_SHUT_RD) {
 8005842:	f013 0f01 	tst.w	r3, #1
 8005846:	d118      	bne.n	800587a <lwip_netconn_do_close+0x8a>
      LWIP_ASSERT("already writing or closing", msg->conn->current_msg == NULL &&
 8005848:	6823      	ldr	r3, [r4, #0]
 800584a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800584c:	b1c2      	cbz	r2, 8005880 <lwip_netconn_do_close+0x90>
 800584e:	4b0e      	ldr	r3, [pc, #56]	; (8005888 <lwip_netconn_do_close+0x98>)
 8005850:	f240 721c 	movw	r2, #1820	; 0x71c
 8005854:	490d      	ldr	r1, [pc, #52]	; (800588c <lwip_netconn_do_close+0x9c>)
 8005856:	480e      	ldr	r0, [pc, #56]	; (8005890 <lwip_netconn_do_close+0xa0>)
 8005858:	f008 f9b7 	bl	800dbca <iprintf>
      msg->conn->state = NETCONN_CLOSE;
 800585c:	6823      	ldr	r3, [r4, #0]
 800585e:	2204      	movs	r2, #4
 8005860:	705a      	strb	r2, [r3, #1]
      msg->conn->current_msg = msg;
 8005862:	6823      	ldr	r3, [r4, #0]
 8005864:	625c      	str	r4, [r3, #36]	; 0x24
      lwip_netconn_do_close_internal(msg->conn);
 8005866:	6820      	ldr	r0, [r4, #0]
 8005868:	f7ff f9e8 	bl	8004c3c <lwip_netconn_do_close_internal>
      return;
 800586c:	bd10      	pop	{r4, pc}
      msg->err = ERR_CONN;
 800586e:	23f5      	movs	r3, #245	; 0xf5
 8005870:	7123      	strb	r3, [r4, #4]
 8005872:	e7ca      	b.n	800580a <lwip_netconn_do_close+0x1a>
      msg->err = ERR_INPROGRESS;
 8005874:	23fb      	movs	r3, #251	; 0xfb
 8005876:	7123      	strb	r3, [r4, #4]
 8005878:	e7c7      	b.n	800580a <lwip_netconn_do_close+0x1a>
        netconn_drain(msg->conn);
 800587a:	f7ff fc81 	bl	8005180 <netconn_drain>
 800587e:	e7e3      	b.n	8005848 <lwip_netconn_do_close+0x58>
      LWIP_ASSERT("already writing or closing", msg->conn->current_msg == NULL &&
 8005880:	6a1b      	ldr	r3, [r3, #32]
 8005882:	2b00      	cmp	r3, #0
 8005884:	d1e3      	bne.n	800584e <lwip_netconn_do_close+0x5e>
 8005886:	e7e9      	b.n	800585c <lwip_netconn_do_close+0x6c>
 8005888:	0800e8f0 	.word	0x0800e8f0
 800588c:	0800e6bc 	.word	0x0800e6bc
 8005890:	0800e3b0 	.word	0x0800e3b0

08005894 <err_to_errno>:
};

int
err_to_errno(err_t err)
{
  if ((err > 0) || (-err >= (err_t)LWIP_ARRAYSIZE(err_to_errno_table))) {
 8005894:	2800      	cmp	r0, #0
 8005896:	dd01      	ble.n	800589c <err_to_errno+0x8>
    return EIO;
 8005898:	2005      	movs	r0, #5
 800589a:	4770      	bx	lr
  if ((err > 0) || (-err >= (err_t)LWIP_ARRAYSIZE(err_to_errno_table))) {
 800589c:	4240      	negs	r0, r0
 800589e:	2810      	cmp	r0, #16
 80058a0:	dd01      	ble.n	80058a6 <err_to_errno+0x12>
    return EIO;
 80058a2:	2005      	movs	r0, #5
  }
  return err_to_errno_table[-err];
}
 80058a4:	4770      	bx	lr
  return err_to_errno_table[-err];
 80058a6:	4b02      	ldr	r3, [pc, #8]	; (80058b0 <err_to_errno+0x1c>)
 80058a8:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 80058ac:	4770      	bx	lr
 80058ae:	bf00      	nop
 80058b0:	0800e988 	.word	0x0800e988

080058b4 <netbuf_delete>:
 * @param buf pointer to a netbuf allocated by netbuf_new()
 */
void
netbuf_delete(struct netbuf *buf)
{
  if (buf != NULL) {
 80058b4:	b168      	cbz	r0, 80058d2 <netbuf_delete+0x1e>
{
 80058b6:	b510      	push	{r4, lr}
 80058b8:	4604      	mov	r4, r0
    if (buf->p != NULL) {
 80058ba:	6800      	ldr	r0, [r0, #0]
 80058bc:	b120      	cbz	r0, 80058c8 <netbuf_delete+0x14>
      pbuf_free(buf->p);
 80058be:	f002 fec1 	bl	8008644 <pbuf_free>
      buf->p = buf->ptr = NULL;
 80058c2:	2300      	movs	r3, #0
 80058c4:	6063      	str	r3, [r4, #4]
 80058c6:	6023      	str	r3, [r4, #0]
    }
    memp_free(MEMP_NETBUF, buf);
 80058c8:	4621      	mov	r1, r4
 80058ca:	2006      	movs	r0, #6
 80058cc:	f002 fce4 	bl	8008298 <memp_free>
 80058d0:	bd10      	pop	{r4, pc}
 80058d2:	4770      	bx	lr

080058d4 <netbuf_free>:
 *
 * @param buf pointer to the netbuf which contains the packet buffer to free
 */
void
netbuf_free(struct netbuf *buf)
{
 80058d4:	b510      	push	{r4, lr}
  LWIP_ERROR("netbuf_free: invalid buf", (buf != NULL), return;);
 80058d6:	b140      	cbz	r0, 80058ea <netbuf_free+0x16>
 80058d8:	4604      	mov	r4, r0
  if (buf->p != NULL) {
 80058da:	6800      	ldr	r0, [r0, #0]
 80058dc:	b108      	cbz	r0, 80058e2 <netbuf_free+0xe>
    pbuf_free(buf->p);
 80058de:	f002 feb1 	bl	8008644 <pbuf_free>
  }
  buf->p = buf->ptr = NULL;
 80058e2:	2300      	movs	r3, #0
 80058e4:	6063      	str	r3, [r4, #4]
 80058e6:	6023      	str	r3, [r4, #0]
 80058e8:	bd10      	pop	{r4, pc}
  LWIP_ERROR("netbuf_free: invalid buf", (buf != NULL), return;);
 80058ea:	4b03      	ldr	r3, [pc, #12]	; (80058f8 <netbuf_free+0x24>)
 80058ec:	2281      	movs	r2, #129	; 0x81
 80058ee:	4903      	ldr	r1, [pc, #12]	; (80058fc <netbuf_free+0x28>)
 80058f0:	4803      	ldr	r0, [pc, #12]	; (8005900 <netbuf_free+0x2c>)
 80058f2:	f008 f96a 	bl	800dbca <iprintf>
 80058f6:	bd10      	pop	{r4, pc}
 80058f8:	0800e9cc 	.word	0x0800e9cc
 80058fc:	0800ea40 	.word	0x0800ea40
 8005900:	0800e3b0 	.word	0x0800e3b0

08005904 <netbuf_ref>:
 * @return ERR_OK if data is referenced
 *         ERR_MEM if data couldn't be referenced due to lack of memory
 */
err_t
netbuf_ref(struct netbuf *buf, const void *dataptr, u16_t size)
{
 8005904:	b570      	push	{r4, r5, r6, lr}
  LWIP_ERROR("netbuf_ref: invalid buf", (buf != NULL), return ERR_ARG;);
 8005906:	b1a8      	cbz	r0, 8005934 <netbuf_ref+0x30>
 8005908:	460e      	mov	r6, r1
 800590a:	4615      	mov	r5, r2
 800590c:	4604      	mov	r4, r0
  if (buf->p != NULL) {
 800590e:	6800      	ldr	r0, [r0, #0]
 8005910:	b108      	cbz	r0, 8005916 <netbuf_ref+0x12>
    pbuf_free(buf->p);
 8005912:	f002 fe97 	bl	8008644 <pbuf_free>
  }
  buf->p = pbuf_alloc(PBUF_TRANSPORT, 0, PBUF_REF);
 8005916:	2202      	movs	r2, #2
 8005918:	2100      	movs	r1, #0
 800591a:	4608      	mov	r0, r1
 800591c:	f002 fefe 	bl	800871c <pbuf_alloc>
 8005920:	6020      	str	r0, [r4, #0]
  if (buf->p == NULL) {
 8005922:	b180      	cbz	r0, 8005946 <netbuf_ref+0x42>
    buf->ptr = NULL;
    return ERR_MEM;
  }
  ((struct pbuf_rom*)buf->p)->payload = dataptr;
 8005924:	6046      	str	r6, [r0, #4]
  buf->p->len = buf->p->tot_len = size;
 8005926:	6823      	ldr	r3, [r4, #0]
 8005928:	811d      	strh	r5, [r3, #8]
 800592a:	815d      	strh	r5, [r3, #10]
  buf->ptr = buf->p;
 800592c:	6823      	ldr	r3, [r4, #0]
 800592e:	6063      	str	r3, [r4, #4]
  return ERR_OK;
 8005930:	2000      	movs	r0, #0
}
 8005932:	bd70      	pop	{r4, r5, r6, pc}
  LWIP_ERROR("netbuf_ref: invalid buf", (buf != NULL), return ERR_ARG;);
 8005934:	4b06      	ldr	r3, [pc, #24]	; (8005950 <netbuf_ref+0x4c>)
 8005936:	2295      	movs	r2, #149	; 0x95
 8005938:	4906      	ldr	r1, [pc, #24]	; (8005954 <netbuf_ref+0x50>)
 800593a:	4807      	ldr	r0, [pc, #28]	; (8005958 <netbuf_ref+0x54>)
 800593c:	f008 f945 	bl	800dbca <iprintf>
 8005940:	f06f 000f 	mvn.w	r0, #15
 8005944:	bd70      	pop	{r4, r5, r6, pc}
    buf->ptr = NULL;
 8005946:	2300      	movs	r3, #0
 8005948:	6063      	str	r3, [r4, #4]
    return ERR_MEM;
 800594a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800594e:	bd70      	pop	{r4, r5, r6, pc}
 8005950:	0800e9cc 	.word	0x0800e9cc
 8005954:	0800ea5c 	.word	0x0800ea5c
 8005958:	0800e3b0 	.word	0x0800e3b0

0800595c <get_socket>:
{
  struct lwip_sock *sock;

  s -= LWIP_SOCKET_OFFSET;

  if ((s < 0) || (s >= NUM_SOCKETS)) {
 800595c:	2803      	cmp	r0, #3
 800595e:	d80c      	bhi.n	800597a <get_socket+0x1e>
{
 8005960:	b410      	push	{r4}
    LWIP_DEBUGF(SOCKETS_DEBUG, ("get_socket(%d): invalid\n", s + LWIP_SOCKET_OFFSET));
    set_errno(EBADF);
    return NULL;
  }

  sock = &sockets[s];
 8005962:	4c0b      	ldr	r4, [pc, #44]	; (8005990 <get_socket+0x34>)
 8005964:	0083      	lsls	r3, r0, #2
 8005966:	1819      	adds	r1, r3, r0
 8005968:	008a      	lsls	r2, r1, #2
 800596a:	4611      	mov	r1, r2
 800596c:	4422      	add	r2, r4

  if (!sock->conn) {
 800596e:	5863      	ldr	r3, [r4, r1]
 8005970:	b14b      	cbz	r3, 8005986 <get_socket+0x2a>
    set_errno(EBADF);
    return NULL;
  }

  return sock;
}
 8005972:	4610      	mov	r0, r2
 8005974:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005978:	4770      	bx	lr
    set_errno(EBADF);
 800597a:	2209      	movs	r2, #9
 800597c:	4b05      	ldr	r3, [pc, #20]	; (8005994 <get_socket+0x38>)
 800597e:	601a      	str	r2, [r3, #0]
    return NULL;
 8005980:	2200      	movs	r2, #0
}
 8005982:	4610      	mov	r0, r2
 8005984:	4770      	bx	lr
    set_errno(EBADF);
 8005986:	2209      	movs	r2, #9
 8005988:	4b02      	ldr	r3, [pc, #8]	; (8005994 <get_socket+0x38>)
 800598a:	601a      	str	r2, [r3, #0]
    return NULL;
 800598c:	2200      	movs	r2, #0
 800598e:	e7f0      	b.n	8005972 <get_socket+0x16>
 8005990:	20003de4 	.word	0x20003de4
 8005994:	20007998 	.word	0x20007998

08005998 <alloc_socket>:
 *                 0 if socket has been created by socket()
 * @return the index of the new socket; -1 on error
 */
static int
alloc_socket(struct netconn *newconn, int accepted)
{
 8005998:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800599a:	4606      	mov	r6, r0
 800599c:	460d      	mov	r5, r1
  int i;
  SYS_ARCH_DECL_PROTECT(lev);

  /* allocate a new socket identifier */
  for (i = 0; i < NUM_SOCKETS; ++i) {
 800599e:	2400      	movs	r4, #0
 80059a0:	e005      	b.n	80059ae <alloc_socket+0x16>
      sockets[i].lastdata   = NULL;
      sockets[i].lastoffset = 0;
      sockets[i].rcvevent   = 0;
      /* TCP sendbuf is empty, but the socket is not yet writable until connected
       * (unless it has been created by accept()). */
      sockets[i].sendevent  = (NETCONNTYPE_GROUP(newconn->type) == NETCONN_TCP ? (accepted != 0) : 1);
 80059a2:	b335      	cbz	r5, 80059f2 <alloc_socket+0x5a>
 80059a4:	2501      	movs	r5, #1
 80059a6:	e024      	b.n	80059f2 <alloc_socket+0x5a>
      sockets[i].errevent   = 0;
      sockets[i].err        = 0;
      return i + LWIP_SOCKET_OFFSET;
    }
    SYS_ARCH_UNPROTECT(lev);
 80059a8:	f007 fa74 	bl	800ce94 <sys_arch_unprotect>
  for (i = 0; i < NUM_SOCKETS; ++i) {
 80059ac:	3401      	adds	r4, #1
 80059ae:	2c03      	cmp	r4, #3
 80059b0:	dc29      	bgt.n	8005a06 <alloc_socket+0x6e>
    SYS_ARCH_PROTECT(lev);
 80059b2:	f007 fa63 	bl	800ce7c <sys_arch_protect>
    if (!sockets[i].conn && (sockets[i].select_waiting == 0)) {
 80059b6:	eb04 0284 	add.w	r2, r4, r4, lsl #2
 80059ba:	0093      	lsls	r3, r2, #2
 80059bc:	4a14      	ldr	r2, [pc, #80]	; (8005a10 <alloc_socket+0x78>)
 80059be:	58d3      	ldr	r3, [r2, r3]
 80059c0:	2b00      	cmp	r3, #0
 80059c2:	d1f1      	bne.n	80059a8 <alloc_socket+0x10>
 80059c4:	eb04 0384 	add.w	r3, r4, r4, lsl #2
 80059c8:	009a      	lsls	r2, r3, #2
 80059ca:	4b11      	ldr	r3, [pc, #68]	; (8005a10 <alloc_socket+0x78>)
 80059cc:	4413      	add	r3, r2
 80059ce:	7c5b      	ldrb	r3, [r3, #17]
 80059d0:	2b00      	cmp	r3, #0
 80059d2:	d1e9      	bne.n	80059a8 <alloc_socket+0x10>
      sockets[i].conn       = newconn;
 80059d4:	490e      	ldr	r1, [pc, #56]	; (8005a10 <alloc_socket+0x78>)
 80059d6:	188f      	adds	r7, r1, r2
 80059d8:	508e      	str	r6, [r1, r2]
      SYS_ARCH_UNPROTECT(lev);
 80059da:	f007 fa5b 	bl	800ce94 <sys_arch_unprotect>
      sockets[i].lastdata   = NULL;
 80059de:	2300      	movs	r3, #0
 80059e0:	607b      	str	r3, [r7, #4]
      sockets[i].lastoffset = 0;
 80059e2:	813b      	strh	r3, [r7, #8]
      sockets[i].rcvevent   = 0;
 80059e4:	817b      	strh	r3, [r7, #10]
      sockets[i].sendevent  = (NETCONNTYPE_GROUP(newconn->type) == NETCONN_TCP ? (accepted != 0) : 1);
 80059e6:	7833      	ldrb	r3, [r6, #0]
 80059e8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80059ec:	2b10      	cmp	r3, #16
 80059ee:	d0d8      	beq.n	80059a2 <alloc_socket+0xa>
 80059f0:	2501      	movs	r5, #1
 80059f2:	00a3      	lsls	r3, r4, #2
 80059f4:	4423      	add	r3, r4
 80059f6:	009a      	lsls	r2, r3, #2
 80059f8:	4b05      	ldr	r3, [pc, #20]	; (8005a10 <alloc_socket+0x78>)
 80059fa:	4413      	add	r3, r2
 80059fc:	819d      	strh	r5, [r3, #12]
      sockets[i].errevent   = 0;
 80059fe:	2200      	movs	r2, #0
 8005a00:	81da      	strh	r2, [r3, #14]
      sockets[i].err        = 0;
 8005a02:	741a      	strb	r2, [r3, #16]
      return i + LWIP_SOCKET_OFFSET;
 8005a04:	e001      	b.n	8005a0a <alloc_socket+0x72>
  }
  return -1;
 8005a06:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
}
 8005a0a:	4620      	mov	r0, r4
 8005a0c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005a0e:	bf00      	nop
 8005a10:	20003de4 	.word	0x20003de4

08005a14 <event_callback>:
  SYS_ARCH_DECL_PROTECT(lev);

  LWIP_UNUSED_ARG(len);

  /* Get socket */
  if (conn) {
 8005a14:	2800      	cmp	r0, #0
 8005a16:	f000 80a5 	beq.w	8005b64 <event_callback+0x150>
{
 8005a1a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005a1e:	4605      	mov	r5, r0
 8005a20:	460c      	mov	r4, r1
    s = conn->socket;
 8005a22:	f8d0 8018 	ldr.w	r8, [r0, #24]
    if (s < 0) {
 8005a26:	f1b8 0f00 	cmp.w	r8, #0
 8005a2a:	db10      	blt.n	8005a4e <event_callback+0x3a>
      }
      s = conn->socket;
      SYS_ARCH_UNPROTECT(lev);
    }

    sock = get_socket(s);
 8005a2c:	4640      	mov	r0, r8
 8005a2e:	f7ff ff95 	bl	800595c <get_socket>
    if (!sock) {
 8005a32:	4607      	mov	r7, r0
 8005a34:	2800      	cmp	r0, #0
 8005a36:	f000 8093 	beq.w	8005b60 <event_callback+0x14c>
    }
  } else {
    return;
  }

  SYS_ARCH_PROTECT(lev);
 8005a3a:	f007 fa1f 	bl	800ce7c <sys_arch_protect>
 8005a3e:	4605      	mov	r5, r0
  /* Set event as required */
  switch (evt) {
 8005a40:	2c04      	cmp	r4, #4
 8005a42:	d82d      	bhi.n	8005aa0 <event_callback+0x8c>
 8005a44:	e8df f004 	tbb	[pc, r4]
 8005a48:	26231e15 	.word	0x26231e15
 8005a4c:	29          	.byte	0x29
 8005a4d:	00          	.byte	0x00
      SYS_ARCH_PROTECT(lev);
 8005a4e:	f007 fa15 	bl	800ce7c <sys_arch_protect>
      if (conn->socket < 0) {
 8005a52:	f8d5 8018 	ldr.w	r8, [r5, #24]
 8005a56:	f1b8 0f00 	cmp.w	r8, #0
 8005a5a:	db02      	blt.n	8005a62 <event_callback+0x4e>
      SYS_ARCH_UNPROTECT(lev);
 8005a5c:	f007 fa1a 	bl	800ce94 <sys_arch_unprotect>
 8005a60:	e7e4      	b.n	8005a2c <event_callback+0x18>
        if (evt == NETCONN_EVT_RCVPLUS) {
 8005a62:	b914      	cbnz	r4, 8005a6a <event_callback+0x56>
          conn->socket--;
 8005a64:	f108 33ff 	add.w	r3, r8, #4294967295	; 0xffffffff
 8005a68:	61ab      	str	r3, [r5, #24]
        SYS_ARCH_UNPROTECT(lev);
 8005a6a:	f007 fa13 	bl	800ce94 <sys_arch_unprotect>
        return;
 8005a6e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    case NETCONN_EVT_RCVPLUS:
      sock->rcvevent++;
 8005a72:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8005a76:	3301      	adds	r3, #1
 8005a78:	817b      	strh	r3, [r7, #10]
    default:
      LWIP_ASSERT("unknown event", 0);
      break;
  }

  if (sock->select_waiting == 0) {
 8005a7a:	7c7b      	ldrb	r3, [r7, #17]
 8005a7c:	b1c3      	cbz	r3, 8005ab0 <event_callback+0x9c>
     ONLY IF a select was actually waiting. We go through the list the number
     of waiting select calls + 1. This list is expected to be small. */

  /* At this point, SYS_ARCH is still protected! */
again:
  for (scb = select_cb_list; scb != NULL; scb = scb->next) {
 8005a7e:	4b3a      	ldr	r3, [pc, #232]	; (8005b68 <event_callback+0x154>)
 8005a80:	681c      	ldr	r4, [r3, #0]
 8005a82:	e027      	b.n	8005ad4 <event_callback+0xc0>
      sock->rcvevent--;
 8005a84:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8005a88:	3b01      	subs	r3, #1
 8005a8a:	817b      	strh	r3, [r7, #10]
      break;
 8005a8c:	e7f5      	b.n	8005a7a <event_callback+0x66>
      sock->sendevent = 1;
 8005a8e:	2301      	movs	r3, #1
 8005a90:	81bb      	strh	r3, [r7, #12]
      break;
 8005a92:	e7f2      	b.n	8005a7a <event_callback+0x66>
      sock->sendevent = 0;
 8005a94:	2300      	movs	r3, #0
 8005a96:	81bb      	strh	r3, [r7, #12]
      break;
 8005a98:	e7ef      	b.n	8005a7a <event_callback+0x66>
      sock->errevent = 1;
 8005a9a:	2301      	movs	r3, #1
 8005a9c:	81fb      	strh	r3, [r7, #14]
      break;
 8005a9e:	e7ec      	b.n	8005a7a <event_callback+0x66>
      LWIP_ASSERT("unknown event", 0);
 8005aa0:	4b32      	ldr	r3, [pc, #200]	; (8005b6c <event_callback+0x158>)
 8005aa2:	f240 625d 	movw	r2, #1629	; 0x65d
 8005aa6:	4932      	ldr	r1, [pc, #200]	; (8005b70 <event_callback+0x15c>)
 8005aa8:	4832      	ldr	r0, [pc, #200]	; (8005b74 <event_callback+0x160>)
 8005aaa:	f008 f88e 	bl	800dbca <iprintf>
      break;
 8005aae:	e7e4      	b.n	8005a7a <event_callback+0x66>
    SYS_ARCH_UNPROTECT(lev);
 8005ab0:	4628      	mov	r0, r5
 8005ab2:	f007 f9ef 	bl	800ce94 <sys_arch_unprotect>
    return;
 8005ab6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if (sock->errevent != 0) {
        if (!do_signal && scb->exceptset && FD_ISSET(s, scb->exceptset)) {
          do_signal = 1;
        }
      }
      if (do_signal) {
 8005aba:	2b00      	cmp	r3, #0
 8005abc:	d146      	bne.n	8005b4c <event_callback+0x138>
           lead to the select thread taking itself off the list, invalidating the semaphore. */
        sys_sem_signal(SELECT_SEM_PTR(scb->sem));
      }
    }
    /* unlock interrupts with each step */
    SYS_ARCH_UNPROTECT(lev);
 8005abe:	4628      	mov	r0, r5
 8005ac0:	f007 f9e8 	bl	800ce94 <sys_arch_unprotect>
    /* this makes sure interrupt protection time is short */
    SYS_ARCH_PROTECT(lev);
 8005ac4:	f007 f9da 	bl	800ce7c <sys_arch_protect>
 8005ac8:	4605      	mov	r5, r0
    if (last_select_cb_ctr != select_cb_ctr) {
 8005aca:	4b2b      	ldr	r3, [pc, #172]	; (8005b78 <event_callback+0x164>)
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	429e      	cmp	r6, r3
 8005ad0:	d1d5      	bne.n	8005a7e <event_callback+0x6a>
  for (scb = select_cb_list; scb != NULL; scb = scb->next) {
 8005ad2:	6824      	ldr	r4, [r4, #0]
 8005ad4:	2c00      	cmp	r4, #0
 8005ad6:	d040      	beq.n	8005b5a <event_callback+0x146>
    last_select_cb_ctr = select_cb_ctr;
 8005ad8:	4b27      	ldr	r3, [pc, #156]	; (8005b78 <event_callback+0x164>)
 8005ada:	681e      	ldr	r6, [r3, #0]
    if (scb->sem_signalled == 0) {
 8005adc:	6963      	ldr	r3, [r4, #20]
 8005ade:	2b00      	cmp	r3, #0
 8005ae0:	d1ed      	bne.n	8005abe <event_callback+0xaa>
      if (sock->rcvevent > 0) {
 8005ae2:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8005ae6:	2a00      	cmp	r2, #0
 8005ae8:	dd0c      	ble.n	8005b04 <event_callback+0xf0>
        if (scb->readset && FD_ISSET(s, scb->readset)) {
 8005aea:	68a2      	ldr	r2, [r4, #8]
 8005aec:	b152      	cbz	r2, 8005b04 <event_callback+0xf0>
 8005aee:	ea4f 1158 	mov.w	r1, r8, lsr #5
 8005af2:	f852 1021 	ldr.w	r1, [r2, r1, lsl #2]
 8005af6:	f008 001f 	and.w	r0, r8, #31
 8005afa:	2201      	movs	r2, #1
 8005afc:	4082      	lsls	r2, r0
 8005afe:	4211      	tst	r1, r2
 8005b00:	d000      	beq.n	8005b04 <event_callback+0xf0>
          do_signal = 1;
 8005b02:	2301      	movs	r3, #1
      if (sock->sendevent != 0) {
 8005b04:	89ba      	ldrh	r2, [r7, #12]
 8005b06:	b16a      	cbz	r2, 8005b24 <event_callback+0x110>
        if (!do_signal && scb->writeset && FD_ISSET(s, scb->writeset)) {
 8005b08:	b963      	cbnz	r3, 8005b24 <event_callback+0x110>
 8005b0a:	68e2      	ldr	r2, [r4, #12]
 8005b0c:	b152      	cbz	r2, 8005b24 <event_callback+0x110>
 8005b0e:	ea4f 1158 	mov.w	r1, r8, lsr #5
 8005b12:	f852 1021 	ldr.w	r1, [r2, r1, lsl #2]
 8005b16:	f008 001f 	and.w	r0, r8, #31
 8005b1a:	2201      	movs	r2, #1
 8005b1c:	4082      	lsls	r2, r0
 8005b1e:	4211      	tst	r1, r2
 8005b20:	d000      	beq.n	8005b24 <event_callback+0x110>
          do_signal = 1;
 8005b22:	2301      	movs	r3, #1
      if (sock->errevent != 0) {
 8005b24:	89fa      	ldrh	r2, [r7, #14]
 8005b26:	2a00      	cmp	r2, #0
 8005b28:	d0c7      	beq.n	8005aba <event_callback+0xa6>
        if (!do_signal && scb->exceptset && FD_ISSET(s, scb->exceptset)) {
 8005b2a:	2b00      	cmp	r3, #0
 8005b2c:	d1c5      	bne.n	8005aba <event_callback+0xa6>
 8005b2e:	6922      	ldr	r2, [r4, #16]
 8005b30:	2a00      	cmp	r2, #0
 8005b32:	d0c2      	beq.n	8005aba <event_callback+0xa6>
 8005b34:	ea4f 1158 	mov.w	r1, r8, lsr #5
 8005b38:	f852 1021 	ldr.w	r1, [r2, r1, lsl #2]
 8005b3c:	f008 001f 	and.w	r0, r8, #31
 8005b40:	2201      	movs	r2, #1
 8005b42:	4082      	lsls	r2, r0
 8005b44:	4211      	tst	r1, r2
 8005b46:	d0b8      	beq.n	8005aba <event_callback+0xa6>
          do_signal = 1;
 8005b48:	2301      	movs	r3, #1
 8005b4a:	e7b6      	b.n	8005aba <event_callback+0xa6>
        scb->sem_signalled = 1;
 8005b4c:	2301      	movs	r3, #1
 8005b4e:	6163      	str	r3, [r4, #20]
        sys_sem_signal(SELECT_SEM_PTR(scb->sem));
 8005b50:	f104 0018 	add.w	r0, r4, #24
 8005b54:	f007 f940 	bl	800cdd8 <sys_sem_signal>
 8005b58:	e7b1      	b.n	8005abe <event_callback+0xaa>
      /* someone has changed select_cb_list, restart at the beginning */
      goto again;
    }
  }
  SYS_ARCH_UNPROTECT(lev);
 8005b5a:	4628      	mov	r0, r5
 8005b5c:	f007 f99a 	bl	800ce94 <sys_arch_unprotect>
 8005b60:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005b64:	4770      	bx	lr
 8005b66:	bf00      	nop
 8005b68:	20003de0 	.word	0x20003de0
 8005b6c:	0800eb48 	.word	0x0800eb48
 8005b70:	0800ea74 	.word	0x0800ea74
 8005b74:	0800e3b0 	.word	0x0800e3b0
 8005b78:	20003ddc 	.word	0x20003ddc

08005b7c <free_socket>:
{
 8005b7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005b7e:	4604      	mov	r4, r0
 8005b80:	460f      	mov	r7, r1
  lastdata         = sock->lastdata;
 8005b82:	6846      	ldr	r6, [r0, #4]
  sock->lastdata   = NULL;
 8005b84:	2500      	movs	r5, #0
 8005b86:	6045      	str	r5, [r0, #4]
  sock->lastoffset = 0;
 8005b88:	8105      	strh	r5, [r0, #8]
  sock->err        = 0;
 8005b8a:	7405      	strb	r5, [r0, #16]
  SYS_ARCH_SET(sock->conn, NULL);
 8005b8c:	f007 f976 	bl	800ce7c <sys_arch_protect>
 8005b90:	6025      	str	r5, [r4, #0]
 8005b92:	f007 f97f 	bl	800ce94 <sys_arch_unprotect>
  if (lastdata != NULL) {
 8005b96:	b11e      	cbz	r6, 8005ba0 <free_socket+0x24>
    if (is_tcp) {
 8005b98:	b91f      	cbnz	r7, 8005ba2 <free_socket+0x26>
      netbuf_delete((struct netbuf *)lastdata);
 8005b9a:	4630      	mov	r0, r6
 8005b9c:	f7ff fe8a 	bl	80058b4 <netbuf_delete>
 8005ba0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      pbuf_free((struct pbuf *)lastdata);
 8005ba2:	4630      	mov	r0, r6
 8005ba4:	f002 fd4e 	bl	8008644 <pbuf_free>
 8005ba8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08005bac <lwip_accept>:
{
 8005bac:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8005bb0:	b089      	sub	sp, #36	; 0x24
 8005bb2:	460f      	mov	r7, r1
 8005bb4:	4616      	mov	r6, r2
  u16_t port = 0;
 8005bb6:	2300      	movs	r3, #0
 8005bb8:	f8ad 3016 	strh.w	r3, [sp, #22]
  sock = get_socket(s);
 8005bbc:	f7ff fece 	bl	800595c <get_socket>
  if (!sock) {
 8005bc0:	2800      	cmp	r0, #0
 8005bc2:	f000 80c2 	beq.w	8005d4a <lwip_accept+0x19e>
 8005bc6:	4605      	mov	r5, r0
  if (netconn_is_nonblocking(sock->conn) && (sock->rcvevent <= 0)) {
 8005bc8:	6800      	ldr	r0, [r0, #0]
 8005bca:	7f03      	ldrb	r3, [r0, #28]
 8005bcc:	f013 0f02 	tst.w	r3, #2
 8005bd0:	d003      	beq.n	8005bda <lwip_accept+0x2e>
 8005bd2:	f9b5 300a 	ldrsh.w	r3, [r5, #10]
 8005bd6:	2b00      	cmp	r3, #0
 8005bd8:	dd17      	ble.n	8005c0a <lwip_accept+0x5e>
  err = netconn_accept(sock->conn, &newconn);
 8005bda:	a907      	add	r1, sp, #28
 8005bdc:	f7fe fc7e 	bl	80044dc <netconn_accept>
  if (err != ERR_OK) {
 8005be0:	b338      	cbz	r0, 8005c32 <lwip_accept+0x86>
    if (NETCONNTYPE_GROUP(netconn_type(sock->conn)) != NETCONN_TCP) {
 8005be2:	682b      	ldr	r3, [r5, #0]
 8005be4:	781b      	ldrb	r3, [r3, #0]
 8005be6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005bea:	2b10      	cmp	r3, #16
 8005bec:	d113      	bne.n	8005c16 <lwip_accept+0x6a>
    } else if (err == ERR_CLSD) {
 8005bee:	f110 0f0f 	cmn.w	r0, #15
 8005bf2:	d017      	beq.n	8005c24 <lwip_accept+0x78>
      sock_set_errno(sock, err_to_errno(err));
 8005bf4:	f7ff fe4e 	bl	8005894 <err_to_errno>
 8005bf8:	7428      	strb	r0, [r5, #16]
 8005bfa:	2800      	cmp	r0, #0
 8005bfc:	f000 80a8 	beq.w	8005d50 <lwip_accept+0x1a4>
 8005c00:	4b55      	ldr	r3, [pc, #340]	; (8005d58 <lwip_accept+0x1ac>)
 8005c02:	6018      	str	r0, [r3, #0]
    return -1;
 8005c04:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8005c08:	e06a      	b.n	8005ce0 <lwip_accept+0x134>
    set_errno(EWOULDBLOCK);
 8005c0a:	220b      	movs	r2, #11
 8005c0c:	4b52      	ldr	r3, [pc, #328]	; (8005d58 <lwip_accept+0x1ac>)
 8005c0e:	601a      	str	r2, [r3, #0]
    return -1;
 8005c10:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8005c14:	e064      	b.n	8005ce0 <lwip_accept+0x134>
      sock_set_errno(sock, EOPNOTSUPP);
 8005c16:	235f      	movs	r3, #95	; 0x5f
 8005c18:	742b      	strb	r3, [r5, #16]
 8005c1a:	4a4f      	ldr	r2, [pc, #316]	; (8005d58 <lwip_accept+0x1ac>)
 8005c1c:	6013      	str	r3, [r2, #0]
    return -1;
 8005c1e:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8005c22:	e05d      	b.n	8005ce0 <lwip_accept+0x134>
      sock_set_errno(sock, EINVAL);
 8005c24:	2316      	movs	r3, #22
 8005c26:	742b      	strb	r3, [r5, #16]
 8005c28:	4a4b      	ldr	r2, [pc, #300]	; (8005d58 <lwip_accept+0x1ac>)
 8005c2a:	6013      	str	r3, [r2, #0]
    return -1;
 8005c2c:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8005c30:	e056      	b.n	8005ce0 <lwip_accept+0x134>
  LWIP_ASSERT("newconn != NULL", newconn != NULL);
 8005c32:	9b07      	ldr	r3, [sp, #28]
 8005c34:	2b00      	cmp	r3, #0
 8005c36:	d057      	beq.n	8005ce8 <lwip_accept+0x13c>
  newsock = alloc_socket(newconn, 1);
 8005c38:	2101      	movs	r1, #1
 8005c3a:	9807      	ldr	r0, [sp, #28]
 8005c3c:	f7ff feac 	bl	8005998 <alloc_socket>
 8005c40:	4604      	mov	r4, r0
  if (newsock == -1) {
 8005c42:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 8005c46:	d057      	beq.n	8005cf8 <lwip_accept+0x14c>
  LWIP_ASSERT("invalid socket index", (newsock >= LWIP_SOCKET_OFFSET) && (newsock < NUM_SOCKETS + LWIP_SOCKET_OFFSET));
 8005c48:	2803      	cmp	r0, #3
 8005c4a:	d85d      	bhi.n	8005d08 <lwip_accept+0x15c>
  LWIP_ASSERT("newconn->callback == event_callback", newconn->callback == event_callback);
 8005c4c:	9b07      	ldr	r3, [sp, #28]
 8005c4e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005c50:	4b42      	ldr	r3, [pc, #264]	; (8005d5c <lwip_accept+0x1b0>)
 8005c52:	429a      	cmp	r2, r3
 8005c54:	d006      	beq.n	8005c64 <lwip_accept+0xb8>
 8005c56:	4b42      	ldr	r3, [pc, #264]	; (8005d60 <lwip_accept+0x1b4>)
 8005c58:	f44f 72ff 	mov.w	r2, #510	; 0x1fe
 8005c5c:	4941      	ldr	r1, [pc, #260]	; (8005d64 <lwip_accept+0x1b8>)
 8005c5e:	4842      	ldr	r0, [pc, #264]	; (8005d68 <lwip_accept+0x1bc>)
 8005c60:	f007 ffb3 	bl	800dbca <iprintf>
  nsock = &sockets[newsock - LWIP_SOCKET_OFFSET];
 8005c64:	00a3      	lsls	r3, r4, #2
 8005c66:	4423      	add	r3, r4
 8005c68:	009a      	lsls	r2, r3, #2
 8005c6a:	4b40      	ldr	r3, [pc, #256]	; (8005d6c <lwip_accept+0x1c0>)
 8005c6c:	eb03 0802 	add.w	r8, r3, r2
  SYS_ARCH_PROTECT(lev);
 8005c70:	f007 f904 	bl	800ce7c <sys_arch_protect>
  nsock->rcvevent += (s16_t)(-1 - newconn->socket);
 8005c74:	9a07      	ldr	r2, [sp, #28]
 8005c76:	8b11      	ldrh	r1, [r2, #24]
 8005c78:	f8b8 300a 	ldrh.w	r3, [r8, #10]
 8005c7c:	1a5b      	subs	r3, r3, r1
 8005c7e:	3b01      	subs	r3, #1
 8005c80:	f8a8 300a 	strh.w	r3, [r8, #10]
  newconn->socket = newsock;
 8005c84:	6194      	str	r4, [r2, #24]
  SYS_ARCH_UNPROTECT(lev);
 8005c86:	f007 f905 	bl	800ce94 <sys_arch_unprotect>
  if (addr != NULL) {
 8005c8a:	b33f      	cbz	r7, 8005cdc <lwip_accept+0x130>
    err = netconn_peer(newconn, &naddr, &port);
 8005c8c:	2300      	movs	r3, #0
 8005c8e:	f10d 0216 	add.w	r2, sp, #22
 8005c92:	a906      	add	r1, sp, #24
 8005c94:	9807      	ldr	r0, [sp, #28]
 8005c96:	f7fe fba5 	bl	80043e4 <netconn_getaddr>
    if (err != ERR_OK) {
 8005c9a:	4681      	mov	r9, r0
 8005c9c:	2800      	cmp	r0, #0
 8005c9e:	d13b      	bne.n	8005d18 <lwip_accept+0x16c>
    LWIP_ASSERT("addr valid but addrlen NULL", addrlen != NULL);
 8005ca0:	2e00      	cmp	r6, #0
 8005ca2:	d04a      	beq.n	8005d3a <lwip_accept+0x18e>
    IPADDR_PORT_TO_SOCKADDR(&tempaddr, &naddr, port);
 8005ca4:	2310      	movs	r3, #16
 8005ca6:	f88d 3004 	strb.w	r3, [sp, #4]
 8005caa:	2302      	movs	r3, #2
 8005cac:	f88d 3005 	strb.w	r3, [sp, #5]
 8005cb0:	f8bd 0016 	ldrh.w	r0, [sp, #22]
 8005cb4:	f000 fcaa 	bl	800660c <lwip_htons>
 8005cb8:	f8ad 0006 	strh.w	r0, [sp, #6]
 8005cbc:	9b06      	ldr	r3, [sp, #24]
 8005cbe:	9302      	str	r3, [sp, #8]
 8005cc0:	2300      	movs	r3, #0
 8005cc2:	9303      	str	r3, [sp, #12]
 8005cc4:	9304      	str	r3, [sp, #16]
    if (*addrlen > tempaddr.sa.sa_len) {
 8005cc6:	6832      	ldr	r2, [r6, #0]
 8005cc8:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8005ccc:	429a      	cmp	r2, r3
 8005cce:	d900      	bls.n	8005cd2 <lwip_accept+0x126>
      *addrlen = tempaddr.sa.sa_len;
 8005cd0:	6033      	str	r3, [r6, #0]
    MEMCPY(addr, &tempaddr, *addrlen);
 8005cd2:	6832      	ldr	r2, [r6, #0]
 8005cd4:	a901      	add	r1, sp, #4
 8005cd6:	4638      	mov	r0, r7
 8005cd8:	f008 f8e3 	bl	800dea2 <memcpy>
  sock_set_errno(sock, 0);
 8005cdc:	2300      	movs	r3, #0
 8005cde:	742b      	strb	r3, [r5, #16]
}
 8005ce0:	4620      	mov	r0, r4
 8005ce2:	b009      	add	sp, #36	; 0x24
 8005ce4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  LWIP_ASSERT("newconn != NULL", newconn != NULL);
 8005ce8:	4b1d      	ldr	r3, [pc, #116]	; (8005d60 <lwip_accept+0x1b4>)
 8005cea:	f240 12f5 	movw	r2, #501	; 0x1f5
 8005cee:	4920      	ldr	r1, [pc, #128]	; (8005d70 <lwip_accept+0x1c4>)
 8005cf0:	481d      	ldr	r0, [pc, #116]	; (8005d68 <lwip_accept+0x1bc>)
 8005cf2:	f007 ff6a 	bl	800dbca <iprintf>
 8005cf6:	e79f      	b.n	8005c38 <lwip_accept+0x8c>
    netconn_delete(newconn);
 8005cf8:	9807      	ldr	r0, [sp, #28]
 8005cfa:	f7fe fb59 	bl	80043b0 <netconn_delete>
    sock_set_errno(sock, ENFILE);
 8005cfe:	2317      	movs	r3, #23
 8005d00:	742b      	strb	r3, [r5, #16]
 8005d02:	4a15      	ldr	r2, [pc, #84]	; (8005d58 <lwip_accept+0x1ac>)
 8005d04:	6013      	str	r3, [r2, #0]
    return -1;
 8005d06:	e7eb      	b.n	8005ce0 <lwip_accept+0x134>
  LWIP_ASSERT("invalid socket index", (newsock >= LWIP_SOCKET_OFFSET) && (newsock < NUM_SOCKETS + LWIP_SOCKET_OFFSET));
 8005d08:	4b15      	ldr	r3, [pc, #84]	; (8005d60 <lwip_accept+0x1b4>)
 8005d0a:	f240 12fd 	movw	r2, #509	; 0x1fd
 8005d0e:	4919      	ldr	r1, [pc, #100]	; (8005d74 <lwip_accept+0x1c8>)
 8005d10:	4815      	ldr	r0, [pc, #84]	; (8005d68 <lwip_accept+0x1bc>)
 8005d12:	f007 ff5a 	bl	800dbca <iprintf>
 8005d16:	e799      	b.n	8005c4c <lwip_accept+0xa0>
      netconn_delete(newconn);
 8005d18:	9807      	ldr	r0, [sp, #28]
 8005d1a:	f7fe fb49 	bl	80043b0 <netconn_delete>
      free_socket(nsock, 1);
 8005d1e:	2101      	movs	r1, #1
 8005d20:	4640      	mov	r0, r8
 8005d22:	f7ff ff2b 	bl	8005b7c <free_socket>
      sock_set_errno(sock, err_to_errno(err));
 8005d26:	4648      	mov	r0, r9
 8005d28:	f7ff fdb4 	bl	8005894 <err_to_errno>
 8005d2c:	7428      	strb	r0, [r5, #16]
 8005d2e:	b108      	cbz	r0, 8005d34 <lwip_accept+0x188>
 8005d30:	4b09      	ldr	r3, [pc, #36]	; (8005d58 <lwip_accept+0x1ac>)
 8005d32:	6018      	str	r0, [r3, #0]
      return -1;
 8005d34:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8005d38:	e7d2      	b.n	8005ce0 <lwip_accept+0x134>
    LWIP_ASSERT("addr valid but addrlen NULL", addrlen != NULL);
 8005d3a:	4b09      	ldr	r3, [pc, #36]	; (8005d60 <lwip_accept+0x1b4>)
 8005d3c:	f240 2219 	movw	r2, #537	; 0x219
 8005d40:	490d      	ldr	r1, [pc, #52]	; (8005d78 <lwip_accept+0x1cc>)
 8005d42:	4809      	ldr	r0, [pc, #36]	; (8005d68 <lwip_accept+0x1bc>)
 8005d44:	f007 ff41 	bl	800dbca <iprintf>
 8005d48:	e7ac      	b.n	8005ca4 <lwip_accept+0xf8>
    return -1;
 8005d4a:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8005d4e:	e7c7      	b.n	8005ce0 <lwip_accept+0x134>
    return -1;
 8005d50:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8005d54:	e7c4      	b.n	8005ce0 <lwip_accept+0x134>
 8005d56:	bf00      	nop
 8005d58:	20007998 	.word	0x20007998
 8005d5c:	08005a15 	.word	0x08005a15
 8005d60:	0800eb48 	.word	0x0800eb48
 8005d64:	0800eaac 	.word	0x0800eaac
 8005d68:	0800e3b0 	.word	0x0800e3b0
 8005d6c:	20003de4 	.word	0x20003de4
 8005d70:	0800ea84 	.word	0x0800ea84
 8005d74:	0800ea94 	.word	0x0800ea94
 8005d78:	0800ead0 	.word	0x0800ead0

08005d7c <lwip_bind>:
{
 8005d7c:	b570      	push	{r4, r5, r6, lr}
 8005d7e:	b082      	sub	sp, #8
 8005d80:	460e      	mov	r6, r1
 8005d82:	4615      	mov	r5, r2
  sock = get_socket(s);
 8005d84:	f7ff fdea 	bl	800595c <get_socket>
  if (!sock) {
 8005d88:	2800      	cmp	r0, #0
 8005d8a:	d034      	beq.n	8005df6 <lwip_bind+0x7a>
 8005d8c:	4604      	mov	r4, r0
  LWIP_ERROR("lwip_bind: invalid address", (IS_SOCK_ADDR_LEN_VALID(namelen) &&
 8005d8e:	2d10      	cmp	r5, #16
 8005d90:	d012      	beq.n	8005db8 <lwip_bind+0x3c>
 8005d92:	4b1d      	ldr	r3, [pc, #116]	; (8005e08 <lwip_bind+0x8c>)
 8005d94:	f240 2242 	movw	r2, #578	; 0x242
 8005d98:	491c      	ldr	r1, [pc, #112]	; (8005e0c <lwip_bind+0x90>)
 8005d9a:	481d      	ldr	r0, [pc, #116]	; (8005e10 <lwip_bind+0x94>)
 8005d9c:	f007 ff15 	bl	800dbca <iprintf>
 8005da0:	f06f 000f 	mvn.w	r0, #15
 8005da4:	f7ff fd76 	bl	8005894 <err_to_errno>
 8005da8:	7420      	strb	r0, [r4, #16]
 8005daa:	b338      	cbz	r0, 8005dfc <lwip_bind+0x80>
 8005dac:	4b19      	ldr	r3, [pc, #100]	; (8005e14 <lwip_bind+0x98>)
 8005dae:	6018      	str	r0, [r3, #0]
 8005db0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
 8005db4:	b002      	add	sp, #8
 8005db6:	bd70      	pop	{r4, r5, r6, pc}
  LWIP_ERROR("lwip_bind: invalid address", (IS_SOCK_ADDR_LEN_VALID(namelen) &&
 8005db8:	7873      	ldrb	r3, [r6, #1]
 8005dba:	2b02      	cmp	r3, #2
 8005dbc:	d1e9      	bne.n	8005d92 <lwip_bind+0x16>
 8005dbe:	f016 0f03 	tst.w	r6, #3
 8005dc2:	d1e6      	bne.n	8005d92 <lwip_bind+0x16>
  SOCKADDR_TO_IPADDR_PORT(name, &local_addr, local_port);
 8005dc4:	6873      	ldr	r3, [r6, #4]
 8005dc6:	ad02      	add	r5, sp, #8
 8005dc8:	f845 3d04 	str.w	r3, [r5, #-4]!
 8005dcc:	8870      	ldrh	r0, [r6, #2]
 8005dce:	f000 fc1d 	bl	800660c <lwip_htons>
  err = netconn_bind(sock->conn, &local_addr, local_port);
 8005dd2:	4602      	mov	r2, r0
 8005dd4:	4629      	mov	r1, r5
 8005dd6:	6820      	ldr	r0, [r4, #0]
 8005dd8:	f7fe fb3c 	bl	8004454 <netconn_bind>
  if (err != ERR_OK) {
 8005ddc:	b910      	cbnz	r0, 8005de4 <lwip_bind+0x68>
  sock_set_errno(sock, 0);
 8005dde:	2000      	movs	r0, #0
 8005de0:	7420      	strb	r0, [r4, #16]
  return 0;
 8005de2:	e7e7      	b.n	8005db4 <lwip_bind+0x38>
    sock_set_errno(sock, err_to_errno(err));
 8005de4:	f7ff fd56 	bl	8005894 <err_to_errno>
 8005de8:	7420      	strb	r0, [r4, #16]
 8005dea:	b150      	cbz	r0, 8005e02 <lwip_bind+0x86>
 8005dec:	4b09      	ldr	r3, [pc, #36]	; (8005e14 <lwip_bind+0x98>)
 8005dee:	6018      	str	r0, [r3, #0]
    return -1;
 8005df0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005df4:	e7de      	b.n	8005db4 <lwip_bind+0x38>
    return -1;
 8005df6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005dfa:	e7db      	b.n	8005db4 <lwip_bind+0x38>
  LWIP_ERROR("lwip_bind: invalid address", (IS_SOCK_ADDR_LEN_VALID(namelen) &&
 8005dfc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005e00:	e7d8      	b.n	8005db4 <lwip_bind+0x38>
    return -1;
 8005e02:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005e06:	e7d5      	b.n	8005db4 <lwip_bind+0x38>
 8005e08:	0800eb48 	.word	0x0800eb48
 8005e0c:	0800eaec 	.word	0x0800eaec
 8005e10:	0800e3b0 	.word	0x0800e3b0
 8005e14:	20007998 	.word	0x20007998

08005e18 <lwip_close>:
{
 8005e18:	b538      	push	{r3, r4, r5, lr}
  sock = get_socket(s);
 8005e1a:	f7ff fd9f 	bl	800595c <get_socket>
  if (!sock) {
 8005e1e:	b348      	cbz	r0, 8005e74 <lwip_close+0x5c>
 8005e20:	4605      	mov	r5, r0
  if (sock->conn != NULL) {
 8005e22:	6803      	ldr	r3, [r0, #0]
 8005e24:	b19b      	cbz	r3, 8005e4e <lwip_close+0x36>
    is_tcp = NETCONNTYPE_GROUP(netconn_type(sock->conn)) == NETCONN_TCP;
 8005e26:	7819      	ldrb	r1, [r3, #0]
 8005e28:	f001 01f0 	and.w	r1, r1, #240	; 0xf0
 8005e2c:	2910      	cmp	r1, #16
 8005e2e:	bf14      	ite	ne
 8005e30:	2400      	movne	r4, #0
 8005e32:	2401      	moveq	r4, #1
  err = netconn_delete(sock->conn);
 8005e34:	6828      	ldr	r0, [r5, #0]
 8005e36:	f7fe fabb 	bl	80043b0 <netconn_delete>
  if (err != ERR_OK) {
 8005e3a:	b1a8      	cbz	r0, 8005e68 <lwip_close+0x50>
    sock_set_errno(sock, err_to_errno(err));
 8005e3c:	f7ff fd2a 	bl	8005894 <err_to_errno>
 8005e40:	7428      	strb	r0, [r5, #16]
 8005e42:	b1d0      	cbz	r0, 8005e7a <lwip_close+0x62>
 8005e44:	4b0e      	ldr	r3, [pc, #56]	; (8005e80 <lwip_close+0x68>)
 8005e46:	6018      	str	r0, [r3, #0]
    return -1;
 8005e48:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005e4c:	bd38      	pop	{r3, r4, r5, pc}
    LWIP_ASSERT("sock->lastdata == NULL", sock->lastdata == NULL);
 8005e4e:	6843      	ldr	r3, [r0, #4]
 8005e50:	b143      	cbz	r3, 8005e64 <lwip_close+0x4c>
 8005e52:	4b0c      	ldr	r3, [pc, #48]	; (8005e84 <lwip_close+0x6c>)
 8005e54:	f44f 721c 	mov.w	r2, #624	; 0x270
 8005e58:	490b      	ldr	r1, [pc, #44]	; (8005e88 <lwip_close+0x70>)
 8005e5a:	480c      	ldr	r0, [pc, #48]	; (8005e8c <lwip_close+0x74>)
 8005e5c:	f007 feb5 	bl	800dbca <iprintf>
  int is_tcp = 0;
 8005e60:	2400      	movs	r4, #0
 8005e62:	e7e7      	b.n	8005e34 <lwip_close+0x1c>
 8005e64:	2400      	movs	r4, #0
 8005e66:	e7e5      	b.n	8005e34 <lwip_close+0x1c>
  free_socket(sock, is_tcp);
 8005e68:	4621      	mov	r1, r4
 8005e6a:	4628      	mov	r0, r5
 8005e6c:	f7ff fe86 	bl	8005b7c <free_socket>
  return 0;
 8005e70:	2000      	movs	r0, #0
 8005e72:	bd38      	pop	{r3, r4, r5, pc}
    return -1;
 8005e74:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005e78:	bd38      	pop	{r3, r4, r5, pc}
    return -1;
 8005e7a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
 8005e7e:	bd38      	pop	{r3, r4, r5, pc}
 8005e80:	20007998 	.word	0x20007998
 8005e84:	0800eb48 	.word	0x0800eb48
 8005e88:	0800eb08 	.word	0x0800eb08
 8005e8c:	0800e3b0 	.word	0x0800e3b0

08005e90 <lwip_listen>:
{
 8005e90:	b538      	push	{r3, r4, r5, lr}
 8005e92:	460c      	mov	r4, r1
  sock = get_socket(s);
 8005e94:	f7ff fd62 	bl	800595c <get_socket>
  if (!sock) {
 8005e98:	b320      	cbz	r0, 8005ee4 <lwip_listen+0x54>
 8005e9a:	4605      	mov	r5, r0
  backlog = LWIP_MIN(LWIP_MAX(backlog, 0), 0xff);
 8005e9c:	2cfe      	cmp	r4, #254	; 0xfe
 8005e9e:	dc15      	bgt.n	8005ecc <lwip_listen+0x3c>
 8005ea0:	ea24 71e4 	bic.w	r1, r4, r4, asr #31
  err = netconn_listen_with_backlog(sock->conn, (u8_t)backlog);
 8005ea4:	b2c9      	uxtb	r1, r1
 8005ea6:	6828      	ldr	r0, [r5, #0]
 8005ea8:	f7fe fafa 	bl	80044a0 <netconn_listen_with_backlog>
  if (err != ERR_OK) {
 8005eac:	b1b8      	cbz	r0, 8005ede <lwip_listen+0x4e>
    if (NETCONNTYPE_GROUP(netconn_type(sock->conn)) != NETCONN_TCP) {
 8005eae:	682b      	ldr	r3, [r5, #0]
 8005eb0:	781b      	ldrb	r3, [r3, #0]
 8005eb2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005eb6:	2b10      	cmp	r3, #16
 8005eb8:	d10a      	bne.n	8005ed0 <lwip_listen+0x40>
    sock_set_errno(sock, err_to_errno(err));
 8005eba:	f7ff fceb 	bl	8005894 <err_to_errno>
 8005ebe:	7428      	strb	r0, [r5, #16]
 8005ec0:	b198      	cbz	r0, 8005eea <lwip_listen+0x5a>
 8005ec2:	4b0b      	ldr	r3, [pc, #44]	; (8005ef0 <lwip_listen+0x60>)
 8005ec4:	6018      	str	r0, [r3, #0]
    return -1;
 8005ec6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005eca:	bd38      	pop	{r3, r4, r5, pc}
  backlog = LWIP_MIN(LWIP_MAX(backlog, 0), 0xff);
 8005ecc:	21ff      	movs	r1, #255	; 0xff
 8005ece:	e7e9      	b.n	8005ea4 <lwip_listen+0x14>
      sock_set_errno(sock, EOPNOTSUPP);
 8005ed0:	235f      	movs	r3, #95	; 0x5f
 8005ed2:	742b      	strb	r3, [r5, #16]
 8005ed4:	4a06      	ldr	r2, [pc, #24]	; (8005ef0 <lwip_listen+0x60>)
 8005ed6:	6013      	str	r3, [r2, #0]
      return -1;
 8005ed8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005edc:	bd38      	pop	{r3, r4, r5, pc}
  sock_set_errno(sock, 0);
 8005ede:	2000      	movs	r0, #0
 8005ee0:	7428      	strb	r0, [r5, #16]
  return 0;
 8005ee2:	bd38      	pop	{r3, r4, r5, pc}
    return -1;
 8005ee4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005ee8:	bd38      	pop	{r3, r4, r5, pc}
    return -1;
 8005eea:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
 8005eee:	bd38      	pop	{r3, r4, r5, pc}
 8005ef0:	20007998 	.word	0x20007998

08005ef4 <lwip_recvfrom>:
{
 8005ef4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005ef8:	b08d      	sub	sp, #52	; 0x34
 8005efa:	9103      	str	r1, [sp, #12]
 8005efc:	4690      	mov	r8, r2
 8005efe:	469b      	mov	fp, r3
  void             *buf = NULL;
 8005f00:	2300      	movs	r3, #0
 8005f02:	930b      	str	r3, [sp, #44]	; 0x2c
  sock = get_socket(s);
 8005f04:	f7ff fd2a 	bl	800595c <get_socket>
  if (!sock) {
 8005f08:	2800      	cmp	r0, #0
 8005f0a:	f000 810f 	beq.w	800612c <lwip_recvfrom+0x238>
 8005f0e:	4606      	mov	r6, r0
 8005f10:	2500      	movs	r5, #0
 8005f12:	46aa      	mov	sl, r5
 8005f14:	46d9      	mov	r9, fp
 8005f16:	46ab      	mov	fp, r5
 8005f18:	e091      	b.n	800603e <lwip_recvfrom+0x14a>
      if (((flags & MSG_DONTWAIT) || netconn_is_nonblocking(sock->conn)) &&
 8005f1a:	f019 0f08 	tst.w	r9, #8
 8005f1e:	d104      	bne.n	8005f2a <lwip_recvfrom+0x36>
 8005f20:	6833      	ldr	r3, [r6, #0]
 8005f22:	7f1b      	ldrb	r3, [r3, #28]
 8005f24:	f013 0f02 	tst.w	r3, #2
 8005f28:	d003      	beq.n	8005f32 <lwip_recvfrom+0x3e>
          (sock->rcvevent <= 0)) {
 8005f2a:	f9b6 300a 	ldrsh.w	r3, [r6, #10]
      if (((flags & MSG_DONTWAIT) || netconn_is_nonblocking(sock->conn)) &&
 8005f2e:	2b00      	cmp	r3, #0
 8005f30:	dd0e      	ble.n	8005f50 <lwip_recvfrom+0x5c>
      if (NETCONNTYPE_GROUP(netconn_type(sock->conn)) == NETCONN_TCP) {
 8005f32:	6830      	ldr	r0, [r6, #0]
 8005f34:	7803      	ldrb	r3, [r0, #0]
 8005f36:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005f3a:	2b10      	cmp	r3, #16
 8005f3c:	d014      	beq.n	8005f68 <lwip_recvfrom+0x74>
        err = netconn_recv(sock->conn, (struct netbuf **)&buf);
 8005f3e:	a90b      	add	r1, sp, #44	; 0x2c
 8005f40:	f7fe fb42 	bl	80045c8 <netconn_recv>
      if (err != ERR_OK) {
 8005f44:	b9a0      	cbnz	r0, 8005f70 <lwip_recvfrom+0x7c>
      LWIP_ASSERT("buf != NULL", buf != NULL);
 8005f46:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005f48:	b37b      	cbz	r3, 8005faa <lwip_recvfrom+0xb6>
      sock->lastdata = buf;
 8005f4a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005f4c:	6073      	str	r3, [r6, #4]
 8005f4e:	e07b      	b.n	8006048 <lwip_recvfrom+0x154>
        if (off > 0) {
 8005f50:	f1ba 0f00 	cmp.w	sl, #0
 8005f54:	dd02      	ble.n	8005f5c <lwip_recvfrom+0x68>
          sock_set_errno(sock, 0);
 8005f56:	2300      	movs	r3, #0
 8005f58:	7433      	strb	r3, [r6, #16]
          return off;
 8005f5a:	e0e3      	b.n	8006124 <lwip_recvfrom+0x230>
        set_errno(EWOULDBLOCK);
 8005f5c:	220b      	movs	r2, #11
 8005f5e:	4b76      	ldr	r3, [pc, #472]	; (8006138 <lwip_recvfrom+0x244>)
 8005f60:	601a      	str	r2, [r3, #0]
        return -1;
 8005f62:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 8005f66:	e0dd      	b.n	8006124 <lwip_recvfrom+0x230>
        err = netconn_recv_tcp_pbuf(sock->conn, (struct pbuf **)&buf);
 8005f68:	a90b      	add	r1, sp, #44	; 0x2c
 8005f6a:	f7fe fb13 	bl	8004594 <netconn_recv_tcp_pbuf>
 8005f6e:	e7e9      	b.n	8005f44 <lwip_recvfrom+0x50>
 8005f70:	4604      	mov	r4, r0
        if (off > 0) {
 8005f72:	f1ba 0f00 	cmp.w	sl, #0
 8005f76:	dd0b      	ble.n	8005f90 <lwip_recvfrom+0x9c>
          if (err == ERR_CLSD) {
 8005f78:	f110 0f0f 	cmn.w	r0, #15
 8005f7c:	d002      	beq.n	8005f84 <lwip_recvfrom+0x90>
          sock_set_errno(sock, 0);
 8005f7e:	2300      	movs	r3, #0
 8005f80:	7433      	strb	r3, [r6, #16]
          return off;
 8005f82:	e0cf      	b.n	8006124 <lwip_recvfrom+0x230>
            event_callback(sock->conn, NETCONN_EVT_RCVPLUS, 0);
 8005f84:	2200      	movs	r2, #0
 8005f86:	4611      	mov	r1, r2
 8005f88:	6830      	ldr	r0, [r6, #0]
 8005f8a:	f7ff fd43 	bl	8005a14 <event_callback>
 8005f8e:	e7f6      	b.n	8005f7e <lwip_recvfrom+0x8a>
        sock_set_errno(sock, err_to_errno(err));
 8005f90:	f7ff fc80 	bl	8005894 <err_to_errno>
 8005f94:	7430      	strb	r0, [r6, #16]
 8005f96:	b108      	cbz	r0, 8005f9c <lwip_recvfrom+0xa8>
 8005f98:	4b67      	ldr	r3, [pc, #412]	; (8006138 <lwip_recvfrom+0x244>)
 8005f9a:	6018      	str	r0, [r3, #0]
        if (err == ERR_CLSD) {
 8005f9c:	f114 0f0f 	cmn.w	r4, #15
 8005fa0:	f040 80c7 	bne.w	8006132 <lwip_recvfrom+0x23e>
          return 0;
 8005fa4:	f04f 0a00 	mov.w	sl, #0
 8005fa8:	e0bc      	b.n	8006124 <lwip_recvfrom+0x230>
      LWIP_ASSERT("buf != NULL", buf != NULL);
 8005faa:	4b64      	ldr	r3, [pc, #400]	; (800613c <lwip_recvfrom+0x248>)
 8005fac:	f240 3227 	movw	r2, #807	; 0x327
 8005fb0:	4963      	ldr	r1, [pc, #396]	; (8006140 <lwip_recvfrom+0x24c>)
 8005fb2:	4864      	ldr	r0, [pc, #400]	; (8006144 <lwip_recvfrom+0x250>)
 8005fb4:	f007 fe09 	bl	800dbca <iprintf>
 8005fb8:	e7c7      	b.n	8005f4a <lwip_recvfrom+0x56>
      p = (struct pbuf *)buf;
 8005fba:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8005fbc:	e04c      	b.n	8006058 <lwip_recvfrom+0x164>
      copylen = buflen;
 8005fbe:	4627      	mov	r7, r4
 8005fc0:	e052      	b.n	8006068 <lwip_recvfrom+0x174>
      LWIP_ASSERT("invalid copylen, len would underflow", len >= copylen);
 8005fc2:	4b5e      	ldr	r3, [pc, #376]	; (800613c <lwip_recvfrom+0x248>)
 8005fc4:	f240 3243 	movw	r2, #835	; 0x343
 8005fc8:	495f      	ldr	r1, [pc, #380]	; (8006148 <lwip_recvfrom+0x254>)
 8005fca:	485e      	ldr	r0, [pc, #376]	; (8006144 <lwip_recvfrom+0x250>)
 8005fcc:	f007 fdfd 	bl	800dbca <iprintf>
 8005fd0:	e05b      	b.n	800608a <lwip_recvfrom+0x196>
      done = 1;
 8005fd2:	f04f 0b01 	mov.w	fp, #1
 8005fd6:	e067      	b.n	80060a8 <lwip_recvfrom+0x1b4>
        done = 1;
 8005fd8:	f04f 0b01 	mov.w	fp, #1
 8005fdc:	e064      	b.n	80060a8 <lwip_recvfrom+0x1b4>
 8005fde:	f04f 0b01 	mov.w	fp, #1
 8005fe2:	e061      	b.n	80060a8 <lwip_recvfrom+0x1b4>
 8005fe4:	f04f 0b01 	mov.w	fp, #1
 8005fe8:	e05e      	b.n	80060a8 <lwip_recvfrom+0x1b4>
 8005fea:	f04f 0b01 	mov.w	fp, #1
 8005fee:	e05b      	b.n	80060a8 <lwip_recvfrom+0x1b4>
          netconn_getaddr(sock->conn, fromaddr, &port, 0);
 8005ff0:	2300      	movs	r3, #0
 8005ff2:	f10d 0216 	add.w	r2, sp, #22
 8005ff6:	a906      	add	r1, sp, #24
 8005ff8:	f7fe f9f4 	bl	80043e4 <netconn_getaddr>
          fromaddr = &tmpaddr;
 8005ffc:	ad06      	add	r5, sp, #24
 8005ffe:	e067      	b.n	80060d0 <lwip_recvfrom+0x1dc>
          MEMCPY(from, &saddr, *fromlen);
 8006000:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8006002:	681a      	ldr	r2, [r3, #0]
 8006004:	a907      	add	r1, sp, #28
 8006006:	9816      	ldr	r0, [sp, #88]	; 0x58
 8006008:	f007 ff4b 	bl	800dea2 <memcpy>
    if ((flags & MSG_PEEK) == 0) {
 800600c:	f019 0f01 	tst.w	r9, #1
 8006010:	d112      	bne.n	8006038 <lwip_recvfrom+0x144>
      if ((NETCONNTYPE_GROUP(netconn_type(sock->conn)) == NETCONN_TCP) && (buflen - copylen > 0)) {
 8006012:	6832      	ldr	r2, [r6, #0]
 8006014:	7813      	ldrb	r3, [r2, #0]
 8006016:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800601a:	2b10      	cmp	r3, #16
 800601c:	d072      	beq.n	8006104 <lwip_recvfrom+0x210>
        sock->lastdata = NULL;
 800601e:	2300      	movs	r3, #0
 8006020:	6073      	str	r3, [r6, #4]
        sock->lastoffset = 0;
 8006022:	8133      	strh	r3, [r6, #8]
        if (NETCONNTYPE_GROUP(netconn_type(sock->conn)) == NETCONN_TCP) {
 8006024:	7813      	ldrb	r3, [r2, #0]
 8006026:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800602a:	2b10      	cmp	r3, #16
 800602c:	d074      	beq.n	8006118 <lwip_recvfrom+0x224>
          netbuf_delete((struct netbuf *)buf);
 800602e:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8006030:	f7ff fc40 	bl	80058b4 <netbuf_delete>
        buf = NULL;
 8006034:	2300      	movs	r3, #0
 8006036:	930b      	str	r3, [sp, #44]	; 0x2c
  } while (!done);
 8006038:	f1bb 0f00 	cmp.w	fp, #0
 800603c:	d170      	bne.n	8006120 <lwip_recvfrom+0x22c>
    if (sock->lastdata) {
 800603e:	6873      	ldr	r3, [r6, #4]
 8006040:	2b00      	cmp	r3, #0
 8006042:	f43f af6a 	beq.w	8005f1a <lwip_recvfrom+0x26>
      buf = sock->lastdata;
 8006046:	930b      	str	r3, [sp, #44]	; 0x2c
    if (NETCONNTYPE_GROUP(netconn_type(sock->conn)) == NETCONN_TCP) {
 8006048:	6833      	ldr	r3, [r6, #0]
 800604a:	781b      	ldrb	r3, [r3, #0]
 800604c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006050:	2b10      	cmp	r3, #16
 8006052:	d0b2      	beq.n	8005fba <lwip_recvfrom+0xc6>
      p = ((struct netbuf *)buf)->p;
 8006054:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006056:	681d      	ldr	r5, [r3, #0]
    buflen = p->tot_len;
 8006058:	892c      	ldrh	r4, [r5, #8]
    buflen -= sock->lastoffset;
 800605a:	8933      	ldrh	r3, [r6, #8]
 800605c:	1ae4      	subs	r4, r4, r3
 800605e:	b2a4      	uxth	r4, r4
    if (len > buflen) {
 8006060:	45a0      	cmp	r8, r4
 8006062:	d8ac      	bhi.n	8005fbe <lwip_recvfrom+0xca>
      copylen = (u16_t)len;
 8006064:	fa1f f788 	uxth.w	r7, r8
    pbuf_copy_partial(p, (u8_t*)mem + off, copylen, sock->lastoffset);
 8006068:	463a      	mov	r2, r7
 800606a:	9903      	ldr	r1, [sp, #12]
 800606c:	4451      	add	r1, sl
 800606e:	4628      	mov	r0, r5
 8006070:	f002 fdb2 	bl	8008bd8 <pbuf_copy_partial>
    off += copylen;
 8006074:	9702      	str	r7, [sp, #8]
 8006076:	44ba      	add	sl, r7
    if (NETCONNTYPE_GROUP(netconn_type(sock->conn)) == NETCONN_TCP) {
 8006078:	6833      	ldr	r3, [r6, #0]
 800607a:	781b      	ldrb	r3, [r3, #0]
 800607c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006080:	2b10      	cmp	r3, #16
 8006082:	d1a6      	bne.n	8005fd2 <lwip_recvfrom+0xde>
      LWIP_ASSERT("invalid copylen, len would underflow", len >= copylen);
 8006084:	9701      	str	r7, [sp, #4]
 8006086:	45b8      	cmp	r8, r7
 8006088:	d39b      	bcc.n	8005fc2 <lwip_recvfrom+0xce>
      if ((len <= 0) ||
 800608a:	9b01      	ldr	r3, [sp, #4]
 800608c:	ebb8 0803 	subs.w	r8, r8, r3
 8006090:	d0a2      	beq.n	8005fd8 <lwip_recvfrom+0xe4>
          (p->flags & PBUF_FLAG_PUSH) ||
 8006092:	7b6b      	ldrb	r3, [r5, #13]
      if ((len <= 0) ||
 8006094:	f013 0f01 	tst.w	r3, #1
 8006098:	d1a1      	bne.n	8005fde <lwip_recvfrom+0xea>
          (sock->rcvevent <= 0) ||
 800609a:	f9b6 300a 	ldrsh.w	r3, [r6, #10]
          (p->flags & PBUF_FLAG_PUSH) ||
 800609e:	2b00      	cmp	r3, #0
 80060a0:	dda0      	ble.n	8005fe4 <lwip_recvfrom+0xf0>
          (sock->rcvevent <= 0) ||
 80060a2:	f019 0f01 	tst.w	r9, #1
 80060a6:	d1a0      	bne.n	8005fea <lwip_recvfrom+0xf6>
    if (done) {
 80060a8:	f1bb 0f00 	cmp.w	fp, #0
 80060ac:	d0ae      	beq.n	800600c <lwip_recvfrom+0x118>
      if (from && fromlen)
 80060ae:	9b16      	ldr	r3, [sp, #88]	; 0x58
 80060b0:	2b00      	cmp	r3, #0
 80060b2:	d0ab      	beq.n	800600c <lwip_recvfrom+0x118>
 80060b4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80060b6:	2b00      	cmp	r3, #0
 80060b8:	d0a8      	beq.n	800600c <lwip_recvfrom+0x118>
        if (NETCONNTYPE_GROUP(netconn_type(sock->conn)) == NETCONN_TCP) {
 80060ba:	6830      	ldr	r0, [r6, #0]
 80060bc:	7803      	ldrb	r3, [r0, #0]
 80060be:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80060c2:	2b10      	cmp	r3, #16
 80060c4:	d094      	beq.n	8005ff0 <lwip_recvfrom+0xfc>
          port = netbuf_fromport((struct netbuf *)buf);
 80060c6:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 80060c8:	89ab      	ldrh	r3, [r5, #12]
 80060ca:	f8ad 3016 	strh.w	r3, [sp, #22]
          fromaddr = netbuf_fromaddr((struct netbuf *)buf);
 80060ce:	3508      	adds	r5, #8
        IPADDR_PORT_TO_SOCKADDR(&saddr, fromaddr, port);
 80060d0:	2310      	movs	r3, #16
 80060d2:	f88d 301c 	strb.w	r3, [sp, #28]
 80060d6:	2302      	movs	r3, #2
 80060d8:	f88d 301d 	strb.w	r3, [sp, #29]
 80060dc:	f8bd 0016 	ldrh.w	r0, [sp, #22]
 80060e0:	f000 fa94 	bl	800660c <lwip_htons>
 80060e4:	f8ad 001e 	strh.w	r0, [sp, #30]
 80060e8:	682b      	ldr	r3, [r5, #0]
 80060ea:	9308      	str	r3, [sp, #32]
 80060ec:	2300      	movs	r3, #0
 80060ee:	9309      	str	r3, [sp, #36]	; 0x24
 80060f0:	930a      	str	r3, [sp, #40]	; 0x28
          if (*fromlen > saddr.sa.sa_len) {
 80060f2:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80060f4:	681a      	ldr	r2, [r3, #0]
 80060f6:	f89d 301c 	ldrb.w	r3, [sp, #28]
 80060fa:	429a      	cmp	r2, r3
 80060fc:	d980      	bls.n	8006000 <lwip_recvfrom+0x10c>
            *fromlen = saddr.sa.sa_len;
 80060fe:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8006100:	6013      	str	r3, [r2, #0]
 8006102:	e77d      	b.n	8006000 <lwip_recvfrom+0x10c>
      if ((NETCONNTYPE_GROUP(netconn_type(sock->conn)) == NETCONN_TCP) && (buflen - copylen > 0)) {
 8006104:	9b02      	ldr	r3, [sp, #8]
 8006106:	1ae4      	subs	r4, r4, r3
 8006108:	2c00      	cmp	r4, #0
 800610a:	dd88      	ble.n	800601e <lwip_recvfrom+0x12a>
        sock->lastdata = buf;
 800610c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800610e:	6073      	str	r3, [r6, #4]
        sock->lastoffset += copylen;
 8006110:	8933      	ldrh	r3, [r6, #8]
 8006112:	441f      	add	r7, r3
 8006114:	8137      	strh	r7, [r6, #8]
 8006116:	e78f      	b.n	8006038 <lwip_recvfrom+0x144>
          pbuf_free((struct pbuf *)buf);
 8006118:	980b      	ldr	r0, [sp, #44]	; 0x2c
 800611a:	f002 fa93 	bl	8008644 <pbuf_free>
 800611e:	e789      	b.n	8006034 <lwip_recvfrom+0x140>
  sock_set_errno(sock, 0);
 8006120:	2300      	movs	r3, #0
 8006122:	7433      	strb	r3, [r6, #16]
}
 8006124:	4650      	mov	r0, sl
 8006126:	b00d      	add	sp, #52	; 0x34
 8006128:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    return -1;
 800612c:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 8006130:	e7f8      	b.n	8006124 <lwip_recvfrom+0x230>
          return -1;
 8006132:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 8006136:	e7f5      	b.n	8006124 <lwip_recvfrom+0x230>
 8006138:	20007998 	.word	0x20007998
 800613c:	0800eb48 	.word	0x0800eb48
 8006140:	0800e530 	.word	0x0800e530
 8006144:	0800e3b0 	.word	0x0800e3b0
 8006148:	0800eb20 	.word	0x0800eb20

0800614c <lwip_recv>:
{
 800614c:	b510      	push	{r4, lr}
 800614e:	b082      	sub	sp, #8
  return lwip_recvfrom(s, mem, len, flags, NULL, NULL);
 8006150:	2400      	movs	r4, #0
 8006152:	9401      	str	r4, [sp, #4]
 8006154:	9400      	str	r4, [sp, #0]
 8006156:	f7ff fecd 	bl	8005ef4 <lwip_recvfrom>
}
 800615a:	b002      	add	sp, #8
 800615c:	bd10      	pop	{r4, pc}
	...

08006160 <lwip_sendto>:
{
 8006160:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8006164:	b085      	sub	sp, #20
 8006166:	4680      	mov	r8, r0
 8006168:	460f      	mov	r7, r1
 800616a:	4614      	mov	r4, r2
 800616c:	4699      	mov	r9, r3
 800616e:	9e0c      	ldr	r6, [sp, #48]	; 0x30
  sock = get_socket(s);
 8006170:	f7ff fbf4 	bl	800595c <get_socket>
  if (!sock) {
 8006174:	2800      	cmp	r0, #0
 8006176:	d063      	beq.n	8006240 <lwip_sendto+0xe0>
 8006178:	4605      	mov	r5, r0
  if (NETCONNTYPE_GROUP(netconn_type(sock->conn)) == NETCONN_TCP) {
 800617a:	6803      	ldr	r3, [r0, #0]
 800617c:	781b      	ldrb	r3, [r3, #0]
 800617e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006182:	2b10      	cmp	r3, #16
 8006184:	d01b      	beq.n	80061be <lwip_sendto+0x5e>
  LWIP_ASSERT("lwip_sendto: size must fit in u16_t", size <= 0xffff);
 8006186:	f5b4 3f80 	cmp.w	r4, #65536	; 0x10000
 800618a:	d21f      	bcs.n	80061cc <lwip_sendto+0x6c>
  short_size = (u16_t)size;
 800618c:	fa1f f884 	uxth.w	r8, r4
  LWIP_ERROR("lwip_sendto: invalid address", (((to == NULL) && (tolen == 0)) ||
 8006190:	b326      	cbz	r6, 80061dc <lwip_sendto+0x7c>
 8006192:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006194:	2b10      	cmp	r3, #16
 8006196:	d043      	beq.n	8006220 <lwip_sendto+0xc0>
 8006198:	4b2f      	ldr	r3, [pc, #188]	; (8006258 <lwip_sendto+0xf8>)
 800619a:	f44f 6290 	mov.w	r2, #1152	; 0x480
 800619e:	492f      	ldr	r1, [pc, #188]	; (800625c <lwip_sendto+0xfc>)
 80061a0:	482f      	ldr	r0, [pc, #188]	; (8006260 <lwip_sendto+0x100>)
 80061a2:	f007 fd12 	bl	800dbca <iprintf>
 80061a6:	f06f 000f 	mvn.w	r0, #15
 80061aa:	f7ff fb73 	bl	8005894 <err_to_errno>
 80061ae:	7428      	strb	r0, [r5, #16]
 80061b0:	2800      	cmp	r0, #0
 80061b2:	d048      	beq.n	8006246 <lwip_sendto+0xe6>
 80061b4:	4b2b      	ldr	r3, [pc, #172]	; (8006264 <lwip_sendto+0x104>)
 80061b6:	6018      	str	r0, [r3, #0]
 80061b8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80061bc:	e045      	b.n	800624a <lwip_sendto+0xea>
    return lwip_send(s, data, size, flags);
 80061be:	464b      	mov	r3, r9
 80061c0:	4622      	mov	r2, r4
 80061c2:	4639      	mov	r1, r7
 80061c4:	4640      	mov	r0, r8
 80061c6:	f000 f851 	bl	800626c <lwip_send>
 80061ca:	e03e      	b.n	800624a <lwip_sendto+0xea>
  LWIP_ASSERT("lwip_sendto: size must fit in u16_t", size <= 0xffff);
 80061cc:	4b22      	ldr	r3, [pc, #136]	; (8006258 <lwip_sendto+0xf8>)
 80061ce:	f240 427b 	movw	r2, #1147	; 0x47b
 80061d2:	4925      	ldr	r1, [pc, #148]	; (8006268 <lwip_sendto+0x108>)
 80061d4:	4822      	ldr	r0, [pc, #136]	; (8006260 <lwip_sendto+0x100>)
 80061d6:	f007 fcf8 	bl	800dbca <iprintf>
 80061da:	e7d7      	b.n	800618c <lwip_sendto+0x2c>
  LWIP_ERROR("lwip_sendto: invalid address", (((to == NULL) && (tolen == 0)) ||
 80061dc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80061de:	2b00      	cmp	r3, #0
 80061e0:	d1d7      	bne.n	8006192 <lwip_sendto+0x32>
  buf.p = buf.ptr = NULL;
 80061e2:	2300      	movs	r3, #0
 80061e4:	9301      	str	r3, [sp, #4]
 80061e6:	9300      	str	r3, [sp, #0]
  if (to) {
 80061e8:	b30e      	cbz	r6, 800622e <lwip_sendto+0xce>
    SOCKADDR_TO_IPADDR_PORT(to, &buf.addr, remote_port);
 80061ea:	6873      	ldr	r3, [r6, #4]
 80061ec:	9302      	str	r3, [sp, #8]
 80061ee:	8870      	ldrh	r0, [r6, #2]
 80061f0:	f000 fa0c 	bl	800660c <lwip_htons>
  netbuf_fromport(&buf) = remote_port;
 80061f4:	f8ad 000c 	strh.w	r0, [sp, #12]
  err = netbuf_ref(&buf, data, short_size);
 80061f8:	4642      	mov	r2, r8
 80061fa:	4639      	mov	r1, r7
 80061fc:	4668      	mov	r0, sp
 80061fe:	f7ff fb81 	bl	8005904 <netbuf_ref>
  if (err == ERR_OK) {
 8006202:	4606      	mov	r6, r0
 8006204:	b1b0      	cbz	r0, 8006234 <lwip_sendto+0xd4>
  netbuf_free(&buf);
 8006206:	4668      	mov	r0, sp
 8006208:	f7ff fb64 	bl	80058d4 <netbuf_free>
  sock_set_errno(sock, err_to_errno(err));
 800620c:	4630      	mov	r0, r6
 800620e:	f7ff fb41 	bl	8005894 <err_to_errno>
 8006212:	7428      	strb	r0, [r5, #16]
 8006214:	b108      	cbz	r0, 800621a <lwip_sendto+0xba>
 8006216:	4b13      	ldr	r3, [pc, #76]	; (8006264 <lwip_sendto+0x104>)
 8006218:	6018      	str	r0, [r3, #0]
  return (err == ERR_OK ? short_size : -1);
 800621a:	b9ce      	cbnz	r6, 8006250 <lwip_sendto+0xf0>
 800621c:	b2a0      	uxth	r0, r4
 800621e:	e014      	b.n	800624a <lwip_sendto+0xea>
  LWIP_ERROR("lwip_sendto: invalid address", (((to == NULL) && (tolen == 0)) ||
 8006220:	7873      	ldrb	r3, [r6, #1]
 8006222:	2b02      	cmp	r3, #2
 8006224:	d1b8      	bne.n	8006198 <lwip_sendto+0x38>
 8006226:	f016 0f03 	tst.w	r6, #3
 800622a:	d0da      	beq.n	80061e2 <lwip_sendto+0x82>
 800622c:	e7b4      	b.n	8006198 <lwip_sendto+0x38>
    ip_addr_set_any(NETCONNTYPE_ISIPV6(netconn_type(sock->conn)), &buf.addr);
 800622e:	2000      	movs	r0, #0
 8006230:	9002      	str	r0, [sp, #8]
 8006232:	e7df      	b.n	80061f4 <lwip_sendto+0x94>
    err = netconn_send(sock->conn, &buf);
 8006234:	4669      	mov	r1, sp
 8006236:	6828      	ldr	r0, [r5, #0]
 8006238:	f7fe fa20 	bl	800467c <netconn_send>
 800623c:	4606      	mov	r6, r0
 800623e:	e7e2      	b.n	8006206 <lwip_sendto+0xa6>
    return -1;
 8006240:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006244:	e001      	b.n	800624a <lwip_sendto+0xea>
  LWIP_ERROR("lwip_sendto: invalid address", (((to == NULL) && (tolen == 0)) ||
 8006246:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
 800624a:	b005      	add	sp, #20
 800624c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  return (err == ERR_OK ? short_size : -1);
 8006250:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006254:	e7f9      	b.n	800624a <lwip_sendto+0xea>
 8006256:	bf00      	nop
 8006258:	0800eb48 	.word	0x0800eb48
 800625c:	0800ebac 	.word	0x0800ebac
 8006260:	0800e3b0 	.word	0x0800e3b0
 8006264:	20007998 	.word	0x20007998
 8006268:	0800eb88 	.word	0x0800eb88

0800626c <lwip_send>:
{
 800626c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006270:	b084      	sub	sp, #16
 8006272:	4680      	mov	r8, r0
 8006274:	460e      	mov	r6, r1
 8006276:	4617      	mov	r7, r2
 8006278:	461d      	mov	r5, r3
  sock = get_socket(s);
 800627a:	f7ff fb6f 	bl	800595c <get_socket>
  if (!sock) {
 800627e:	b398      	cbz	r0, 80062e8 <lwip_send+0x7c>
 8006280:	4604      	mov	r4, r0
  if (NETCONNTYPE_GROUP(netconn_type(sock->conn)) != NETCONN_TCP) {
 8006282:	6803      	ldr	r3, [r0, #0]
 8006284:	781b      	ldrb	r3, [r3, #0]
 8006286:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800628a:	2b10      	cmp	r3, #16
 800628c:	d11e      	bne.n	80062cc <lwip_send+0x60>
    ((flags & MSG_MORE)     ? NETCONN_MORE      : 0) |
 800628e:	f015 0f10 	tst.w	r5, #16
 8006292:	d025      	beq.n	80062e0 <lwip_send+0x74>
 8006294:	2103      	movs	r1, #3
 8006296:	f015 0f08 	tst.w	r5, #8
 800629a:	d023      	beq.n	80062e4 <lwip_send+0x78>
 800629c:	2304      	movs	r3, #4
  written = 0;
 800629e:	aa04      	add	r2, sp, #16
 80062a0:	2000      	movs	r0, #0
 80062a2:	f842 0d04 	str.w	r0, [r2, #-4]!
  err = netconn_write_partly(sock->conn, data, size, write_flags, &written);
 80062a6:	6820      	ldr	r0, [r4, #0]
 80062a8:	9200      	str	r2, [sp, #0]
 80062aa:	430b      	orrs	r3, r1
 80062ac:	463a      	mov	r2, r7
 80062ae:	4631      	mov	r1, r6
 80062b0:	f7fe fa02 	bl	80046b8 <netconn_write_partly>
 80062b4:	4605      	mov	r5, r0
  sock_set_errno(sock, err_to_errno(err));
 80062b6:	f7ff faed 	bl	8005894 <err_to_errno>
 80062ba:	7420      	strb	r0, [r4, #16]
 80062bc:	b108      	cbz	r0, 80062c2 <lwip_send+0x56>
 80062be:	4b0d      	ldr	r3, [pc, #52]	; (80062f4 <lwip_send+0x88>)
 80062c0:	6018      	str	r0, [r3, #0]
  return (err == ERR_OK ? (int)written : -1);
 80062c2:	b9a5      	cbnz	r5, 80062ee <lwip_send+0x82>
 80062c4:	9803      	ldr	r0, [sp, #12]
}
 80062c6:	b004      	add	sp, #16
 80062c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return lwip_sendto(s, data, size, flags, NULL, 0);
 80062cc:	2300      	movs	r3, #0
 80062ce:	9301      	str	r3, [sp, #4]
 80062d0:	9300      	str	r3, [sp, #0]
 80062d2:	462b      	mov	r3, r5
 80062d4:	463a      	mov	r2, r7
 80062d6:	4631      	mov	r1, r6
 80062d8:	4640      	mov	r0, r8
 80062da:	f7ff ff41 	bl	8006160 <lwip_sendto>
 80062de:	e7f2      	b.n	80062c6 <lwip_send+0x5a>
    ((flags & MSG_MORE)     ? NETCONN_MORE      : 0) |
 80062e0:	2101      	movs	r1, #1
 80062e2:	e7d8      	b.n	8006296 <lwip_send+0x2a>
 80062e4:	2300      	movs	r3, #0
 80062e6:	e7da      	b.n	800629e <lwip_send+0x32>
    return -1;
 80062e8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80062ec:	e7eb      	b.n	80062c6 <lwip_send+0x5a>
  return (err == ERR_OK ? (int)written : -1);
 80062ee:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80062f2:	e7e8      	b.n	80062c6 <lwip_send+0x5a>
 80062f4:	20007998 	.word	0x20007998

080062f8 <lwip_socket>:
{
 80062f8:	b538      	push	{r3, r4, r5, lr}
 80062fa:	4613      	mov	r3, r2
  switch (type) {
 80062fc:	2902      	cmp	r1, #2
 80062fe:	d01b      	beq.n	8006338 <lwip_socket+0x40>
 8006300:	2903      	cmp	r1, #3
 8006302:	d007      	beq.n	8006314 <lwip_socket+0x1c>
 8006304:	2901      	cmp	r1, #1
 8006306:	d022      	beq.n	800634e <lwip_socket+0x56>
    set_errno(EINVAL);
 8006308:	2216      	movs	r2, #22
 800630a:	4b1b      	ldr	r3, [pc, #108]	; (8006378 <lwip_socket+0x80>)
 800630c:	601a      	str	r2, [r3, #0]
    return -1;
 800630e:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8006312:	e00f      	b.n	8006334 <lwip_socket+0x3c>
    conn = netconn_new_with_proto_and_callback(DOMAIN_TO_NETCONN_TYPE(domain, NETCONN_RAW),
 8006314:	4a19      	ldr	r2, [pc, #100]	; (800637c <lwip_socket+0x84>)
 8006316:	b2d9      	uxtb	r1, r3
 8006318:	2040      	movs	r0, #64	; 0x40
 800631a:	f7fd ffed 	bl	80042f8 <netconn_new_with_proto_and_callback>
 800631e:	4605      	mov	r5, r0
  if (!conn) {
 8006320:	b1e5      	cbz	r5, 800635c <lwip_socket+0x64>
  i = alloc_socket(conn, 0);
 8006322:	2100      	movs	r1, #0
 8006324:	4628      	mov	r0, r5
 8006326:	f7ff fb37 	bl	8005998 <alloc_socket>
 800632a:	4604      	mov	r4, r0
  if (i == -1) {
 800632c:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 8006330:	d01a      	beq.n	8006368 <lwip_socket+0x70>
  conn->socket = i;
 8006332:	61a8      	str	r0, [r5, #24]
}
 8006334:	4620      	mov	r0, r4
 8006336:	bd38      	pop	{r3, r4, r5, pc}
    conn = netconn_new_with_callback(DOMAIN_TO_NETCONN_TYPE(domain,
 8006338:	2a88      	cmp	r2, #136	; 0x88
 800633a:	d006      	beq.n	800634a <lwip_socket+0x52>
 800633c:	2020      	movs	r0, #32
 800633e:	4a0f      	ldr	r2, [pc, #60]	; (800637c <lwip_socket+0x84>)
 8006340:	2100      	movs	r1, #0
 8006342:	f7fd ffd9 	bl	80042f8 <netconn_new_with_proto_and_callback>
 8006346:	4605      	mov	r5, r0
    break;
 8006348:	e7ea      	b.n	8006320 <lwip_socket+0x28>
    conn = netconn_new_with_callback(DOMAIN_TO_NETCONN_TYPE(domain,
 800634a:	2021      	movs	r0, #33	; 0x21
 800634c:	e7f7      	b.n	800633e <lwip_socket+0x46>
    conn = netconn_new_with_callback(DOMAIN_TO_NETCONN_TYPE(domain, NETCONN_TCP), event_callback);
 800634e:	4a0b      	ldr	r2, [pc, #44]	; (800637c <lwip_socket+0x84>)
 8006350:	2100      	movs	r1, #0
 8006352:	2010      	movs	r0, #16
 8006354:	f7fd ffd0 	bl	80042f8 <netconn_new_with_proto_and_callback>
 8006358:	4605      	mov	r5, r0
    break;
 800635a:	e7e1      	b.n	8006320 <lwip_socket+0x28>
    set_errno(ENOBUFS);
 800635c:	2269      	movs	r2, #105	; 0x69
 800635e:	4b06      	ldr	r3, [pc, #24]	; (8006378 <lwip_socket+0x80>)
 8006360:	601a      	str	r2, [r3, #0]
    return -1;
 8006362:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8006366:	e7e5      	b.n	8006334 <lwip_socket+0x3c>
    netconn_delete(conn);
 8006368:	4628      	mov	r0, r5
 800636a:	f7fe f821 	bl	80043b0 <netconn_delete>
    set_errno(ENFILE);
 800636e:	2217      	movs	r2, #23
 8006370:	4b01      	ldr	r3, [pc, #4]	; (8006378 <lwip_socket+0x80>)
 8006372:	601a      	str	r2, [r3, #0]
    return -1;
 8006374:	e7de      	b.n	8006334 <lwip_socket+0x3c>
 8006376:	bf00      	nop
 8006378:	20007998 	.word	0x20007998
 800637c:	08005a15 	.word	0x08005a15

08006380 <tcpip_thread>:
 *
 * @param arg unused argument
 */
static void
tcpip_thread(void *arg)
{
 8006380:	b500      	push	{lr}
 8006382:	b083      	sub	sp, #12
  struct tcpip_msg *msg;
  LWIP_UNUSED_ARG(arg);

  if (tcpip_init_done != NULL) {
 8006384:	4b26      	ldr	r3, [pc, #152]	; (8006420 <tcpip_thread+0xa0>)
 8006386:	681b      	ldr	r3, [r3, #0]
 8006388:	b16b      	cbz	r3, 80063a6 <tcpip_thread+0x26>
    tcpip_init_done(tcpip_init_done_arg);
 800638a:	4a26      	ldr	r2, [pc, #152]	; (8006424 <tcpip_thread+0xa4>)
 800638c:	6810      	ldr	r0, [r2, #0]
 800638e:	4798      	blx	r3
 8006390:	e009      	b.n	80063a6 <tcpip_thread+0x26>
    /* wait for a message, timeouts are processed while waiting */
    TCPIP_MBOX_FETCH(&mbox, (void **)&msg);
    LOCK_TCPIP_CORE();
    if (msg == NULL) {
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: NULL\n"));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 8006392:	4b25      	ldr	r3, [pc, #148]	; (8006428 <tcpip_thread+0xa8>)
 8006394:	2269      	movs	r2, #105	; 0x69
 8006396:	4925      	ldr	r1, [pc, #148]	; (800642c <tcpip_thread+0xac>)
 8006398:	4825      	ldr	r0, [pc, #148]	; (8006430 <tcpip_thread+0xb0>)
 800639a:	f007 fc16 	bl	800dbca <iprintf>
      continue;
 800639e:	e002      	b.n	80063a6 <tcpip_thread+0x26>
    }
    switch (msg->type) {
#if !LWIP_TCPIP_CORE_LOCKING
    case TCPIP_MSG_API:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: API message %p\n", (void *)msg));
      msg->msg.api_msg.function(msg->msg.api_msg.msg);
 80063a0:	685a      	ldr	r2, [r3, #4]
 80063a2:	6898      	ldr	r0, [r3, #8]
 80063a4:	4790      	blx	r2
    TCPIP_MBOX_FETCH(&mbox, (void **)&msg);
 80063a6:	a901      	add	r1, sp, #4
 80063a8:	4822      	ldr	r0, [pc, #136]	; (8006434 <tcpip_thread+0xb4>)
 80063aa:	f006 f987 	bl	800c6bc <sys_timeouts_mbox_fetch>
    if (msg == NULL) {
 80063ae:	9b01      	ldr	r3, [sp, #4]
 80063b0:	2b00      	cmp	r3, #0
 80063b2:	d0ee      	beq.n	8006392 <tcpip_thread+0x12>
    switch (msg->type) {
 80063b4:	781a      	ldrb	r2, [r3, #0]
 80063b6:	2a04      	cmp	r2, #4
 80063b8:	d82b      	bhi.n	8006412 <tcpip_thread+0x92>
 80063ba:	a101      	add	r1, pc, #4	; (adr r1, 80063c0 <tcpip_thread+0x40>)
 80063bc:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 80063c0:	080063a1 	.word	0x080063a1
 80063c4:	080063d5 	.word	0x080063d5
 80063c8:	080063e9 	.word	0x080063e9
 80063cc:	080063fb 	.word	0x080063fb
 80063d0:	0800640b 	.word	0x0800640b
      break;
    case TCPIP_MSG_API_CALL:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: API CALL message %p\n", (void *)msg));
      msg->msg.api_call.arg->err = msg->msg.api_call.function(msg->msg.api_call.arg);
 80063d4:	689c      	ldr	r4, [r3, #8]
 80063d6:	685b      	ldr	r3, [r3, #4]
 80063d8:	4620      	mov	r0, r4
 80063da:	4798      	blx	r3
 80063dc:	7020      	strb	r0, [r4, #0]
      sys_sem_signal(msg->msg.api_call.sem);
 80063de:	9b01      	ldr	r3, [sp, #4]
 80063e0:	68d8      	ldr	r0, [r3, #12]
 80063e2:	f006 fcf9 	bl	800cdd8 <sys_sem_signal>
      break;
 80063e6:	e7de      	b.n	80063a6 <tcpip_thread+0x26>
#endif /* !LWIP_TCPIP_CORE_LOCKING */

#if !LWIP_TCPIP_CORE_LOCKING_INPUT
    case TCPIP_MSG_INPKT:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: PACKET %p\n", (void *)msg));
      msg->msg.inp.input_fn(msg->msg.inp.p, msg->msg.inp.netif);
 80063e8:	68da      	ldr	r2, [r3, #12]
 80063ea:	6899      	ldr	r1, [r3, #8]
 80063ec:	6858      	ldr	r0, [r3, #4]
 80063ee:	4790      	blx	r2
      memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 80063f0:	9901      	ldr	r1, [sp, #4]
 80063f2:	2009      	movs	r0, #9
 80063f4:	f001 ff50 	bl	8008298 <memp_free>
      break;
 80063f8:	e7d5      	b.n	80063a6 <tcpip_thread+0x26>
      break;
#endif /* LWIP_TCPIP_TIMEOUT && LWIP_TIMERS */

    case TCPIP_MSG_CALLBACK:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 80063fa:	685a      	ldr	r2, [r3, #4]
 80063fc:	6898      	ldr	r0, [r3, #8]
 80063fe:	4790      	blx	r2
      memp_free(MEMP_TCPIP_MSG_API, msg);
 8006400:	9901      	ldr	r1, [sp, #4]
 8006402:	2008      	movs	r0, #8
 8006404:	f001 ff48 	bl	8008298 <memp_free>
      break;
 8006408:	e7cd      	b.n	80063a6 <tcpip_thread+0x26>

    case TCPIP_MSG_CALLBACK_STATIC:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK_STATIC %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 800640a:	685a      	ldr	r2, [r3, #4]
 800640c:	6898      	ldr	r0, [r3, #8]
 800640e:	4790      	blx	r2
      break;
 8006410:	e7c9      	b.n	80063a6 <tcpip_thread+0x26>

    default:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: %d\n", msg->type));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 8006412:	4b05      	ldr	r3, [pc, #20]	; (8006428 <tcpip_thread+0xa8>)
 8006414:	229b      	movs	r2, #155	; 0x9b
 8006416:	4905      	ldr	r1, [pc, #20]	; (800642c <tcpip_thread+0xac>)
 8006418:	4805      	ldr	r0, [pc, #20]	; (8006430 <tcpip_thread+0xb0>)
 800641a:	f007 fbd6 	bl	800dbca <iprintf>
      break;
 800641e:	e7c2      	b.n	80063a6 <tcpip_thread+0x26>
 8006420:	20003e38 	.word	0x20003e38
 8006424:	20003e3c 	.word	0x20003e3c
 8006428:	0800ec2c 	.word	0x0800ec2c
 800642c:	0800ec5c 	.word	0x0800ec5c
 8006430:	0800e3b0 	.word	0x0800e3b0
 8006434:	20003e34 	.word	0x20003e34

08006438 <tcpip_inpkt>:
 * @param inp the network interface on which the packet was received
 * @param input_fn input function to call
 */
err_t
tcpip_inpkt(struct pbuf *p, struct netif *inp, netif_input_fn input_fn)
{
 8006438:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800643a:	4607      	mov	r7, r0
 800643c:	460e      	mov	r6, r1
 800643e:	4615      	mov	r5, r2
  UNLOCK_TCPIP_CORE();
  return ret;
#else /* LWIP_TCPIP_CORE_LOCKING_INPUT */
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(mbox));
 8006440:	4813      	ldr	r0, [pc, #76]	; (8006490 <tcpip_inpkt+0x58>)
 8006442:	f006 fc89 	bl	800cd58 <sys_mbox_valid>
 8006446:	b188      	cbz	r0, 800646c <tcpip_inpkt+0x34>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_INPKT);
 8006448:	2009      	movs	r0, #9
 800644a:	f001 ff0b 	bl	8008264 <memp_malloc>
  if (msg == NULL) {
 800644e:	4604      	mov	r4, r0
 8006450:	b1d0      	cbz	r0, 8006488 <tcpip_inpkt+0x50>
    return ERR_MEM;
  }

  msg->type = TCPIP_MSG_INPKT;
 8006452:	2302      	movs	r3, #2
 8006454:	7003      	strb	r3, [r0, #0]
  msg->msg.inp.p = p;
 8006456:	6047      	str	r7, [r0, #4]
  msg->msg.inp.netif = inp;
 8006458:	6086      	str	r6, [r0, #8]
  msg->msg.inp.input_fn = input_fn;
 800645a:	60c5      	str	r5, [r0, #12]
  if (sys_mbox_trypost(&mbox, msg) != ERR_OK) {
 800645c:	4601      	mov	r1, r0
 800645e:	480c      	ldr	r0, [pc, #48]	; (8006490 <tcpip_inpkt+0x58>)
 8006460:	f006 fc31 	bl	800ccc6 <sys_mbox_trypost>
 8006464:	4603      	mov	r3, r0
 8006466:	b940      	cbnz	r0, 800647a <tcpip_inpkt+0x42>
    memp_free(MEMP_TCPIP_MSG_INPKT, msg);
    return ERR_MEM;
  }
  return ERR_OK;
#endif /* LWIP_TCPIP_CORE_LOCKING_INPUT */
}
 8006468:	4618      	mov	r0, r3
 800646a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(mbox));
 800646c:	4b09      	ldr	r3, [pc, #36]	; (8006494 <tcpip_inpkt+0x5c>)
 800646e:	22b5      	movs	r2, #181	; 0xb5
 8006470:	4909      	ldr	r1, [pc, #36]	; (8006498 <tcpip_inpkt+0x60>)
 8006472:	480a      	ldr	r0, [pc, #40]	; (800649c <tcpip_inpkt+0x64>)
 8006474:	f007 fba9 	bl	800dbca <iprintf>
 8006478:	e7e6      	b.n	8006448 <tcpip_inpkt+0x10>
    memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 800647a:	4621      	mov	r1, r4
 800647c:	2009      	movs	r0, #9
 800647e:	f001 ff0b 	bl	8008298 <memp_free>
    return ERR_MEM;
 8006482:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006486:	e7ef      	b.n	8006468 <tcpip_inpkt+0x30>
    return ERR_MEM;
 8006488:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800648c:	e7ec      	b.n	8006468 <tcpip_inpkt+0x30>
 800648e:	bf00      	nop
 8006490:	20003e34 	.word	0x20003e34
 8006494:	0800ec2c 	.word	0x0800ec2c
 8006498:	0800ec00 	.word	0x0800ec00
 800649c:	0800e3b0 	.word	0x0800e3b0

080064a0 <tcpip_input>:
 *          NETIF_FLAG_ETHERNET flags)
 * @param inp the network interface on which the packet was received
 */
err_t
tcpip_input(struct pbuf *p, struct netif *inp)
{
 80064a0:	b508      	push	{r3, lr}
#if LWIP_ETHERNET
  if (inp->flags & (NETIF_FLAG_ETHARP | NETIF_FLAG_ETHERNET)) {
 80064a2:	f891 302b 	ldrb.w	r3, [r1, #43]	; 0x2b
 80064a6:	f013 0f18 	tst.w	r3, #24
 80064aa:	d103      	bne.n	80064b4 <tcpip_input+0x14>
    return tcpip_inpkt(p, inp, ethernet_input);
  } else
#endif /* LWIP_ETHERNET */
  return tcpip_inpkt(p, inp, ip_input);
 80064ac:	4a03      	ldr	r2, [pc, #12]	; (80064bc <tcpip_input+0x1c>)
 80064ae:	f7ff ffc3 	bl	8006438 <tcpip_inpkt>
}
 80064b2:	bd08      	pop	{r3, pc}
    return tcpip_inpkt(p, inp, ethernet_input);
 80064b4:	4a02      	ldr	r2, [pc, #8]	; (80064c0 <tcpip_input+0x20>)
 80064b6:	f7ff ffbf 	bl	8006438 <tcpip_inpkt>
 80064ba:	bd08      	pop	{r3, pc}
 80064bc:	08007201 	.word	0x08007201
 80064c0:	0800cb5d 	.word	0x0800cb5d

080064c4 <tcpip_callback_with_block>:
 * @param block 1 to block until the request is posted, 0 to non-blocking mode
 * @return ERR_OK if the function was called, another err_t if not
 */
err_t
tcpip_callback_with_block(tcpip_callback_fn function, void *ctx, u8_t block)
{
 80064c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80064c6:	4607      	mov	r7, r0
 80064c8:	460e      	mov	r6, r1
 80064ca:	4615      	mov	r5, r2
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(mbox));
 80064cc:	4816      	ldr	r0, [pc, #88]	; (8006528 <tcpip_callback_with_block+0x64>)
 80064ce:	f006 fc43 	bl	800cd58 <sys_mbox_valid>
 80064d2:	b188      	cbz	r0, 80064f8 <tcpip_callback_with_block+0x34>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_API);
 80064d4:	2008      	movs	r0, #8
 80064d6:	f001 fec5 	bl	8008264 <memp_malloc>
  if (msg == NULL) {
 80064da:	4604      	mov	r4, r0
 80064dc:	b300      	cbz	r0, 8006520 <tcpip_callback_with_block+0x5c>
    return ERR_MEM;
  }

  msg->type = TCPIP_MSG_CALLBACK;
 80064de:	2303      	movs	r3, #3
 80064e0:	7003      	strb	r3, [r0, #0]
  msg->msg.cb.function = function;
 80064e2:	6047      	str	r7, [r0, #4]
  msg->msg.cb.ctx = ctx;
 80064e4:	6086      	str	r6, [r0, #8]
  if (block) {
 80064e6:	b975      	cbnz	r5, 8006506 <tcpip_callback_with_block+0x42>
    sys_mbox_post(&mbox, msg);
  } else {
    if (sys_mbox_trypost(&mbox, msg) != ERR_OK) {
 80064e8:	4601      	mov	r1, r0
 80064ea:	480f      	ldr	r0, [pc, #60]	; (8006528 <tcpip_callback_with_block+0x64>)
 80064ec:	f006 fbeb 	bl	800ccc6 <sys_mbox_trypost>
 80064f0:	4603      	mov	r3, r0
 80064f2:	b970      	cbnz	r0, 8006512 <tcpip_callback_with_block+0x4e>
      memp_free(MEMP_TCPIP_MSG_API, msg);
      return ERR_MEM;
    }
  }
  return ERR_OK;
}
 80064f4:	4618      	mov	r0, r3
 80064f6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(mbox));
 80064f8:	4b0c      	ldr	r3, [pc, #48]	; (800652c <tcpip_callback_with_block+0x68>)
 80064fa:	22ee      	movs	r2, #238	; 0xee
 80064fc:	490c      	ldr	r1, [pc, #48]	; (8006530 <tcpip_callback_with_block+0x6c>)
 80064fe:	480d      	ldr	r0, [pc, #52]	; (8006534 <tcpip_callback_with_block+0x70>)
 8006500:	f007 fb63 	bl	800dbca <iprintf>
 8006504:	e7e6      	b.n	80064d4 <tcpip_callback_with_block+0x10>
    sys_mbox_post(&mbox, msg);
 8006506:	4601      	mov	r1, r0
 8006508:	4807      	ldr	r0, [pc, #28]	; (8006528 <tcpip_callback_with_block+0x64>)
 800650a:	f006 fbd0 	bl	800ccae <sys_mbox_post>
  return ERR_OK;
 800650e:	2300      	movs	r3, #0
 8006510:	e7f0      	b.n	80064f4 <tcpip_callback_with_block+0x30>
      memp_free(MEMP_TCPIP_MSG_API, msg);
 8006512:	4621      	mov	r1, r4
 8006514:	2008      	movs	r0, #8
 8006516:	f001 febf 	bl	8008298 <memp_free>
      return ERR_MEM;
 800651a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800651e:	e7e9      	b.n	80064f4 <tcpip_callback_with_block+0x30>
    return ERR_MEM;
 8006520:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006524:	e7e6      	b.n	80064f4 <tcpip_callback_with_block+0x30>
 8006526:	bf00      	nop
 8006528:	20003e34 	.word	0x20003e34
 800652c:	0800ec2c 	.word	0x0800ec2c
 8006530:	0800ec00 	.word	0x0800ec00
 8006534:	0800e3b0 	.word	0x0800e3b0

08006538 <tcpip_send_msg_wait_sem>:
 * @param sem semaphore to wait on
 * @return ERR_OK if the function was called, another err_t if not
 */
err_t
tcpip_send_msg_wait_sem(tcpip_callback_fn fn, void *apimsg, sys_sem_t* sem)
{
 8006538:	b5f0      	push	{r4, r5, r6, r7, lr}
 800653a:	b085      	sub	sp, #20
 800653c:	4607      	mov	r7, r0
 800653e:	460e      	mov	r6, r1
 8006540:	4615      	mov	r5, r2
  UNLOCK_TCPIP_CORE();
  return ERR_OK;
#else /* LWIP_TCPIP_CORE_LOCKING */
  TCPIP_MSG_VAR_DECLARE(msg);

  LWIP_ASSERT("semaphore not initialized", sys_sem_valid(sem));
 8006542:	4610      	mov	r0, r2
 8006544:	f006 fc52 	bl	800cdec <sys_sem_valid>
 8006548:	b198      	cbz	r0, 8006572 <tcpip_send_msg_wait_sem+0x3a>
  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(mbox));
 800654a:	4812      	ldr	r0, [pc, #72]	; (8006594 <tcpip_send_msg_wait_sem+0x5c>)
 800654c:	f006 fc04 	bl	800cd58 <sys_mbox_valid>
 8006550:	b1b8      	cbz	r0, 8006582 <tcpip_send_msg_wait_sem+0x4a>

  TCPIP_MSG_VAR_ALLOC(msg);
  TCPIP_MSG_VAR_REF(msg).type = TCPIP_MSG_API;
 8006552:	2400      	movs	r4, #0
 8006554:	f88d 4000 	strb.w	r4, [sp]
  TCPIP_MSG_VAR_REF(msg).msg.api_msg.function = fn;
 8006558:	9701      	str	r7, [sp, #4]
  TCPIP_MSG_VAR_REF(msg).msg.api_msg.msg = apimsg;
 800655a:	9602      	str	r6, [sp, #8]
  sys_mbox_post(&mbox, &TCPIP_MSG_VAR_REF(msg));
 800655c:	4669      	mov	r1, sp
 800655e:	480d      	ldr	r0, [pc, #52]	; (8006594 <tcpip_send_msg_wait_sem+0x5c>)
 8006560:	f006 fba5 	bl	800ccae <sys_mbox_post>
  sys_arch_sem_wait(sem, 0);
 8006564:	4621      	mov	r1, r4
 8006566:	4628      	mov	r0, r5
 8006568:	f006 fc18 	bl	800cd9c <sys_arch_sem_wait>
  TCPIP_MSG_VAR_FREE(msg);
  return ERR_OK;
#endif /* LWIP_TCPIP_CORE_LOCKING */
}
 800656c:	4620      	mov	r0, r4
 800656e:	b005      	add	sp, #20
 8006570:	bdf0      	pop	{r4, r5, r6, r7, pc}
  LWIP_ASSERT("semaphore not initialized", sys_sem_valid(sem));
 8006572:	4b09      	ldr	r3, [pc, #36]	; (8006598 <tcpip_send_msg_wait_sem+0x60>)
 8006574:	f44f 72aa 	mov.w	r2, #340	; 0x154
 8006578:	4908      	ldr	r1, [pc, #32]	; (800659c <tcpip_send_msg_wait_sem+0x64>)
 800657a:	4809      	ldr	r0, [pc, #36]	; (80065a0 <tcpip_send_msg_wait_sem+0x68>)
 800657c:	f007 fb25 	bl	800dbca <iprintf>
 8006580:	e7e3      	b.n	800654a <tcpip_send_msg_wait_sem+0x12>
  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(mbox));
 8006582:	4b05      	ldr	r3, [pc, #20]	; (8006598 <tcpip_send_msg_wait_sem+0x60>)
 8006584:	f240 1255 	movw	r2, #341	; 0x155
 8006588:	4906      	ldr	r1, [pc, #24]	; (80065a4 <tcpip_send_msg_wait_sem+0x6c>)
 800658a:	4805      	ldr	r0, [pc, #20]	; (80065a0 <tcpip_send_msg_wait_sem+0x68>)
 800658c:	f007 fb1d 	bl	800dbca <iprintf>
 8006590:	e7df      	b.n	8006552 <tcpip_send_msg_wait_sem+0x1a>
 8006592:	bf00      	nop
 8006594:	20003e34 	.word	0x20003e34
 8006598:	0800ec2c 	.word	0x0800ec2c
 800659c:	0800ec10 	.word	0x0800ec10
 80065a0:	0800e3b0 	.word	0x0800e3b0
 80065a4:	0800ec00 	.word	0x0800ec00

080065a8 <tcpip_init>:
 * @param initfunc a function to call when tcpip_thread is running and finished initializing
 * @param arg argument to pass to initfunc
 */
void
tcpip_init(tcpip_init_done_fn initfunc, void *arg)
{
 80065a8:	b530      	push	{r4, r5, lr}
 80065aa:	b083      	sub	sp, #12
 80065ac:	4605      	mov	r5, r0
 80065ae:	460c      	mov	r4, r1
  lwip_init();
 80065b0:	f000 f83b 	bl	800662a <lwip_init>

  tcpip_init_done = initfunc;
 80065b4:	4b0d      	ldr	r3, [pc, #52]	; (80065ec <tcpip_init+0x44>)
 80065b6:	601d      	str	r5, [r3, #0]
  tcpip_init_done_arg = arg;
 80065b8:	4b0d      	ldr	r3, [pc, #52]	; (80065f0 <tcpip_init+0x48>)
 80065ba:	601c      	str	r4, [r3, #0]
  if (sys_mbox_new(&mbox, TCPIP_MBOX_SIZE) != ERR_OK) {
 80065bc:	2106      	movs	r1, #6
 80065be:	480d      	ldr	r0, [pc, #52]	; (80065f4 <tcpip_init+0x4c>)
 80065c0:	f006 fb58 	bl	800cc74 <sys_mbox_new>
 80065c4:	b950      	cbnz	r0, 80065dc <tcpip_init+0x34>
  if (sys_mutex_new(&lock_tcpip_core) != ERR_OK) {
    LWIP_ASSERT("failed to create lock_tcpip_core", 0);
  }
#endif /* LWIP_TCPIP_CORE_LOCKING */

  sys_thread_new(TCPIP_THREAD_NAME, tcpip_thread, NULL, TCPIP_THREAD_STACKSIZE, TCPIP_THREAD_PRIO);
 80065c6:	2303      	movs	r3, #3
 80065c8:	9300      	str	r3, [sp, #0]
 80065ca:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80065ce:	2200      	movs	r2, #0
 80065d0:	4909      	ldr	r1, [pc, #36]	; (80065f8 <tcpip_init+0x50>)
 80065d2:	480a      	ldr	r0, [pc, #40]	; (80065fc <tcpip_init+0x54>)
 80065d4:	f006 fc3d 	bl	800ce52 <sys_thread_new>
}
 80065d8:	b003      	add	sp, #12
 80065da:	bd30      	pop	{r4, r5, pc}
    LWIP_ASSERT("failed to create tcpip_thread mbox", 0);
 80065dc:	4b08      	ldr	r3, [pc, #32]	; (8006600 <tcpip_init+0x58>)
 80065de:	f240 12d5 	movw	r2, #469	; 0x1d5
 80065e2:	4908      	ldr	r1, [pc, #32]	; (8006604 <tcpip_init+0x5c>)
 80065e4:	4808      	ldr	r0, [pc, #32]	; (8006608 <tcpip_init+0x60>)
 80065e6:	f007 faf0 	bl	800dbca <iprintf>
 80065ea:	e7ec      	b.n	80065c6 <tcpip_init+0x1e>
 80065ec:	20003e38 	.word	0x20003e38
 80065f0:	20003e3c 	.word	0x20003e3c
 80065f4:	20003e34 	.word	0x20003e34
 80065f8:	08006381 	.word	0x08006381
 80065fc:	0800ebf0 	.word	0x0800ebf0
 8006600:	0800ec2c 	.word	0x0800ec2c
 8006604:	0800ebcc 	.word	0x0800ebcc
 8006608:	0800e3b0 	.word	0x0800e3b0

0800660c <lwip_htons>:
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
  return (u16_t)PP_HTONS(n);
 800660c:	ba40      	rev16	r0, r0
}
 800660e:	b280      	uxth	r0, r0
 8006610:	4770      	bx	lr

08006612 <lwip_htonl>:
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
  return (u32_t)PP_HTONL(n);
 8006612:	0203      	lsls	r3, r0, #8
 8006614:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8006618:	ea43 6300 	orr.w	r3, r3, r0, lsl #24
 800661c:	0a02      	lsrs	r2, r0, #8
 800661e:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 8006622:	4313      	orrs	r3, r2
}
 8006624:	ea43 6010 	orr.w	r0, r3, r0, lsr #24
 8006628:	4770      	bx	lr

0800662a <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 800662a:	b508      	push	{r3, lr}
#endif

  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
 800662c:	f006 fbe8 	bl	800ce00 <sys_init>
#endif /* !NO_SYS */
  mem_init();
 8006630:	f001 fbda 	bl	8007de8 <mem_init>
  memp_init();
 8006634:	f001 fe06 	bl	8008244 <memp_init>
  pbuf_init();
  netif_init();
 8006638:	f001 fe59 	bl	80082ee <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 800663c:	f006 f8ac 	bl	800c798 <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 8006640:	f002 fbba 	bl	8008db8 <tcp_init>
#if PPP_SUPPORT
  ppp_init();
#endif
 
#if LWIP_TIMERS
  sys_timeouts_init();
 8006644:	f006 f814 	bl	800c670 <sys_timeouts_init>
 8006648:	bd08      	pop	{r3, pc}
	...

0800664c <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 800664c:	b510      	push	{r4, lr}
 800664e:	4604      	mov	r4, r0
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 8006650:	eb00 0240 	add.w	r2, r0, r0, lsl #1
 8006654:	00d3      	lsls	r3, r2, #3
 8006656:	4a09      	ldr	r2, [pc, #36]	; (800667c <etharp_free_entry+0x30>)
 8006658:	58d0      	ldr	r0, [r2, r3]
 800665a:	b138      	cbz	r0, 800666c <etharp_free_entry+0x20>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 800665c:	f001 fff2 	bl	8008644 <pbuf_free>
    arp_table[i].q = NULL;
 8006660:	eb04 0244 	add.w	r2, r4, r4, lsl #1
 8006664:	00d3      	lsls	r3, r2, #3
 8006666:	2100      	movs	r1, #0
 8006668:	4a04      	ldr	r2, [pc, #16]	; (800667c <etharp_free_entry+0x30>)
 800666a:	50d1      	str	r1, [r2, r3]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 800666c:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8006670:	00e2      	lsls	r2, r4, #3
 8006672:	4b02      	ldr	r3, [pc, #8]	; (800667c <etharp_free_entry+0x30>)
 8006674:	4413      	add	r3, r2
 8006676:	2200      	movs	r2, #0
 8006678:	751a      	strb	r2, [r3, #20]
 800667a:	bd10      	pop	{r4, pc}
 800667c:	20003e40 	.word	0x20003e40

08006680 <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s8_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif* netif)
{
 8006680:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  s8_t empty = ARP_TABLE_SIZE;
  u8_t i = 0;
  /* oldest entry with packets on queue */
  s8_t old_queue = ARP_TABLE_SIZE;
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 8006684:	f04f 0e00 	mov.w	lr, #0
 8006688:	46f3      	mov	fp, lr
 800668a:	46f1      	mov	r9, lr
  s8_t old_queue = ARP_TABLE_SIZE;
 800668c:	f04f 0c0a 	mov.w	ip, #10
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8006690:	4673      	mov	r3, lr
  s8_t empty = ARP_TABLE_SIZE;
 8006692:	4667      	mov	r7, ip
  s8_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 8006694:	46e0      	mov	r8, ip
 8006696:	46e2      	mov	sl, ip
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8006698:	e003      	b.n	80066a2 <etharp_find_entry+0x22>
    u8_t state = arp_table[i].state;
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 800669a:	b96c      	cbnz	r4, 80066b8 <etharp_find_entry+0x38>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %"U16_F"\n", (u16_t)i));
      /* remember first empty entry */
      empty = i;
 800669c:	b25f      	sxtb	r7, r3
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800669e:	3301      	adds	r3, #1
 80066a0:	b2db      	uxtb	r3, r3
 80066a2:	2b09      	cmp	r3, #9
 80066a4:	d845      	bhi.n	8006732 <etharp_find_entry+0xb2>
    u8_t state = arp_table[i].state;
 80066a6:	461a      	mov	r2, r3
 80066a8:	eb03 0443 	add.w	r4, r3, r3, lsl #1
 80066ac:	00e5      	lsls	r5, r4, #3
 80066ae:	4c59      	ldr	r4, [pc, #356]	; (8006814 <etharp_find_entry+0x194>)
 80066b0:	442c      	add	r4, r5
 80066b2:	7d24      	ldrb	r4, [r4, #20]
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 80066b4:	2f0a      	cmp	r7, #10
 80066b6:	d0f0      	beq.n	800669a <etharp_find_entry+0x1a>
    } else if (state != ETHARP_STATE_EMPTY) {
 80066b8:	2c00      	cmp	r4, #0
 80066ba:	d0f0      	beq.n	800669e <etharp_find_entry+0x1e>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
        state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 80066bc:	b140      	cbz	r0, 80066d0 <etharp_find_entry+0x50>
 80066be:	eb02 0542 	add.w	r5, r2, r2, lsl #1
 80066c2:	00ee      	lsls	r6, r5, #3
 80066c4:	4d53      	ldr	r5, [pc, #332]	; (8006814 <etharp_find_entry+0x194>)
 80066c6:	4435      	add	r5, r6
 80066c8:	686d      	ldr	r5, [r5, #4]
 80066ca:	6806      	ldr	r6, [r0, #0]
 80066cc:	42ae      	cmp	r6, r5
 80066ce:	d00f      	beq.n	80066f0 <etharp_find_entry+0x70>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %"U16_F"\n", (u16_t)i));
        /* found exact IP address match, simply bail out */
        return i;
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 80066d0:	2c01      	cmp	r4, #1
 80066d2:	d010      	beq.n	80066f6 <etharp_find_entry+0x76>
            old_pending = i;
            age_pending = arp_table[i].ctime;
          }
        }
      /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
 80066d4:	2c01      	cmp	r4, #1
 80066d6:	d9e2      	bls.n	800669e <etharp_find_entry+0x1e>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 80066d8:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 80066dc:	00d4      	lsls	r4, r2, #3
 80066de:	4a4d      	ldr	r2, [pc, #308]	; (8006814 <etharp_find_entry+0x194>)
 80066e0:	4422      	add	r2, r4
 80066e2:	8a52      	ldrh	r2, [r2, #18]
 80066e4:	4596      	cmp	lr, r2
 80066e6:	d8da      	bhi.n	800669e <etharp_find_entry+0x1e>
            old_stable = i;
 80066e8:	fa4f f883 	sxtb.w	r8, r3
            age_stable = arp_table[i].ctime;
 80066ec:	4696      	mov	lr, r2
 80066ee:	e7d6      	b.n	800669e <etharp_find_entry+0x1e>
        return i;
 80066f0:	b258      	sxtb	r0, r3
 80066f2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
        if (arp_table[i].q != NULL) {
 80066f6:	eb02 0542 	add.w	r5, r2, r2, lsl #1
 80066fa:	00ec      	lsls	r4, r5, #3
 80066fc:	4d45      	ldr	r5, [pc, #276]	; (8006814 <etharp_find_entry+0x194>)
 80066fe:	592c      	ldr	r4, [r5, r4]
 8006700:	b15c      	cbz	r4, 800671a <etharp_find_entry+0x9a>
          if (arp_table[i].ctime >= age_queue) {
 8006702:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8006706:	00d4      	lsls	r4, r2, #3
 8006708:	462a      	mov	r2, r5
 800670a:	4422      	add	r2, r4
 800670c:	8a52      	ldrh	r2, [r2, #18]
 800670e:	4591      	cmp	r9, r2
 8006710:	d8c5      	bhi.n	800669e <etharp_find_entry+0x1e>
            old_queue = i;
 8006712:	fa4f fc83 	sxtb.w	ip, r3
            age_queue = arp_table[i].ctime;
 8006716:	4691      	mov	r9, r2
 8006718:	e7c1      	b.n	800669e <etharp_find_entry+0x1e>
          if (arp_table[i].ctime >= age_pending) {
 800671a:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 800671e:	00d4      	lsls	r4, r2, #3
 8006720:	4a3c      	ldr	r2, [pc, #240]	; (8006814 <etharp_find_entry+0x194>)
 8006722:	4422      	add	r2, r4
 8006724:	8a52      	ldrh	r2, [r2, #18]
 8006726:	4593      	cmp	fp, r2
 8006728:	d8b9      	bhi.n	800669e <etharp_find_entry+0x1e>
            old_pending = i;
 800672a:	fa4f fa83 	sxtb.w	sl, r3
            age_pending = arp_table[i].ctime;
 800672e:	4693      	mov	fp, r2
 8006730:	e7b5      	b.n	800669e <etharp_find_entry+0x1e>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 8006732:	f011 0f02 	tst.w	r1, #2
 8006736:	d165      	bne.n	8006804 <etharp_find_entry+0x184>
 8006738:	2f0a      	cmp	r7, #10
 800673a:	d020      	beq.n	800677e <etharp_find_entry+0xfe>
 800673c:	4605      	mov	r5, r0
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 800673e:	2f09      	cmp	r7, #9
 8006740:	dc24      	bgt.n	800678c <etharp_find_entry+0x10c>
    i = empty;
 8006742:	b2ff      	uxtb	r7, r7
    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
    etharp_free_entry(i);
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 8006744:	2f09      	cmp	r7, #9
 8006746:	d84d      	bhi.n	80067e4 <etharp_find_entry+0x164>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 8006748:	463c      	mov	r4, r7
 800674a:	eb07 0347 	add.w	r3, r7, r7, lsl #1
 800674e:	00da      	lsls	r2, r3, #3
 8006750:	4b30      	ldr	r3, [pc, #192]	; (8006814 <etharp_find_entry+0x194>)
 8006752:	4413      	add	r3, r2
 8006754:	7d1b      	ldrb	r3, [r3, #20]
 8006756:	2b00      	cmp	r3, #0
 8006758:	d14c      	bne.n	80067f4 <etharp_find_entry+0x174>
    arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 800675a:	b135      	cbz	r5, 800676a <etharp_find_entry+0xea>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 800675c:	6829      	ldr	r1, [r5, #0]
 800675e:	eb04 0344 	add.w	r3, r4, r4, lsl #1
 8006762:	00da      	lsls	r2, r3, #3
 8006764:	4b2b      	ldr	r3, [pc, #172]	; (8006814 <etharp_find_entry+0x194>)
 8006766:	4413      	add	r3, r2
 8006768:	6059      	str	r1, [r3, #4]
  }
  arp_table[i].ctime = 0;
 800676a:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 800676e:	00e2      	lsls	r2, r4, #3
 8006770:	4b28      	ldr	r3, [pc, #160]	; (8006814 <etharp_find_entry+0x194>)
 8006772:	4413      	add	r3, r2
 8006774:	2200      	movs	r2, #0
 8006776:	825a      	strh	r2, [r3, #18]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
#endif /* ETHARP_TABLE_MATCH_NETIF*/
  return (err_t)i;
 8006778:	b278      	sxtb	r0, r7
 800677a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 800677e:	f011 0f01 	tst.w	r1, #1
 8006782:	d1db      	bne.n	800673c <etharp_find_entry+0xbc>
    return (s8_t)ERR_MEM;
 8006784:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006788:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if (old_stable < ARP_TABLE_SIZE) {
 800678c:	f1b8 0f09 	cmp.w	r8, #9
 8006790:	dc14      	bgt.n	80067bc <etharp_find_entry+0x13c>
      i = old_stable;
 8006792:	fa5f f788 	uxtb.w	r7, r8
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 8006796:	eb07 0247 	add.w	r2, r7, r7, lsl #1
 800679a:	00d3      	lsls	r3, r2, #3
 800679c:	4a1d      	ldr	r2, [pc, #116]	; (8006814 <etharp_find_entry+0x194>)
 800679e:	58d3      	ldr	r3, [r2, r3]
 80067a0:	b133      	cbz	r3, 80067b0 <etharp_find_entry+0x130>
 80067a2:	4b1d      	ldr	r3, [pc, #116]	; (8006818 <etharp_find_entry+0x198>)
 80067a4:	f240 126f 	movw	r2, #367	; 0x16f
 80067a8:	491c      	ldr	r1, [pc, #112]	; (800681c <etharp_find_entry+0x19c>)
 80067aa:	481d      	ldr	r0, [pc, #116]	; (8006820 <etharp_find_entry+0x1a0>)
 80067ac:	f007 fa0d 	bl	800dbca <iprintf>
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 80067b0:	2f09      	cmp	r7, #9
 80067b2:	d80f      	bhi.n	80067d4 <etharp_find_entry+0x154>
    etharp_free_entry(i);
 80067b4:	4638      	mov	r0, r7
 80067b6:	f7ff ff49 	bl	800664c <etharp_free_entry>
 80067ba:	e7c3      	b.n	8006744 <etharp_find_entry+0xc4>
    } else if (old_pending < ARP_TABLE_SIZE) {
 80067bc:	f1ba 0f09 	cmp.w	sl, #9
 80067c0:	dc02      	bgt.n	80067c8 <etharp_find_entry+0x148>
      i = old_pending;
 80067c2:	fa5f f78a 	uxtb.w	r7, sl
 80067c6:	e7f3      	b.n	80067b0 <etharp_find_entry+0x130>
    } else if (old_queue < ARP_TABLE_SIZE) {
 80067c8:	f1bc 0f09 	cmp.w	ip, #9
 80067cc:	dc1e      	bgt.n	800680c <etharp_find_entry+0x18c>
      i = old_queue;
 80067ce:	fa5f f78c 	uxtb.w	r7, ip
 80067d2:	e7ed      	b.n	80067b0 <etharp_find_entry+0x130>
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 80067d4:	4b10      	ldr	r3, [pc, #64]	; (8006818 <etharp_find_entry+0x198>)
 80067d6:	f240 1281 	movw	r2, #385	; 0x181
 80067da:	4912      	ldr	r1, [pc, #72]	; (8006824 <etharp_find_entry+0x1a4>)
 80067dc:	4810      	ldr	r0, [pc, #64]	; (8006820 <etharp_find_entry+0x1a0>)
 80067de:	f007 f9f4 	bl	800dbca <iprintf>
 80067e2:	e7e7      	b.n	80067b4 <etharp_find_entry+0x134>
  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 80067e4:	4b0c      	ldr	r3, [pc, #48]	; (8006818 <etharp_find_entry+0x198>)
 80067e6:	f240 1285 	movw	r2, #389	; 0x185
 80067ea:	490e      	ldr	r1, [pc, #56]	; (8006824 <etharp_find_entry+0x1a4>)
 80067ec:	480c      	ldr	r0, [pc, #48]	; (8006820 <etharp_find_entry+0x1a0>)
 80067ee:	f007 f9ec 	bl	800dbca <iprintf>
 80067f2:	e7a9      	b.n	8006748 <etharp_find_entry+0xc8>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 80067f4:	4b08      	ldr	r3, [pc, #32]	; (8006818 <etharp_find_entry+0x198>)
 80067f6:	f240 1287 	movw	r2, #391	; 0x187
 80067fa:	490b      	ldr	r1, [pc, #44]	; (8006828 <etharp_find_entry+0x1a8>)
 80067fc:	4808      	ldr	r0, [pc, #32]	; (8006820 <etharp_find_entry+0x1a0>)
 80067fe:	f007 f9e4 	bl	800dbca <iprintf>
 8006802:	e7aa      	b.n	800675a <etharp_find_entry+0xda>
    return (s8_t)ERR_MEM;
 8006804:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006808:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
      return (s8_t)ERR_MEM;
 800680c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
 8006810:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006814:	20003e40 	.word	0x20003e40
 8006818:	0800ec7c 	.word	0x0800ec7c
 800681c:	0800ecb4 	.word	0x0800ecb4
 8006820:	0800e3b0 	.word	0x0800e3b0
 8006824:	0800eccc 	.word	0x0800eccc
 8006828:	0800ece0 	.word	0x0800ece0

0800682c <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 800682c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800682e:	b083      	sub	sp, #12
 8006830:	4604      	mov	r4, r0
 8006832:	460d      	mov	r5, r1
 8006834:	4616      	mov	r6, r2
 8006836:	461f      	mov	r7, r3
  s8_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 8006838:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
 800683c:	2b06      	cmp	r3, #6
 800683e:	d006      	beq.n	800684e <etharp_update_arp_entry+0x22>
 8006840:	4b28      	ldr	r3, [pc, #160]	; (80068e4 <etharp_update_arp_entry+0xb8>)
 8006842:	f240 12ab 	movw	r2, #427	; 0x1ab
 8006846:	4928      	ldr	r1, [pc, #160]	; (80068e8 <etharp_update_arp_entry+0xbc>)
 8006848:	4828      	ldr	r0, [pc, #160]	; (80068ec <etharp_update_arp_entry+0xc0>)
 800684a:	f007 f9be 	bl	800dbca <iprintf>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
    ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
    (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
    (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
 800684e:	2d00      	cmp	r5, #0
 8006850:	d039      	beq.n	80068c6 <etharp_update_arp_entry+0x9a>
 8006852:	6828      	ldr	r0, [r5, #0]
 8006854:	2800      	cmp	r0, #0
 8006856:	d039      	beq.n	80068cc <etharp_update_arp_entry+0xa0>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 8006858:	4621      	mov	r1, r4
 800685a:	f000 fe3c 	bl	80074d6 <ip4_addr_isbroadcast_u32>
  if (ip4_addr_isany(ipaddr) ||
 800685e:	2800      	cmp	r0, #0
 8006860:	d137      	bne.n	80068d2 <etharp_update_arp_entry+0xa6>
      ip4_addr_ismulticast(ipaddr)) {
 8006862:	682b      	ldr	r3, [r5, #0]
 8006864:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 8006868:	2be0      	cmp	r3, #224	; 0xe0
 800686a:	d035      	beq.n	80068d8 <etharp_update_arp_entry+0xac>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
 800686c:	4622      	mov	r2, r4
 800686e:	4639      	mov	r1, r7
 8006870:	4628      	mov	r0, r5
 8006872:	f7ff ff05 	bl	8006680 <etharp_find_entry>
  /* bail out if no entry could be found */
  if (i < 0) {
 8006876:	2800      	cmp	r0, #0
 8006878:	db23      	blt.n	80068c2 <etharp_update_arp_entry+0x96>
    return ERR_VAL;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 800687a:	4d1d      	ldr	r5, [pc, #116]	; (80068f0 <etharp_update_arp_entry+0xc4>)
 800687c:	0042      	lsls	r2, r0, #1
 800687e:	1813      	adds	r3, r2, r0
 8006880:	00d9      	lsls	r1, r3, #3
 8006882:	186f      	adds	r7, r5, r1
 8006884:	2302      	movs	r3, #2
 8006886:	753b      	strb	r3, [r7, #20]
  }

  /* record network interface */
  arp_table[i].netif = netif;
 8006888:	60bc      	str	r4, [r7, #8]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", (s16_t)i));
  /* update address */
  ETHADDR32_COPY(&arp_table[i].ethaddr, ethaddr);
 800688a:	460b      	mov	r3, r1
 800688c:	3308      	adds	r3, #8
 800688e:	442b      	add	r3, r5
 8006890:	6832      	ldr	r2, [r6, #0]
 8006892:	605a      	str	r2, [r3, #4]
 8006894:	88b2      	ldrh	r2, [r6, #4]
 8006896:	811a      	strh	r2, [r3, #8]
  /* reset time stamp */
  arp_table[i].ctime = 0;
 8006898:	2300      	movs	r3, #0
 800689a:	827b      	strh	r3, [r7, #18]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
 800689c:	586d      	ldr	r5, [r5, r1]
 800689e:	b1f5      	cbz	r5, 80068de <etharp_update_arp_entry+0xb2>
    struct pbuf *p = arp_table[i].q;
    arp_table[i].q = NULL;
 80068a0:	2700      	movs	r7, #0
 80068a2:	4a13      	ldr	r2, [pc, #76]	; (80068f0 <etharp_update_arp_entry+0xc4>)
 80068a4:	5057      	str	r7, [r2, r1]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr*)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 80068a6:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80068aa:	9300      	str	r3, [sp, #0]
 80068ac:	4633      	mov	r3, r6
 80068ae:	f104 0225 	add.w	r2, r4, #37	; 0x25
 80068b2:	4629      	mov	r1, r5
 80068b4:	4620      	mov	r0, r4
 80068b6:	f006 f9a5 	bl	800cc04 <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
 80068ba:	4628      	mov	r0, r5
 80068bc:	f001 fec2 	bl	8008644 <pbuf_free>
  }
  return ERR_OK;
 80068c0:	4638      	mov	r0, r7
}
 80068c2:	b003      	add	sp, #12
 80068c4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return ERR_ARG;
 80068c6:	f06f 000f 	mvn.w	r0, #15
 80068ca:	e7fa      	b.n	80068c2 <etharp_update_arp_entry+0x96>
 80068cc:	f06f 000f 	mvn.w	r0, #15
 80068d0:	e7f7      	b.n	80068c2 <etharp_update_arp_entry+0x96>
 80068d2:	f06f 000f 	mvn.w	r0, #15
 80068d6:	e7f4      	b.n	80068c2 <etharp_update_arp_entry+0x96>
 80068d8:	f06f 000f 	mvn.w	r0, #15
 80068dc:	e7f1      	b.n	80068c2 <etharp_update_arp_entry+0x96>
  return ERR_OK;
 80068de:	2000      	movs	r0, #0
 80068e0:	e7ef      	b.n	80068c2 <etharp_update_arp_entry+0x96>
 80068e2:	bf00      	nop
 80068e4:	0800ec7c 	.word	0x0800ec7c
 80068e8:	0800ee34 	.word	0x0800ee34
 80068ec:	0800e3b0 	.word	0x0800e3b0
 80068f0:	20003e40 	.word	0x20003e40

080068f4 <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 80068f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80068f8:	b082      	sub	sp, #8
 80068fa:	4689      	mov	r9, r1
 80068fc:	4692      	mov	sl, r2
 80068fe:	4698      	mov	r8, r3
 8006900:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
  struct pbuf *p;
  err_t result = ERR_OK;
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 8006902:	4607      	mov	r7, r0
 8006904:	2800      	cmp	r0, #0
 8006906:	d048      	beq.n	800699a <etharp_raw+0xa6>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 8006908:	2200      	movs	r2, #0
 800690a:	211c      	movs	r1, #28
 800690c:	2002      	movs	r0, #2
 800690e:	f001 ff05 	bl	800871c <pbuf_alloc>
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 8006912:	4606      	mov	r6, r0
 8006914:	2800      	cmp	r0, #0
 8006916:	d050      	beq.n	80069ba <etharp_raw+0xc6>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
      ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 8006918:	8943      	ldrh	r3, [r0, #10]
 800691a:	2b1b      	cmp	r3, #27
 800691c:	d945      	bls.n	80069aa <etharp_raw+0xb6>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 800691e:	6874      	ldr	r4, [r6, #4]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 8006920:	f8bd 0034 	ldrh.w	r0, [sp, #52]	; 0x34
 8006924:	f7ff fe72 	bl	800660c <lwip_htons>
 8006928:	80e0      	strh	r0, [r4, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 800692a:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800692e:	2b06      	cmp	r3, #6
 8006930:	d006      	beq.n	8006940 <etharp_raw+0x4c>
 8006932:	4b23      	ldr	r3, [pc, #140]	; (80069c0 <etharp_raw+0xcc>)
 8006934:	f240 426b 	movw	r2, #1131	; 0x46b
 8006938:	4922      	ldr	r1, [pc, #136]	; (80069c4 <etharp_raw+0xd0>)
 800693a:	4823      	ldr	r0, [pc, #140]	; (80069c8 <etharp_raw+0xd4>)
 800693c:	f007 f945 	bl	800dbca <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  ETHADDR16_COPY(&hdr->shwaddr, hwsrc_addr);
 8006940:	f8d8 3000 	ldr.w	r3, [r8]
 8006944:	60a3      	str	r3, [r4, #8]
 8006946:	f8b8 3004 	ldrh.w	r3, [r8, #4]
 800694a:	81a3      	strh	r3, [r4, #12]
  ETHADDR16_COPY(&hdr->dhwaddr, hwdst_addr);
 800694c:	682b      	ldr	r3, [r5, #0]
 800694e:	f8c4 3012 	str.w	r3, [r4, #18]
 8006952:	88ab      	ldrh	r3, [r5, #4]
 8006954:	82e3      	strh	r3, [r4, #22]
  /* Copy struct ip4_addr2 to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR2_COPY(&hdr->sipaddr, ipsrc_addr);
 8006956:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006958:	681b      	ldr	r3, [r3, #0]
 800695a:	f8c4 300e 	str.w	r3, [r4, #14]
  IPADDR2_COPY(&hdr->dipaddr, ipdst_addr);
 800695e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006960:	681b      	ldr	r3, [r3, #0]
 8006962:	61a3      	str	r3, [r4, #24]

  hdr->hwtype = PP_HTONS(HWTYPE_ETHERNET);
 8006964:	2500      	movs	r5, #0
 8006966:	7025      	strb	r5, [r4, #0]
 8006968:	2301      	movs	r3, #1
 800696a:	7063      	strb	r3, [r4, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 800696c:	2308      	movs	r3, #8
 800696e:	70a3      	strb	r3, [r4, #2]
 8006970:	70e5      	strb	r5, [r4, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 8006972:	2306      	movs	r3, #6
 8006974:	7123      	strb	r3, [r4, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 8006976:	2304      	movs	r3, #4
 8006978:	7163      	strb	r3, [r4, #5]
  if(ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 800697a:	f640 0306 	movw	r3, #2054	; 0x806
 800697e:	9300      	str	r3, [sp, #0]
 8006980:	4653      	mov	r3, sl
 8006982:	464a      	mov	r2, r9
 8006984:	4631      	mov	r1, r6
 8006986:	4638      	mov	r0, r7
 8006988:	f006 f93c 	bl	800cc04 <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 800698c:	4630      	mov	r0, r6
 800698e:	f001 fe59 	bl	8008644 <pbuf_free>
  p = NULL;
  /* could not allocate pbuf for ARP request */

  return result;
 8006992:	4628      	mov	r0, r5
}
 8006994:	b002      	add	sp, #8
 8006996:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  LWIP_ASSERT("netif != NULL", netif != NULL);
 800699a:	4b09      	ldr	r3, [pc, #36]	; (80069c0 <etharp_raw+0xcc>)
 800699c:	f44f 628b 	mov.w	r2, #1112	; 0x458
 80069a0:	490a      	ldr	r1, [pc, #40]	; (80069cc <etharp_raw+0xd8>)
 80069a2:	4809      	ldr	r0, [pc, #36]	; (80069c8 <etharp_raw+0xd4>)
 80069a4:	f007 f911 	bl	800dbca <iprintf>
 80069a8:	e7ae      	b.n	8006908 <etharp_raw+0x14>
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 80069aa:	4b05      	ldr	r3, [pc, #20]	; (80069c0 <etharp_raw+0xcc>)
 80069ac:	f240 4264 	movw	r2, #1124	; 0x464
 80069b0:	4907      	ldr	r1, [pc, #28]	; (80069d0 <etharp_raw+0xdc>)
 80069b2:	4805      	ldr	r0, [pc, #20]	; (80069c8 <etharp_raw+0xd4>)
 80069b4:	f007 f909 	bl	800dbca <iprintf>
 80069b8:	e7b1      	b.n	800691e <etharp_raw+0x2a>
    return ERR_MEM;
 80069ba:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80069be:	e7e9      	b.n	8006994 <etharp_raw+0xa0>
 80069c0:	0800ec7c 	.word	0x0800ec7c
 80069c4:	0800edf0 	.word	0x0800edf0
 80069c8:	0800e3b0 	.word	0x0800e3b0
 80069cc:	0800edac 	.word	0x0800edac
 80069d0:	0800edbc 	.word	0x0800edbc

080069d4 <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr* hw_dst_addr)
{
 80069d4:	b530      	push	{r4, r5, lr}
 80069d6:	b085      	sub	sp, #20
 80069d8:	4603      	mov	r3, r0
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 80069da:	f100 0425 	add.w	r4, r0, #37	; 0x25
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 80069de:	3304      	adds	r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 80069e0:	2501      	movs	r5, #1
 80069e2:	9503      	str	r5, [sp, #12]
 80069e4:	9102      	str	r1, [sp, #8]
 80069e6:	4904      	ldr	r1, [pc, #16]	; (80069f8 <etharp_request_dst+0x24>)
 80069e8:	9101      	str	r1, [sp, #4]
 80069ea:	9300      	str	r3, [sp, #0]
 80069ec:	4623      	mov	r3, r4
 80069ee:	4621      	mov	r1, r4
 80069f0:	f7ff ff80 	bl	80068f4 <etharp_raw>
                    ipaddr, ARP_REQUEST);
}
 80069f4:	b005      	add	sp, #20
 80069f6:	bd30      	pop	{r4, r5, pc}
 80069f8:	08010574 	.word	0x08010574

080069fc <etharp_cleanup_netif>:
{
 80069fc:	b538      	push	{r3, r4, r5, lr}
 80069fe:	4605      	mov	r5, r0
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8006a00:	2400      	movs	r4, #0
 8006a02:	e001      	b.n	8006a08 <etharp_cleanup_netif+0xc>
 8006a04:	3401      	adds	r4, #1
 8006a06:	b2e4      	uxtb	r4, r4
 8006a08:	2c09      	cmp	r4, #9
 8006a0a:	d810      	bhi.n	8006a2e <etharp_cleanup_netif+0x32>
    u8_t state = arp_table[i].state;
 8006a0c:	4620      	mov	r0, r4
 8006a0e:	eb04 0344 	add.w	r3, r4, r4, lsl #1
 8006a12:	00da      	lsls	r2, r3, #3
 8006a14:	4b06      	ldr	r3, [pc, #24]	; (8006a30 <etharp_cleanup_netif+0x34>)
 8006a16:	4413      	add	r3, r2
 8006a18:	7d1b      	ldrb	r3, [r3, #20]
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 8006a1a:	2b00      	cmp	r3, #0
 8006a1c:	d0f2      	beq.n	8006a04 <etharp_cleanup_netif+0x8>
 8006a1e:	4b04      	ldr	r3, [pc, #16]	; (8006a30 <etharp_cleanup_netif+0x34>)
 8006a20:	4413      	add	r3, r2
 8006a22:	689b      	ldr	r3, [r3, #8]
 8006a24:	42ab      	cmp	r3, r5
 8006a26:	d1ed      	bne.n	8006a04 <etharp_cleanup_netif+0x8>
      etharp_free_entry(i);
 8006a28:	f7ff fe10 	bl	800664c <etharp_free_entry>
 8006a2c:	e7ea      	b.n	8006a04 <etharp_cleanup_netif+0x8>
}
 8006a2e:	bd38      	pop	{r3, r4, r5, pc}
 8006a30:	20003e40 	.word	0x20003e40

08006a34 <etharp_input>:
{
 8006a34:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006a38:	b086      	sub	sp, #24
  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 8006a3a:	b161      	cbz	r1, 8006a56 <etharp_input+0x22>
 8006a3c:	4604      	mov	r4, r0
 8006a3e:	460e      	mov	r6, r1
  hdr = (struct etharp_hdr *)p->payload;
 8006a40:	6845      	ldr	r5, [r0, #4]
  if ((hdr->hwtype != PP_HTONS(HWTYPE_ETHERNET)) ||
 8006a42:	882b      	ldrh	r3, [r5, #0]
 8006a44:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006a48:	d00d      	beq.n	8006a66 <etharp_input+0x32>
    pbuf_free(p);
 8006a4a:	4620      	mov	r0, r4
 8006a4c:	f001 fdfa 	bl	8008644 <pbuf_free>
}
 8006a50:	b006      	add	sp, #24
 8006a52:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 8006a56:	4b20      	ldr	r3, [pc, #128]	; (8006ad8 <etharp_input+0xa4>)
 8006a58:	f44f 7222 	mov.w	r2, #648	; 0x288
 8006a5c:	491f      	ldr	r1, [pc, #124]	; (8006adc <etharp_input+0xa8>)
 8006a5e:	4820      	ldr	r0, [pc, #128]	; (8006ae0 <etharp_input+0xac>)
 8006a60:	f007 f8b3 	bl	800dbca <iprintf>
 8006a64:	e7f4      	b.n	8006a50 <etharp_input+0x1c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 8006a66:	792b      	ldrb	r3, [r5, #4]
  if ((hdr->hwtype != PP_HTONS(HWTYPE_ETHERNET)) ||
 8006a68:	2b06      	cmp	r3, #6
 8006a6a:	d1ee      	bne.n	8006a4a <etharp_input+0x16>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 8006a6c:	796b      	ldrb	r3, [r5, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 8006a6e:	2b04      	cmp	r3, #4
 8006a70:	d1eb      	bne.n	8006a4a <etharp_input+0x16>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 8006a72:	886b      	ldrh	r3, [r5, #2]
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 8006a74:	2b08      	cmp	r3, #8
 8006a76:	d1e8      	bne.n	8006a4a <etharp_input+0x16>
  IPADDR2_COPY(&sipaddr, &hdr->sipaddr);
 8006a78:	f8d5 300e 	ldr.w	r3, [r5, #14]
 8006a7c:	9305      	str	r3, [sp, #20]
  IPADDR2_COPY(&dipaddr, &hdr->dipaddr);
 8006a7e:	69af      	ldr	r7, [r5, #24]
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8006a80:	684b      	ldr	r3, [r1, #4]
 8006a82:	b1ab      	cbz	r3, 8006ab0 <etharp_input+0x7c>
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 8006a84:	429f      	cmp	r7, r3
 8006a86:	bf14      	ite	ne
 8006a88:	2700      	movne	r7, #0
 8006a8a:	2701      	moveq	r7, #1
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 8006a8c:	f105 0808 	add.w	r8, r5, #8
 8006a90:	b187      	cbz	r7, 8006ab4 <etharp_input+0x80>
 8006a92:	2301      	movs	r3, #1
 8006a94:	4642      	mov	r2, r8
 8006a96:	a905      	add	r1, sp, #20
 8006a98:	4630      	mov	r0, r6
 8006a9a:	f7ff fec7 	bl	800682c <etharp_update_arp_entry>
  switch (hdr->opcode) {
 8006a9e:	88eb      	ldrh	r3, [r5, #6]
 8006aa0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006aa4:	d100      	bne.n	8006aa8 <etharp_input+0x74>
    if (for_us) {
 8006aa6:	b93f      	cbnz	r7, 8006ab8 <etharp_input+0x84>
  pbuf_free(p);
 8006aa8:	4620      	mov	r0, r4
 8006aaa:	f001 fdcb 	bl	8008644 <pbuf_free>
 8006aae:	e7cf      	b.n	8006a50 <etharp_input+0x1c>
    for_us = 0;
 8006ab0:	2700      	movs	r7, #0
 8006ab2:	e7eb      	b.n	8006a8c <etharp_input+0x58>
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 8006ab4:	2302      	movs	r3, #2
 8006ab6:	e7ed      	b.n	8006a94 <etharp_input+0x60>
                 (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 8006ab8:	f106 0125 	add.w	r1, r6, #37	; 0x25
                 (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 8006abc:	1d33      	adds	r3, r6, #4
      etharp_raw(netif,
 8006abe:	2202      	movs	r2, #2
 8006ac0:	9203      	str	r2, [sp, #12]
 8006ac2:	aa05      	add	r2, sp, #20
 8006ac4:	9202      	str	r2, [sp, #8]
 8006ac6:	f8cd 8004 	str.w	r8, [sp, #4]
 8006aca:	9300      	str	r3, [sp, #0]
 8006acc:	460b      	mov	r3, r1
 8006ace:	4642      	mov	r2, r8
 8006ad0:	4630      	mov	r0, r6
 8006ad2:	f7ff ff0f 	bl	80068f4 <etharp_raw>
 8006ad6:	e7e7      	b.n	8006aa8 <etharp_input+0x74>
 8006ad8:	0800ec7c 	.word	0x0800ec7c
 8006adc:	0800edac 	.word	0x0800edac
 8006ae0:	0800e3b0 	.word	0x0800e3b0

08006ae4 <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 8006ae4:	b508      	push	{r3, lr}
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
 8006ae6:	4a02      	ldr	r2, [pc, #8]	; (8006af0 <etharp_request+0xc>)
 8006ae8:	f7ff ff74 	bl	80069d4 <etharp_request_dst>
}
 8006aec:	bd08      	pop	{r3, pc}
 8006aee:	bf00      	nop
 8006af0:	08010500 	.word	0x08010500

08006af4 <etharp_tmr>:
{
 8006af4:	b538      	push	{r3, r4, r5, lr}
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8006af6:	2400      	movs	r4, #0
 8006af8:	e005      	b.n	8006b06 <etharp_tmr+0x12>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 8006afa:	2b04      	cmp	r3, #4
 8006afc:	d91d      	bls.n	8006b3a <etharp_tmr+0x46>
        etharp_free_entry(i);
 8006afe:	f7ff fda5 	bl	800664c <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8006b02:	3401      	adds	r4, #1
 8006b04:	b2e4      	uxtb	r4, r4
 8006b06:	2c09      	cmp	r4, #9
 8006b08:	d838      	bhi.n	8006b7c <etharp_tmr+0x88>
    u8_t state = arp_table[i].state;
 8006b0a:	4620      	mov	r0, r4
 8006b0c:	eb04 0344 	add.w	r3, r4, r4, lsl #1
 8006b10:	00da      	lsls	r2, r3, #3
 8006b12:	4b1b      	ldr	r3, [pc, #108]	; (8006b80 <etharp_tmr+0x8c>)
 8006b14:	4413      	add	r3, r2
 8006b16:	7d1b      	ldrb	r3, [r3, #20]
    if (state != ETHARP_STATE_EMPTY
 8006b18:	2b00      	cmp	r3, #0
 8006b1a:	d0f2      	beq.n	8006b02 <etharp_tmr+0xe>
      arp_table[i].ctime++;
 8006b1c:	4611      	mov	r1, r2
 8006b1e:	4a18      	ldr	r2, [pc, #96]	; (8006b80 <etharp_tmr+0x8c>)
 8006b20:	440a      	add	r2, r1
 8006b22:	8a53      	ldrh	r3, [r2, #18]
 8006b24:	3301      	adds	r3, #1
 8006b26:	b29b      	uxth	r3, r3
 8006b28:	8253      	strh	r3, [r2, #18]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 8006b2a:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8006b2e:	d2e6      	bcs.n	8006afe <etharp_tmr+0xa>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 8006b30:	4a13      	ldr	r2, [pc, #76]	; (8006b80 <etharp_tmr+0x8c>)
 8006b32:	440a      	add	r2, r1
 8006b34:	7d12      	ldrb	r2, [r2, #20]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 8006b36:	2a01      	cmp	r2, #1
 8006b38:	d0df      	beq.n	8006afa <etharp_tmr+0x6>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 8006b3a:	2a03      	cmp	r2, #3
 8006b3c:	d00e      	beq.n	8006b5c <etharp_tmr+0x68>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 8006b3e:	2a04      	cmp	r2, #4
 8006b40:	d014      	beq.n	8006b6c <etharp_tmr+0x78>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 8006b42:	2a01      	cmp	r2, #1
 8006b44:	d1dd      	bne.n	8006b02 <etharp_tmr+0xe>
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 8006b46:	4a0e      	ldr	r2, [pc, #56]	; (8006b80 <etharp_tmr+0x8c>)
 8006b48:	0043      	lsls	r3, r0, #1
 8006b4a:	181d      	adds	r5, r3, r0
 8006b4c:	00e9      	lsls	r1, r5, #3
 8006b4e:	4411      	add	r1, r2
 8006b50:	460a      	mov	r2, r1
 8006b52:	3104      	adds	r1, #4
 8006b54:	6890      	ldr	r0, [r2, #8]
 8006b56:	f7ff ffc5 	bl	8006ae4 <etharp_request>
 8006b5a:	e7d2      	b.n	8006b02 <etharp_tmr+0xe>
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 8006b5c:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8006b60:	00c2      	lsls	r2, r0, #3
 8006b62:	4b07      	ldr	r3, [pc, #28]	; (8006b80 <etharp_tmr+0x8c>)
 8006b64:	4413      	add	r3, r2
 8006b66:	2204      	movs	r2, #4
 8006b68:	751a      	strb	r2, [r3, #20]
 8006b6a:	e7ca      	b.n	8006b02 <etharp_tmr+0xe>
        arp_table[i].state = ETHARP_STATE_STABLE;
 8006b6c:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8006b70:	00c2      	lsls	r2, r0, #3
 8006b72:	4b03      	ldr	r3, [pc, #12]	; (8006b80 <etharp_tmr+0x8c>)
 8006b74:	4413      	add	r3, r2
 8006b76:	2202      	movs	r2, #2
 8006b78:	751a      	strb	r2, [r3, #20]
 8006b7a:	e7c2      	b.n	8006b02 <etharp_tmr+0xe>
}
 8006b7c:	bd38      	pop	{r3, r4, r5, pc}
 8006b7e:	bf00      	nop
 8006b80:	20003e40 	.word	0x20003e40

08006b84 <etharp_output_to_arp_index>:
{
 8006b84:	b570      	push	{r4, r5, r6, lr}
 8006b86:	b082      	sub	sp, #8
 8006b88:	4605      	mov	r5, r0
 8006b8a:	460e      	mov	r6, r1
 8006b8c:	4614      	mov	r4, r2
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 8006b8e:	eb02 0342 	add.w	r3, r2, r2, lsl #1
 8006b92:	00da      	lsls	r2, r3, #3
 8006b94:	4b2c      	ldr	r3, [pc, #176]	; (8006c48 <etharp_output_to_arp_index+0xc4>)
 8006b96:	4413      	add	r3, r2
 8006b98:	7d1b      	ldrb	r3, [r3, #20]
 8006b9a:	2b01      	cmp	r3, #1
 8006b9c:	d919      	bls.n	8006bd2 <etharp_output_to_arp_index+0x4e>
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 8006b9e:	eb04 0344 	add.w	r3, r4, r4, lsl #1
 8006ba2:	00da      	lsls	r2, r3, #3
 8006ba4:	4b28      	ldr	r3, [pc, #160]	; (8006c48 <etharp_output_to_arp_index+0xc4>)
 8006ba6:	4413      	add	r3, r2
 8006ba8:	7d1b      	ldrb	r3, [r3, #20]
 8006baa:	2b02      	cmp	r3, #2
 8006bac:	d019      	beq.n	8006be2 <etharp_output_to_arp_index+0x5e>
  return ethernet_output(netif, q, (struct eth_addr*)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 8006bae:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8006bb2:	00e3      	lsls	r3, r4, #3
 8006bb4:	3308      	adds	r3, #8
 8006bb6:	4a24      	ldr	r2, [pc, #144]	; (8006c48 <etharp_output_to_arp_index+0xc4>)
 8006bb8:	4413      	add	r3, r2
 8006bba:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006bbe:	9200      	str	r2, [sp, #0]
 8006bc0:	3304      	adds	r3, #4
 8006bc2:	f105 0225 	add.w	r2, r5, #37	; 0x25
 8006bc6:	4631      	mov	r1, r6
 8006bc8:	4628      	mov	r0, r5
 8006bca:	f006 f81b 	bl	800cc04 <ethernet_output>
}
 8006bce:	b002      	add	sp, #8
 8006bd0:	bd70      	pop	{r4, r5, r6, pc}
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 8006bd2:	4b1e      	ldr	r3, [pc, #120]	; (8006c4c <etharp_output_to_arp_index+0xc8>)
 8006bd4:	f240 22ed 	movw	r2, #749	; 0x2ed
 8006bd8:	491d      	ldr	r1, [pc, #116]	; (8006c50 <etharp_output_to_arp_index+0xcc>)
 8006bda:	481e      	ldr	r0, [pc, #120]	; (8006c54 <etharp_output_to_arp_index+0xd0>)
 8006bdc:	f006 fff5 	bl	800dbca <iprintf>
 8006be0:	e7dd      	b.n	8006b9e <etharp_output_to_arp_index+0x1a>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 8006be2:	4b19      	ldr	r3, [pc, #100]	; (8006c48 <etharp_output_to_arp_index+0xc4>)
 8006be4:	4413      	add	r3, r2
 8006be6:	8a5b      	ldrh	r3, [r3, #18]
 8006be8:	f5b3 7f8e 	cmp.w	r3, #284	; 0x11c
 8006bec:	d819      	bhi.n	8006c22 <etharp_output_to_arp_index+0x9e>
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 8006bee:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 8006bf2:	d3dc      	bcc.n	8006bae <etharp_output_to_arp_index+0x2a>
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 8006bf4:	4a14      	ldr	r2, [pc, #80]	; (8006c48 <etharp_output_to_arp_index+0xc4>)
 8006bf6:	0063      	lsls	r3, r4, #1
 8006bf8:	1918      	adds	r0, r3, r4
 8006bfa:	00c1      	lsls	r1, r0, #3
 8006bfc:	4608      	mov	r0, r1
 8006bfe:	4411      	add	r1, r2
 8006c00:	3008      	adds	r0, #8
 8006c02:	4402      	add	r2, r0
 8006c04:	3204      	adds	r2, #4
 8006c06:	3104      	adds	r1, #4
 8006c08:	4628      	mov	r0, r5
 8006c0a:	f7ff fee3 	bl	80069d4 <etharp_request_dst>
 8006c0e:	2800      	cmp	r0, #0
 8006c10:	d1cd      	bne.n	8006bae <etharp_output_to_arp_index+0x2a>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 8006c12:	eb04 0344 	add.w	r3, r4, r4, lsl #1
 8006c16:	00da      	lsls	r2, r3, #3
 8006c18:	4b0b      	ldr	r3, [pc, #44]	; (8006c48 <etharp_output_to_arp_index+0xc4>)
 8006c1a:	4413      	add	r3, r2
 8006c1c:	2203      	movs	r2, #3
 8006c1e:	751a      	strb	r2, [r3, #20]
 8006c20:	e7c5      	b.n	8006bae <etharp_output_to_arp_index+0x2a>
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 8006c22:	eb04 0244 	add.w	r2, r4, r4, lsl #1
 8006c26:	00d3      	lsls	r3, r2, #3
 8006c28:	4907      	ldr	r1, [pc, #28]	; (8006c48 <etharp_output_to_arp_index+0xc4>)
 8006c2a:	4419      	add	r1, r3
 8006c2c:	3104      	adds	r1, #4
 8006c2e:	4628      	mov	r0, r5
 8006c30:	f7ff ff58 	bl	8006ae4 <etharp_request>
 8006c34:	2800      	cmp	r0, #0
 8006c36:	d1ba      	bne.n	8006bae <etharp_output_to_arp_index+0x2a>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 8006c38:	eb04 0344 	add.w	r3, r4, r4, lsl #1
 8006c3c:	00da      	lsls	r2, r3, #3
 8006c3e:	4b02      	ldr	r3, [pc, #8]	; (8006c48 <etharp_output_to_arp_index+0xc4>)
 8006c40:	4413      	add	r3, r2
 8006c42:	2203      	movs	r2, #3
 8006c44:	751a      	strb	r2, [r3, #20]
 8006c46:	e7b2      	b.n	8006bae <etharp_output_to_arp_index+0x2a>
 8006c48:	20003e40 	.word	0x20003e40
 8006c4c:	0800ec7c 	.word	0x0800ec7c
 8006c50:	0800ed2c 	.word	0x0800ed2c
 8006c54:	0800e3b0 	.word	0x0800e3b0

08006c58 <etharp_query>:
{
 8006c58:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8006c5c:	b083      	sub	sp, #12
 8006c5e:	4606      	mov	r6, r0
 8006c60:	460c      	mov	r4, r1
 8006c62:	4617      	mov	r7, r2
  struct eth_addr * srcaddr = (struct eth_addr *)netif->hwaddr;
 8006c64:	f100 0825 	add.w	r8, r0, #37	; 0x25
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 8006c68:	4601      	mov	r1, r0
 8006c6a:	6820      	ldr	r0, [r4, #0]
 8006c6c:	f000 fc33 	bl	80074d6 <ip4_addr_isbroadcast_u32>
 8006c70:	2800      	cmp	r0, #0
 8006c72:	f040 80aa 	bne.w	8006dca <etharp_query+0x172>
      ip4_addr_ismulticast(ipaddr) ||
 8006c76:	6823      	ldr	r3, [r4, #0]
 8006c78:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 8006c7c:	2ae0      	cmp	r2, #224	; 0xe0
 8006c7e:	f000 80a7 	beq.w	8006dd0 <etharp_query+0x178>
      ip4_addr_ismulticast(ipaddr) ||
 8006c82:	2c00      	cmp	r4, #0
 8006c84:	f000 80a7 	beq.w	8006dd6 <etharp_query+0x17e>
      ip4_addr_isany(ipaddr)) {
 8006c88:	2b00      	cmp	r3, #0
 8006c8a:	f000 80a7 	beq.w	8006ddc <etharp_query+0x184>
  i = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 8006c8e:	4632      	mov	r2, r6
 8006c90:	2101      	movs	r1, #1
 8006c92:	4620      	mov	r0, r4
 8006c94:	f7ff fcf4 	bl	8006680 <etharp_find_entry>
  if (i < 0) {
 8006c98:	1e05      	subs	r5, r0, #0
 8006c9a:	f2c0 80a2 	blt.w	8006de2 <etharp_query+0x18a>
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 8006c9e:	eb05 0345 	add.w	r3, r5, r5, lsl #1
 8006ca2:	00da      	lsls	r2, r3, #3
 8006ca4:	4b51      	ldr	r3, [pc, #324]	; (8006dec <etharp_query+0x194>)
 8006ca6:	4413      	add	r3, r2
 8006ca8:	7d1b      	ldrb	r3, [r3, #20]
 8006caa:	bb1b      	cbnz	r3, 8006cf4 <etharp_query+0x9c>
    arp_table[i].state = ETHARP_STATE_PENDING;
 8006cac:	006a      	lsls	r2, r5, #1
 8006cae:	442a      	add	r2, r5
 8006cb0:	00d1      	lsls	r1, r2, #3
 8006cb2:	4b4e      	ldr	r3, [pc, #312]	; (8006dec <etharp_query+0x194>)
 8006cb4:	440b      	add	r3, r1
 8006cb6:	f04f 0901 	mov.w	r9, #1
 8006cba:	f883 9014 	strb.w	r9, [r3, #20]
    arp_table[i].netif = netif;
 8006cbe:	609e      	str	r6, [r3, #8]
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 8006cc0:	eb05 0345 	add.w	r3, r5, r5, lsl #1
 8006cc4:	00da      	lsls	r2, r3, #3
 8006cc6:	4b49      	ldr	r3, [pc, #292]	; (8006dec <etharp_query+0x194>)
 8006cc8:	4413      	add	r3, r2
 8006cca:	7d1b      	ldrb	r3, [r3, #20]
 8006ccc:	b1ab      	cbz	r3, 8006cfa <etharp_query+0xa2>
  if (is_new_entry || (q == NULL)) {
 8006cce:	f1b9 0f00 	cmp.w	r9, #0
 8006cd2:	d11a      	bne.n	8006d0a <etharp_query+0xb2>
 8006cd4:	b1cf      	cbz	r7, 8006d0a <etharp_query+0xb2>
  err_t result = ERR_MEM;
 8006cd6:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
  LWIP_ASSERT("q != NULL", q != NULL);
 8006cda:	b1f7      	cbz	r7, 8006d1a <etharp_query+0xc2>
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 8006cdc:	eb05 0345 	add.w	r3, r5, r5, lsl #1
 8006ce0:	00da      	lsls	r2, r3, #3
 8006ce2:	4b42      	ldr	r3, [pc, #264]	; (8006dec <etharp_query+0x194>)
 8006ce4:	4413      	add	r3, r2
 8006ce6:	7d1b      	ldrb	r3, [r3, #20]
 8006ce8:	2b01      	cmp	r3, #1
 8006cea:	d81e      	bhi.n	8006d2a <etharp_query+0xd2>
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 8006cec:	2b01      	cmp	r3, #1
 8006cee:	d12c      	bne.n	8006d4a <etharp_query+0xf2>
 8006cf0:	463c      	mov	r4, r7
 8006cf2:	e032      	b.n	8006d5a <etharp_query+0x102>
  int is_new_entry = 0;
 8006cf4:	f04f 0900 	mov.w	r9, #0
 8006cf8:	e7e2      	b.n	8006cc0 <etharp_query+0x68>
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 8006cfa:	4b3d      	ldr	r3, [pc, #244]	; (8006df0 <etharp_query+0x198>)
 8006cfc:	f240 32c9 	movw	r2, #969	; 0x3c9
 8006d00:	493c      	ldr	r1, [pc, #240]	; (8006df4 <etharp_query+0x19c>)
 8006d02:	483d      	ldr	r0, [pc, #244]	; (8006df8 <etharp_query+0x1a0>)
 8006d04:	f006 ff61 	bl	800dbca <iprintf>
 8006d08:	e7e1      	b.n	8006cce <etharp_query+0x76>
    result = etharp_request(netif, ipaddr);
 8006d0a:	4621      	mov	r1, r4
 8006d0c:	4630      	mov	r0, r6
 8006d0e:	f7ff fee9 	bl	8006ae4 <etharp_request>
 8006d12:	4604      	mov	r4, r0
    if (q == NULL) {
 8006d14:	2f00      	cmp	r7, #0
 8006d16:	d1e0      	bne.n	8006cda <etharp_query+0x82>
 8006d18:	e017      	b.n	8006d4a <etharp_query+0xf2>
  LWIP_ASSERT("q != NULL", q != NULL);
 8006d1a:	4b35      	ldr	r3, [pc, #212]	; (8006df0 <etharp_query+0x198>)
 8006d1c:	f240 32db 	movw	r2, #987	; 0x3db
 8006d20:	4936      	ldr	r1, [pc, #216]	; (8006dfc <etharp_query+0x1a4>)
 8006d22:	4835      	ldr	r0, [pc, #212]	; (8006df8 <etharp_query+0x1a0>)
 8006d24:	f006 ff51 	bl	800dbca <iprintf>
 8006d28:	e7d8      	b.n	8006cdc <etharp_query+0x84>
    ETHARP_SET_HINT(netif, i);
 8006d2a:	4b35      	ldr	r3, [pc, #212]	; (8006e00 <etharp_query+0x1a8>)
 8006d2c:	701d      	strb	r5, [r3, #0]
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 8006d2e:	4613      	mov	r3, r2
 8006d30:	3308      	adds	r3, #8
 8006d32:	4a2e      	ldr	r2, [pc, #184]	; (8006dec <etharp_query+0x194>)
 8006d34:	4413      	add	r3, r2
 8006d36:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006d3a:	9200      	str	r2, [sp, #0]
 8006d3c:	3304      	adds	r3, #4
 8006d3e:	4642      	mov	r2, r8
 8006d40:	4639      	mov	r1, r7
 8006d42:	4630      	mov	r0, r6
 8006d44:	f005 ff5e 	bl	800cc04 <ethernet_output>
 8006d48:	4604      	mov	r4, r0
}
 8006d4a:	4620      	mov	r0, r4
 8006d4c:	b003      	add	sp, #12
 8006d4e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      if (p->type != PBUF_ROM) {
 8006d52:	7b23      	ldrb	r3, [r4, #12]
 8006d54:	2b01      	cmp	r3, #1
 8006d56:	d122      	bne.n	8006d9e <etharp_query+0x146>
      p = p->next;
 8006d58:	6824      	ldr	r4, [r4, #0]
    while (p) {
 8006d5a:	b174      	cbz	r4, 8006d7a <etharp_query+0x122>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 8006d5c:	8962      	ldrh	r2, [r4, #10]
 8006d5e:	8923      	ldrh	r3, [r4, #8]
 8006d60:	429a      	cmp	r2, r3
 8006d62:	d1f6      	bne.n	8006d52 <etharp_query+0xfa>
 8006d64:	6823      	ldr	r3, [r4, #0]
 8006d66:	2b00      	cmp	r3, #0
 8006d68:	d0f3      	beq.n	8006d52 <etharp_query+0xfa>
 8006d6a:	4b21      	ldr	r3, [pc, #132]	; (8006df0 <etharp_query+0x198>)
 8006d6c:	f44f 727b 	mov.w	r2, #1004	; 0x3ec
 8006d70:	4924      	ldr	r1, [pc, #144]	; (8006e04 <etharp_query+0x1ac>)
 8006d72:	4821      	ldr	r0, [pc, #132]	; (8006df8 <etharp_query+0x1a0>)
 8006d74:	f006 ff29 	bl	800dbca <iprintf>
 8006d78:	e7eb      	b.n	8006d52 <etharp_query+0xfa>
    int copy_needed = 0;
 8006d7a:	2300      	movs	r3, #0
    if (copy_needed) {
 8006d7c:	b18b      	cbz	r3, 8006da2 <etharp_query+0x14a>
      p = pbuf_alloc(PBUF_LINK, p->tot_len, PBUF_RAM);
 8006d7e:	2200      	movs	r2, #0
 8006d80:	8921      	ldrh	r1, [r4, #8]
 8006d82:	2002      	movs	r0, #2
 8006d84:	f001 fcca 	bl	800871c <pbuf_alloc>
      if (p != NULL) {
 8006d88:	4604      	mov	r4, r0
 8006d8a:	b170      	cbz	r0, 8006daa <etharp_query+0x152>
        if (pbuf_copy(p, q) != ERR_OK) {
 8006d8c:	4639      	mov	r1, r7
 8006d8e:	f001 fe87 	bl	8008aa0 <pbuf_copy>
 8006d92:	b150      	cbz	r0, 8006daa <etharp_query+0x152>
          pbuf_free(p);
 8006d94:	4620      	mov	r0, r4
 8006d96:	f001 fc55 	bl	8008644 <pbuf_free>
          p = NULL;
 8006d9a:	2400      	movs	r4, #0
 8006d9c:	e005      	b.n	8006daa <etharp_query+0x152>
        copy_needed = 1;
 8006d9e:	2301      	movs	r3, #1
 8006da0:	e7ec      	b.n	8006d7c <etharp_query+0x124>
      pbuf_ref(p);
 8006da2:	4638      	mov	r0, r7
 8006da4:	f001 fe1e 	bl	80089e4 <pbuf_ref>
      p = q;
 8006da8:	463c      	mov	r4, r7
    if (p != NULL) {
 8006daa:	b1e4      	cbz	r4, 8006de6 <etharp_query+0x18e>
      if (arp_table[i].q != NULL) {
 8006dac:	eb05 0245 	add.w	r2, r5, r5, lsl #1
 8006db0:	00d3      	lsls	r3, r2, #3
 8006db2:	4a0e      	ldr	r2, [pc, #56]	; (8006dec <etharp_query+0x194>)
 8006db4:	58d0      	ldr	r0, [r2, r3]
 8006db6:	b108      	cbz	r0, 8006dbc <etharp_query+0x164>
        pbuf_free(arp_table[i].q);
 8006db8:	f001 fc44 	bl	8008644 <pbuf_free>
      arp_table[i].q = p;
 8006dbc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006dc0:	00eb      	lsls	r3, r5, #3
 8006dc2:	4a0a      	ldr	r2, [pc, #40]	; (8006dec <etharp_query+0x194>)
 8006dc4:	50d4      	str	r4, [r2, r3]
      result = ERR_OK;
 8006dc6:	2400      	movs	r4, #0
 8006dc8:	e7bf      	b.n	8006d4a <etharp_query+0xf2>
    return ERR_ARG;
 8006dca:	f06f 040f 	mvn.w	r4, #15
 8006dce:	e7bc      	b.n	8006d4a <etharp_query+0xf2>
 8006dd0:	f06f 040f 	mvn.w	r4, #15
 8006dd4:	e7b9      	b.n	8006d4a <etharp_query+0xf2>
 8006dd6:	f06f 040f 	mvn.w	r4, #15
 8006dda:	e7b6      	b.n	8006d4a <etharp_query+0xf2>
 8006ddc:	f06f 040f 	mvn.w	r4, #15
 8006de0:	e7b3      	b.n	8006d4a <etharp_query+0xf2>
    return (err_t)i;
 8006de2:	462c      	mov	r4, r5
 8006de4:	e7b1      	b.n	8006d4a <etharp_query+0xf2>
      result = ERR_MEM;
 8006de6:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8006dea:	e7ae      	b.n	8006d4a <etharp_query+0xf2>
 8006dec:	20003e40 	.word	0x20003e40
 8006df0:	0800ec7c 	.word	0x0800ec7c
 8006df4:	0800ed5c 	.word	0x0800ed5c
 8006df8:	0800e3b0 	.word	0x0800e3b0
 8006dfc:	0800ed84 	.word	0x0800ed84
 8006e00:	20003f30 	.word	0x20003f30
 8006e04:	0800ed90 	.word	0x0800ed90

08006e08 <etharp_output>:
{
 8006e08:	b570      	push	{r4, r5, r6, lr}
 8006e0a:	b084      	sub	sp, #16
 8006e0c:	460e      	mov	r6, r1
 8006e0e:	4614      	mov	r4, r2
  LWIP_ASSERT("netif != NULL", netif != NULL);
 8006e10:	4605      	mov	r5, r0
 8006e12:	2800      	cmp	r0, #0
 8006e14:	d02f      	beq.n	8006e76 <etharp_output+0x6e>
  LWIP_ASSERT("q != NULL", q != NULL);
 8006e16:	2e00      	cmp	r6, #0
 8006e18:	d035      	beq.n	8006e86 <etharp_output+0x7e>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 8006e1a:	2c00      	cmp	r4, #0
 8006e1c:	d03b      	beq.n	8006e96 <etharp_output+0x8e>
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 8006e1e:	4629      	mov	r1, r5
 8006e20:	6820      	ldr	r0, [r4, #0]
 8006e22:	f000 fb58 	bl	80074d6 <ip4_addr_isbroadcast_u32>
 8006e26:	2800      	cmp	r0, #0
 8006e28:	d17a      	bne.n	8006f20 <etharp_output+0x118>
  } else if (ip4_addr_ismulticast(ipaddr)) {
 8006e2a:	6823      	ldr	r3, [r4, #0]
 8006e2c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8006e30:	2ae0      	cmp	r2, #224	; 0xe0
 8006e32:	d038      	beq.n	8006ea6 <etharp_output+0x9e>
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 8006e34:	686a      	ldr	r2, [r5, #4]
 8006e36:	68a9      	ldr	r1, [r5, #8]
 8006e38:	405a      	eors	r2, r3
 8006e3a:	420a      	tst	r2, r1
 8006e3c:	d009      	beq.n	8006e52 <etharp_output+0x4a>
        !ip4_addr_islinklocal(ipaddr)) {
 8006e3e:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 8006e40:	f64f 62a9 	movw	r2, #65193	; 0xfea9
 8006e44:	4293      	cmp	r3, r2
 8006e46:	d004      	beq.n	8006e52 <etharp_output+0x4a>
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 8006e48:	68eb      	ldr	r3, [r5, #12]
 8006e4a:	2b00      	cmp	r3, #0
 8006e4c:	d074      	beq.n	8006f38 <etharp_output+0x130>
            dst_addr = netif_ip4_gw(netif);
 8006e4e:	f105 040c 	add.w	r4, r5, #12
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 8006e52:	4b3b      	ldr	r3, [pc, #236]	; (8006f40 <etharp_output+0x138>)
 8006e54:	781a      	ldrb	r2, [r3, #0]
 8006e56:	eb02 0342 	add.w	r3, r2, r2, lsl #1
 8006e5a:	00d9      	lsls	r1, r3, #3
 8006e5c:	4b39      	ldr	r3, [pc, #228]	; (8006f44 <etharp_output+0x13c>)
 8006e5e:	440b      	add	r3, r1
 8006e60:	7d1b      	ldrb	r3, [r3, #20]
 8006e62:	2b01      	cmp	r3, #1
 8006e64:	d954      	bls.n	8006f10 <etharp_output+0x108>
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 8006e66:	6820      	ldr	r0, [r4, #0]
 8006e68:	4b36      	ldr	r3, [pc, #216]	; (8006f44 <etharp_output+0x13c>)
 8006e6a:	440b      	add	r3, r1
 8006e6c:	685b      	ldr	r3, [r3, #4]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 8006e6e:	4298      	cmp	r0, r3
 8006e70:	d02f      	beq.n	8006ed2 <etharp_output+0xca>
 8006e72:	2200      	movs	r2, #0
 8006e74:	e034      	b.n	8006ee0 <etharp_output+0xd8>
  LWIP_ASSERT("netif != NULL", netif != NULL);
 8006e76:	4b34      	ldr	r3, [pc, #208]	; (8006f48 <etharp_output+0x140>)
 8006e78:	f240 321b 	movw	r2, #795	; 0x31b
 8006e7c:	4933      	ldr	r1, [pc, #204]	; (8006f4c <etharp_output+0x144>)
 8006e7e:	4834      	ldr	r0, [pc, #208]	; (8006f50 <etharp_output+0x148>)
 8006e80:	f006 fea3 	bl	800dbca <iprintf>
 8006e84:	e7c7      	b.n	8006e16 <etharp_output+0xe>
  LWIP_ASSERT("q != NULL", q != NULL);
 8006e86:	4b30      	ldr	r3, [pc, #192]	; (8006f48 <etharp_output+0x140>)
 8006e88:	f44f 7247 	mov.w	r2, #796	; 0x31c
 8006e8c:	4931      	ldr	r1, [pc, #196]	; (8006f54 <etharp_output+0x14c>)
 8006e8e:	4830      	ldr	r0, [pc, #192]	; (8006f50 <etharp_output+0x148>)
 8006e90:	f006 fe9b 	bl	800dbca <iprintf>
 8006e94:	e7c1      	b.n	8006e1a <etharp_output+0x12>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 8006e96:	4b2c      	ldr	r3, [pc, #176]	; (8006f48 <etharp_output+0x140>)
 8006e98:	f240 321d 	movw	r2, #797	; 0x31d
 8006e9c:	492e      	ldr	r1, [pc, #184]	; (8006f58 <etharp_output+0x150>)
 8006e9e:	482c      	ldr	r0, [pc, #176]	; (8006f50 <etharp_output+0x148>)
 8006ea0:	f006 fe93 	bl	800dbca <iprintf>
 8006ea4:	e7bb      	b.n	8006e1e <etharp_output+0x16>
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 8006ea6:	2301      	movs	r3, #1
 8006ea8:	f88d 3008 	strb.w	r3, [sp, #8]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 8006eac:	2300      	movs	r3, #0
 8006eae:	f88d 3009 	strb.w	r3, [sp, #9]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 8006eb2:	235e      	movs	r3, #94	; 0x5e
 8006eb4:	f88d 300a 	strb.w	r3, [sp, #10]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 8006eb8:	7863      	ldrb	r3, [r4, #1]
 8006eba:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006ebe:	f88d 300b 	strb.w	r3, [sp, #11]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 8006ec2:	78a3      	ldrb	r3, [r4, #2]
 8006ec4:	f88d 300c 	strb.w	r3, [sp, #12]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 8006ec8:	78e3      	ldrb	r3, [r4, #3]
 8006eca:	f88d 300d 	strb.w	r3, [sp, #13]
    dest = &mcastaddr;
 8006ece:	ab02      	add	r3, sp, #8
 8006ed0:	e027      	b.n	8006f22 <etharp_output+0x11a>
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 8006ed2:	4631      	mov	r1, r6
 8006ed4:	4628      	mov	r0, r5
 8006ed6:	f7ff fe55 	bl	8006b84 <etharp_output_to_arp_index>
 8006eda:	e02b      	b.n	8006f34 <etharp_output+0x12c>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 8006edc:	3201      	adds	r2, #1
 8006ede:	b252      	sxtb	r2, r2
 8006ee0:	2a09      	cmp	r2, #9
 8006ee2:	dc17      	bgt.n	8006f14 <etharp_output+0x10c>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 8006ee4:	eb02 0342 	add.w	r3, r2, r2, lsl #1
 8006ee8:	00d9      	lsls	r1, r3, #3
 8006eea:	4b16      	ldr	r3, [pc, #88]	; (8006f44 <etharp_output+0x13c>)
 8006eec:	440b      	add	r3, r1
 8006eee:	7d1b      	ldrb	r3, [r3, #20]
 8006ef0:	2b01      	cmp	r3, #1
 8006ef2:	d9f3      	bls.n	8006edc <etharp_output+0xd4>
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
 8006ef4:	6820      	ldr	r0, [r4, #0]
 8006ef6:	4b13      	ldr	r3, [pc, #76]	; (8006f44 <etharp_output+0x13c>)
 8006ef8:	440b      	add	r3, r1
 8006efa:	685b      	ldr	r3, [r3, #4]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 8006efc:	4298      	cmp	r0, r3
 8006efe:	d1ed      	bne.n	8006edc <etharp_output+0xd4>
        ETHARP_SET_HINT(netif, i);
 8006f00:	b2d2      	uxtb	r2, r2
 8006f02:	4b0f      	ldr	r3, [pc, #60]	; (8006f40 <etharp_output+0x138>)
 8006f04:	701a      	strb	r2, [r3, #0]
        return etharp_output_to_arp_index(netif, q, i);
 8006f06:	4631      	mov	r1, r6
 8006f08:	4628      	mov	r0, r5
 8006f0a:	f7ff fe3b 	bl	8006b84 <etharp_output_to_arp_index>
 8006f0e:	e011      	b.n	8006f34 <etharp_output+0x12c>
 8006f10:	2200      	movs	r2, #0
 8006f12:	e7e5      	b.n	8006ee0 <etharp_output+0xd8>
    return etharp_query(netif, dst_addr, q);
 8006f14:	4632      	mov	r2, r6
 8006f16:	4621      	mov	r1, r4
 8006f18:	4628      	mov	r0, r5
 8006f1a:	f7ff fe9d 	bl	8006c58 <etharp_query>
 8006f1e:	e009      	b.n	8006f34 <etharp_output+0x12c>
    dest = (const struct eth_addr *)&ethbroadcast;
 8006f20:	4b0e      	ldr	r3, [pc, #56]	; (8006f5c <etharp_output+0x154>)
  return ethernet_output(netif, q, (struct eth_addr*)(netif->hwaddr), dest, ETHTYPE_IP);
 8006f22:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006f26:	9200      	str	r2, [sp, #0]
 8006f28:	f105 0225 	add.w	r2, r5, #37	; 0x25
 8006f2c:	4631      	mov	r1, r6
 8006f2e:	4628      	mov	r0, r5
 8006f30:	f005 fe68 	bl	800cc04 <ethernet_output>
}
 8006f34:	b004      	add	sp, #16
 8006f36:	bd70      	pop	{r4, r5, r6, pc}
            return ERR_RTE;
 8006f38:	f06f 0003 	mvn.w	r0, #3
 8006f3c:	e7fa      	b.n	8006f34 <etharp_output+0x12c>
 8006f3e:	bf00      	nop
 8006f40:	20003f30 	.word	0x20003f30
 8006f44:	20003e40 	.word	0x20003e40
 8006f48:	0800ec7c 	.word	0x0800ec7c
 8006f4c:	0800edac 	.word	0x0800edac
 8006f50:	0800e3b0 	.word	0x0800e3b0
 8006f54:	0800ed84 	.word	0x0800ed84
 8006f58:	0800ed0c 	.word	0x0800ed0c
 8006f5c:	08010500 	.word	0x08010500

08006f60 <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 8006f60:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006f64:	b086      	sub	sp, #24
 8006f66:	4606      	mov	r6, r0
 8006f68:	4688      	mov	r8, r1
 8006f6a:	4617      	mov	r7, r2

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 8006f6c:	2200      	movs	r2, #0
 8006f6e:	2124      	movs	r1, #36	; 0x24
 8006f70:	2001      	movs	r0, #1
 8006f72:	f001 fbd3 	bl	800871c <pbuf_alloc>
                 PBUF_RAM);
  if (q == NULL) {
 8006f76:	2800      	cmp	r0, #0
 8006f78:	d037      	beq.n	8006fea <icmp_send_response+0x8a>
 8006f7a:	4605      	mov	r5, r0
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 8006f7c:	8943      	ldrh	r3, [r0, #10]
 8006f7e:	2b23      	cmp	r3, #35	; 0x23
 8006f80:	d936      	bls.n	8006ff0 <icmp_send_response+0x90>
             (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 8006f82:	f8d6 e004 	ldr.w	lr, [r6, #4]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 8006f86:	686c      	ldr	r4, [r5, #4]
  icmphdr->type = type;
 8006f88:	f884 8000 	strb.w	r8, [r4]
  icmphdr->code = code;
 8006f8c:	7067      	strb	r7, [r4, #1]
  icmphdr->id = 0;
 8006f8e:	2300      	movs	r3, #0
 8006f90:	7123      	strb	r3, [r4, #4]
 8006f92:	7163      	strb	r3, [r4, #5]
  icmphdr->seqno = 0;
 8006f94:	71a3      	strb	r3, [r4, #6]
 8006f96:	71e3      	strb	r3, [r4, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 8006f98:	686f      	ldr	r7, [r5, #4]
 8006f9a:	6873      	ldr	r3, [r6, #4]
 8006f9c:	681e      	ldr	r6, [r3, #0]
 8006f9e:	6858      	ldr	r0, [r3, #4]
 8006fa0:	6899      	ldr	r1, [r3, #8]
 8006fa2:	f8d3 c00c 	ldr.w	ip, [r3, #12]
 8006fa6:	60be      	str	r6, [r7, #8]
 8006fa8:	60f8      	str	r0, [r7, #12]
 8006faa:	6139      	str	r1, [r7, #16]
 8006fac:	f8c7 c014 	str.w	ip, [r7, #20]
 8006fb0:	691e      	ldr	r6, [r3, #16]
 8006fb2:	6958      	ldr	r0, [r3, #20]
 8006fb4:	6999      	ldr	r1, [r3, #24]
 8006fb6:	61be      	str	r6, [r7, #24]
 8006fb8:	61f8      	str	r0, [r7, #28]
 8006fba:	6239      	str	r1, [r7, #32]
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 8006fbc:	f8de 300c 	ldr.w	r3, [lr, #12]
 8006fc0:	a806      	add	r0, sp, #24
 8006fc2:	f840 3d04 	str.w	r3, [r0, #-4]!
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_src, &iphdr_dst);
  }
#else
  netif = ip4_route(&iphdr_src);
 8006fc6:	f000 f8cb 	bl	8007160 <ip4_route>
#endif
  if (netif != NULL) {
 8006fca:	b158      	cbz	r0, 8006fe4 <icmp_send_response+0x84>
    /* calculate checksum */
    icmphdr->chksum = 0;
 8006fcc:	2100      	movs	r1, #0
 8006fce:	70a1      	strb	r1, [r4, #2]
 8006fd0:	70e1      	strb	r1, [r4, #3]
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 8006fd2:	9002      	str	r0, [sp, #8]
 8006fd4:	2301      	movs	r3, #1
 8006fd6:	9301      	str	r3, [sp, #4]
 8006fd8:	9100      	str	r1, [sp, #0]
 8006fda:	23ff      	movs	r3, #255	; 0xff
 8006fdc:	aa05      	add	r2, sp, #20
 8006fde:	4628      	mov	r0, r5
 8006fe0:	f000 fa64 	bl	80074ac <ip4_output_if>
  }
  pbuf_free(q);
 8006fe4:	4628      	mov	r0, r5
 8006fe6:	f001 fb2d 	bl	8008644 <pbuf_free>
}
 8006fea:	b006      	add	sp, #24
 8006fec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 8006ff0:	4b03      	ldr	r3, [pc, #12]	; (8007000 <icmp_send_response+0xa0>)
 8006ff2:	f44f 72b1 	mov.w	r2, #354	; 0x162
 8006ff6:	4903      	ldr	r1, [pc, #12]	; (8007004 <icmp_send_response+0xa4>)
 8006ff8:	4803      	ldr	r0, [pc, #12]	; (8007008 <icmp_send_response+0xa8>)
 8006ffa:	f006 fde6 	bl	800dbca <iprintf>
 8006ffe:	e7c0      	b.n	8006f82 <icmp_send_response+0x22>
 8007000:	0800eec4 	.word	0x0800eec4
 8007004:	0800eefc 	.word	0x0800eefc
 8007008:	0800e3b0 	.word	0x0800e3b0

0800700c <icmp_input>:
{
 800700c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007010:	b084      	sub	sp, #16
 8007012:	4605      	mov	r5, r0
  iphdr_in = ip4_current_header();
 8007014:	4b47      	ldr	r3, [pc, #284]	; (8007134 <icmp_input+0x128>)
 8007016:	689e      	ldr	r6, [r3, #8]
  hlen = IPH_HL(iphdr_in) * 4;
 8007018:	7834      	ldrb	r4, [r6, #0]
 800701a:	f004 040f 	and.w	r4, r4, #15
 800701e:	00a4      	lsls	r4, r4, #2
  if (hlen < IP_HLEN) {
 8007020:	2c13      	cmp	r4, #19
 8007022:	d915      	bls.n	8007050 <icmp_input+0x44>
 8007024:	460f      	mov	r7, r1
  if (p->len < sizeof(u16_t)*2) {
 8007026:	8943      	ldrh	r3, [r0, #10]
 8007028:	2b03      	cmp	r3, #3
 800702a:	d911      	bls.n	8007050 <icmp_input+0x44>
  type = *((u8_t *)p->payload);
 800702c:	6843      	ldr	r3, [r0, #4]
 800702e:	781b      	ldrb	r3, [r3, #0]
  switch (type) {
 8007030:	2b08      	cmp	r3, #8
 8007032:	d15d      	bne.n	80070f0 <icmp_input+0xe4>
    if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8007034:	4b3f      	ldr	r3, [pc, #252]	; (8007134 <icmp_input+0x128>)
 8007036:	6958      	ldr	r0, [r3, #20]
 8007038:	f000 03f0 	and.w	r3, r0, #240	; 0xf0
 800703c:	2be0      	cmp	r3, #224	; 0xe0
 800703e:	d023      	beq.n	8007088 <icmp_input+0x7c>
    if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 8007040:	4b3c      	ldr	r3, [pc, #240]	; (8007134 <icmp_input+0x128>)
 8007042:	6819      	ldr	r1, [r3, #0]
 8007044:	f000 fa47 	bl	80074d6 <ip4_addr_isbroadcast_u32>
 8007048:	b9f0      	cbnz	r0, 8007088 <icmp_input+0x7c>
    if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 800704a:	892b      	ldrh	r3, [r5, #8]
 800704c:	2b07      	cmp	r3, #7
 800704e:	d805      	bhi.n	800705c <icmp_input+0x50>
  pbuf_free(p);
 8007050:	4628      	mov	r0, r5
 8007052:	f001 faf7 	bl	8008644 <pbuf_free>
}
 8007056:	b004      	add	sp, #16
 8007058:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (pbuf_header(p, (s16_t)(hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN))) {
 800705c:	f104 010e 	add.w	r1, r4, #14
 8007060:	4628      	mov	r0, r5
 8007062:	f001 fae5 	bl	8008630 <pbuf_header>
 8007066:	b3a8      	cbz	r0, 80070d4 <icmp_input+0xc8>
      r = pbuf_alloc(PBUF_LINK, p->tot_len + hlen, PBUF_RAM);
 8007068:	8929      	ldrh	r1, [r5, #8]
 800706a:	4421      	add	r1, r4
 800706c:	2200      	movs	r2, #0
 800706e:	b289      	uxth	r1, r1
 8007070:	2002      	movs	r0, #2
 8007072:	f001 fb53 	bl	800871c <pbuf_alloc>
      if (r == NULL) {
 8007076:	4680      	mov	r8, r0
 8007078:	b130      	cbz	r0, 8007088 <icmp_input+0x7c>
      if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 800707a:	8942      	ldrh	r2, [r0, #10]
 800707c:	f104 0308 	add.w	r3, r4, #8
 8007080:	429a      	cmp	r2, r3
 8007082:	d205      	bcs.n	8007090 <icmp_input+0x84>
        pbuf_free(r);
 8007084:	f001 fade 	bl	8008644 <pbuf_free>
  pbuf_free(p);
 8007088:	4628      	mov	r0, r5
 800708a:	f001 fadb 	bl	8008644 <pbuf_free>
  return;
 800708e:	e7e2      	b.n	8007056 <icmp_input+0x4a>
      MEMCPY(r->payload, iphdr_in, hlen);
 8007090:	4622      	mov	r2, r4
 8007092:	4631      	mov	r1, r6
 8007094:	6840      	ldr	r0, [r0, #4]
 8007096:	f006 ff04 	bl	800dea2 <memcpy>
      if (pbuf_header(r, (s16_t)-hlen)) {
 800709a:	4261      	negs	r1, r4
 800709c:	4640      	mov	r0, r8
 800709e:	f001 fac7 	bl	8008630 <pbuf_header>
 80070a2:	b148      	cbz	r0, 80070b8 <icmp_input+0xac>
        LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 80070a4:	4b24      	ldr	r3, [pc, #144]	; (8007138 <icmp_input+0x12c>)
 80070a6:	22af      	movs	r2, #175	; 0xaf
 80070a8:	4924      	ldr	r1, [pc, #144]	; (800713c <icmp_input+0x130>)
 80070aa:	4825      	ldr	r0, [pc, #148]	; (8007140 <icmp_input+0x134>)
 80070ac:	f006 fd8d 	bl	800dbca <iprintf>
        pbuf_free(r);
 80070b0:	4640      	mov	r0, r8
 80070b2:	f001 fac7 	bl	8008644 <pbuf_free>
        goto icmperr;
 80070b6:	e7e7      	b.n	8007088 <icmp_input+0x7c>
      if (pbuf_copy(r, p) != ERR_OK) {
 80070b8:	4629      	mov	r1, r5
 80070ba:	4640      	mov	r0, r8
 80070bc:	f001 fcf0 	bl	8008aa0 <pbuf_copy>
 80070c0:	b118      	cbz	r0, 80070ca <icmp_input+0xbe>
        pbuf_free(r);
 80070c2:	4640      	mov	r0, r8
 80070c4:	f001 fabe 	bl	8008644 <pbuf_free>
        goto icmperr;
 80070c8:	e7de      	b.n	8007088 <icmp_input+0x7c>
      pbuf_free(p);
 80070ca:	4628      	mov	r0, r5
 80070cc:	f001 faba 	bl	8008644 <pbuf_free>
      p = r;
 80070d0:	4645      	mov	r5, r8
 80070d2:	e007      	b.n	80070e4 <icmp_input+0xd8>
      if (pbuf_header(p, -(s16_t)(hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN))) {
 80070d4:	f5c4 417f 	rsb	r1, r4, #65280	; 0xff00
 80070d8:	31f2      	adds	r1, #242	; 0xf2
 80070da:	b209      	sxth	r1, r1
 80070dc:	4628      	mov	r0, r5
 80070de:	f001 faa7 	bl	8008630 <pbuf_header>
 80070e2:	b948      	cbnz	r0, 80070f8 <icmp_input+0xec>
    iecho = (struct icmp_echo_hdr *)p->payload;
 80070e4:	686e      	ldr	r6, [r5, #4]
    if (pbuf_header(p, (s16_t)hlen)) {
 80070e6:	4621      	mov	r1, r4
 80070e8:	4628      	mov	r0, r5
 80070ea:	f001 faa1 	bl	8008630 <pbuf_header>
 80070ee:	b150      	cbz	r0, 8007106 <icmp_input+0xfa>
  pbuf_free(p);
 80070f0:	4628      	mov	r0, r5
 80070f2:	f001 faa7 	bl	8008644 <pbuf_free>
  return;
 80070f6:	e7ae      	b.n	8007056 <icmp_input+0x4a>
        LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 80070f8:	4b0f      	ldr	r3, [pc, #60]	; (8007138 <icmp_input+0x12c>)
 80070fa:	22c0      	movs	r2, #192	; 0xc0
 80070fc:	4911      	ldr	r1, [pc, #68]	; (8007144 <icmp_input+0x138>)
 80070fe:	4810      	ldr	r0, [pc, #64]	; (8007140 <icmp_input+0x134>)
 8007100:	f006 fd63 	bl	800dbca <iprintf>
        goto icmperr;
 8007104:	e7c0      	b.n	8007088 <icmp_input+0x7c>
      struct ip_hdr *iphdr = (struct ip_hdr*)p->payload;
 8007106:	6868      	ldr	r0, [r5, #4]
      ip4_addr_copy(iphdr->src, *src);
 8007108:	490a      	ldr	r1, [pc, #40]	; (8007134 <icmp_input+0x128>)
 800710a:	694b      	ldr	r3, [r1, #20]
 800710c:	60c3      	str	r3, [r0, #12]
      ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 800710e:	690b      	ldr	r3, [r1, #16]
 8007110:	6103      	str	r3, [r0, #16]
      ICMPH_TYPE_SET(iecho, ICMP_ER);
 8007112:	2200      	movs	r2, #0
 8007114:	7032      	strb	r2, [r6, #0]
      iecho->chksum = 0;
 8007116:	70b2      	strb	r2, [r6, #2]
 8007118:	70f2      	strb	r2, [r6, #3]
      IPH_TTL_SET(iphdr, ICMP_TTL);
 800711a:	23ff      	movs	r3, #255	; 0xff
 800711c:	7203      	strb	r3, [r0, #8]
      IPH_CHKSUM_SET(iphdr, 0);
 800711e:	7282      	strb	r2, [r0, #10]
 8007120:	72c2      	strb	r2, [r0, #11]
      ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 8007122:	9702      	str	r7, [sp, #8]
 8007124:	2001      	movs	r0, #1
 8007126:	9001      	str	r0, [sp, #4]
 8007128:	9200      	str	r2, [sp, #0]
 800712a:	3114      	adds	r1, #20
 800712c:	4628      	mov	r0, r5
 800712e:	f000 f9bd 	bl	80074ac <ip4_output_if>
 8007132:	e7dd      	b.n	80070f0 <icmp_input+0xe4>
 8007134:	2000426c 	.word	0x2000426c
 8007138:	0800eec4 	.word	0x0800eec4
 800713c:	0800ee58 	.word	0x0800ee58
 8007140:	0800e3b0 	.word	0x0800e3b0
 8007144:	0800ee90 	.word	0x0800ee90

08007148 <icmp_dest_unreach>:
{
 8007148:	b508      	push	{r3, lr}
  icmp_send_response(p, ICMP_DUR, t);
 800714a:	460a      	mov	r2, r1
 800714c:	2103      	movs	r1, #3
 800714e:	f7ff ff07 	bl	8006f60 <icmp_send_response>
 8007152:	bd08      	pop	{r3, pc}

08007154 <icmp_time_exceeded>:
{
 8007154:	b508      	push	{r3, lr}
  icmp_send_response(p, ICMP_TE, t);
 8007156:	460a      	mov	r2, r1
 8007158:	210b      	movs	r1, #11
 800715a:	f7ff ff01 	bl	8006f60 <icmp_send_response>
 800715e:	bd08      	pop	{r3, pc}

08007160 <ip4_route>:
    return ip4_default_multicast_netif;
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */

  /* iterate through netifs */
  for (netif = netif_list; netif != NULL; netif = netif->next) {
 8007160:	4b25      	ldr	r3, [pc, #148]	; (80071f8 <ip4_route+0x98>)
 8007162:	681b      	ldr	r3, [r3, #0]
 8007164:	e02b      	b.n	80071be <ip4_route+0x5e>
 8007166:	681b      	ldr	r3, [r3, #0]
 8007168:	b1ab      	cbz	r3, 8007196 <ip4_route+0x36>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800716a:	f893 202b 	ldrb.w	r2, [r3, #43]	; 0x2b
 800716e:	f002 0105 	and.w	r1, r2, #5
 8007172:	2905      	cmp	r1, #5
 8007174:	d1f7      	bne.n	8007166 <ip4_route+0x6>
 8007176:	6859      	ldr	r1, [r3, #4]
 8007178:	2900      	cmp	r1, #0
 800717a:	d0f4      	beq.n	8007166 <ip4_route+0x6>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 800717c:	6804      	ldr	r4, [r0, #0]
 800717e:	689d      	ldr	r5, [r3, #8]
 8007180:	4061      	eors	r1, r4
 8007182:	4229      	tst	r1, r5
 8007184:	d016      	beq.n	80071b4 <ip4_route+0x54>
        /* return netif on which to forward IP packet */
        return netif;
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 8007186:	f012 0f02 	tst.w	r2, #2
 800718a:	d1ec      	bne.n	8007166 <ip4_route+0x6>
 800718c:	68da      	ldr	r2, [r3, #12]
 800718e:	4294      	cmp	r4, r2
 8007190:	d1e9      	bne.n	8007166 <ip4_route+0x6>
        /* return netif on which to forward IP packet */
        return netif;
 8007192:	4618      	mov	r0, r3
 8007194:	e00a      	b.n	80071ac <ip4_route+0x4c>
  if (netif != NULL) {
    return netif;
  }
#endif

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 8007196:	4a19      	ldr	r2, [pc, #100]	; (80071fc <ip4_route+0x9c>)
 8007198:	6810      	ldr	r0, [r2, #0]
 800719a:	b138      	cbz	r0, 80071ac <ip4_route+0x4c>
 800719c:	f890 202b 	ldrb.w	r2, [r0, #43]	; 0x2b
 80071a0:	f002 0205 	and.w	r2, r2, #5
 80071a4:	2a05      	cmp	r2, #5
 80071a6:	d107      	bne.n	80071b8 <ip4_route+0x58>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default))) {
 80071a8:	6842      	ldr	r2, [r0, #4]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 80071aa:	b10a      	cbz	r2, 80071b0 <ip4_route+0x50>
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
  }

  return netif_default;
}
 80071ac:	bc30      	pop	{r4, r5}
 80071ae:	4770      	bx	lr
    return NULL;
 80071b0:	4618      	mov	r0, r3
 80071b2:	e7fb      	b.n	80071ac <ip4_route+0x4c>
        return netif;
 80071b4:	4618      	mov	r0, r3
 80071b6:	e7f9      	b.n	80071ac <ip4_route+0x4c>
    return NULL;
 80071b8:	4618      	mov	r0, r3
 80071ba:	e7f7      	b.n	80071ac <ip4_route+0x4c>
  for (netif = netif_list; netif != NULL; netif = netif->next) {
 80071bc:	681b      	ldr	r3, [r3, #0]
 80071be:	b153      	cbz	r3, 80071d6 <ip4_route+0x76>
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 80071c0:	f893 202b 	ldrb.w	r2, [r3, #43]	; 0x2b
 80071c4:	f002 0105 	and.w	r1, r2, #5
 80071c8:	2905      	cmp	r1, #5
 80071ca:	d1f7      	bne.n	80071bc <ip4_route+0x5c>
 80071cc:	6859      	ldr	r1, [r3, #4]
 80071ce:	2900      	cmp	r1, #0
 80071d0:	d0f4      	beq.n	80071bc <ip4_route+0x5c>
{
 80071d2:	b430      	push	{r4, r5}
 80071d4:	e7d2      	b.n	800717c <ip4_route+0x1c>
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 80071d6:	4a09      	ldr	r2, [pc, #36]	; (80071fc <ip4_route+0x9c>)
 80071d8:	6810      	ldr	r0, [r2, #0]
 80071da:	2800      	cmp	r0, #0
 80071dc:	d0e7      	beq.n	80071ae <ip4_route+0x4e>
 80071de:	f890 202b 	ldrb.w	r2, [r0, #43]	; 0x2b
 80071e2:	f002 0205 	and.w	r2, r2, #5
 80071e6:	2a05      	cmp	r2, #5
 80071e8:	d104      	bne.n	80071f4 <ip4_route+0x94>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default))) {
 80071ea:	6842      	ldr	r2, [r0, #4]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 80071ec:	2a00      	cmp	r2, #0
 80071ee:	d1de      	bne.n	80071ae <ip4_route+0x4e>
    return NULL;
 80071f0:	4618      	mov	r0, r3
 80071f2:	4770      	bx	lr
 80071f4:	4618      	mov	r0, r3
 80071f6:	4770      	bx	lr
 80071f8:	2000796c 	.word	0x2000796c
 80071fc:	20007970 	.word	0x20007970

08007200 <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 8007200:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007204:	4605      	mov	r5, r0

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 8007206:	f8d0 8004 	ldr.w	r8, [r0, #4]
  if (IPH_V(iphdr) != 4) {
 800720a:	f898 3000 	ldrb.w	r3, [r8]
 800720e:	091a      	lsrs	r2, r3, #4
 8007210:	2a04      	cmp	r2, #4
 8007212:	d004      	beq.n	800721e <ip4_input+0x1e>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 8007214:	f001 fa16 	bl	8008644 <pbuf_free>
  ip_data.current_ip_header_tot_len = 0;
  ip4_addr_set_any(ip4_current_src_addr());
  ip4_addr_set_any(ip4_current_dest_addr());

  return ERR_OK;
}
 8007218:	2000      	movs	r0, #0
 800721a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800721e:	460f      	mov	r7, r1
  iphdr_hlen = IPH_HL(iphdr);
 8007220:	f003 030f 	and.w	r3, r3, #15
  iphdr_hlen *= 4;
 8007224:	009e      	lsls	r6, r3, #2
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 8007226:	f8b8 0002 	ldrh.w	r0, [r8, #2]
 800722a:	f7ff f9ef 	bl	800660c <lwip_htons>
 800722e:	4604      	mov	r4, r0
  if (iphdr_len < p->tot_len) {
 8007230:	892b      	ldrh	r3, [r5, #8]
 8007232:	4298      	cmp	r0, r3
 8007234:	d316      	bcc.n	8007264 <ip4_input+0x64>
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 8007236:	896b      	ldrh	r3, [r5, #10]
 8007238:	429e      	cmp	r6, r3
 800723a:	d818      	bhi.n	800726e <ip4_input+0x6e>
 800723c:	892b      	ldrh	r3, [r5, #8]
 800723e:	429c      	cmp	r4, r3
 8007240:	d815      	bhi.n	800726e <ip4_input+0x6e>
 8007242:	2e13      	cmp	r6, #19
 8007244:	d913      	bls.n	800726e <ip4_input+0x6e>
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 8007246:	f8d8 3010 	ldr.w	r3, [r8, #16]
 800724a:	4a59      	ldr	r2, [pc, #356]	; (80073b0 <ip4_input+0x1b0>)
 800724c:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 800724e:	f8d8 100c 	ldr.w	r1, [r8, #12]
 8007252:	6111      	str	r1, [r2, #16]
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8007254:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007258:	2be0      	cmp	r3, #224	; 0xe0
 800725a:	d00c      	beq.n	8007276 <ip4_input+0x76>
 800725c:	463c      	mov	r4, r7
 800725e:	f04f 0901 	mov.w	r9, #1
 8007262:	e015      	b.n	8007290 <ip4_input+0x90>
    pbuf_realloc(p, iphdr_len);
 8007264:	4601      	mov	r1, r0
 8007266:	4628      	mov	r0, r5
 8007268:	f001 fb40 	bl	80088ec <pbuf_realloc>
 800726c:	e7e3      	b.n	8007236 <ip4_input+0x36>
    pbuf_free(p);
 800726e:	4628      	mov	r0, r5
 8007270:	f001 f9e8 	bl	8008644 <pbuf_free>
    return ERR_OK;
 8007274:	e7d0      	b.n	8007218 <ip4_input+0x18>
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 8007276:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800727a:	f013 0f01 	tst.w	r3, #1
 800727e:	d024      	beq.n	80072ca <ip4_input+0xca>
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	bb23      	cbnz	r3, 80072ce <ip4_input+0xce>
      netif = NULL;
 8007284:	2400      	movs	r4, #0
 8007286:	e025      	b.n	80072d4 <ip4_input+0xd4>
        netif = netif->next;
 8007288:	6824      	ldr	r4, [r4, #0]
      if (netif == inp) {
 800728a:	42bc      	cmp	r4, r7
 800728c:	d01b      	beq.n	80072c6 <ip4_input+0xc6>
    } while (netif != NULL);
 800728e:	b30c      	cbz	r4, 80072d4 <ip4_input+0xd4>
      if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 8007290:	f894 302b 	ldrb.w	r3, [r4, #43]	; 0x2b
 8007294:	f013 0f01 	tst.w	r3, #1
 8007298:	d009      	beq.n	80072ae <ip4_input+0xae>
 800729a:	6863      	ldr	r3, [r4, #4]
 800729c:	b13b      	cbz	r3, 80072ae <ip4_input+0xae>
        if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 800729e:	4a44      	ldr	r2, [pc, #272]	; (80073b0 <ip4_input+0x1b0>)
 80072a0:	6950      	ldr	r0, [r2, #20]
 80072a2:	4283      	cmp	r3, r0
 80072a4:	d016      	beq.n	80072d4 <ip4_input+0xd4>
            ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 80072a6:	4621      	mov	r1, r4
 80072a8:	f000 f915 	bl	80074d6 <ip4_addr_isbroadcast_u32>
        if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 80072ac:	b990      	cbnz	r0, 80072d4 <ip4_input+0xd4>
      if (first) {
 80072ae:	f1b9 0f00 	cmp.w	r9, #0
 80072b2:	d0e9      	beq.n	8007288 <ip4_input+0x88>
        if (ip4_addr_isloopback(ip4_current_dest_addr())) {
 80072b4:	4b3e      	ldr	r3, [pc, #248]	; (80073b0 <ip4_input+0x1b0>)
 80072b6:	7d1b      	ldrb	r3, [r3, #20]
 80072b8:	2b7f      	cmp	r3, #127	; 0x7f
 80072ba:	d00a      	beq.n	80072d2 <ip4_input+0xd2>
        netif = netif_list;
 80072bc:	4b3d      	ldr	r3, [pc, #244]	; (80073b4 <ip4_input+0x1b4>)
 80072be:	681c      	ldr	r4, [r3, #0]
        first = 0;
 80072c0:	f04f 0900 	mov.w	r9, #0
 80072c4:	e7e1      	b.n	800728a <ip4_input+0x8a>
        netif = netif->next;
 80072c6:	6824      	ldr	r4, [r4, #0]
 80072c8:	e7e1      	b.n	800728e <ip4_input+0x8e>
      netif = NULL;
 80072ca:	2400      	movs	r4, #0
 80072cc:	e002      	b.n	80072d4 <ip4_input+0xd4>
      netif = inp;
 80072ce:	463c      	mov	r4, r7
 80072d0:	e000      	b.n	80072d4 <ip4_input+0xd4>
          netif = NULL;
 80072d2:	2400      	movs	r4, #0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 80072d4:	4639      	mov	r1, r7
 80072d6:	4b36      	ldr	r3, [pc, #216]	; (80073b0 <ip4_input+0x1b0>)
 80072d8:	6918      	ldr	r0, [r3, #16]
 80072da:	f000 f8fc 	bl	80074d6 <ip4_addr_isbroadcast_u32>
 80072de:	2800      	cmp	r0, #0
 80072e0:	d146      	bne.n	8007370 <ip4_input+0x170>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 80072e2:	4b33      	ldr	r3, [pc, #204]	; (80073b0 <ip4_input+0x1b0>)
 80072e4:	691b      	ldr	r3, [r3, #16]
 80072e6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 80072ea:	2be0      	cmp	r3, #224	; 0xe0
 80072ec:	d040      	beq.n	8007370 <ip4_input+0x170>
  if (netif == NULL) {
 80072ee:	2c00      	cmp	r4, #0
 80072f0:	d042      	beq.n	8007378 <ip4_input+0x178>
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 80072f2:	f8b8 3006 	ldrh.w	r3, [r8, #6]
 80072f6:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80072fa:	b29b      	uxth	r3, r3
 80072fc:	b13b      	cbz	r3, 800730e <ip4_input+0x10e>
    p = ip4_reass(p);
 80072fe:	4628      	mov	r0, r5
 8007300:	f000 fb38 	bl	8007974 <ip4_reass>
    if (p == NULL) {
 8007304:	4605      	mov	r5, r0
 8007306:	2800      	cmp	r0, #0
 8007308:	d086      	beq.n	8007218 <ip4_input+0x18>
    iphdr = (struct ip_hdr *)p->payload;
 800730a:	f8d0 8004 	ldr.w	r8, [r0, #4]
  ip_data.current_netif = netif;
 800730e:	4a28      	ldr	r2, [pc, #160]	; (80073b0 <ip4_input+0x1b0>)
 8007310:	6014      	str	r4, [r2, #0]
  ip_data.current_input_netif = inp;
 8007312:	6057      	str	r7, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 8007314:	f8c2 8008 	str.w	r8, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL(iphdr) * 4;
 8007318:	f898 3000 	ldrb.w	r3, [r8]
 800731c:	f003 030f 	and.w	r3, r3, #15
 8007320:	009b      	lsls	r3, r3, #2
 8007322:	8193      	strh	r3, [r2, #12]
    pbuf_header(p, -(s16_t)iphdr_hlen); /* Move to payload, no check necessary. */
 8007324:	4271      	negs	r1, r6
 8007326:	4628      	mov	r0, r5
 8007328:	f001 f982 	bl	8008630 <pbuf_header>
    switch (IPH_PROTO(iphdr)) {
 800732c:	f898 3009 	ldrb.w	r3, [r8, #9]
 8007330:	2b06      	cmp	r3, #6
 8007332:	d032      	beq.n	800739a <ip4_input+0x19a>
 8007334:	2b11      	cmp	r3, #17
 8007336:	d023      	beq.n	8007380 <ip4_input+0x180>
 8007338:	2b01      	cmp	r3, #1
 800733a:	d033      	beq.n	80073a4 <ip4_input+0x1a4>
      if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 800733c:	4621      	mov	r1, r4
 800733e:	4b1c      	ldr	r3, [pc, #112]	; (80073b0 <ip4_input+0x1b0>)
 8007340:	6958      	ldr	r0, [r3, #20]
 8007342:	f000 f8c8 	bl	80074d6 <ip4_addr_isbroadcast_u32>
 8007346:	b978      	cbnz	r0, 8007368 <ip4_input+0x168>
          !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8007348:	4b19      	ldr	r3, [pc, #100]	; (80073b0 <ip4_input+0x1b0>)
 800734a:	695b      	ldr	r3, [r3, #20]
 800734c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
      if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 8007350:	2be0      	cmp	r3, #224	; 0xe0
 8007352:	d009      	beq.n	8007368 <ip4_input+0x168>
        pbuf_header_force(p, iphdr_hlen); /* Move to ip header, no check necessary. */
 8007354:	4631      	mov	r1, r6
 8007356:	4628      	mov	r0, r5
 8007358:	f001 f96f 	bl	800863a <pbuf_header_force>
        p->payload = iphdr;
 800735c:	f8c5 8004 	str.w	r8, [r5, #4]
        icmp_dest_unreach(p, ICMP_DUR_PROTO);
 8007360:	2102      	movs	r1, #2
 8007362:	4628      	mov	r0, r5
 8007364:	f7ff fef0 	bl	8007148 <icmp_dest_unreach>
      pbuf_free(p);
 8007368:	4628      	mov	r0, r5
 800736a:	f001 f96b 	bl	8008644 <pbuf_free>
 800736e:	e00b      	b.n	8007388 <ip4_input+0x188>
      pbuf_free(p);
 8007370:	4628      	mov	r0, r5
 8007372:	f001 f967 	bl	8008644 <pbuf_free>
      return ERR_OK;
 8007376:	e74f      	b.n	8007218 <ip4_input+0x18>
    pbuf_free(p);
 8007378:	4628      	mov	r0, r5
 800737a:	f001 f963 	bl	8008644 <pbuf_free>
    return ERR_OK;
 800737e:	e74b      	b.n	8007218 <ip4_input+0x18>
      udp_input(p, inp);
 8007380:	4639      	mov	r1, r7
 8007382:	4628      	mov	r0, r5
 8007384:	f005 fa0a 	bl	800c79c <udp_input>
  ip_data.current_netif = NULL;
 8007388:	4b09      	ldr	r3, [pc, #36]	; (80073b0 <ip4_input+0x1b0>)
 800738a:	2200      	movs	r2, #0
 800738c:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 800738e:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 8007390:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 8007392:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 8007394:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 8007396:	615a      	str	r2, [r3, #20]
  return ERR_OK;
 8007398:	e73e      	b.n	8007218 <ip4_input+0x18>
      tcp_input(p, inp);
 800739a:	4639      	mov	r1, r7
 800739c:	4628      	mov	r0, r5
 800739e:	f003 fde1 	bl	800af64 <tcp_input>
      break;
 80073a2:	e7f1      	b.n	8007388 <ip4_input+0x188>
      icmp_input(p, inp);
 80073a4:	4639      	mov	r1, r7
 80073a6:	4628      	mov	r0, r5
 80073a8:	f7ff fe30 	bl	800700c <icmp_input>
      break;
 80073ac:	e7ec      	b.n	8007388 <ip4_input+0x188>
 80073ae:	bf00      	nop
 80073b0:	2000426c 	.word	0x2000426c
 80073b4:	2000796c 	.word	0x2000796c

080073b8 <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
             u8_t ttl, u8_t tos,
             u8_t proto, struct netif *netif)
{
 80073b8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80073bc:	b083      	sub	sp, #12
 80073be:	4605      	mov	r5, r0
 80073c0:	4689      	mov	r9, r1
 80073c2:	4616      	mov	r6, r2
 80073c4:	4698      	mov	r8, r3
 80073c6:	9f0c      	ldr	r7, [sp, #48]	; 0x30
  ip4_addr_t dest_addr;
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 80073c8:	89c3      	ldrh	r3, [r0, #14]
 80073ca:	2b01      	cmp	r3, #1
 80073cc:	d006      	beq.n	80073dc <ip4_output_if_src+0x24>
 80073ce:	4b31      	ldr	r3, [pc, #196]	; (8007494 <ip4_output_if_src+0xdc>)
 80073d0:	f240 3233 	movw	r2, #819	; 0x333
 80073d4:	4930      	ldr	r1, [pc, #192]	; (8007498 <ip4_output_if_src+0xe0>)
 80073d6:	4831      	ldr	r0, [pc, #196]	; (800749c <ip4_output_if_src+0xe4>)
 80073d8:	f006 fbf7 	bl	800dbca <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 80073dc:	2e00      	cmp	r6, #0
 80073de:	d04a      	beq.n	8007476 <ip4_output_if_src+0xbe>
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_header(p, IP_HLEN)) {
 80073e0:	2114      	movs	r1, #20
 80073e2:	4628      	mov	r0, r5
 80073e4:	f001 f924 	bl	8008630 <pbuf_header>
 80073e8:	2800      	cmp	r0, #0
 80073ea:	d150      	bne.n	800748e <ip4_output_if_src+0xd6>
      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
    }

    iphdr = (struct ip_hdr *)p->payload;
 80073ec:	686c      	ldr	r4, [r5, #4]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 80073ee:	896b      	ldrh	r3, [r5, #10]
 80073f0:	2b13      	cmp	r3, #19
 80073f2:	d934      	bls.n	800745e <ip4_output_if_src+0xa6>
               (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 80073f4:	f884 8008 	strb.w	r8, [r4, #8]
    IPH_PROTO_SET(iphdr, proto);
 80073f8:	f89d 302c 	ldrb.w	r3, [sp, #44]	; 0x2c
 80073fc:	7263      	strb	r3, [r4, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 80073fe:	6833      	ldr	r3, [r6, #0]
 8007400:	6123      	str	r3, [r4, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 8007402:	2345      	movs	r3, #69	; 0x45
 8007404:	7023      	strb	r3, [r4, #0]
    IPH_TOS_SET(iphdr, tos);
 8007406:	f89d 3028 	ldrb.w	r3, [sp, #40]	; 0x28
 800740a:	7063      	strb	r3, [r4, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 800740c:	8928      	ldrh	r0, [r5, #8]
 800740e:	f7ff f8fd 	bl	800660c <lwip_htons>
 8007412:	8060      	strh	r0, [r4, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 8007414:	2300      	movs	r3, #0
 8007416:	71a3      	strb	r3, [r4, #6]
 8007418:	71e3      	strb	r3, [r4, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 800741a:	f8df 808c 	ldr.w	r8, [pc, #140]	; 80074a8 <ip4_output_if_src+0xf0>
 800741e:	f8b8 0000 	ldrh.w	r0, [r8]
 8007422:	f7ff f8f3 	bl	800660c <lwip_htons>
 8007426:	80a0      	strh	r0, [r4, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 8007428:	f8b8 3000 	ldrh.w	r3, [r8]
 800742c:	3301      	adds	r3, #1
 800742e:	f8a8 3000 	strh.w	r3, [r8]

    if (src == NULL) {
 8007432:	f1b9 0f00 	cmp.w	r9, #0
 8007436:	d01a      	beq.n	800746e <ip4_output_if_src+0xb6>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 8007438:	f8d9 3000 	ldr.w	r3, [r9]
 800743c:	60e3      	str	r3, [r4, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 800743e:	2300      	movs	r3, #0
 8007440:	72a3      	strb	r3, [r4, #10]
 8007442:	72e3      	strb	r3, [r4, #11]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 8007444:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8007446:	b113      	cbz	r3, 800744e <ip4_output_if_src+0x96>
 8007448:	892a      	ldrh	r2, [r5, #8]
 800744a:	4293      	cmp	r3, r2
 800744c:	d319      	bcc.n	8007482 <ip4_output_if_src+0xca>
    return ip4_frag(p, netif, dest);
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 800744e:	697b      	ldr	r3, [r7, #20]
 8007450:	4632      	mov	r2, r6
 8007452:	4629      	mov	r1, r5
 8007454:	4638      	mov	r0, r7
 8007456:	4798      	blx	r3
}
 8007458:	b003      	add	sp, #12
 800745a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 800745e:	4b0d      	ldr	r3, [pc, #52]	; (8007494 <ip4_output_if_src+0xdc>)
 8007460:	f240 3261 	movw	r2, #865	; 0x361
 8007464:	490e      	ldr	r1, [pc, #56]	; (80074a0 <ip4_output_if_src+0xe8>)
 8007466:	480d      	ldr	r0, [pc, #52]	; (800749c <ip4_output_if_src+0xe4>)
 8007468:	f006 fbaf 	bl	800dbca <iprintf>
 800746c:	e7c2      	b.n	80073f4 <ip4_output_if_src+0x3c>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 800746e:	4b0d      	ldr	r3, [pc, #52]	; (80074a4 <ip4_output_if_src+0xec>)
 8007470:	681b      	ldr	r3, [r3, #0]
 8007472:	60e3      	str	r3, [r4, #12]
 8007474:	e7e3      	b.n	800743e <ip4_output_if_src+0x86>
    iphdr = (struct ip_hdr *)p->payload;
 8007476:	686b      	ldr	r3, [r5, #4]
    ip4_addr_copy(dest_addr, iphdr->dest);
 8007478:	691b      	ldr	r3, [r3, #16]
 800747a:	ae02      	add	r6, sp, #8
 800747c:	f846 3d04 	str.w	r3, [r6, #-4]!
 8007480:	e7e0      	b.n	8007444 <ip4_output_if_src+0x8c>
    return ip4_frag(p, netif, dest);
 8007482:	4632      	mov	r2, r6
 8007484:	4639      	mov	r1, r7
 8007486:	4628      	mov	r0, r5
 8007488:	f000 fb48 	bl	8007b1c <ip4_frag>
 800748c:	e7e4      	b.n	8007458 <ip4_output_if_src+0xa0>
      return ERR_BUF;
 800748e:	f06f 0001 	mvn.w	r0, #1
 8007492:	e7e1      	b.n	8007458 <ip4_output_if_src+0xa0>
 8007494:	0800ef28 	.word	0x0800ef28
 8007498:	0800ef5c 	.word	0x0800ef5c
 800749c:	0800e3b0 	.word	0x0800e3b0
 80074a0:	0800ef68 	.word	0x0800ef68
 80074a4:	0800ef98 	.word	0x0800ef98
 80074a8:	20003f32 	.word	0x20003f32

080074ac <ip4_output_if>:
{
 80074ac:	b530      	push	{r4, r5, lr}
 80074ae:	b085      	sub	sp, #20
 80074b0:	9c0a      	ldr	r4, [sp, #40]	; 0x28
  if (dest != LWIP_IP_HDRINCL) {
 80074b2:	4615      	mov	r5, r2
 80074b4:	b11a      	cbz	r2, 80074be <ip4_output_if+0x12>
    if (ip4_addr_isany(src)) {
 80074b6:	b109      	cbz	r1, 80074bc <ip4_output_if+0x10>
 80074b8:	680a      	ldr	r2, [r1, #0]
 80074ba:	b902      	cbnz	r2, 80074be <ip4_output_if+0x12>
      src_used = netif_ip4_addr(netif);
 80074bc:	1d21      	adds	r1, r4, #4
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 80074be:	9402      	str	r4, [sp, #8]
 80074c0:	f89d 2024 	ldrb.w	r2, [sp, #36]	; 0x24
 80074c4:	9201      	str	r2, [sp, #4]
 80074c6:	f89d 2020 	ldrb.w	r2, [sp, #32]
 80074ca:	9200      	str	r2, [sp, #0]
 80074cc:	462a      	mov	r2, r5
 80074ce:	f7ff ff73 	bl	80073b8 <ip4_output_if_src>
}
 80074d2:	b005      	add	sp, #20
 80074d4:	bd30      	pop	{r4, r5, pc}

080074d6 <ip4_addr_isbroadcast_u32>:
{
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 80074d6:	1e43      	subs	r3, r0, #1
 80074d8:	f113 0f03 	cmn.w	r3, #3
 80074dc:	d811      	bhi.n	8007502 <ip4_addr_isbroadcast_u32+0x2c>
      (addr == IPADDR_ANY)) {
    return 1;
  /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 80074de:	f891 302b 	ldrb.w	r3, [r1, #43]	; 0x2b
 80074e2:	f013 0f02 	tst.w	r3, #2
 80074e6:	d00e      	beq.n	8007506 <ip4_addr_isbroadcast_u32+0x30>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
  /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 80074e8:	684b      	ldr	r3, [r1, #4]
 80074ea:	4298      	cmp	r0, r3
 80074ec:	d00d      	beq.n	800750a <ip4_addr_isbroadcast_u32+0x34>
    return 0;
  /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 80074ee:	688a      	ldr	r2, [r1, #8]
 80074f0:	4043      	eors	r3, r0
 80074f2:	4213      	tst	r3, r2
 80074f4:	d10b      	bne.n	800750e <ip4_addr_isbroadcast_u32+0x38>
         /* ...and host identifier bits are all ones? =>... */
          && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 80074f6:	43d2      	mvns	r2, r2
 80074f8:	ea32 0300 	bics.w	r3, r2, r0
 80074fc:	d009      	beq.n	8007512 <ip4_addr_isbroadcast_u32+0x3c>
           (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
    /* => network broadcast address */
    return 1;
  } else {
    return 0;
 80074fe:	2000      	movs	r0, #0
 8007500:	4770      	bx	lr
    return 1;
 8007502:	2001      	movs	r0, #1
 8007504:	4770      	bx	lr
    return 0;
 8007506:	2000      	movs	r0, #0
 8007508:	4770      	bx	lr
    return 0;
 800750a:	2000      	movs	r0, #0
 800750c:	4770      	bx	lr
    return 0;
 800750e:	2000      	movs	r0, #0
 8007510:	4770      	bx	lr
    return 1;
 8007512:	2001      	movs	r0, #1
  }
}
 8007514:	4770      	bx	lr
	...

08007518 <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 8007518:	b538      	push	{r3, r4, r5, lr}
 800751a:	4604      	mov	r4, r0
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 800751c:	4b0c      	ldr	r3, [pc, #48]	; (8007550 <ip_reass_dequeue_datagram+0x38>)
 800751e:	681b      	ldr	r3, [r3, #0]
 8007520:	4283      	cmp	r3, r0
 8007522:	d008      	beq.n	8007536 <ip_reass_dequeue_datagram+0x1e>
 8007524:	460d      	mov	r5, r1
    /* it was the first in the list */
    reassdatagrams = ipr->next;
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 8007526:	b151      	cbz	r1, 800753e <ip_reass_dequeue_datagram+0x26>
    prev->next = ipr->next;
 8007528:	6823      	ldr	r3, [r4, #0]
 800752a:	602b      	str	r3, [r5, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 800752c:	4621      	mov	r1, r4
 800752e:	2004      	movs	r0, #4
 8007530:	f000 feb2 	bl	8008298 <memp_free>
 8007534:	bd38      	pop	{r3, r4, r5, pc}
    reassdatagrams = ipr->next;
 8007536:	6802      	ldr	r2, [r0, #0]
 8007538:	4b05      	ldr	r3, [pc, #20]	; (8007550 <ip_reass_dequeue_datagram+0x38>)
 800753a:	601a      	str	r2, [r3, #0]
 800753c:	e7f6      	b.n	800752c <ip_reass_dequeue_datagram+0x14>
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 800753e:	4b05      	ldr	r3, [pc, #20]	; (8007554 <ip_reass_dequeue_datagram+0x3c>)
 8007540:	f240 1245 	movw	r2, #325	; 0x145
 8007544:	4904      	ldr	r1, [pc, #16]	; (8007558 <ip_reass_dequeue_datagram+0x40>)
 8007546:	4805      	ldr	r0, [pc, #20]	; (800755c <ip_reass_dequeue_datagram+0x44>)
 8007548:	f006 fb3f 	bl	800dbca <iprintf>
 800754c:	e7ec      	b.n	8007528 <ip_reass_dequeue_datagram+0x10>
 800754e:	bf00      	nop
 8007550:	20003f38 	.word	0x20003f38
 8007554:	0800f08c 	.word	0x0800f08c
 8007558:	0800f0c8 	.word	0x0800f0c8
 800755c:	0800e3b0 	.word	0x0800e3b0

08007560 <ip_reass_free_complete_datagram>:
{
 8007560:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007564:	4680      	mov	r8, r0
 8007566:	4689      	mov	r9, r1
  LWIP_ASSERT("prev != ipr", prev != ipr);
 8007568:	4281      	cmp	r1, r0
 800756a:	d015      	beq.n	8007598 <ip_reass_free_complete_datagram+0x38>
  if (prev != NULL) {
 800756c:	f1b9 0f00 	cmp.w	r9, #0
 8007570:	d009      	beq.n	8007586 <ip_reass_free_complete_datagram+0x26>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 8007572:	f8d9 3000 	ldr.w	r3, [r9]
 8007576:	4598      	cmp	r8, r3
 8007578:	d005      	beq.n	8007586 <ip_reass_free_complete_datagram+0x26>
 800757a:	4b35      	ldr	r3, [pc, #212]	; (8007650 <ip_reass_free_complete_datagram+0xf0>)
 800757c:	22ad      	movs	r2, #173	; 0xad
 800757e:	4935      	ldr	r1, [pc, #212]	; (8007654 <ip_reass_free_complete_datagram+0xf4>)
 8007580:	4835      	ldr	r0, [pc, #212]	; (8007658 <ip_reass_free_complete_datagram+0xf8>)
 8007582:	f006 fb22 	bl	800dbca <iprintf>
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 8007586:	f8d8 4004 	ldr.w	r4, [r8, #4]
 800758a:	6863      	ldr	r3, [r4, #4]
  if (iprh->start == 0) {
 800758c:	889a      	ldrh	r2, [r3, #4]
 800758e:	b152      	cbz	r2, 80075a6 <ip_reass_free_complete_datagram+0x46>
  u16_t pbufs_freed = 0;
 8007590:	2600      	movs	r6, #0
  p = ipr->p;
 8007592:	f8d8 4004 	ldr.w	r4, [r8, #4]
  while (p != NULL) {
 8007596:	e032      	b.n	80075fe <ip_reass_free_complete_datagram+0x9e>
  LWIP_ASSERT("prev != ipr", prev != ipr);
 8007598:	4b2d      	ldr	r3, [pc, #180]	; (8007650 <ip_reass_free_complete_datagram+0xf0>)
 800759a:	22ab      	movs	r2, #171	; 0xab
 800759c:	492f      	ldr	r1, [pc, #188]	; (800765c <ip_reass_free_complete_datagram+0xfc>)
 800759e:	482e      	ldr	r0, [pc, #184]	; (8007658 <ip_reass_free_complete_datagram+0xf8>)
 80075a0:	f006 fb13 	bl	800dbca <iprintf>
 80075a4:	e7e2      	b.n	800756c <ip_reass_free_complete_datagram+0xc>
    ipr->p = iprh->next_pbuf;
 80075a6:	681b      	ldr	r3, [r3, #0]
 80075a8:	f8c8 3004 	str.w	r3, [r8, #4]
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 80075ac:	4643      	mov	r3, r8
 80075ae:	6862      	ldr	r2, [r4, #4]
 80075b0:	f853 1f08 	ldr.w	r1, [r3, #8]!
 80075b4:	685e      	ldr	r6, [r3, #4]
 80075b6:	689d      	ldr	r5, [r3, #8]
 80075b8:	68d8      	ldr	r0, [r3, #12]
 80075ba:	6011      	str	r1, [r2, #0]
 80075bc:	6056      	str	r6, [r2, #4]
 80075be:	6095      	str	r5, [r2, #8]
 80075c0:	60d0      	str	r0, [r2, #12]
 80075c2:	6919      	ldr	r1, [r3, #16]
 80075c4:	6111      	str	r1, [r2, #16]
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 80075c6:	2101      	movs	r1, #1
 80075c8:	4620      	mov	r0, r4
 80075ca:	f7ff fdc3 	bl	8007154 <icmp_time_exceeded>
    clen = pbuf_clen(p);
 80075ce:	4620      	mov	r0, r4
 80075d0:	f001 f9fe 	bl	80089d0 <pbuf_clen>
 80075d4:	4606      	mov	r6, r0
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 80075d6:	f5b0 3f80 	cmp.w	r0, #65536	; 0x10000
 80075da:	da03      	bge.n	80075e4 <ip_reass_free_complete_datagram+0x84>
    pbuf_free(p);
 80075dc:	4620      	mov	r0, r4
 80075de:	f001 f831 	bl	8008644 <pbuf_free>
 80075e2:	e7d6      	b.n	8007592 <ip_reass_free_complete_datagram+0x32>
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 80075e4:	4b1a      	ldr	r3, [pc, #104]	; (8007650 <ip_reass_free_complete_datagram+0xf0>)
 80075e6:	22bc      	movs	r2, #188	; 0xbc
 80075e8:	491d      	ldr	r1, [pc, #116]	; (8007660 <ip_reass_free_complete_datagram+0x100>)
 80075ea:	481b      	ldr	r0, [pc, #108]	; (8007658 <ip_reass_free_complete_datagram+0xf8>)
 80075ec:	f006 faed 	bl	800dbca <iprintf>
 80075f0:	e7f4      	b.n	80075dc <ip_reass_free_complete_datagram+0x7c>
    pbufs_freed += clen;
 80075f2:	4435      	add	r5, r6
 80075f4:	b2ae      	uxth	r6, r5
    pbuf_free(pcur);
 80075f6:	4620      	mov	r0, r4
 80075f8:	f001 f824 	bl	8008644 <pbuf_free>
    p = iprh->next_pbuf;
 80075fc:	463c      	mov	r4, r7
  while (p != NULL) {
 80075fe:	b184      	cbz	r4, 8007622 <ip_reass_free_complete_datagram+0xc2>
    iprh = (struct ip_reass_helper *)p->payload;
 8007600:	6863      	ldr	r3, [r4, #4]
    p = iprh->next_pbuf;
 8007602:	681f      	ldr	r7, [r3, #0]
    clen = pbuf_clen(pcur);
 8007604:	4620      	mov	r0, r4
 8007606:	f001 f9e3 	bl	80089d0 <pbuf_clen>
 800760a:	4605      	mov	r5, r0
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 800760c:	1833      	adds	r3, r6, r0
 800760e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007612:	dbee      	blt.n	80075f2 <ip_reass_free_complete_datagram+0x92>
 8007614:	4b0e      	ldr	r3, [pc, #56]	; (8007650 <ip_reass_free_complete_datagram+0xf0>)
 8007616:	22cc      	movs	r2, #204	; 0xcc
 8007618:	4911      	ldr	r1, [pc, #68]	; (8007660 <ip_reass_free_complete_datagram+0x100>)
 800761a:	480f      	ldr	r0, [pc, #60]	; (8007658 <ip_reass_free_complete_datagram+0xf8>)
 800761c:	f006 fad5 	bl	800dbca <iprintf>
 8007620:	e7e7      	b.n	80075f2 <ip_reass_free_complete_datagram+0x92>
  ip_reass_dequeue_datagram(ipr, prev);
 8007622:	4649      	mov	r1, r9
 8007624:	4640      	mov	r0, r8
 8007626:	f7ff ff77 	bl	8007518 <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= pbufs_freed);
 800762a:	4b0e      	ldr	r3, [pc, #56]	; (8007664 <ip_reass_free_complete_datagram+0x104>)
 800762c:	881b      	ldrh	r3, [r3, #0]
 800762e:	429e      	cmp	r6, r3
 8007630:	d806      	bhi.n	8007640 <ip_reass_free_complete_datagram+0xe0>
  ip_reass_pbufcount -= pbufs_freed;
 8007632:	4a0c      	ldr	r2, [pc, #48]	; (8007664 <ip_reass_free_complete_datagram+0x104>)
 8007634:	8813      	ldrh	r3, [r2, #0]
 8007636:	1b9b      	subs	r3, r3, r6
 8007638:	8013      	strh	r3, [r2, #0]
}
 800763a:	4630      	mov	r0, r6
 800763c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= pbufs_freed);
 8007640:	4b03      	ldr	r3, [pc, #12]	; (8007650 <ip_reass_free_complete_datagram+0xf0>)
 8007642:	22d2      	movs	r2, #210	; 0xd2
 8007644:	4908      	ldr	r1, [pc, #32]	; (8007668 <ip_reass_free_complete_datagram+0x108>)
 8007646:	4804      	ldr	r0, [pc, #16]	; (8007658 <ip_reass_free_complete_datagram+0xf8>)
 8007648:	f006 fabf 	bl	800dbca <iprintf>
 800764c:	e7f1      	b.n	8007632 <ip_reass_free_complete_datagram+0xd2>
 800764e:	bf00      	nop
 8007650:	0800f08c 	.word	0x0800f08c
 8007654:	0800f0f0 	.word	0x0800f0f0
 8007658:	0800e3b0 	.word	0x0800e3b0
 800765c:	0800f0e4 	.word	0x0800f0e4
 8007660:	0800f104 	.word	0x0800f104
 8007664:	20003f34 	.word	0x20003f34
 8007668:	0800f124 	.word	0x0800f124

0800766c <ip_reass_remove_oldest_datagram>:
{
 800766c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007670:	4605      	mov	r5, r0
 8007672:	4688      	mov	r8, r1
  int pbufs_freed = 0, pbufs_freed_current;
 8007674:	2600      	movs	r6, #0
 8007676:	e02a      	b.n	80076ce <ip_reass_remove_oldest_datagram+0x62>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 8007678:	699a      	ldr	r2, [r3, #24]
 800767a:	f8d5 c010 	ldr.w	ip, [r5, #16]
 800767e:	4562      	cmp	r2, ip
 8007680:	d110      	bne.n	80076a4 <ip_reass_remove_oldest_datagram+0x38>
 8007682:	f8b3 c00c 	ldrh.w	ip, [r3, #12]
 8007686:	88aa      	ldrh	r2, [r5, #4]
 8007688:	4594      	cmp	ip, r2
 800768a:	d10b      	bne.n	80076a4 <ip_reass_remove_oldest_datagram+0x38>
 800768c:	e001      	b.n	8007692 <ip_reass_remove_oldest_datagram+0x26>
          oldest_prev = prev;
 800768e:	4671      	mov	r1, lr
          oldest = r;
 8007690:	4618      	mov	r0, r3
      if (r->next != NULL) {
 8007692:	681a      	ldr	r2, [r3, #0]
 8007694:	b18a      	cbz	r2, 80076ba <ip_reass_remove_oldest_datagram+0x4e>
 8007696:	469e      	mov	lr, r3
 8007698:	4613      	mov	r3, r2
    while (r != NULL) {
 800769a:	b183      	cbz	r3, 80076be <ip_reass_remove_oldest_datagram+0x52>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 800769c:	68ea      	ldr	r2, [r5, #12]
 800769e:	695f      	ldr	r7, [r3, #20]
 80076a0:	4297      	cmp	r7, r2
 80076a2:	d0e9      	beq.n	8007678 <ip_reass_remove_oldest_datagram+0xc>
        other_datagrams++;
 80076a4:	3401      	adds	r4, #1
        if (oldest == NULL) {
 80076a6:	2800      	cmp	r0, #0
 80076a8:	d0f1      	beq.n	800768e <ip_reass_remove_oldest_datagram+0x22>
        } else if (r->timer <= oldest->timer) {
 80076aa:	f893 c01f 	ldrb.w	ip, [r3, #31]
 80076ae:	7fc2      	ldrb	r2, [r0, #31]
 80076b0:	4594      	cmp	ip, r2
 80076b2:	d8ee      	bhi.n	8007692 <ip_reass_remove_oldest_datagram+0x26>
          oldest_prev = prev;
 80076b4:	4671      	mov	r1, lr
          oldest = r;
 80076b6:	4618      	mov	r0, r3
 80076b8:	e7eb      	b.n	8007692 <ip_reass_remove_oldest_datagram+0x26>
      if (r->next != NULL) {
 80076ba:	4673      	mov	r3, lr
 80076bc:	e7eb      	b.n	8007696 <ip_reass_remove_oldest_datagram+0x2a>
    if (oldest != NULL) {
 80076be:	b110      	cbz	r0, 80076c6 <ip_reass_remove_oldest_datagram+0x5a>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 80076c0:	f7ff ff4e 	bl	8007560 <ip_reass_free_complete_datagram>
      pbufs_freed += pbufs_freed_current;
 80076c4:	4406      	add	r6, r0
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 80076c6:	4546      	cmp	r6, r8
 80076c8:	da08      	bge.n	80076dc <ip_reass_remove_oldest_datagram+0x70>
 80076ca:	2c01      	cmp	r4, #1
 80076cc:	dd06      	ble.n	80076dc <ip_reass_remove_oldest_datagram+0x70>
    r = reassdatagrams;
 80076ce:	4b05      	ldr	r3, [pc, #20]	; (80076e4 <ip_reass_remove_oldest_datagram+0x78>)
 80076d0:	681b      	ldr	r3, [r3, #0]
    other_datagrams = 0;
 80076d2:	2400      	movs	r4, #0
    oldest_prev = NULL;
 80076d4:	4621      	mov	r1, r4
    prev = NULL;
 80076d6:	46a6      	mov	lr, r4
    oldest = NULL;
 80076d8:	4620      	mov	r0, r4
    while (r != NULL) {
 80076da:	e7de      	b.n	800769a <ip_reass_remove_oldest_datagram+0x2e>
}
 80076dc:	4630      	mov	r0, r6
 80076de:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80076e2:	bf00      	nop
 80076e4:	20003f38 	.word	0x20003f38

080076e8 <ip_frag_free_pbuf_custom_ref>:
}

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref* p)
{
 80076e8:	b510      	push	{r4, lr}
  LWIP_ASSERT("p != NULL", p != NULL);
 80076ea:	4604      	mov	r4, r0
 80076ec:	b120      	cbz	r0, 80076f8 <ip_frag_free_pbuf_custom_ref+0x10>
  memp_free(MEMP_FRAG_PBUF, p);
 80076ee:	4621      	mov	r1, r4
 80076f0:	2005      	movs	r0, #5
 80076f2:	f000 fdd1 	bl	8008298 <memp_free>
 80076f6:	bd10      	pop	{r4, pc}
  LWIP_ASSERT("p != NULL", p != NULL);
 80076f8:	4b03      	ldr	r3, [pc, #12]	; (8007708 <ip_frag_free_pbuf_custom_ref+0x20>)
 80076fa:	f240 22ae 	movw	r2, #686	; 0x2ae
 80076fe:	4903      	ldr	r1, [pc, #12]	; (800770c <ip_frag_free_pbuf_custom_ref+0x24>)
 8007700:	4803      	ldr	r0, [pc, #12]	; (8007710 <ip_frag_free_pbuf_custom_ref+0x28>)
 8007702:	f006 fa62 	bl	800dbca <iprintf>
 8007706:	e7f2      	b.n	80076ee <ip_frag_free_pbuf_custom_ref+0x6>
 8007708:	0800f08c 	.word	0x0800f08c
 800770c:	0800e730 	.word	0x0800e730
 8007710:	0800e3b0 	.word	0x0800e3b0

08007714 <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 8007714:	b510      	push	{r4, lr}
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref*)p;
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 8007716:	4604      	mov	r4, r0
 8007718:	b138      	cbz	r0, 800772a <ipfrag_free_pbuf_custom+0x16>
  LWIP_ASSERT("pcr == p", (void*)pcr == (void*)p);
  if (pcr->original != NULL) {
 800771a:	6960      	ldr	r0, [r4, #20]
 800771c:	b108      	cbz	r0, 8007722 <ipfrag_free_pbuf_custom+0xe>
    pbuf_free(pcr->original);
 800771e:	f000 ff91 	bl	8008644 <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 8007722:	4620      	mov	r0, r4
 8007724:	f7ff ffe0 	bl	80076e8 <ip_frag_free_pbuf_custom_ref>
 8007728:	bd10      	pop	{r4, pc}
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 800772a:	4b04      	ldr	r3, [pc, #16]	; (800773c <ipfrag_free_pbuf_custom+0x28>)
 800772c:	f44f 722e 	mov.w	r2, #696	; 0x2b8
 8007730:	4903      	ldr	r1, [pc, #12]	; (8007740 <ipfrag_free_pbuf_custom+0x2c>)
 8007732:	4804      	ldr	r0, [pc, #16]	; (8007744 <ipfrag_free_pbuf_custom+0x30>)
 8007734:	f006 fa49 	bl	800dbca <iprintf>
 8007738:	e7ef      	b.n	800771a <ipfrag_free_pbuf_custom+0x6>
 800773a:	bf00      	nop
 800773c:	0800f08c 	.word	0x0800f08c
 8007740:	0800f140 	.word	0x0800f140
 8007744:	0800e3b0 	.word	0x0800e3b0

08007748 <ip_reass_chain_frag_into_datagram_and_validate>:
{
 8007748:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800774c:	4680      	mov	r8, r0
 800774e:	460f      	mov	r7, r1
 8007750:	4691      	mov	r9, r2
  fraghdr = (struct ip_hdr*)new_p->payload;
 8007752:	684c      	ldr	r4, [r1, #4]
  len = lwip_ntohs(IPH_LEN(fraghdr)) - IPH_HL(fraghdr) * 4;
 8007754:	8860      	ldrh	r0, [r4, #2]
 8007756:	f7fe ff59 	bl	800660c <lwip_htons>
 800775a:	7826      	ldrb	r6, [r4, #0]
 800775c:	f006 060f 	and.w	r6, r6, #15
 8007760:	eba0 0686 	sub.w	r6, r0, r6, lsl #2
 8007764:	b2b6      	uxth	r6, r6
  offset = (lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) * 8;
 8007766:	88e0      	ldrh	r0, [r4, #6]
 8007768:	f7fe ff50 	bl	800660c <lwip_htons>
 800776c:	f3c0 000c 	ubfx	r0, r0, #0, #13
 8007770:	00c0      	lsls	r0, r0, #3
  iprh = (struct ip_reass_helper*)new_p->payload;
 8007772:	687d      	ldr	r5, [r7, #4]
  iprh->next_pbuf = NULL;
 8007774:	2400      	movs	r4, #0
 8007776:	702c      	strb	r4, [r5, #0]
 8007778:	706c      	strb	r4, [r5, #1]
 800777a:	70ac      	strb	r4, [r5, #2]
 800777c:	70ec      	strb	r4, [r5, #3]
  iprh->start = offset;
 800777e:	80a8      	strh	r0, [r5, #4]
  iprh->end = offset + len;
 8007780:	eb06 0e00 	add.w	lr, r6, r0
 8007784:	fa1f fe8e 	uxth.w	lr, lr
 8007788:	f8a5 e006 	strh.w	lr, [r5, #6]
  for (q = ipr->p; q != NULL;) {
 800778c:	f8d8 1004 	ldr.w	r1, [r8, #4]
  int valid = 1;
 8007790:	2601      	movs	r6, #1
  for (q = ipr->p; q != NULL;) {
 8007792:	e033      	b.n	80077fc <ip_reass_chain_frag_into_datagram_and_validate+0xb4>
      iprh->next_pbuf = q;
 8007794:	6029      	str	r1, [r5, #0]
      if (iprh_prev != NULL) {
 8007796:	b34c      	cbz	r4, 80077ec <ip_reass_chain_frag_into_datagram_and_validate+0xa4>
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 8007798:	88e2      	ldrh	r2, [r4, #6]
 800779a:	4290      	cmp	r0, r2
 800779c:	d37e      	bcc.n	800789c <ip_reass_chain_frag_into_datagram_and_validate+0x154>
 800779e:	889b      	ldrh	r3, [r3, #4]
 80077a0:	459e      	cmp	lr, r3
 80077a2:	d87b      	bhi.n	800789c <ip_reass_chain_frag_into_datagram_and_validate+0x154>
        iprh_prev->next_pbuf = new_p;
 80077a4:	6027      	str	r7, [r4, #0]
        if (iprh_prev->end != iprh->start) {
 80077a6:	88ab      	ldrh	r3, [r5, #4]
 80077a8:	429a      	cmp	r2, r3
 80077aa:	d000      	beq.n	80077ae <ip_reass_chain_frag_into_datagram_and_validate+0x66>
          valid = 0;
 80077ac:	2600      	movs	r6, #0
  if (q == NULL) {
 80077ae:	2900      	cmp	r1, #0
 80077b0:	d036      	beq.n	8007820 <ip_reass_chain_frag_into_datagram_and_validate+0xd8>
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 80077b2:	f1b9 0f00 	cmp.w	r9, #0
 80077b6:	d104      	bne.n	80077c2 <ip_reass_chain_frag_into_datagram_and_validate+0x7a>
 80077b8:	f898 301e 	ldrb.w	r3, [r8, #30]
 80077bc:	f013 0f01 	tst.w	r3, #1
 80077c0:	d07a      	beq.n	80078b8 <ip_reass_chain_frag_into_datagram_and_validate+0x170>
    if (valid) {
 80077c2:	2e00      	cmp	r6, #0
 80077c4:	d067      	beq.n	8007896 <ip_reass_chain_frag_into_datagram_and_validate+0x14e>
      if ((ipr->p == NULL) || (((struct ip_reass_helper*)ipr->p->payload)->start != 0)) {
 80077c6:	f8d8 3004 	ldr.w	r3, [r8, #4]
 80077ca:	2b00      	cmp	r3, #0
 80077cc:	d060      	beq.n	8007890 <ip_reass_chain_frag_into_datagram_and_validate+0x148>
 80077ce:	6858      	ldr	r0, [r3, #4]
 80077d0:	8883      	ldrh	r3, [r0, #4]
 80077d2:	2b00      	cmp	r3, #0
 80077d4:	d15e      	bne.n	8007894 <ip_reass_chain_frag_into_datagram_and_validate+0x14c>
        q = iprh->next_pbuf;
 80077d6:	682a      	ldr	r2, [r5, #0]
        while (q != NULL) {
 80077d8:	2a00      	cmp	r2, #0
 80077da:	d044      	beq.n	8007866 <ip_reass_chain_frag_into_datagram_and_validate+0x11e>
          iprh = (struct ip_reass_helper*)q->payload;
 80077dc:	6853      	ldr	r3, [r2, #4]
          if (iprh_prev->end != iprh->start) {
 80077de:	88e9      	ldrh	r1, [r5, #6]
 80077e0:	889a      	ldrh	r2, [r3, #4]
 80077e2:	4291      	cmp	r1, r2
 80077e4:	d13d      	bne.n	8007862 <ip_reass_chain_frag_into_datagram_and_validate+0x11a>
          q = iprh->next_pbuf;
 80077e6:	681a      	ldr	r2, [r3, #0]
          iprh = (struct ip_reass_helper*)q->payload;
 80077e8:	461d      	mov	r5, r3
 80077ea:	e7f5      	b.n	80077d8 <ip_reass_chain_frag_into_datagram_and_validate+0x90>
        if (iprh->end > iprh_tmp->start) {
 80077ec:	889b      	ldrh	r3, [r3, #4]
 80077ee:	459e      	cmp	lr, r3
 80077f0:	d854      	bhi.n	800789c <ip_reass_chain_frag_into_datagram_and_validate+0x154>
        ipr->p = new_p;
 80077f2:	f8c8 7004 	str.w	r7, [r8, #4]
 80077f6:	e7da      	b.n	80077ae <ip_reass_chain_frag_into_datagram_and_validate+0x66>
    q = iprh_tmp->next_pbuf;
 80077f8:	6819      	ldr	r1, [r3, #0]
    iprh_prev = iprh_tmp;
 80077fa:	461c      	mov	r4, r3
  for (q = ipr->p; q != NULL;) {
 80077fc:	2900      	cmp	r1, #0
 80077fe:	d0d6      	beq.n	80077ae <ip_reass_chain_frag_into_datagram_and_validate+0x66>
    iprh_tmp = (struct ip_reass_helper*)q->payload;
 8007800:	684b      	ldr	r3, [r1, #4]
    if (iprh->start < iprh_tmp->start) {
 8007802:	889a      	ldrh	r2, [r3, #4]
 8007804:	4290      	cmp	r0, r2
 8007806:	d3c5      	bcc.n	8007794 <ip_reass_chain_frag_into_datagram_and_validate+0x4c>
    } else if (iprh->start == iprh_tmp->start) {
 8007808:	4290      	cmp	r0, r2
 800780a:	d047      	beq.n	800789c <ip_reass_chain_frag_into_datagram_and_validate+0x154>
    } else if (iprh->start < iprh_tmp->end) {
 800780c:	88d9      	ldrh	r1, [r3, #6]
 800780e:	4288      	cmp	r0, r1
 8007810:	d344      	bcc.n	800789c <ip_reass_chain_frag_into_datagram_and_validate+0x154>
      if (iprh_prev != NULL) {
 8007812:	2c00      	cmp	r4, #0
 8007814:	d0f0      	beq.n	80077f8 <ip_reass_chain_frag_into_datagram_and_validate+0xb0>
        if (iprh_prev->end != iprh_tmp->start) {
 8007816:	88e1      	ldrh	r1, [r4, #6]
 8007818:	428a      	cmp	r2, r1
 800781a:	d0ed      	beq.n	80077f8 <ip_reass_chain_frag_into_datagram_and_validate+0xb0>
          valid = 0;
 800781c:	2600      	movs	r6, #0
 800781e:	e7eb      	b.n	80077f8 <ip_reass_chain_frag_into_datagram_and_validate+0xb0>
    if (iprh_prev != NULL) {
 8007820:	b194      	cbz	r4, 8007848 <ip_reass_chain_frag_into_datagram_and_validate+0x100>
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 8007822:	88e2      	ldrh	r2, [r4, #6]
 8007824:	88ab      	ldrh	r3, [r5, #4]
 8007826:	429a      	cmp	r2, r3
 8007828:	d806      	bhi.n	8007838 <ip_reass_chain_frag_into_datagram_and_validate+0xf0>
      iprh_prev->next_pbuf = new_p;
 800782a:	6027      	str	r7, [r4, #0]
      if (iprh_prev->end != iprh->start) {
 800782c:	88e2      	ldrh	r2, [r4, #6]
 800782e:	88ab      	ldrh	r3, [r5, #4]
 8007830:	429a      	cmp	r2, r3
 8007832:	d0be      	beq.n	80077b2 <ip_reass_chain_frag_into_datagram_and_validate+0x6a>
        valid = 0;
 8007834:	2600      	movs	r6, #0
 8007836:	e7bc      	b.n	80077b2 <ip_reass_chain_frag_into_datagram_and_validate+0x6a>
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 8007838:	4b21      	ldr	r3, [pc, #132]	; (80078c0 <ip_reass_chain_frag_into_datagram_and_validate+0x178>)
 800783a:	f240 12ab 	movw	r2, #427	; 0x1ab
 800783e:	4921      	ldr	r1, [pc, #132]	; (80078c4 <ip_reass_chain_frag_into_datagram_and_validate+0x17c>)
 8007840:	4821      	ldr	r0, [pc, #132]	; (80078c8 <ip_reass_chain_frag_into_datagram_and_validate+0x180>)
 8007842:	f006 f9c2 	bl	800dbca <iprintf>
 8007846:	e7f0      	b.n	800782a <ip_reass_chain_frag_into_datagram_and_validate+0xe2>
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 8007848:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800784c:	b133      	cbz	r3, 800785c <ip_reass_chain_frag_into_datagram_and_validate+0x114>
 800784e:	4b1c      	ldr	r3, [pc, #112]	; (80078c0 <ip_reass_chain_frag_into_datagram_and_validate+0x178>)
 8007850:	f44f 72da 	mov.w	r2, #436	; 0x1b4
 8007854:	491d      	ldr	r1, [pc, #116]	; (80078cc <ip_reass_chain_frag_into_datagram_and_validate+0x184>)
 8007856:	481c      	ldr	r0, [pc, #112]	; (80078c8 <ip_reass_chain_frag_into_datagram_and_validate+0x180>)
 8007858:	f006 f9b7 	bl	800dbca <iprintf>
      ipr->p = new_p;
 800785c:	f8c8 7004 	str.w	r7, [r8, #4]
 8007860:	e7a7      	b.n	80077b2 <ip_reass_chain_frag_into_datagram_and_validate+0x6a>
          iprh = (struct ip_reass_helper*)q->payload;
 8007862:	461d      	mov	r5, r3
            valid = 0;
 8007864:	2600      	movs	r6, #0
        if (valid) {
 8007866:	b1b6      	cbz	r6, 8007896 <ip_reass_chain_frag_into_datagram_and_validate+0x14e>
          LWIP_ASSERT("sanity check",
 8007868:	4285      	cmp	r5, r0
 800786a:	d009      	beq.n	8007880 <ip_reass_chain_frag_into_datagram_and_validate+0x138>
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 800786c:	682b      	ldr	r3, [r5, #0]
 800786e:	b193      	cbz	r3, 8007896 <ip_reass_chain_frag_into_datagram_and_validate+0x14e>
 8007870:	4b13      	ldr	r3, [pc, #76]	; (80078c0 <ip_reass_chain_frag_into_datagram_and_validate+0x178>)
 8007872:	f44f 72ec 	mov.w	r2, #472	; 0x1d8
 8007876:	4916      	ldr	r1, [pc, #88]	; (80078d0 <ip_reass_chain_frag_into_datagram_and_validate+0x188>)
 8007878:	4813      	ldr	r0, [pc, #76]	; (80078c8 <ip_reass_chain_frag_into_datagram_and_validate+0x180>)
 800787a:	f006 f9a6 	bl	800dbca <iprintf>
 800787e:	e00a      	b.n	8007896 <ip_reass_chain_frag_into_datagram_and_validate+0x14e>
          LWIP_ASSERT("sanity check",
 8007880:	4b0f      	ldr	r3, [pc, #60]	; (80078c0 <ip_reass_chain_frag_into_datagram_and_validate+0x178>)
 8007882:	f44f 72eb 	mov.w	r2, #470	; 0x1d6
 8007886:	4913      	ldr	r1, [pc, #76]	; (80078d4 <ip_reass_chain_frag_into_datagram_and_validate+0x18c>)
 8007888:	480f      	ldr	r0, [pc, #60]	; (80078c8 <ip_reass_chain_frag_into_datagram_and_validate+0x180>)
 800788a:	f006 f99e 	bl	800dbca <iprintf>
 800788e:	e7ed      	b.n	800786c <ip_reass_chain_frag_into_datagram_and_validate+0x124>
        valid = 0;
 8007890:	2600      	movs	r6, #0
 8007892:	e000      	b.n	8007896 <ip_reass_chain_frag_into_datagram_and_validate+0x14e>
 8007894:	2600      	movs	r6, #0
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
 8007896:	4630      	mov	r0, r6
 8007898:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  ip_reass_pbufcount -= pbuf_clen(new_p);
 800789c:	4638      	mov	r0, r7
 800789e:	f001 f897 	bl	80089d0 <pbuf_clen>
 80078a2:	4a0d      	ldr	r2, [pc, #52]	; (80078d8 <ip_reass_chain_frag_into_datagram_and_validate+0x190>)
 80078a4:	8813      	ldrh	r3, [r2, #0]
 80078a6:	1a18      	subs	r0, r3, r0
 80078a8:	8010      	strh	r0, [r2, #0]
  pbuf_free(new_p);
 80078aa:	4638      	mov	r0, r7
 80078ac:	f000 feca 	bl	8008644 <pbuf_free>
  return IP_REASS_VALIDATE_PBUF_DROPPED;
 80078b0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80078b4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 80078b8:	4648      	mov	r0, r9
}
 80078ba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80078be:	bf00      	nop
 80078c0:	0800f08c 	.word	0x0800f08c
 80078c4:	0800f000 	.word	0x0800f000
 80078c8:	0800e3b0 	.word	0x0800e3b0
 80078cc:	0800f020 	.word	0x0800f020
 80078d0:	0800f068 	.word	0x0800f068
 80078d4:	0800f058 	.word	0x0800f058
 80078d8:	20003f34 	.word	0x20003f34

080078dc <ip_frag_alloc_pbuf_custom_ref>:
{
 80078dc:	b508      	push	{r3, lr}
  return (struct pbuf_custom_ref*)memp_malloc(MEMP_FRAG_PBUF);
 80078de:	2005      	movs	r0, #5
 80078e0:	f000 fcc0 	bl	8008264 <memp_malloc>
}
 80078e4:	bd08      	pop	{r3, pc}
	...

080078e8 <ip_reass_enqueue_new_datagram>:
{
 80078e8:	b570      	push	{r4, r5, r6, lr}
 80078ea:	4605      	mov	r5, r0
 80078ec:	460e      	mov	r6, r1
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 80078ee:	2004      	movs	r0, #4
 80078f0:	f000 fcb8 	bl	8008264 <memp_malloc>
  if (ipr == NULL) {
 80078f4:	4604      	mov	r4, r0
 80078f6:	b1b0      	cbz	r0, 8007926 <ip_reass_enqueue_new_datagram+0x3e>
  memset(ipr, 0, sizeof(struct ip_reassdata));
 80078f8:	2220      	movs	r2, #32
 80078fa:	2100      	movs	r1, #0
 80078fc:	4620      	mov	r0, r4
 80078fe:	f006 fadb 	bl	800deb8 <memset>
  ipr->timer = IP_REASS_MAXAGE;
 8007902:	2303      	movs	r3, #3
 8007904:	77e3      	strb	r3, [r4, #31]
  ipr->next = reassdatagrams;
 8007906:	4b0f      	ldr	r3, [pc, #60]	; (8007944 <ip_reass_enqueue_new_datagram+0x5c>)
 8007908:	681a      	ldr	r2, [r3, #0]
 800790a:	6022      	str	r2, [r4, #0]
  reassdatagrams = ipr;
 800790c:	601c      	str	r4, [r3, #0]
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 800790e:	682a      	ldr	r2, [r5, #0]
 8007910:	686e      	ldr	r6, [r5, #4]
 8007912:	68a8      	ldr	r0, [r5, #8]
 8007914:	68e9      	ldr	r1, [r5, #12]
 8007916:	60a2      	str	r2, [r4, #8]
 8007918:	60e6      	str	r6, [r4, #12]
 800791a:	6120      	str	r0, [r4, #16]
 800791c:	6161      	str	r1, [r4, #20]
 800791e:	692a      	ldr	r2, [r5, #16]
 8007920:	61a2      	str	r2, [r4, #24]
}
 8007922:	4620      	mov	r0, r4
 8007924:	bd70      	pop	{r4, r5, r6, pc}
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 8007926:	4631      	mov	r1, r6
 8007928:	4628      	mov	r0, r5
 800792a:	f7ff fe9f 	bl	800766c <ip_reass_remove_oldest_datagram>
 800792e:	4286      	cmp	r6, r0
 8007930:	dd02      	ble.n	8007938 <ip_reass_enqueue_new_datagram+0x50>
    if (ipr == NULL)
 8007932:	2c00      	cmp	r4, #0
 8007934:	d1e0      	bne.n	80078f8 <ip_reass_enqueue_new_datagram+0x10>
 8007936:	e7f4      	b.n	8007922 <ip_reass_enqueue_new_datagram+0x3a>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 8007938:	2004      	movs	r0, #4
 800793a:	f000 fc93 	bl	8008264 <memp_malloc>
 800793e:	4604      	mov	r4, r0
 8007940:	e7f7      	b.n	8007932 <ip_reass_enqueue_new_datagram+0x4a>
 8007942:	bf00      	nop
 8007944:	20003f38 	.word	0x20003f38

08007948 <ip_reass_tmr>:
{
 8007948:	b538      	push	{r3, r4, r5, lr}
  r = reassdatagrams;
 800794a:	4b09      	ldr	r3, [pc, #36]	; (8007970 <ip_reass_tmr+0x28>)
 800794c:	6818      	ldr	r0, [r3, #0]
  struct ip_reassdata *r, *prev = NULL;
 800794e:	2400      	movs	r4, #0
  while (r != NULL) {
 8007950:	e004      	b.n	800795c <ip_reass_tmr+0x14>
      r = r->next;
 8007952:	6805      	ldr	r5, [r0, #0]
      ip_reass_free_complete_datagram(tmp, prev);
 8007954:	4621      	mov	r1, r4
 8007956:	f7ff fe03 	bl	8007560 <ip_reass_free_complete_datagram>
      r = r->next;
 800795a:	4628      	mov	r0, r5
  while (r != NULL) {
 800795c:	b138      	cbz	r0, 800796e <ip_reass_tmr+0x26>
    if (r->timer > 0) {
 800795e:	7fc3      	ldrb	r3, [r0, #31]
 8007960:	2b00      	cmp	r3, #0
 8007962:	d0f6      	beq.n	8007952 <ip_reass_tmr+0xa>
      r->timer--;
 8007964:	3b01      	subs	r3, #1
 8007966:	77c3      	strb	r3, [r0, #31]
      prev = r;
 8007968:	4604      	mov	r4, r0
      r = r->next;
 800796a:	6800      	ldr	r0, [r0, #0]
 800796c:	e7f6      	b.n	800795c <ip_reass_tmr+0x14>
}
 800796e:	bd38      	pop	{r3, r4, r5, pc}
 8007970:	20003f38 	.word	0x20003f38

08007974 <ip4_reass>:
{
 8007974:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007978:	4681      	mov	r9, r0
  fraghdr = (struct ip_hdr*)p->payload;
 800797a:	6845      	ldr	r5, [r0, #4]
  if ((IPH_HL(fraghdr) * 4) != IP_HLEN) {
 800797c:	782b      	ldrb	r3, [r5, #0]
 800797e:	f003 030f 	and.w	r3, r3, #15
 8007982:	2b05      	cmp	r3, #5
 8007984:	d124      	bne.n	80079d0 <ip4_reass+0x5c>
  offset = (lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) * 8;
 8007986:	88e8      	ldrh	r0, [r5, #6]
 8007988:	f7fe fe40 	bl	800660c <lwip_htons>
 800798c:	f3c0 000c 	ubfx	r0, r0, #0, #13
 8007990:	00c7      	lsls	r7, r0, #3
  len = lwip_ntohs(IPH_LEN(fraghdr)) - IPH_HL(fraghdr) * 4;
 8007992:	8868      	ldrh	r0, [r5, #2]
 8007994:	f7fe fe3a 	bl	800660c <lwip_htons>
 8007998:	782e      	ldrb	r6, [r5, #0]
 800799a:	f006 060f 	and.w	r6, r6, #15
 800799e:	eba0 0686 	sub.w	r6, r0, r6, lsl #2
 80079a2:	b2b6      	uxth	r6, r6
  clen = pbuf_clen(p);
 80079a4:	4648      	mov	r0, r9
 80079a6:	f001 f813 	bl	80089d0 <pbuf_clen>
 80079aa:	4680      	mov	r8, r0
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 80079ac:	4b59      	ldr	r3, [pc, #356]	; (8007b14 <ip4_reass+0x1a0>)
 80079ae:	881b      	ldrh	r3, [r3, #0]
 80079b0:	4403      	add	r3, r0
 80079b2:	2b0a      	cmp	r3, #10
 80079b4:	dc02      	bgt.n	80079bc <ip4_reass+0x48>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 80079b6:	4b58      	ldr	r3, [pc, #352]	; (8007b18 <ip4_reass+0x1a4>)
 80079b8:	681c      	ldr	r4, [r3, #0]
 80079ba:	e011      	b.n	80079e0 <ip4_reass+0x6c>
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 80079bc:	4601      	mov	r1, r0
 80079be:	4628      	mov	r0, r5
 80079c0:	f7ff fe54 	bl	800766c <ip_reass_remove_oldest_datagram>
 80079c4:	b120      	cbz	r0, 80079d0 <ip4_reass+0x5c>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 80079c6:	4b53      	ldr	r3, [pc, #332]	; (8007b14 <ip4_reass+0x1a0>)
 80079c8:	881b      	ldrh	r3, [r3, #0]
 80079ca:	4443      	add	r3, r8
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 80079cc:	2b0a      	cmp	r3, #10
 80079ce:	ddf2      	ble.n	80079b6 <ip4_reass+0x42>
  pbuf_free(p);
 80079d0:	4648      	mov	r0, r9
 80079d2:	f000 fe37 	bl	8008644 <pbuf_free>
  return NULL;
 80079d6:	2700      	movs	r7, #0
}
 80079d8:	4638      	mov	r0, r7
 80079da:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 80079de:	6824      	ldr	r4, [r4, #0]
 80079e0:	b15c      	cbz	r4, 80079fa <ip4_reass+0x86>
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 80079e2:	6962      	ldr	r2, [r4, #20]
 80079e4:	68eb      	ldr	r3, [r5, #12]
 80079e6:	429a      	cmp	r2, r3
 80079e8:	d1f9      	bne.n	80079de <ip4_reass+0x6a>
 80079ea:	69a2      	ldr	r2, [r4, #24]
 80079ec:	692b      	ldr	r3, [r5, #16]
 80079ee:	429a      	cmp	r2, r3
 80079f0:	d1f5      	bne.n	80079de <ip4_reass+0x6a>
 80079f2:	89a2      	ldrh	r2, [r4, #12]
 80079f4:	88ab      	ldrh	r3, [r5, #4]
 80079f6:	429a      	cmp	r2, r3
 80079f8:	d1f1      	bne.n	80079de <ip4_reass+0x6a>
  if (ipr == NULL) {
 80079fa:	2c00      	cmp	r4, #0
 80079fc:	d048      	beq.n	8007a90 <ip4_reass+0x11c>
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 80079fe:	88e8      	ldrh	r0, [r5, #6]
 8007a00:	f7fe fe04 	bl	800660c <lwip_htons>
 8007a04:	f3c0 000c 	ubfx	r0, r0, #0, #13
 8007a08:	2800      	cmp	r0, #0
 8007a0a:	d049      	beq.n	8007aa0 <ip4_reass+0x12c>
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 8007a0c:	88ed      	ldrh	r5, [r5, #6]
 8007a0e:	f005 0520 	and.w	r5, r5, #32
 8007a12:	2d00      	cmp	r5, #0
 8007a14:	bf0c      	ite	eq
 8007a16:	2201      	moveq	r2, #1
 8007a18:	2200      	movne	r2, #0
  if (is_last) {
 8007a1a:	d107      	bne.n	8007a2c <ip4_reass+0xb8>
    u16_t datagram_len = (u16_t)(offset + len);
 8007a1c:	19bb      	adds	r3, r7, r6
 8007a1e:	b29b      	uxth	r3, r3
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 8007a20:	429f      	cmp	r7, r3
 8007a22:	d8d5      	bhi.n	80079d0 <ip4_reass+0x5c>
 8007a24:	f64f 71eb 	movw	r1, #65515	; 0xffeb
 8007a28:	428b      	cmp	r3, r1
 8007a2a:	d8d1      	bhi.n	80079d0 <ip4_reass+0x5c>
  valid = ip_reass_chain_frag_into_datagram_and_validate(ipr, p, is_last);
 8007a2c:	4649      	mov	r1, r9
 8007a2e:	4620      	mov	r0, r4
 8007a30:	f7ff fe8a 	bl	8007748 <ip_reass_chain_frag_into_datagram_and_validate>
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 8007a34:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 8007a38:	d0ca      	beq.n	80079d0 <ip4_reass+0x5c>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 8007a3a:	4b36      	ldr	r3, [pc, #216]	; (8007b14 <ip4_reass+0x1a0>)
 8007a3c:	881a      	ldrh	r2, [r3, #0]
 8007a3e:	4490      	add	r8, r2
 8007a40:	f8a3 8000 	strh.w	r8, [r3]
  if (is_last) {
 8007a44:	b92d      	cbnz	r5, 8007a52 <ip4_reass+0xde>
    u16_t datagram_len = (u16_t)(offset + len);
 8007a46:	443e      	add	r6, r7
    ipr->datagram_len = datagram_len;
 8007a48:	83a6      	strh	r6, [r4, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 8007a4a:	7fa3      	ldrb	r3, [r4, #30]
 8007a4c:	f043 0301 	orr.w	r3, r3, #1
 8007a50:	77a3      	strb	r3, [r4, #30]
  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 8007a52:	2801      	cmp	r0, #1
 8007a54:	d15b      	bne.n	8007b0e <ip4_reass+0x19a>
    ipr->datagram_len += IP_HLEN;
 8007a56:	8ba3      	ldrh	r3, [r4, #28]
 8007a58:	3314      	adds	r3, #20
 8007a5a:	83a3      	strh	r3, [r4, #28]
    r = ((struct ip_reass_helper*)ipr->p->payload)->next_pbuf;
 8007a5c:	6863      	ldr	r3, [r4, #4]
 8007a5e:	685e      	ldr	r6, [r3, #4]
 8007a60:	6835      	ldr	r5, [r6, #0]
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 8007a62:	4623      	mov	r3, r4
 8007a64:	f853 2f08 	ldr.w	r2, [r3, #8]!
 8007a68:	685f      	ldr	r7, [r3, #4]
 8007a6a:	6898      	ldr	r0, [r3, #8]
 8007a6c:	68d9      	ldr	r1, [r3, #12]
 8007a6e:	6032      	str	r2, [r6, #0]
 8007a70:	6077      	str	r7, [r6, #4]
 8007a72:	60b0      	str	r0, [r6, #8]
 8007a74:	60f1      	str	r1, [r6, #12]
 8007a76:	691a      	ldr	r2, [r3, #16]
 8007a78:	6132      	str	r2, [r6, #16]
    IPH_LEN_SET(fraghdr, lwip_htons(ipr->datagram_len));
 8007a7a:	8ba0      	ldrh	r0, [r4, #28]
 8007a7c:	f7fe fdc6 	bl	800660c <lwip_htons>
 8007a80:	8070      	strh	r0, [r6, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 8007a82:	2300      	movs	r3, #0
 8007a84:	71b3      	strb	r3, [r6, #6]
 8007a86:	71f3      	strb	r3, [r6, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 8007a88:	72b3      	strb	r3, [r6, #10]
 8007a8a:	72f3      	strb	r3, [r6, #11]
    p = ipr->p;
 8007a8c:	6867      	ldr	r7, [r4, #4]
    while (r != NULL) {
 8007a8e:	e026      	b.n	8007ade <ip4_reass+0x16a>
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
 8007a90:	4641      	mov	r1, r8
 8007a92:	4628      	mov	r0, r5
 8007a94:	f7ff ff28 	bl	80078e8 <ip_reass_enqueue_new_datagram>
    if (ipr == NULL) {
 8007a98:	4604      	mov	r4, r0
 8007a9a:	2800      	cmp	r0, #0
 8007a9c:	d1b6      	bne.n	8007a0c <ip4_reass+0x98>
 8007a9e:	e797      	b.n	80079d0 <ip4_reass+0x5c>
      ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 8007aa0:	89e0      	ldrh	r0, [r4, #14]
 8007aa2:	f7fe fdb3 	bl	800660c <lwip_htons>
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 8007aa6:	f3c0 000c 	ubfx	r0, r0, #0, #13
 8007aaa:	2800      	cmp	r0, #0
 8007aac:	d0ae      	beq.n	8007a0c <ip4_reass+0x98>
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 8007aae:	682a      	ldr	r2, [r5, #0]
 8007ab0:	f8d5 e004 	ldr.w	lr, [r5, #4]
 8007ab4:	68a8      	ldr	r0, [r5, #8]
 8007ab6:	68e9      	ldr	r1, [r5, #12]
 8007ab8:	60a2      	str	r2, [r4, #8]
 8007aba:	f8c4 e00c 	str.w	lr, [r4, #12]
 8007abe:	6120      	str	r0, [r4, #16]
 8007ac0:	6161      	str	r1, [r4, #20]
 8007ac2:	692a      	ldr	r2, [r5, #16]
 8007ac4:	61a2      	str	r2, [r4, #24]
 8007ac6:	e7a1      	b.n	8007a0c <ip4_reass+0x98>
      iprh = (struct ip_reass_helper*)r->payload;
 8007ac8:	686e      	ldr	r6, [r5, #4]
      pbuf_header(r, -IP_HLEN);
 8007aca:	f06f 0113 	mvn.w	r1, #19
 8007ace:	4628      	mov	r0, r5
 8007ad0:	f000 fdae 	bl	8008630 <pbuf_header>
      pbuf_cat(p, r);
 8007ad4:	4629      	mov	r1, r5
 8007ad6:	4638      	mov	r0, r7
 8007ad8:	f000 ffa0 	bl	8008a1c <pbuf_cat>
      r = iprh->next_pbuf;
 8007adc:	6835      	ldr	r5, [r6, #0]
    while (r != NULL) {
 8007ade:	2d00      	cmp	r5, #0
 8007ae0:	d1f2      	bne.n	8007ac8 <ip4_reass+0x154>
    if (ipr == reassdatagrams) {
 8007ae2:	4b0d      	ldr	r3, [pc, #52]	; (8007b18 <ip4_reass+0x1a4>)
 8007ae4:	6819      	ldr	r1, [r3, #0]
 8007ae6:	428c      	cmp	r4, r1
 8007ae8:	d005      	beq.n	8007af6 <ip4_reass+0x182>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 8007aea:	b129      	cbz	r1, 8007af8 <ip4_reass+0x184>
        if (ipr_prev->next == ipr) {
 8007aec:	680b      	ldr	r3, [r1, #0]
 8007aee:	429c      	cmp	r4, r3
 8007af0:	d002      	beq.n	8007af8 <ip4_reass+0x184>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 8007af2:	4619      	mov	r1, r3
 8007af4:	e7f9      	b.n	8007aea <ip4_reass+0x176>
      ipr_prev = NULL;
 8007af6:	2100      	movs	r1, #0
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 8007af8:	4620      	mov	r0, r4
 8007afa:	f7ff fd0d 	bl	8007518 <ip_reass_dequeue_datagram>
    ip_reass_pbufcount -= pbuf_clen(p);
 8007afe:	4638      	mov	r0, r7
 8007b00:	f000 ff66 	bl	80089d0 <pbuf_clen>
 8007b04:	4a03      	ldr	r2, [pc, #12]	; (8007b14 <ip4_reass+0x1a0>)
 8007b06:	8813      	ldrh	r3, [r2, #0]
 8007b08:	1a18      	subs	r0, r3, r0
 8007b0a:	8010      	strh	r0, [r2, #0]
    return p;
 8007b0c:	e764      	b.n	80079d8 <ip4_reass+0x64>
  return NULL;
 8007b0e:	2700      	movs	r7, #0
 8007b10:	e762      	b.n	80079d8 <ip4_reass+0x64>
 8007b12:	bf00      	nop
 8007b14:	20003f34 	.word	0x20003f34
 8007b18:	20003f38 	.word	0x20003f38

08007b1c <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 8007b1c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007b20:	b08d      	sub	sp, #52	; 0x34
 8007b22:	4605      	mov	r5, r0
 8007b24:	9107      	str	r1, [sp, #28]
 8007b26:	920b      	str	r2, [sp, #44]	; 0x2c
  u16_t newpbuflen = 0;
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (netif->mtu - IP_HLEN) / 8;
 8007b28:	8c4b      	ldrh	r3, [r1, #34]	; 0x22
 8007b2a:	3b14      	subs	r3, #20
 8007b2c:	d420      	bmi.n	8007b70 <ip4_frag+0x54>
 8007b2e:	10db      	asrs	r3, r3, #3
 8007b30:	9309      	str	r3, [sp, #36]	; 0x24
 8007b32:	b29b      	uxth	r3, r3
 8007b34:	930a      	str	r3, [sp, #40]	; 0x28
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
  u16_t tmp;

  original_iphdr = (struct ip_hdr *)p->payload;
 8007b36:	f8d5 a004 	ldr.w	sl, [r5, #4]
  iphdr = original_iphdr;
  LWIP_ERROR("ip4_frag() does not support IP options", IPH_HL(iphdr) * 4 == IP_HLEN, return ERR_VAL);
 8007b3a:	f89a 3000 	ldrb.w	r3, [sl]
 8007b3e:	f003 030f 	and.w	r3, r3, #15
 8007b42:	2b05      	cmp	r3, #5
 8007b44:	d116      	bne.n	8007b74 <ip4_frag+0x58>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 8007b46:	f8ba 0006 	ldrh.w	r0, [sl, #6]
 8007b4a:	f7fe fd5f 	bl	800660c <lwip_htons>
  ofo = tmp & IP_OFFMASK;
 8007b4e:	f3c0 030c 	ubfx	r3, r0, #0, #13
 8007b52:	9306      	str	r3, [sp, #24]
  LWIP_ERROR("ip_frag(): MF already set", (tmp & IP_MF) == 0, return ERR_VAL);
 8007b54:	f410 5f00 	tst.w	r0, #8192	; 0x2000
 8007b58:	d116      	bne.n	8007b88 <ip4_frag+0x6c>

  left = p->tot_len - IP_HLEN;
 8007b5a:	f8b5 9008 	ldrh.w	r9, [r5, #8]
 8007b5e:	f1a9 0914 	sub.w	r9, r9, #20
 8007b62:	fa1f fb89 	uxth.w	fp, r9
  u16_t poff = IP_HLEN;
 8007b66:	f04f 0814 	mov.w	r8, #20
  u16_t newpbuflen = 0;
 8007b6a:	2400      	movs	r4, #0
 8007b6c:	46d9      	mov	r9, fp

  while (left) {
 8007b6e:	e08c      	b.n	8007c8a <ip4_frag+0x16e>
  const u16_t nfb = (netif->mtu - IP_HLEN) / 8;
 8007b70:	3307      	adds	r3, #7
 8007b72:	e7dc      	b.n	8007b2e <ip4_frag+0x12>
  LWIP_ERROR("ip4_frag() does not support IP options", IPH_HL(iphdr) * 4 == IP_HLEN, return ERR_VAL);
 8007b74:	4b5e      	ldr	r3, [pc, #376]	; (8007cf0 <ip4_frag+0x1d4>)
 8007b76:	f240 22e1 	movw	r2, #737	; 0x2e1
 8007b7a:	495e      	ldr	r1, [pc, #376]	; (8007cf4 <ip4_frag+0x1d8>)
 8007b7c:	485e      	ldr	r0, [pc, #376]	; (8007cf8 <ip4_frag+0x1dc>)
 8007b7e:	f006 f824 	bl	800dbca <iprintf>
 8007b82:	f06f 0005 	mvn.w	r0, #5
 8007b86:	e043      	b.n	8007c10 <ip4_frag+0xf4>
  LWIP_ERROR("ip_frag(): MF already set", (tmp & IP_MF) == 0, return ERR_VAL);
 8007b88:	4b59      	ldr	r3, [pc, #356]	; (8007cf0 <ip4_frag+0x1d4>)
 8007b8a:	f240 22e6 	movw	r2, #742	; 0x2e6
 8007b8e:	495b      	ldr	r1, [pc, #364]	; (8007cfc <ip4_frag+0x1e0>)
 8007b90:	4859      	ldr	r0, [pc, #356]	; (8007cf8 <ip4_frag+0x1dc>)
 8007b92:	f006 f81a 	bl	800dbca <iprintf>
 8007b96:	f06f 0005 	mvn.w	r0, #5
 8007b9a:	e039      	b.n	8007c10 <ip4_frag+0xf4>
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
    if (rambuf == NULL) {
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 8007b9c:	4b54      	ldr	r3, [pc, #336]	; (8007cf0 <ip4_frag+0x1d4>)
 8007b9e:	f240 3209 	movw	r2, #777	; 0x309
 8007ba2:	4957      	ldr	r1, [pc, #348]	; (8007d00 <ip4_frag+0x1e4>)
 8007ba4:	4854      	ldr	r0, [pc, #336]	; (8007cf8 <ip4_frag+0x1dc>)
 8007ba6:	f006 f810 	bl	800dbca <iprintf>
 8007baa:	e086      	b.n	8007cba <ip4_frag+0x19e>
      if (!newpbuflen) {
        poff = 0;
        p = p->next;
        continue;
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
 8007bac:	f7ff fe96 	bl	80078dc <ip_frag_alloc_pbuf_custom_ref>
      if (pcr == NULL) {
 8007bb0:	4607      	mov	r7, r0
 8007bb2:	b340      	cbz	r0, 8007c06 <ip4_frag+0xea>
        pbuf_free(rambuf);
        goto memerr;
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
        (u8_t*)p->payload + poff, newpbuflen);
 8007bb4:	686b      	ldr	r3, [r5, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 8007bb6:	4443      	add	r3, r8
 8007bb8:	9401      	str	r4, [sp, #4]
 8007bba:	9300      	str	r3, [sp, #0]
 8007bbc:	4603      	mov	r3, r0
 8007bbe:	2202      	movs	r2, #2
 8007bc0:	4621      	mov	r1, r4
 8007bc2:	2004      	movs	r0, #4
 8007bc4:	f000 fcf8 	bl	80085b8 <pbuf_alloced_custom>
      if (newpbuf == NULL) {
 8007bc8:	9003      	str	r0, [sp, #12]
 8007bca:	b320      	cbz	r0, 8007c16 <ip4_frag+0xfa>
        ip_frag_free_pbuf_custom_ref(pcr);
        pbuf_free(rambuf);
        goto memerr;
      }
      pbuf_ref(p);
 8007bcc:	4628      	mov	r0, r5
 8007bce:	f000 ff09 	bl	80089e4 <pbuf_ref>
      pcr->original = p;
 8007bd2:	617d      	str	r5, [r7, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 8007bd4:	4b4b      	ldr	r3, [pc, #300]	; (8007d04 <ip4_frag+0x1e8>)
 8007bd6:	613b      	str	r3, [r7, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 8007bd8:	9903      	ldr	r1, [sp, #12]
 8007bda:	9804      	ldr	r0, [sp, #16]
 8007bdc:	f000 ff1e 	bl	8008a1c <pbuf_cat>
      left_to_copy -= newpbuflen;
 8007be0:	1b36      	subs	r6, r6, r4
 8007be2:	b2b6      	uxth	r6, r6
      if (left_to_copy) {
 8007be4:	b116      	cbz	r6, 8007bec <ip4_frag+0xd0>
        poff = 0;
        p = p->next;
 8007be6:	682d      	ldr	r5, [r5, #0]
        poff = 0;
 8007be8:	f04f 0800 	mov.w	r8, #0
    while (left_to_copy) {
 8007bec:	b1e6      	cbz	r6, 8007c28 <ip4_frag+0x10c>
      u16_t plen = p->len - poff;
 8007bee:	896c      	ldrh	r4, [r5, #10]
 8007bf0:	eba4 0408 	sub.w	r4, r4, r8
 8007bf4:	b2a4      	uxth	r4, r4
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 8007bf6:	42b4      	cmp	r4, r6
 8007bf8:	bf28      	it	cs
 8007bfa:	4634      	movcs	r4, r6
      if (!newpbuflen) {
 8007bfc:	2c00      	cmp	r4, #0
 8007bfe:	d1d5      	bne.n	8007bac <ip4_frag+0x90>
        p = p->next;
 8007c00:	682d      	ldr	r5, [r5, #0]
        poff = 0;
 8007c02:	46a0      	mov	r8, r4
        continue;
 8007c04:	e7f2      	b.n	8007bec <ip4_frag+0xd0>
        pbuf_free(rambuf);
 8007c06:	9804      	ldr	r0, [sp, #16]
 8007c08:	f000 fd1c 	bl	8008644 <pbuf_free>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 8007c0c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
 8007c10:	b00d      	add	sp, #52	; 0x34
 8007c12:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        ip_frag_free_pbuf_custom_ref(pcr);
 8007c16:	4638      	mov	r0, r7
 8007c18:	f7ff fd66 	bl	80076e8 <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 8007c1c:	9804      	ldr	r0, [sp, #16]
 8007c1e:	f000 fd11 	bl	8008644 <pbuf_free>
  return ERR_MEM;
 8007c22:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
        goto memerr;
 8007c26:	e7f3      	b.n	8007c10 <ip4_frag+0xf4>
    poff += newpbuflen;
 8007c28:	44a0      	add	r8, r4
 8007c2a:	fa1f f888 	uxth.w	r8, r8
    last = (left <= netif->mtu - IP_HLEN);
 8007c2e:	9b07      	ldr	r3, [sp, #28]
 8007c30:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 8007c32:	3b14      	subs	r3, #20
    tmp = (IP_OFFMASK & (ofo));
 8007c34:	9a06      	ldr	r2, [sp, #24]
 8007c36:	f3c2 000c 	ubfx	r0, r2, #0, #13
    if (!last) {
 8007c3a:	9a08      	ldr	r2, [sp, #32]
 8007c3c:	429a      	cmp	r2, r3
 8007c3e:	dd01      	ble.n	8007c44 <ip4_frag+0x128>
      tmp = tmp | IP_MF;
 8007c40:	f440 5000 	orr.w	r0, r0, #8192	; 0x2000
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 8007c44:	f7fe fce2 	bl	800660c <lwip_htons>
 8007c48:	f8ab 0006 	strh.w	r0, [fp, #6]
    IPH_LEN_SET(iphdr, lwip_htons(fragsize + IP_HLEN));
 8007c4c:	9e05      	ldr	r6, [sp, #20]
 8007c4e:	f106 0014 	add.w	r0, r6, #20
 8007c52:	b280      	uxth	r0, r0
 8007c54:	f7fe fcda 	bl	800660c <lwip_htons>
 8007c58:	f8ab 0002 	strh.w	r0, [fp, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 8007c5c:	2300      	movs	r3, #0
 8007c5e:	f88b 300a 	strb.w	r3, [fp, #10]
 8007c62:	f88b 300b 	strb.w	r3, [fp, #11]
    netif->output(netif, rambuf, dest);
 8007c66:	9807      	ldr	r0, [sp, #28]
 8007c68:	6943      	ldr	r3, [r0, #20]
 8007c6a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8007c6c:	9f04      	ldr	r7, [sp, #16]
 8007c6e:	4639      	mov	r1, r7
 8007c70:	4798      	blx	r3
    pbuf_free(rambuf);
 8007c72:	4638      	mov	r0, r7
 8007c74:	f000 fce6 	bl	8008644 <pbuf_free>
    left -= fragsize;
 8007c78:	eba9 0306 	sub.w	r3, r9, r6
 8007c7c:	fa1f f983 	uxth.w	r9, r3
    ofo += nfb;
 8007c80:	9b06      	ldr	r3, [sp, #24]
 8007c82:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007c84:	4413      	add	r3, r2
 8007c86:	b29b      	uxth	r3, r3
 8007c88:	9306      	str	r3, [sp, #24]
  while (left) {
 8007c8a:	f1b9 0f00 	cmp.w	r9, #0
 8007c8e:	d029      	beq.n	8007ce4 <ip4_frag+0x1c8>
    fragsize = LWIP_MIN(left, nfb * 8);
 8007c90:	f8bd 3024 	ldrh.w	r3, [sp, #36]	; 0x24
 8007c94:	00db      	lsls	r3, r3, #3
 8007c96:	f8cd 9020 	str.w	r9, [sp, #32]
 8007c9a:	454b      	cmp	r3, r9
 8007c9c:	bfa8      	it	ge
 8007c9e:	464b      	movge	r3, r9
 8007ca0:	b29b      	uxth	r3, r3
 8007ca2:	9305      	str	r3, [sp, #20]
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 8007ca4:	2200      	movs	r2, #0
 8007ca6:	2114      	movs	r1, #20
 8007ca8:	2002      	movs	r0, #2
 8007caa:	f000 fd37 	bl	800871c <pbuf_alloc>
    if (rambuf == NULL) {
 8007cae:	9004      	str	r0, [sp, #16]
 8007cb0:	b1d0      	cbz	r0, 8007ce8 <ip4_frag+0x1cc>
    LWIP_ASSERT("this needs a pbuf in one piece!",
 8007cb2:	896b      	ldrh	r3, [r5, #10]
 8007cb4:	2b13      	cmp	r3, #19
 8007cb6:	f67f af71 	bls.w	8007b9c <ip4_frag+0x80>
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 8007cba:	9f04      	ldr	r7, [sp, #16]
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	f8da 2000 	ldr.w	r2, [sl]
 8007cc2:	f8da 6004 	ldr.w	r6, [sl, #4]
 8007cc6:	f8da 0008 	ldr.w	r0, [sl, #8]
 8007cca:	f8da 100c 	ldr.w	r1, [sl, #12]
 8007cce:	601a      	str	r2, [r3, #0]
 8007cd0:	605e      	str	r6, [r3, #4]
 8007cd2:	6098      	str	r0, [r3, #8]
 8007cd4:	60d9      	str	r1, [r3, #12]
 8007cd6:	f8da 2010 	ldr.w	r2, [sl, #16]
 8007cda:	611a      	str	r2, [r3, #16]
    iphdr = (struct ip_hdr *)rambuf->payload;
 8007cdc:	f8d7 b004 	ldr.w	fp, [r7, #4]
    left_to_copy = fragsize;
 8007ce0:	9e05      	ldr	r6, [sp, #20]
    while (left_to_copy) {
 8007ce2:	e783      	b.n	8007bec <ip4_frag+0xd0>
  return ERR_OK;
 8007ce4:	2000      	movs	r0, #0
 8007ce6:	e793      	b.n	8007c10 <ip4_frag+0xf4>
  return ERR_MEM;
 8007ce8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007cec:	e790      	b.n	8007c10 <ip4_frag+0xf4>
 8007cee:	bf00      	nop
 8007cf0:	0800f08c 	.word	0x0800f08c
 8007cf4:	0800ef9c 	.word	0x0800ef9c
 8007cf8:	0800e3b0 	.word	0x0800e3b0
 8007cfc:	0800efc4 	.word	0x0800efc4
 8007d00:	0800efe0 	.word	0x0800efe0
 8007d04:	08007715 	.word	0x08007715

08007d08 <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
 8007d08:	b510      	push	{r4, lr}
 8007d0a:	4604      	mov	r4, r0
  struct mem *nmem;
  struct mem *pmem;

  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 8007d0c:	4b2d      	ldr	r3, [pc, #180]	; (8007dc4 <plug_holes+0xbc>)
 8007d0e:	681b      	ldr	r3, [r3, #0]
 8007d10:	4283      	cmp	r3, r0
 8007d12:	d831      	bhi.n	8007d78 <plug_holes+0x70>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 8007d14:	4b2c      	ldr	r3, [pc, #176]	; (8007dc8 <plug_holes+0xc0>)
 8007d16:	681b      	ldr	r3, [r3, #0]
 8007d18:	429c      	cmp	r4, r3
 8007d1a:	d235      	bcs.n	8007d88 <plug_holes+0x80>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 8007d1c:	7923      	ldrb	r3, [r4, #4]
 8007d1e:	2b00      	cmp	r3, #0
 8007d20:	d13a      	bne.n	8007d98 <plug_holes+0x90>

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 8007d22:	8823      	ldrh	r3, [r4, #0]
 8007d24:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8007d28:	d83e      	bhi.n	8007da8 <plug_holes+0xa0>

  nmem = (struct mem *)(void *)&ram[mem->next];
 8007d2a:	4b26      	ldr	r3, [pc, #152]	; (8007dc4 <plug_holes+0xbc>)
 8007d2c:	681b      	ldr	r3, [r3, #0]
 8007d2e:	8821      	ldrh	r1, [r4, #0]
 8007d30:	185a      	adds	r2, r3, r1
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 8007d32:	4294      	cmp	r4, r2
 8007d34:	d00f      	beq.n	8007d56 <plug_holes+0x4e>
 8007d36:	7910      	ldrb	r0, [r2, #4]
 8007d38:	b968      	cbnz	r0, 8007d56 <plug_holes+0x4e>
 8007d3a:	4823      	ldr	r0, [pc, #140]	; (8007dc8 <plug_holes+0xc0>)
 8007d3c:	6800      	ldr	r0, [r0, #0]
 8007d3e:	4282      	cmp	r2, r0
 8007d40:	d009      	beq.n	8007d56 <plug_holes+0x4e>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 8007d42:	4822      	ldr	r0, [pc, #136]	; (8007dcc <plug_holes+0xc4>)
 8007d44:	6800      	ldr	r0, [r0, #0]
 8007d46:	4282      	cmp	r2, r0
 8007d48:	d036      	beq.n	8007db8 <plug_holes+0xb0>
      lfree = mem;
    }
    mem->next = nmem->next;
 8007d4a:	5a5a      	ldrh	r2, [r3, r1]
 8007d4c:	8022      	strh	r2, [r4, #0]
    ((struct mem *)(void *)&ram[nmem->next])->prev = (mem_size_t)((u8_t *)mem - ram);
 8007d4e:	5a5a      	ldrh	r2, [r3, r1]
 8007d50:	441a      	add	r2, r3
 8007d52:	1ae1      	subs	r1, r4, r3
 8007d54:	8051      	strh	r1, [r2, #2]
  }

  /* plug hole backward */
  pmem = (struct mem *)(void *)&ram[mem->prev];
 8007d56:	8861      	ldrh	r1, [r4, #2]
 8007d58:	185a      	adds	r2, r3, r1
  if (pmem != mem && pmem->used == 0) {
 8007d5a:	4294      	cmp	r4, r2
 8007d5c:	d00b      	beq.n	8007d76 <plug_holes+0x6e>
 8007d5e:	7910      	ldrb	r0, [r2, #4]
 8007d60:	b948      	cbnz	r0, 8007d76 <plug_holes+0x6e>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 8007d62:	481a      	ldr	r0, [pc, #104]	; (8007dcc <plug_holes+0xc4>)
 8007d64:	6800      	ldr	r0, [r0, #0]
 8007d66:	4284      	cmp	r4, r0
 8007d68:	d029      	beq.n	8007dbe <plug_holes+0xb6>
      lfree = pmem;
    }
    pmem->next = mem->next;
 8007d6a:	8820      	ldrh	r0, [r4, #0]
 8007d6c:	5258      	strh	r0, [r3, r1]
    ((struct mem *)(void *)&ram[mem->next])->prev = (mem_size_t)((u8_t *)pmem - ram);
 8007d6e:	8821      	ldrh	r1, [r4, #0]
 8007d70:	4419      	add	r1, r3
 8007d72:	1ad3      	subs	r3, r2, r3
 8007d74:	804b      	strh	r3, [r1, #2]
 8007d76:	bd10      	pop	{r4, pc}
  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 8007d78:	4b15      	ldr	r3, [pc, #84]	; (8007dd0 <plug_holes+0xc8>)
 8007d7a:	f240 125d 	movw	r2, #349	; 0x15d
 8007d7e:	4915      	ldr	r1, [pc, #84]	; (8007dd4 <plug_holes+0xcc>)
 8007d80:	4815      	ldr	r0, [pc, #84]	; (8007dd8 <plug_holes+0xd0>)
 8007d82:	f005 ff22 	bl	800dbca <iprintf>
 8007d86:	e7c5      	b.n	8007d14 <plug_holes+0xc>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 8007d88:	4b11      	ldr	r3, [pc, #68]	; (8007dd0 <plug_holes+0xc8>)
 8007d8a:	f44f 72af 	mov.w	r2, #350	; 0x15e
 8007d8e:	4913      	ldr	r1, [pc, #76]	; (8007ddc <plug_holes+0xd4>)
 8007d90:	4811      	ldr	r0, [pc, #68]	; (8007dd8 <plug_holes+0xd0>)
 8007d92:	f005 ff1a 	bl	800dbca <iprintf>
 8007d96:	e7c1      	b.n	8007d1c <plug_holes+0x14>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 8007d98:	4b0d      	ldr	r3, [pc, #52]	; (8007dd0 <plug_holes+0xc8>)
 8007d9a:	f240 125f 	movw	r2, #351	; 0x15f
 8007d9e:	4910      	ldr	r1, [pc, #64]	; (8007de0 <plug_holes+0xd8>)
 8007da0:	480d      	ldr	r0, [pc, #52]	; (8007dd8 <plug_holes+0xd0>)
 8007da2:	f005 ff12 	bl	800dbca <iprintf>
 8007da6:	e7bc      	b.n	8007d22 <plug_holes+0x1a>
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 8007da8:	4b09      	ldr	r3, [pc, #36]	; (8007dd0 <plug_holes+0xc8>)
 8007daa:	f44f 72b1 	mov.w	r2, #354	; 0x162
 8007dae:	490d      	ldr	r1, [pc, #52]	; (8007de4 <plug_holes+0xdc>)
 8007db0:	4809      	ldr	r0, [pc, #36]	; (8007dd8 <plug_holes+0xd0>)
 8007db2:	f005 ff0a 	bl	800dbca <iprintf>
 8007db6:	e7b8      	b.n	8007d2a <plug_holes+0x22>
      lfree = mem;
 8007db8:	4a04      	ldr	r2, [pc, #16]	; (8007dcc <plug_holes+0xc4>)
 8007dba:	6014      	str	r4, [r2, #0]
 8007dbc:	e7c5      	b.n	8007d4a <plug_holes+0x42>
      lfree = pmem;
 8007dbe:	4803      	ldr	r0, [pc, #12]	; (8007dcc <plug_holes+0xc4>)
 8007dc0:	6002      	str	r2, [r0, #0]
 8007dc2:	e7d2      	b.n	8007d6a <plug_holes+0x62>
 8007dc4:	20003f44 	.word	0x20003f44
 8007dc8:	20003f48 	.word	0x20003f48
 8007dcc:	20003f3c 	.word	0x20003f3c
 8007dd0:	0800f290 	.word	0x0800f290
 8007dd4:	0800f2c0 	.word	0x0800f2c0
 8007dd8:	0800e3b0 	.word	0x0800e3b0
 8007ddc:	0800f2d8 	.word	0x0800f2d8
 8007de0:	0800f2f4 	.word	0x0800f2f4
 8007de4:	0800f310 	.word	0x0800f310

08007de8 <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 8007de8:	b508      	push	{r3, lr}

  LWIP_ASSERT("Sanity check alignment",
    (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT-1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 8007dea:	4b11      	ldr	r3, [pc, #68]	; (8007e30 <mem_init+0x48>)
 8007dec:	f023 0303 	bic.w	r3, r3, #3
 8007df0:	4a10      	ldr	r2, [pc, #64]	; (8007e34 <mem_init+0x4c>)
 8007df2:	6013      	str	r3, [r2, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
  mem->next = MEM_SIZE_ALIGNED;
 8007df4:	f44f 61c8 	mov.w	r1, #1600	; 0x640
 8007df8:	8019      	strh	r1, [r3, #0]
  mem->prev = 0;
 8007dfa:	2200      	movs	r2, #0
 8007dfc:	805a      	strh	r2, [r3, #2]
  mem->used = 0;
 8007dfe:	711a      	strb	r2, [r3, #4]
  /* initialize the end of the heap */
  ram_end = (struct mem *)(void *)&ram[MEM_SIZE_ALIGNED];
 8007e00:	185a      	adds	r2, r3, r1
 8007e02:	480d      	ldr	r0, [pc, #52]	; (8007e38 <mem_init+0x50>)
 8007e04:	6002      	str	r2, [r0, #0]
  ram_end->used = 1;
 8007e06:	2001      	movs	r0, #1
 8007e08:	7110      	strb	r0, [r2, #4]
  ram_end->next = MEM_SIZE_ALIGNED;
 8007e0a:	f8a3 1640 	strh.w	r1, [r3, #1600]	; 0x640
  ram_end->prev = MEM_SIZE_ALIGNED;
 8007e0e:	8051      	strh	r1, [r2, #2]

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 8007e10:	4a0a      	ldr	r2, [pc, #40]	; (8007e3c <mem_init+0x54>)
 8007e12:	6013      	str	r3, [r2, #0]

  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
 8007e14:	480a      	ldr	r0, [pc, #40]	; (8007e40 <mem_init+0x58>)
 8007e16:	f004 ffff 	bl	800ce18 <sys_mutex_new>
 8007e1a:	b900      	cbnz	r0, 8007e1e <mem_init+0x36>
 8007e1c:	bd08      	pop	{r3, pc}
    LWIP_ASSERT("failed to create mem_mutex", 0);
 8007e1e:	4b09      	ldr	r3, [pc, #36]	; (8007e44 <mem_init+0x5c>)
 8007e20:	f44f 72cc 	mov.w	r2, #408	; 0x198
 8007e24:	4908      	ldr	r1, [pc, #32]	; (8007e48 <mem_init+0x60>)
 8007e26:	4809      	ldr	r0, [pc, #36]	; (8007e4c <mem_init+0x64>)
 8007e28:	f005 fecf 	bl	800dbca <iprintf>
  }
}
 8007e2c:	e7f6      	b.n	8007e1c <mem_init+0x34>
 8007e2e:	bf00      	nop
 8007e30:	20004287 	.word	0x20004287
 8007e34:	20003f44 	.word	0x20003f44
 8007e38:	20003f48 	.word	0x20003f48
 8007e3c:	20003f3c 	.word	0x20003f3c
 8007e40:	20003f40 	.word	0x20003f40
 8007e44:	0800f290 	.word	0x0800f290
 8007e48:	0800f19c 	.word	0x0800f19c
 8007e4c:	0800e3b0 	.word	0x0800e3b0

08007e50 <mem_free>:
mem_free(void *rmem)
{
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 8007e50:	2800      	cmp	r0, #0
 8007e52:	d048      	beq.n	8007ee6 <mem_free+0x96>
{
 8007e54:	b538      	push	{r3, r4, r5, lr}
 8007e56:	4604      	mov	r4, r0
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  LWIP_ASSERT("mem_free: sanity check alignment", (((mem_ptr_t)rmem) & (MEM_ALIGNMENT-1)) == 0);
 8007e58:	f010 0f03 	tst.w	r0, #3
 8007e5c:	d11b      	bne.n	8007e96 <mem_free+0x46>

  LWIP_ASSERT("mem_free: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 8007e5e:	4b22      	ldr	r3, [pc, #136]	; (8007ee8 <mem_free+0x98>)
 8007e60:	681b      	ldr	r3, [r3, #0]
 8007e62:	429c      	cmp	r4, r3
 8007e64:	d303      	bcc.n	8007e6e <mem_free+0x1e>
 8007e66:	4b21      	ldr	r3, [pc, #132]	; (8007eec <mem_free+0x9c>)
 8007e68:	681b      	ldr	r3, [r3, #0]
 8007e6a:	429c      	cmp	r4, r3
 8007e6c:	d306      	bcc.n	8007e7c <mem_free+0x2c>
 8007e6e:	4b20      	ldr	r3, [pc, #128]	; (8007ef0 <mem_free+0xa0>)
 8007e70:	f240 12af 	movw	r2, #431	; 0x1af
 8007e74:	491f      	ldr	r1, [pc, #124]	; (8007ef4 <mem_free+0xa4>)
 8007e76:	4820      	ldr	r0, [pc, #128]	; (8007ef8 <mem_free+0xa8>)
 8007e78:	f005 fea7 	bl	800dbca <iprintf>
    (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 8007e7c:	4b1a      	ldr	r3, [pc, #104]	; (8007ee8 <mem_free+0x98>)
 8007e7e:	681b      	ldr	r3, [r3, #0]
 8007e80:	429c      	cmp	r4, r3
 8007e82:	d303      	bcc.n	8007e8c <mem_free+0x3c>
 8007e84:	4b19      	ldr	r3, [pc, #100]	; (8007eec <mem_free+0x9c>)
 8007e86:	681b      	ldr	r3, [r3, #0]
 8007e88:	429c      	cmp	r4, r3
 8007e8a:	d30c      	bcc.n	8007ea6 <mem_free+0x56>
    SYS_ARCH_DECL_PROTECT(lev);
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
    /* protect mem stats from concurrent access */
    SYS_ARCH_PROTECT(lev);
 8007e8c:	f004 fff6 	bl	800ce7c <sys_arch_protect>
    MEM_STATS_INC(illegal);
    SYS_ARCH_UNPROTECT(lev);
 8007e90:	f005 f800 	bl	800ce94 <sys_arch_unprotect>
    return;
 8007e94:	bd38      	pop	{r3, r4, r5, pc}
  LWIP_ASSERT("mem_free: sanity check alignment", (((mem_ptr_t)rmem) & (MEM_ALIGNMENT-1)) == 0);
 8007e96:	4b16      	ldr	r3, [pc, #88]	; (8007ef0 <mem_free+0xa0>)
 8007e98:	f44f 72d6 	mov.w	r2, #428	; 0x1ac
 8007e9c:	4917      	ldr	r1, [pc, #92]	; (8007efc <mem_free+0xac>)
 8007e9e:	4816      	ldr	r0, [pc, #88]	; (8007ef8 <mem_free+0xa8>)
 8007ea0:	f005 fe93 	bl	800dbca <iprintf>
 8007ea4:	e7db      	b.n	8007e5e <mem_free+0xe>
  }
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 8007ea6:	4816      	ldr	r0, [pc, #88]	; (8007f00 <mem_free+0xb0>)
 8007ea8:	f004 ffc7 	bl	800ce3a <sys_mutex_lock>
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - SIZEOF_STRUCT_MEM);
 8007eac:	f1a4 0508 	sub.w	r5, r4, #8
  /* ... which has to be in a used state ... */
  LWIP_ASSERT("mem_free: mem->used", mem->used);
 8007eb0:	f814 3c04 	ldrb.w	r3, [r4, #-4]
 8007eb4:	b17b      	cbz	r3, 8007ed6 <mem_free+0x86>
  /* ... and is now unused. */
  mem->used = 0;
 8007eb6:	2300      	movs	r3, #0
 8007eb8:	f804 3c04 	strb.w	r3, [r4, #-4]

  if (mem < lfree) {
 8007ebc:	4b11      	ldr	r3, [pc, #68]	; (8007f04 <mem_free+0xb4>)
 8007ebe:	681b      	ldr	r3, [r3, #0]
 8007ec0:	429d      	cmp	r5, r3
 8007ec2:	d201      	bcs.n	8007ec8 <mem_free+0x78>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 8007ec4:	4b0f      	ldr	r3, [pc, #60]	; (8007f04 <mem_free+0xb4>)
 8007ec6:	601d      	str	r5, [r3, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 8007ec8:	4628      	mov	r0, r5
 8007eca:	f7ff ff1d 	bl	8007d08 <plug_holes>
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 8007ece:	480c      	ldr	r0, [pc, #48]	; (8007f00 <mem_free+0xb0>)
 8007ed0:	f004 ffba 	bl	800ce48 <sys_mutex_unlock>
 8007ed4:	bd38      	pop	{r3, r4, r5, pc}
  LWIP_ASSERT("mem_free: mem->used", mem->used);
 8007ed6:	4b06      	ldr	r3, [pc, #24]	; (8007ef0 <mem_free+0xa0>)
 8007ed8:	f44f 72e0 	mov.w	r2, #448	; 0x1c0
 8007edc:	490a      	ldr	r1, [pc, #40]	; (8007f08 <mem_free+0xb8>)
 8007ede:	4806      	ldr	r0, [pc, #24]	; (8007ef8 <mem_free+0xa8>)
 8007ee0:	f005 fe73 	bl	800dbca <iprintf>
 8007ee4:	e7e7      	b.n	8007eb6 <mem_free+0x66>
 8007ee6:	4770      	bx	lr
 8007ee8:	20003f44 	.word	0x20003f44
 8007eec:	20003f48 	.word	0x20003f48
 8007ef0:	0800f290 	.word	0x0800f290
 8007ef4:	0800f170 	.word	0x0800f170
 8007ef8:	0800e3b0 	.word	0x0800e3b0
 8007efc:	0800f14c 	.word	0x0800f14c
 8007f00:	20003f40 	.word	0x20003f40
 8007f04:	20003f3c 	.word	0x20003f3c
 8007f08:	0800f188 	.word	0x0800f188

08007f0c <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t newsize)
{
 8007f0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007f0e:	4605      	mov	r5, r0
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = LWIP_MEM_ALIGN_SIZE(newsize);
 8007f10:	1ccc      	adds	r4, r1, #3
 8007f12:	b2a4      	uxth	r4, r4
 8007f14:	f024 0403 	bic.w	r4, r4, #3
 8007f18:	b2a4      	uxth	r4, r4

  if (newsize < MIN_SIZE_ALIGNED) {
 8007f1a:	2c0b      	cmp	r4, #11
 8007f1c:	d800      	bhi.n	8007f20 <mem_trim+0x14>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 8007f1e:	240c      	movs	r4, #12
  }

  if (newsize > MEM_SIZE_ALIGNED) {
 8007f20:	f5b4 6fc8 	cmp.w	r4, #1600	; 0x640
 8007f24:	d879      	bhi.n	800801a <mem_trim+0x10e>
    return NULL;
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 8007f26:	4b3f      	ldr	r3, [pc, #252]	; (8008024 <mem_trim+0x118>)
 8007f28:	681b      	ldr	r3, [r3, #0]
 8007f2a:	42ab      	cmp	r3, r5
 8007f2c:	d803      	bhi.n	8007f36 <mem_trim+0x2a>
 8007f2e:	4b3e      	ldr	r3, [pc, #248]	; (8008028 <mem_trim+0x11c>)
 8007f30:	681b      	ldr	r3, [r3, #0]
 8007f32:	429d      	cmp	r5, r3
 8007f34:	d306      	bcc.n	8007f44 <mem_trim+0x38>
 8007f36:	4b3d      	ldr	r3, [pc, #244]	; (800802c <mem_trim+0x120>)
 8007f38:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8007f3c:	493c      	ldr	r1, [pc, #240]	; (8008030 <mem_trim+0x124>)
 8007f3e:	483d      	ldr	r0, [pc, #244]	; (8008034 <mem_trim+0x128>)
 8007f40:	f005 fe43 	bl	800dbca <iprintf>
   (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 8007f44:	4b37      	ldr	r3, [pc, #220]	; (8008024 <mem_trim+0x118>)
 8007f46:	681b      	ldr	r3, [r3, #0]
 8007f48:	429d      	cmp	r5, r3
 8007f4a:	d336      	bcc.n	8007fba <mem_trim+0xae>
 8007f4c:	4a36      	ldr	r2, [pc, #216]	; (8008028 <mem_trim+0x11c>)
 8007f4e:	6812      	ldr	r2, [r2, #0]
 8007f50:	4295      	cmp	r5, r2
 8007f52:	d232      	bcs.n	8007fba <mem_trim+0xae>
    SYS_ARCH_UNPROTECT(lev);
    return rmem;
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - SIZEOF_STRUCT_MEM);
 8007f54:	f1a5 0708 	sub.w	r7, r5, #8
  /* ... and its offset pointer */
  ptr = (mem_size_t)((u8_t *)mem - ram);
 8007f58:	1aff      	subs	r7, r7, r3
 8007f5a:	b2bf      	uxth	r7, r7

  size = mem->next - ptr - SIZEOF_STRUCT_MEM;
 8007f5c:	f835 6c08 	ldrh.w	r6, [r5, #-8]
 8007f60:	1bf6      	subs	r6, r6, r7
 8007f62:	b2b6      	uxth	r6, r6
 8007f64:	3e08      	subs	r6, #8
 8007f66:	b2b6      	uxth	r6, r6
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 8007f68:	42b4      	cmp	r4, r6
 8007f6a:	d82c      	bhi.n	8007fc6 <mem_trim+0xba>
  if (newsize > size) {
 8007f6c:	42b4      	cmp	r4, r6
 8007f6e:	d856      	bhi.n	800801e <mem_trim+0x112>
    /* not supported */
    return NULL;
  }
  if (newsize == size) {
 8007f70:	d027      	beq.n	8007fc2 <mem_trim+0xb6>
    /* No change in size, simply return */
    return rmem;
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 8007f72:	4831      	ldr	r0, [pc, #196]	; (8008038 <mem_trim+0x12c>)
 8007f74:	f004 ff61 	bl	800ce3a <sys_mutex_lock>

  mem2 = (struct mem *)(void *)&ram[mem->next];
 8007f78:	4b2a      	ldr	r3, [pc, #168]	; (8008024 <mem_trim+0x118>)
 8007f7a:	681a      	ldr	r2, [r3, #0]
 8007f7c:	f835 3c08 	ldrh.w	r3, [r5, #-8]
 8007f80:	18d1      	adds	r1, r2, r3
  if (mem2->used == 0) {
 8007f82:	7908      	ldrb	r0, [r1, #4]
 8007f84:	bb58      	cbnz	r0, 8007fde <mem_trim+0xd2>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    /* remember the old next pointer */
    next = mem2->next;
 8007f86:	5ad0      	ldrh	r0, [r2, r3]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = ptr + SIZEOF_STRUCT_MEM + newsize;
 8007f88:	19e3      	adds	r3, r4, r7
 8007f8a:	b29b      	uxth	r3, r3
 8007f8c:	3308      	adds	r3, #8
 8007f8e:	b29b      	uxth	r3, r3
    if (lfree == mem2) {
 8007f90:	4c2a      	ldr	r4, [pc, #168]	; (800803c <mem_trim+0x130>)
 8007f92:	6824      	ldr	r4, [r4, #0]
 8007f94:	42a1      	cmp	r1, r4
 8007f96:	d01e      	beq.n	8007fd6 <mem_trim+0xca>
      lfree = (struct mem *)(void *)&ram[ptr2];
    }
    mem2 = (struct mem *)(void *)&ram[ptr2];
 8007f98:	18d1      	adds	r1, r2, r3
    mem2->used = 0;
 8007f9a:	2400      	movs	r4, #0
 8007f9c:	710c      	strb	r4, [r1, #4]
    /* restore the next pointer */
    mem2->next = next;
 8007f9e:	52d0      	strh	r0, [r2, r3]
    /* link it back to mem */
    mem2->prev = ptr;
 8007fa0:	804f      	strh	r7, [r1, #2]
    /* link mem to it */
    mem->next = ptr2;
 8007fa2:	f825 3c08 	strh.w	r3, [r5, #-8]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 8007fa6:	5ad1      	ldrh	r1, [r2, r3]
 8007fa8:	f5b1 6fc8 	cmp.w	r1, #1600	; 0x640
 8007fac:	d001      	beq.n	8007fb2 <mem_trim+0xa6>
      ((struct mem *)(void *)&ram[mem2->next])->prev = ptr2;
 8007fae:	440a      	add	r2, r1
 8007fb0:	8053      	strh	r3, [r2, #2]
    -> the remaining space stays unused since it is too small
  } */
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 8007fb2:	4821      	ldr	r0, [pc, #132]	; (8008038 <mem_trim+0x12c>)
 8007fb4:	f004 ff48 	bl	800ce48 <sys_mutex_unlock>
  return rmem;
 8007fb8:	e003      	b.n	8007fc2 <mem_trim+0xb6>
    SYS_ARCH_PROTECT(lev);
 8007fba:	f004 ff5f 	bl	800ce7c <sys_arch_protect>
    SYS_ARCH_UNPROTECT(lev);
 8007fbe:	f004 ff69 	bl	800ce94 <sys_arch_unprotect>
}
 8007fc2:	4628      	mov	r0, r5
 8007fc4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 8007fc6:	4b19      	ldr	r3, [pc, #100]	; (800802c <mem_trim+0x120>)
 8007fc8:	f240 2206 	movw	r2, #518	; 0x206
 8007fcc:	491c      	ldr	r1, [pc, #112]	; (8008040 <mem_trim+0x134>)
 8007fce:	4819      	ldr	r0, [pc, #100]	; (8008034 <mem_trim+0x128>)
 8007fd0:	f005 fdfb 	bl	800dbca <iprintf>
 8007fd4:	e7ca      	b.n	8007f6c <mem_trim+0x60>
      lfree = (struct mem *)(void *)&ram[ptr2];
 8007fd6:	18d1      	adds	r1, r2, r3
 8007fd8:	4c18      	ldr	r4, [pc, #96]	; (800803c <mem_trim+0x130>)
 8007fda:	6021      	str	r1, [r4, #0]
 8007fdc:	e7dc      	b.n	8007f98 <mem_trim+0x8c>
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 8007fde:	f104 0314 	add.w	r3, r4, #20
 8007fe2:	42b3      	cmp	r3, r6
 8007fe4:	d8e5      	bhi.n	8007fb2 <mem_trim+0xa6>
    ptr2 = ptr + SIZEOF_STRUCT_MEM + newsize;
 8007fe6:	19e3      	adds	r3, r4, r7
 8007fe8:	b29b      	uxth	r3, r3
 8007fea:	3308      	adds	r3, #8
 8007fec:	b29b      	uxth	r3, r3
    mem2 = (struct mem *)(void *)&ram[ptr2];
 8007fee:	18d1      	adds	r1, r2, r3
    if (mem2 < lfree) {
 8007ff0:	4812      	ldr	r0, [pc, #72]	; (800803c <mem_trim+0x130>)
 8007ff2:	6800      	ldr	r0, [r0, #0]
 8007ff4:	4281      	cmp	r1, r0
 8007ff6:	d201      	bcs.n	8007ffc <mem_trim+0xf0>
      lfree = mem2;
 8007ff8:	4810      	ldr	r0, [pc, #64]	; (800803c <mem_trim+0x130>)
 8007ffa:	6001      	str	r1, [r0, #0]
    mem2->used = 0;
 8007ffc:	2000      	movs	r0, #0
 8007ffe:	7108      	strb	r0, [r1, #4]
    mem2->next = mem->next;
 8008000:	f835 0c08 	ldrh.w	r0, [r5, #-8]
 8008004:	52d0      	strh	r0, [r2, r3]
    mem2->prev = ptr;
 8008006:	804f      	strh	r7, [r1, #2]
    mem->next = ptr2;
 8008008:	f825 3c08 	strh.w	r3, [r5, #-8]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 800800c:	5ad1      	ldrh	r1, [r2, r3]
 800800e:	f5b1 6fc8 	cmp.w	r1, #1600	; 0x640
 8008012:	d0ce      	beq.n	8007fb2 <mem_trim+0xa6>
      ((struct mem *)(void *)&ram[mem2->next])->prev = ptr2;
 8008014:	440a      	add	r2, r1
 8008016:	8053      	strh	r3, [r2, #2]
 8008018:	e7cb      	b.n	8007fb2 <mem_trim+0xa6>
    return NULL;
 800801a:	2500      	movs	r5, #0
 800801c:	e7d1      	b.n	8007fc2 <mem_trim+0xb6>
    return NULL;
 800801e:	2500      	movs	r5, #0
 8008020:	e7cf      	b.n	8007fc2 <mem_trim+0xb6>
 8008022:	bf00      	nop
 8008024:	20003f44 	.word	0x20003f44
 8008028:	20003f48 	.word	0x20003f48
 800802c:	0800f290 	.word	0x0800f290
 8008030:	0800f258 	.word	0x0800f258
 8008034:	0800e3b0 	.word	0x0800e3b0
 8008038:	20003f40 	.word	0x20003f40
 800803c:	20003f3c 	.word	0x20003f3c
 8008040:	0800f270 	.word	0x0800f270

08008044 <mem_malloc>:
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size == 0) {
 8008044:	2800      	cmp	r0, #0
 8008046:	f000 808e 	beq.w	8008166 <mem_malloc+0x122>
{
 800804a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800804c:	4605      	mov	r5, r0
    return NULL;
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = LWIP_MEM_ALIGN_SIZE(size);
 800804e:	3503      	adds	r5, #3
 8008050:	b2ad      	uxth	r5, r5
 8008052:	f025 0503 	bic.w	r5, r5, #3
 8008056:	b2ad      	uxth	r5, r5

  if (size < MIN_SIZE_ALIGNED) {
 8008058:	2d0b      	cmp	r5, #11
 800805a:	d800      	bhi.n	800805e <mem_malloc+0x1a>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 800805c:	250c      	movs	r5, #12
  }

  if (size > MEM_SIZE_ALIGNED) {
 800805e:	f5b5 6fc8 	cmp.w	r5, #1600	; 0x640
 8008062:	f200 8082 	bhi.w	800816a <mem_malloc+0x126>
    return NULL;
  }

  /* protect the heap from concurrent access */
  sys_mutex_lock(&mem_mutex);
 8008066:	4842      	ldr	r0, [pc, #264]	; (8008170 <mem_malloc+0x12c>)
 8008068:	f004 fee7 	bl	800ce3a <sys_mutex_lock>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = (mem_size_t)((u8_t *)lfree - ram); ptr < MEM_SIZE_ALIGNED - size;
 800806c:	4b41      	ldr	r3, [pc, #260]	; (8008174 <mem_malloc+0x130>)
 800806e:	6818      	ldr	r0, [r3, #0]
 8008070:	4b41      	ldr	r3, [pc, #260]	; (8008178 <mem_malloc+0x134>)
 8008072:	681b      	ldr	r3, [r3, #0]
 8008074:	1a1b      	subs	r3, r3, r0
 8008076:	b29b      	uxth	r3, r3
 8008078:	e049      	b.n	800810e <mem_malloc+0xca>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 800807a:	2301      	movs	r3, #1
 800807c:	7123      	strb	r3, [r4, #4]
          MEM_STATS_INC_USED(used, mem->next - (mem_size_t)((u8_t *)mem - ram));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 800807e:	4b3e      	ldr	r3, [pc, #248]	; (8008178 <mem_malloc+0x134>)
 8008080:	681b      	ldr	r3, [r3, #0]
 8008082:	429c      	cmp	r4, r3
 8008084:	d014      	beq.n	80080b0 <mem_malloc+0x6c>
          }
          lfree = cur;
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
 8008086:	483a      	ldr	r0, [pc, #232]	; (8008170 <mem_malloc+0x12c>)
 8008088:	f004 fede 	bl	800ce48 <sys_mutex_unlock>
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 800808c:	4426      	add	r6, r4
 800808e:	3608      	adds	r6, #8
 8008090:	4b3a      	ldr	r3, [pc, #232]	; (800817c <mem_malloc+0x138>)
 8008092:	681b      	ldr	r3, [r3, #0]
 8008094:	429e      	cmp	r6, r3
 8008096:	d821      	bhi.n	80080dc <mem_malloc+0x98>
         (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 8008098:	f014 0503 	ands.w	r5, r4, #3
 800809c:	d126      	bne.n	80080ec <mem_malloc+0xa8>
         ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 800809e:	2d00      	cmp	r5, #0
 80080a0:	d12c      	bne.n	80080fc <mem_malloc+0xb8>
          (((mem_ptr_t)mem) & (MEM_ALIGNMENT-1)) == 0);

        return (u8_t *)mem + SIZEOF_STRUCT_MEM;
 80080a2:	f104 0008 	add.w	r0, r4, #8
 80080a6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            cur = (struct mem *)(void *)&ram[cur->next];
 80080a8:	4a32      	ldr	r2, [pc, #200]	; (8008174 <mem_malloc+0x130>)
 80080aa:	6812      	ldr	r2, [r2, #0]
 80080ac:	881b      	ldrh	r3, [r3, #0]
 80080ae:	4413      	add	r3, r2
          while (cur->used && cur != ram_end) {
 80080b0:	791a      	ldrb	r2, [r3, #4]
 80080b2:	b11a      	cbz	r2, 80080bc <mem_malloc+0x78>
 80080b4:	4931      	ldr	r1, [pc, #196]	; (800817c <mem_malloc+0x138>)
 80080b6:	6809      	ldr	r1, [r1, #0]
 80080b8:	428b      	cmp	r3, r1
 80080ba:	d1f5      	bne.n	80080a8 <mem_malloc+0x64>
          lfree = cur;
 80080bc:	492e      	ldr	r1, [pc, #184]	; (8008178 <mem_malloc+0x134>)
 80080be:	600b      	str	r3, [r1, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 80080c0:	492e      	ldr	r1, [pc, #184]	; (800817c <mem_malloc+0x138>)
 80080c2:	6809      	ldr	r1, [r1, #0]
 80080c4:	428b      	cmp	r3, r1
 80080c6:	d0de      	beq.n	8008086 <mem_malloc+0x42>
 80080c8:	2a00      	cmp	r2, #0
 80080ca:	d0dc      	beq.n	8008086 <mem_malloc+0x42>
 80080cc:	4b2c      	ldr	r3, [pc, #176]	; (8008180 <mem_malloc+0x13c>)
 80080ce:	f240 22cf 	movw	r2, #719	; 0x2cf
 80080d2:	492c      	ldr	r1, [pc, #176]	; (8008184 <mem_malloc+0x140>)
 80080d4:	482c      	ldr	r0, [pc, #176]	; (8008188 <mem_malloc+0x144>)
 80080d6:	f005 fd78 	bl	800dbca <iprintf>
 80080da:	e7d4      	b.n	8008086 <mem_malloc+0x42>
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 80080dc:	4b28      	ldr	r3, [pc, #160]	; (8008180 <mem_malloc+0x13c>)
 80080de:	f44f 7235 	mov.w	r2, #724	; 0x2d4
 80080e2:	492a      	ldr	r1, [pc, #168]	; (800818c <mem_malloc+0x148>)
 80080e4:	4828      	ldr	r0, [pc, #160]	; (8008188 <mem_malloc+0x144>)
 80080e6:	f005 fd70 	bl	800dbca <iprintf>
 80080ea:	e7d5      	b.n	8008098 <mem_malloc+0x54>
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 80080ec:	4b24      	ldr	r3, [pc, #144]	; (8008180 <mem_malloc+0x13c>)
 80080ee:	f240 22d6 	movw	r2, #726	; 0x2d6
 80080f2:	4927      	ldr	r1, [pc, #156]	; (8008190 <mem_malloc+0x14c>)
 80080f4:	4824      	ldr	r0, [pc, #144]	; (8008188 <mem_malloc+0x144>)
 80080f6:	f005 fd68 	bl	800dbca <iprintf>
 80080fa:	e7d0      	b.n	800809e <mem_malloc+0x5a>
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 80080fc:	4b20      	ldr	r3, [pc, #128]	; (8008180 <mem_malloc+0x13c>)
 80080fe:	f44f 7236 	mov.w	r2, #728	; 0x2d8
 8008102:	4924      	ldr	r1, [pc, #144]	; (8008194 <mem_malloc+0x150>)
 8008104:	4820      	ldr	r0, [pc, #128]	; (8008188 <mem_malloc+0x144>)
 8008106:	f005 fd60 	bl	800dbca <iprintf>
 800810a:	e7ca      	b.n	80080a2 <mem_malloc+0x5e>
         ptr = ((struct mem *)(void *)&ram[ptr])->next) {
 800810c:	8823      	ldrh	r3, [r4, #0]
    for (ptr = (mem_size_t)((u8_t *)lfree - ram); ptr < MEM_SIZE_ALIGNED - size;
 800810e:	461f      	mov	r7, r3
 8008110:	462e      	mov	r6, r5
 8008112:	f5c5 61c8 	rsb	r1, r5, #1600	; 0x640
 8008116:	428b      	cmp	r3, r1
 8008118:	d220      	bcs.n	800815c <mem_malloc+0x118>
      mem = (struct mem *)(void *)&ram[ptr];
 800811a:	18c4      	adds	r4, r0, r3
      if ((!mem->used) &&
 800811c:	7921      	ldrb	r1, [r4, #4]
 800811e:	2900      	cmp	r1, #0
 8008120:	d1f4      	bne.n	800810c <mem_malloc+0xc8>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 8008122:	5ac2      	ldrh	r2, [r0, r3]
 8008124:	1bd2      	subs	r2, r2, r7
 8008126:	3a08      	subs	r2, #8
      if ((!mem->used) &&
 8008128:	4296      	cmp	r6, r2
 800812a:	d8ef      	bhi.n	800810c <mem_malloc+0xc8>
        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 800812c:	f106 0114 	add.w	r1, r6, #20
 8008130:	428a      	cmp	r2, r1
 8008132:	d3a2      	bcc.n	800807a <mem_malloc+0x36>
          ptr2 = ptr + SIZEOF_STRUCT_MEM + size;
 8008134:	18ea      	adds	r2, r5, r3
 8008136:	b292      	uxth	r2, r2
 8008138:	3208      	adds	r2, #8
 800813a:	b292      	uxth	r2, r2
          mem2 = (struct mem *)(void *)&ram[ptr2];
 800813c:	1881      	adds	r1, r0, r2
          mem2->used = 0;
 800813e:	2500      	movs	r5, #0
 8008140:	710d      	strb	r5, [r1, #4]
          mem2->next = mem->next;
 8008142:	8825      	ldrh	r5, [r4, #0]
 8008144:	5285      	strh	r5, [r0, r2]
          mem2->prev = ptr;
 8008146:	804b      	strh	r3, [r1, #2]
          mem->next = ptr2;
 8008148:	8022      	strh	r2, [r4, #0]
          mem->used = 1;
 800814a:	2301      	movs	r3, #1
 800814c:	7123      	strb	r3, [r4, #4]
          if (mem2->next != MEM_SIZE_ALIGNED) {
 800814e:	5a83      	ldrh	r3, [r0, r2]
 8008150:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8008154:	d093      	beq.n	800807e <mem_malloc+0x3a>
            ((struct mem *)(void *)&ram[mem2->next])->prev = ptr2;
 8008156:	4418      	add	r0, r3
 8008158:	8042      	strh	r2, [r0, #2]
 800815a:	e790      	b.n	800807e <mem_malloc+0x3a>
  } while (local_mem_free_count != 0);
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
 800815c:	4804      	ldr	r0, [pc, #16]	; (8008170 <mem_malloc+0x12c>)
 800815e:	f004 fe73 	bl	800ce48 <sys_mutex_unlock>
  return NULL;
 8008162:	2000      	movs	r0, #0
 8008164:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return NULL;
 8008166:	2000      	movs	r0, #0
 8008168:	4770      	bx	lr
    return NULL;
 800816a:	2000      	movs	r0, #0
}
 800816c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800816e:	bf00      	nop
 8008170:	20003f40 	.word	0x20003f40
 8008174:	20003f44 	.word	0x20003f44
 8008178:	20003f3c 	.word	0x20003f3c
 800817c:	20003f48 	.word	0x20003f48
 8008180:	0800f290 	.word	0x0800f290
 8008184:	0800f1b8 	.word	0x0800f1b8
 8008188:	0800e3b0 	.word	0x0800e3b0
 800818c:	0800f1d4 	.word	0x0800f1d4
 8008190:	0800f204 	.word	0x0800f204
 8008194:	0800f234 	.word	0x0800f234

08008198 <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char* file, const int line)
#endif
{
 8008198:	b538      	push	{r3, r4, r5, lr}
 800819a:	4604      	mov	r4, r0

#if MEMP_MEM_MALLOC
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);
 800819c:	f004 fe6e 	bl	800ce7c <sys_arch_protect>
 80081a0:	4605      	mov	r5, r0

  memp = *desc->tab;
 80081a2:	68a3      	ldr	r3, [r4, #8]
 80081a4:	681c      	ldr	r4, [r3, #0]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 80081a6:	b18c      	cbz	r4, 80081cc <do_memp_malloc_pool+0x34>
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element_overflow(memp, desc);
    memp_overflow_check_element_underflow(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 80081a8:	6822      	ldr	r2, [r4, #0]
 80081aa:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 80081ac:	f014 0f03 	tst.w	r4, #3
 80081b0:	d104      	bne.n	80081bc <do_memp_malloc_pool+0x24>
    desc->stats->used++;
    if (desc->stats->used > desc->stats->max) {
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
 80081b2:	4628      	mov	r0, r5
 80081b4:	f004 fe6e 	bl	800ce94 <sys_arch_unprotect>
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t*)memp + MEMP_SIZE);
 80081b8:	4620      	mov	r0, r4
 80081ba:	bd38      	pop	{r3, r4, r5, pc}
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 80081bc:	4b05      	ldr	r3, [pc, #20]	; (80081d4 <do_memp_malloc_pool+0x3c>)
 80081be:	f240 1249 	movw	r2, #329	; 0x149
 80081c2:	4905      	ldr	r1, [pc, #20]	; (80081d8 <do_memp_malloc_pool+0x40>)
 80081c4:	4805      	ldr	r0, [pc, #20]	; (80081dc <do_memp_malloc_pool+0x44>)
 80081c6:	f005 fd00 	bl	800dbca <iprintf>
 80081ca:	e7f2      	b.n	80081b2 <do_memp_malloc_pool+0x1a>
#if MEMP_STATS
    desc->stats->err++;
#endif
  }

  SYS_ARCH_UNPROTECT(old_level);
 80081cc:	f004 fe62 	bl	800ce94 <sys_arch_unprotect>
  return NULL;
 80081d0:	2000      	movs	r0, #0
}
 80081d2:	bd38      	pop	{r3, r4, r5, pc}
 80081d4:	0800f35c 	.word	0x0800f35c
 80081d8:	0800f38c 	.word	0x0800f38c
 80081dc:	0800e3b0 	.word	0x0800e3b0

080081e0 <do_memp_free_pool>:
  return memp;
}

static void
do_memp_free_pool(const struct memp_desc* desc, void *mem)
{
 80081e0:	b538      	push	{r3, r4, r5, lr}
 80081e2:	4605      	mov	r5, r0
 80081e4:	460c      	mov	r4, r1
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 80081e6:	f011 0f03 	tst.w	r1, #3
 80081ea:	d109      	bne.n	8008200 <do_memp_free_pool+0x20>
                ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t*)mem - MEMP_SIZE);

  SYS_ARCH_PROTECT(old_level);
 80081ec:	f004 fe46 	bl	800ce7c <sys_arch_protect>
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 80081f0:	68ab      	ldr	r3, [r5, #8]
 80081f2:	681b      	ldr	r3, [r3, #0]
 80081f4:	6023      	str	r3, [r4, #0]
  *desc->tab = memp;
 80081f6:	68ab      	ldr	r3, [r5, #8]
 80081f8:	601c      	str	r4, [r3, #0]

#if MEMP_SANITY_CHECK
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
 80081fa:	f004 fe4b 	bl	800ce94 <sys_arch_unprotect>
 80081fe:	bd38      	pop	{r3, r4, r5, pc}
  LWIP_ASSERT("memp_free: mem properly aligned",
 8008200:	4b03      	ldr	r3, [pc, #12]	; (8008210 <do_memp_free_pool+0x30>)
 8008202:	f240 129d 	movw	r2, #413	; 0x19d
 8008206:	4903      	ldr	r1, [pc, #12]	; (8008214 <do_memp_free_pool+0x34>)
 8008208:	4803      	ldr	r0, [pc, #12]	; (8008218 <do_memp_free_pool+0x38>)
 800820a:	f005 fcde 	bl	800dbca <iprintf>
 800820e:	e7ed      	b.n	80081ec <do_memp_free_pool+0xc>
 8008210:	0800f35c 	.word	0x0800f35c
 8008214:	0800f33c 	.word	0x0800f33c
 8008218:	0800e3b0 	.word	0x0800e3b0

0800821c <memp_init_pool>:
  *desc->tab = NULL;
 800821c:	6883      	ldr	r3, [r0, #8]
 800821e:	2200      	movs	r2, #0
 8008220:	601a      	str	r2, [r3, #0]
  memp = (struct memp*)LWIP_MEM_ALIGN(desc->base);
 8008222:	6843      	ldr	r3, [r0, #4]
 8008224:	3303      	adds	r3, #3
 8008226:	f023 0303 	bic.w	r3, r3, #3
  for (i = 0; i < desc->num; ++i) {
 800822a:	e007      	b.n	800823c <memp_init_pool+0x20>
    memp->next = *desc->tab;
 800822c:	6881      	ldr	r1, [r0, #8]
 800822e:	6809      	ldr	r1, [r1, #0]
 8008230:	6019      	str	r1, [r3, #0]
    *desc->tab = memp;
 8008232:	6881      	ldr	r1, [r0, #8]
 8008234:	600b      	str	r3, [r1, #0]
   memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 8008236:	8801      	ldrh	r1, [r0, #0]
 8008238:	440b      	add	r3, r1
  for (i = 0; i < desc->num; ++i) {
 800823a:	3201      	adds	r2, #1
 800823c:	8841      	ldrh	r1, [r0, #2]
 800823e:	428a      	cmp	r2, r1
 8008240:	dbf4      	blt.n	800822c <memp_init_pool+0x10>
}
 8008242:	4770      	bx	lr

08008244 <memp_init>:
{
 8008244:	b510      	push	{r4, lr}
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 8008246:	2400      	movs	r4, #0
 8008248:	e006      	b.n	8008258 <memp_init+0x14>
    memp_init_pool(memp_pools[i]);
 800824a:	4b05      	ldr	r3, [pc, #20]	; (8008260 <memp_init+0x1c>)
 800824c:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8008250:	f7ff ffe4 	bl	800821c <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 8008254:	3401      	adds	r4, #1
 8008256:	b2a4      	uxth	r4, r4
 8008258:	2c0c      	cmp	r4, #12
 800825a:	d9f6      	bls.n	800824a <memp_init+0x6>
}
 800825c:	bd10      	pop	{r4, pc}
 800825e:	bf00      	nop
 8008260:	0800f488 	.word	0x0800f488

08008264 <memp_malloc>:
{
 8008264:	b508      	push	{r3, lr}
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 8008266:	280c      	cmp	r0, #12
 8008268:	d805      	bhi.n	8008276 <memp_malloc+0x12>
  memp = do_memp_malloc_pool(memp_pools[type]);
 800826a:	4b07      	ldr	r3, [pc, #28]	; (8008288 <memp_malloc+0x24>)
 800826c:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 8008270:	f7ff ff92 	bl	8008198 <do_memp_malloc_pool>
}
 8008274:	bd08      	pop	{r3, pc}
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 8008276:	4b05      	ldr	r3, [pc, #20]	; (800828c <memp_malloc+0x28>)
 8008278:	f240 1287 	movw	r2, #391	; 0x187
 800827c:	4904      	ldr	r1, [pc, #16]	; (8008290 <memp_malloc+0x2c>)
 800827e:	4805      	ldr	r0, [pc, #20]	; (8008294 <memp_malloc+0x30>)
 8008280:	f005 fca3 	bl	800dbca <iprintf>
 8008284:	2000      	movs	r0, #0
 8008286:	bd08      	pop	{r3, pc}
 8008288:	0800f488 	.word	0x0800f488
 800828c:	0800f35c 	.word	0x0800f35c
 8008290:	0800f468 	.word	0x0800f468
 8008294:	0800e3b0 	.word	0x0800e3b0

08008298 <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 8008298:	b508      	push	{r3, lr}
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 800829a:	280c      	cmp	r0, #12
 800829c:	d806      	bhi.n	80082ac <memp_free+0x14>

  if (mem == NULL) {
 800829e:	b121      	cbz	r1, 80082aa <memp_free+0x12>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 80082a0:	4b06      	ldr	r3, [pc, #24]	; (80082bc <memp_free+0x24>)
 80082a2:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 80082a6:	f7ff ff9b 	bl	80081e0 <do_memp_free_pool>
 80082aa:	bd08      	pop	{r3, pc}
  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 80082ac:	4b04      	ldr	r3, [pc, #16]	; (80082c0 <memp_free+0x28>)
 80082ae:	f240 12db 	movw	r2, #475	; 0x1db
 80082b2:	4904      	ldr	r1, [pc, #16]	; (80082c4 <memp_free+0x2c>)
 80082b4:	4804      	ldr	r0, [pc, #16]	; (80082c8 <memp_free+0x30>)
 80082b6:	f005 fc88 	bl	800dbca <iprintf>
 80082ba:	bd08      	pop	{r3, pc}
 80082bc:	0800f488 	.word	0x0800f488
 80082c0:	0800f35c 	.word	0x0800f35c
 80082c4:	0800f44c 	.word	0x0800f44c
 80082c8:	0800e3b0 	.word	0x0800e3b0

080082cc <netif_issue_reports>:
 */
static void
netif_issue_reports(struct netif* netif, u8_t report_type)
{
#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 80082cc:	f011 0f01 	tst.w	r1, #1
 80082d0:	d00c      	beq.n	80082ec <netif_issue_reports+0x20>
{
 80082d2:	b508      	push	{r3, lr}
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 80082d4:	6843      	ldr	r3, [r0, #4]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 80082d6:	b123      	cbz	r3, 80082e2 <netif_issue_reports+0x16>
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 80082d8:	f890 302b 	ldrb.w	r3, [r0, #43]	; 0x2b
 80082dc:	f013 0f08 	tst.w	r3, #8
 80082e0:	d100      	bne.n	80082e4 <netif_issue_reports+0x18>
 80082e2:	bd08      	pop	{r3, pc}
      etharp_gratuitous(netif);
 80082e4:	1d01      	adds	r1, r0, #4
 80082e6:	f7fe fbfd 	bl	8006ae4 <etharp_request>
    /* Send Router Solicitation messages. */
    netif->rs_count = LWIP_ND6_MAX_MULTICAST_SOLICIT;
#endif /* LWIP_IPV6_SEND_ROUTER_SOLICIT */
  }
#endif /* LWIP_IPV6 */
}
 80082ea:	e7fa      	b.n	80082e2 <netif_issue_reports+0x16>
 80082ec:	4770      	bx	lr

080082ee <netif_init>:
{
 80082ee:	4770      	bx	lr

080082f0 <netif_set_ipaddr>:
{
 80082f0:	b570      	push	{r4, r5, r6, lr}
 80082f2:	b082      	sub	sp, #8
  *ip_2_ip4(&new_addr) = (ipaddr ? *ipaddr : *IP4_ADDR_ANY4);
 80082f4:	460d      	mov	r5, r1
 80082f6:	b1c1      	cbz	r1, 800832a <netif_set_ipaddr+0x3a>
 80082f8:	680a      	ldr	r2, [r1, #0]
 80082fa:	9201      	str	r2, [sp, #4]
  if (ip4_addr_cmp(ip_2_ip4(&new_addr), netif_ip4_addr(netif)) == 0) {
 80082fc:	6842      	ldr	r2, [r0, #4]
 80082fe:	9901      	ldr	r1, [sp, #4]
 8008300:	4291      	cmp	r1, r2
 8008302:	d010      	beq.n	8008326 <netif_set_ipaddr+0x36>
 8008304:	4604      	mov	r4, r0
    tcp_netif_ip_addr_changed(netif_ip_addr4(netif), &new_addr);
 8008306:	1d06      	adds	r6, r0, #4
 8008308:	a901      	add	r1, sp, #4
 800830a:	4630      	mov	r0, r6
 800830c:	f001 fc9e 	bl	8009c4c <tcp_netif_ip_addr_changed>
    udp_netif_ip_addr_changed(netif_ip_addr4(netif), &new_addr);
 8008310:	a901      	add	r1, sp, #4
 8008312:	4630      	mov	r0, r6
 8008314:	f004 fc08 	bl	800cb28 <udp_netif_ip_addr_changed>
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 8008318:	b15d      	cbz	r5, 8008332 <netif_set_ipaddr+0x42>
 800831a:	682b      	ldr	r3, [r5, #0]
 800831c:	6063      	str	r3, [r4, #4]
    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 800831e:	2101      	movs	r1, #1
 8008320:	4620      	mov	r0, r4
 8008322:	f7ff ffd3 	bl	80082cc <netif_issue_reports>
}
 8008326:	b002      	add	sp, #8
 8008328:	bd70      	pop	{r4, r5, r6, pc}
  *ip_2_ip4(&new_addr) = (ipaddr ? *ipaddr : *IP4_ADDR_ANY4);
 800832a:	4a03      	ldr	r2, [pc, #12]	; (8008338 <netif_set_ipaddr+0x48>)
 800832c:	6812      	ldr	r2, [r2, #0]
 800832e:	9201      	str	r2, [sp, #4]
 8008330:	e7e4      	b.n	80082fc <netif_set_ipaddr+0xc>
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 8008332:	2300      	movs	r3, #0
 8008334:	e7f2      	b.n	800831c <netif_set_ipaddr+0x2c>
 8008336:	bf00      	nop
 8008338:	0800ef98 	.word	0x0800ef98

0800833c <netif_set_gw>:
  ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 800833c:	b111      	cbz	r1, 8008344 <netif_set_gw+0x8>
 800833e:	680b      	ldr	r3, [r1, #0]
 8008340:	60c3      	str	r3, [r0, #12]
 8008342:	4770      	bx	lr
 8008344:	2300      	movs	r3, #0
 8008346:	e7fb      	b.n	8008340 <netif_set_gw+0x4>

08008348 <netif_set_netmask>:
  ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 8008348:	b111      	cbz	r1, 8008350 <netif_set_netmask+0x8>
 800834a:	680b      	ldr	r3, [r1, #0]
 800834c:	6083      	str	r3, [r0, #8]
 800834e:	4770      	bx	lr
 8008350:	2300      	movs	r3, #0
 8008352:	e7fb      	b.n	800834c <netif_set_netmask+0x4>

08008354 <netif_set_addr>:
{
 8008354:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008356:	4604      	mov	r4, r0
 8008358:	4617      	mov	r7, r2
 800835a:	461e      	mov	r6, r3
  if (ip4_addr_isany(ipaddr)) {
 800835c:	460d      	mov	r5, r1
 800835e:	b109      	cbz	r1, 8008364 <netif_set_addr+0x10>
 8008360:	680b      	ldr	r3, [r1, #0]
 8008362:	b963      	cbnz	r3, 800837e <netif_set_addr+0x2a>
    netif_set_ipaddr(netif, ipaddr);
 8008364:	4629      	mov	r1, r5
 8008366:	4620      	mov	r0, r4
 8008368:	f7ff ffc2 	bl	80082f0 <netif_set_ipaddr>
    netif_set_netmask(netif, netmask);
 800836c:	4639      	mov	r1, r7
 800836e:	4620      	mov	r0, r4
 8008370:	f7ff ffea 	bl	8008348 <netif_set_netmask>
    netif_set_gw(netif, gw);
 8008374:	4631      	mov	r1, r6
 8008376:	4620      	mov	r0, r4
 8008378:	f7ff ffe0 	bl	800833c <netif_set_gw>
 800837c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    netif_set_netmask(netif, netmask);
 800837e:	4611      	mov	r1, r2
 8008380:	f7ff ffe2 	bl	8008348 <netif_set_netmask>
    netif_set_gw(netif, gw);
 8008384:	4631      	mov	r1, r6
 8008386:	4620      	mov	r0, r4
 8008388:	f7ff ffd8 	bl	800833c <netif_set_gw>
    netif_set_ipaddr(netif, ipaddr);
 800838c:	4629      	mov	r1, r5
 800838e:	4620      	mov	r0, r4
 8008390:	f7ff ffae 	bl	80082f0 <netif_set_ipaddr>
 8008394:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08008398 <netif_add>:
{
 8008398:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800839c:	4604      	mov	r4, r0
 800839e:	460e      	mov	r6, r1
 80083a0:	4617      	mov	r7, r2
 80083a2:	4698      	mov	r8, r3
 80083a4:	9d07      	ldr	r5, [sp, #28]
  LWIP_ASSERT("No init function given", init != NULL);
 80083a6:	b315      	cbz	r5, 80083ee <netif_add+0x56>
  ip_addr_set_zero_ip4(&netif->ip_addr);
 80083a8:	2300      	movs	r3, #0
 80083aa:	6063      	str	r3, [r4, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 80083ac:	60a3      	str	r3, [r4, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 80083ae:	60e3      	str	r3, [r4, #12]
  netif->flags = 0;
 80083b0:	f884 302b 	strb.w	r3, [r4, #43]	; 0x2b
  netif->rs_count = LWIP_ND6_MAX_MULTICAST_SOLICIT;
 80083b4:	2303      	movs	r3, #3
 80083b6:	f884 3020 	strb.w	r3, [r4, #32]
  netif->state = state;
 80083ba:	9b06      	ldr	r3, [sp, #24]
 80083bc:	61e3      	str	r3, [r4, #28]
  netif->num = netif_num++;
 80083be:	4a11      	ldr	r2, [pc, #68]	; (8008404 <netif_add+0x6c>)
 80083c0:	7813      	ldrb	r3, [r2, #0]
 80083c2:	1c59      	adds	r1, r3, #1
 80083c4:	7011      	strb	r1, [r2, #0]
 80083c6:	f884 302e 	strb.w	r3, [r4, #46]	; 0x2e
  netif->input = input;
 80083ca:	9b08      	ldr	r3, [sp, #32]
 80083cc:	6123      	str	r3, [r4, #16]
  netif_set_addr(netif, ipaddr, netmask, gw);
 80083ce:	4643      	mov	r3, r8
 80083d0:	463a      	mov	r2, r7
 80083d2:	4631      	mov	r1, r6
 80083d4:	4620      	mov	r0, r4
 80083d6:	f7ff ffbd 	bl	8008354 <netif_set_addr>
  if (init(netif) != ERR_OK) {
 80083da:	4620      	mov	r0, r4
 80083dc:	47a8      	blx	r5
 80083de:	b968      	cbnz	r0, 80083fc <netif_add+0x64>
  netif->next = netif_list;
 80083e0:	4b09      	ldr	r3, [pc, #36]	; (8008408 <netif_add+0x70>)
 80083e2:	681a      	ldr	r2, [r3, #0]
 80083e4:	6022      	str	r2, [r4, #0]
  netif_list = netif;
 80083e6:	601c      	str	r4, [r3, #0]
  return netif;
 80083e8:	4620      	mov	r0, r4
 80083ea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  LWIP_ASSERT("No init function given", init != NULL);
 80083ee:	4b07      	ldr	r3, [pc, #28]	; (800840c <netif_add+0x74>)
 80083f0:	22fb      	movs	r2, #251	; 0xfb
 80083f2:	4907      	ldr	r1, [pc, #28]	; (8008410 <netif_add+0x78>)
 80083f4:	4807      	ldr	r0, [pc, #28]	; (8008414 <netif_add+0x7c>)
 80083f6:	f005 fbe8 	bl	800dbca <iprintf>
 80083fa:	e7d5      	b.n	80083a8 <netif_add+0x10>
    return NULL;
 80083fc:	2000      	movs	r0, #0
}
 80083fe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008402:	bf00      	nop
 8008404:	20003f80 	.word	0x20003f80
 8008408:	2000796c 	.word	0x2000796c
 800840c:	0800f4bc 	.word	0x0800f4bc
 8008410:	0800f4f0 	.word	0x0800f4f0
 8008414:	0800e3b0 	.word	0x0800e3b0

08008418 <netif_set_default>:
  netif_default = netif;
 8008418:	4b01      	ldr	r3, [pc, #4]	; (8008420 <netif_set_default+0x8>)
 800841a:	6018      	str	r0, [r3, #0]
 800841c:	4770      	bx	lr
 800841e:	bf00      	nop
 8008420:	20007970 	.word	0x20007970

08008424 <netif_set_up>:
{
 8008424:	b508      	push	{r3, lr}
  if (!(netif->flags & NETIF_FLAG_UP)) {
 8008426:	f890 302b 	ldrb.w	r3, [r0, #43]	; 0x2b
 800842a:	f013 0f01 	tst.w	r3, #1
 800842e:	d106      	bne.n	800843e <netif_set_up+0x1a>
    netif->flags |= NETIF_FLAG_UP;
 8008430:	f043 0301 	orr.w	r3, r3, #1
 8008434:	f880 302b 	strb.w	r3, [r0, #43]	; 0x2b
    if (netif->flags & NETIF_FLAG_LINK_UP) {
 8008438:	f013 0f04 	tst.w	r3, #4
 800843c:	d100      	bne.n	8008440 <netif_set_up+0x1c>
 800843e:	bd08      	pop	{r3, pc}
      netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4|NETIF_REPORT_TYPE_IPV6);
 8008440:	2103      	movs	r1, #3
 8008442:	f7ff ff43 	bl	80082cc <netif_issue_reports>
}
 8008446:	e7fa      	b.n	800843e <netif_set_up+0x1a>

08008448 <netif_set_down>:
 * @ingroup netif
 * Bring an interface down, disabling any traffic processing.
 */
void
netif_set_down(struct netif *netif)
{
 8008448:	b508      	push	{r3, lr}
  if (netif->flags & NETIF_FLAG_UP) {
 800844a:	f890 302b 	ldrb.w	r3, [r0, #43]	; 0x2b
 800844e:	f013 0f01 	tst.w	r3, #1
 8008452:	d006      	beq.n	8008462 <netif_set_down+0x1a>
    netif->flags &= ~NETIF_FLAG_UP;
 8008454:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 8008458:	f880 302b 	strb.w	r3, [r0, #43]	; 0x2b
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

#if LWIP_IPV4 && LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
 800845c:	f013 0f08 	tst.w	r3, #8
 8008460:	d100      	bne.n	8008464 <netif_set_down+0x1c>
 8008462:	bd08      	pop	{r3, pc}
      etharp_cleanup_netif(netif);
 8008464:	f7fe faca 	bl	80069fc <etharp_cleanup_netif>
    nd6_cleanup_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_STATUS_CALLBACK(netif);
  }
}
 8008468:	e7fb      	b.n	8008462 <netif_set_down+0x1a>
	...

0800846c <pbuf_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 800846c:	b570      	push	{r4, r5, r6, lr}
 800846e:	460c      	mov	r4, r1
 8008470:	4616      	mov	r6, r2
  u16_t type;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 8008472:	4605      	mov	r5, r0
 8008474:	b1c0      	cbz	r0, 80084a8 <pbuf_header_impl+0x3c>
  if ((header_size_increment == 0) || (p == NULL)) {
 8008476:	2c00      	cmp	r4, #0
 8008478:	d04e      	beq.n	8008518 <pbuf_header_impl+0xac>
 800847a:	2d00      	cmp	r5, #0
 800847c:	d04e      	beq.n	800851c <pbuf_header_impl+0xb0>
    return 0;
  }

  if (header_size_increment < 0) {
 800847e:	2c00      	cmp	r4, #0
 8008480:	db1a      	blt.n	80084b8 <pbuf_header_impl+0x4c>
    increment_magnitude = (u16_t)-header_size_increment;
    /* Check that we aren't going to move off the end of the pbuf */
    LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
  } else {
    increment_magnitude = (u16_t)header_size_increment;
 8008482:	b2a2      	uxth	r2, r4
    LWIP_ASSERT("p->payload - increment_magnitude >= p + SIZEOF_STRUCT_PBUF",
                (u8_t *)p->payload - increment_magnitude >= (u8_t *)p + SIZEOF_STRUCT_PBUF);
#endif
  }

  type = p->type;
 8008484:	7b2b      	ldrb	r3, [r5, #12]
  /* remember current payload pointer */
  payload = p->payload;
 8008486:	6869      	ldr	r1, [r5, #4]

  /* pbuf types containing payloads? */
  if (type == PBUF_RAM || type == PBUF_POOL) {
 8008488:	b32b      	cbz	r3, 80084d6 <pbuf_header_impl+0x6a>
 800848a:	2b03      	cmp	r3, #3
 800848c:	d023      	beq.n	80084d6 <pbuf_header_impl+0x6a>
      p->payload = payload;
      /* bail out unsuccessfully */
      return 1;
    }
  /* pbuf types referring to external payloads? */
  } else if (type == PBUF_REF || type == PBUF_ROM) {
 800848e:	3b01      	subs	r3, #1
 8008490:	b29b      	uxth	r3, r3
 8008492:	2b01      	cmp	r3, #1
 8008494:	d837      	bhi.n	8008506 <pbuf_header_impl+0x9a>
    /* hide a header in the payload? */
    if ((header_size_increment < 0) && (increment_magnitude <= p->len)) {
 8008496:	2c00      	cmp	r4, #0
 8008498:	db2f      	blt.n	80084fa <pbuf_header_impl+0x8e>
      /* increase payload pointer */
      p->payload = (u8_t *)p->payload - header_size_increment;
    } else if ((header_size_increment > 0) && force) {
 800849a:	2c00      	cmp	r4, #0
 800849c:	dd40      	ble.n	8008520 <pbuf_header_impl+0xb4>
 800849e:	2e00      	cmp	r6, #0
 80084a0:	d040      	beq.n	8008524 <pbuf_header_impl+0xb8>
      p->payload = (u8_t *)p->payload - header_size_increment;
 80084a2:	1b09      	subs	r1, r1, r4
 80084a4:	6069      	str	r1, [r5, #4]
 80084a6:	e01c      	b.n	80084e2 <pbuf_header_impl+0x76>
  LWIP_ASSERT("p != NULL", p != NULL);
 80084a8:	4b1f      	ldr	r3, [pc, #124]	; (8008528 <pbuf_header_impl+0xbc>)
 80084aa:	f240 223f 	movw	r2, #575	; 0x23f
 80084ae:	491f      	ldr	r1, [pc, #124]	; (800852c <pbuf_header_impl+0xc0>)
 80084b0:	481f      	ldr	r0, [pc, #124]	; (8008530 <pbuf_header_impl+0xc4>)
 80084b2:	f005 fb8a 	bl	800dbca <iprintf>
 80084b6:	e7de      	b.n	8008476 <pbuf_header_impl+0xa>
    increment_magnitude = (u16_t)-header_size_increment;
 80084b8:	b2a2      	uxth	r2, r4
 80084ba:	4252      	negs	r2, r2
 80084bc:	b292      	uxth	r2, r2
    LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 80084be:	896b      	ldrh	r3, [r5, #10]
 80084c0:	429a      	cmp	r2, r3
 80084c2:	d9df      	bls.n	8008484 <pbuf_header_impl+0x18>
 80084c4:	4b18      	ldr	r3, [pc, #96]	; (8008528 <pbuf_header_impl+0xbc>)
 80084c6:	f240 2247 	movw	r2, #583	; 0x247
 80084ca:	491a      	ldr	r1, [pc, #104]	; (8008534 <pbuf_header_impl+0xc8>)
 80084cc:	4818      	ldr	r0, [pc, #96]	; (8008530 <pbuf_header_impl+0xc4>)
 80084ce:	f005 fb7c 	bl	800dbca <iprintf>
 80084d2:	2001      	movs	r0, #1
 80084d4:	bd70      	pop	{r4, r5, r6, pc}
    p->payload = (u8_t *)p->payload - header_size_increment;
 80084d6:	1b0b      	subs	r3, r1, r4
 80084d8:	606b      	str	r3, [r5, #4]
    if ((u8_t *)p->payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 80084da:	f105 0210 	add.w	r2, r5, #16
 80084de:	4293      	cmp	r3, r2
 80084e0:	d308      	bcc.n	80084f4 <pbuf_header_impl+0x88>
    /* Unknown type */
    LWIP_ASSERT("bad pbuf type", 0);
    return 1;
  }
  /* modify pbuf length fields */
  p->len += header_size_increment;
 80084e2:	b2a4      	uxth	r4, r4
 80084e4:	896b      	ldrh	r3, [r5, #10]
 80084e6:	4423      	add	r3, r4
 80084e8:	816b      	strh	r3, [r5, #10]
  p->tot_len += header_size_increment;
 80084ea:	892b      	ldrh	r3, [r5, #8]
 80084ec:	441c      	add	r4, r3
 80084ee:	812c      	strh	r4, [r5, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_header: old %p new %p (%"S16_F")\n",
    (void *)payload, (void *)p->payload, header_size_increment));

  return 0;
 80084f0:	2000      	movs	r0, #0
 80084f2:	bd70      	pop	{r4, r5, r6, pc}
      p->payload = payload;
 80084f4:	6069      	str	r1, [r5, #4]
      return 1;
 80084f6:	2001      	movs	r0, #1
 80084f8:	bd70      	pop	{r4, r5, r6, pc}
    if ((header_size_increment < 0) && (increment_magnitude <= p->len)) {
 80084fa:	896b      	ldrh	r3, [r5, #10]
 80084fc:	429a      	cmp	r2, r3
 80084fe:	d8cc      	bhi.n	800849a <pbuf_header_impl+0x2e>
      p->payload = (u8_t *)p->payload - header_size_increment;
 8008500:	1b09      	subs	r1, r1, r4
 8008502:	6069      	str	r1, [r5, #4]
 8008504:	e7ed      	b.n	80084e2 <pbuf_header_impl+0x76>
    LWIP_ASSERT("bad pbuf type", 0);
 8008506:	4b08      	ldr	r3, [pc, #32]	; (8008528 <pbuf_header_impl+0xbc>)
 8008508:	f240 2277 	movw	r2, #631	; 0x277
 800850c:	490a      	ldr	r1, [pc, #40]	; (8008538 <pbuf_header_impl+0xcc>)
 800850e:	4808      	ldr	r0, [pc, #32]	; (8008530 <pbuf_header_impl+0xc4>)
 8008510:	f005 fb5b 	bl	800dbca <iprintf>
    return 1;
 8008514:	2001      	movs	r0, #1
 8008516:	bd70      	pop	{r4, r5, r6, pc}
    return 0;
 8008518:	2000      	movs	r0, #0
 800851a:	bd70      	pop	{r4, r5, r6, pc}
 800851c:	2000      	movs	r0, #0
 800851e:	bd70      	pop	{r4, r5, r6, pc}
      return 1;
 8008520:	2001      	movs	r0, #1
 8008522:	bd70      	pop	{r4, r5, r6, pc}
 8008524:	2001      	movs	r0, #1
}
 8008526:	bd70      	pop	{r4, r5, r6, pc}
 8008528:	0800f7c0 	.word	0x0800f7c0
 800852c:	0800e730 	.word	0x0800e730
 8008530:	0800e3b0 	.word	0x0800e3b0
 8008534:	0800f7f0 	.word	0x0800f7f0
 8008538:	0800f810 	.word	0x0800f810

0800853c <pbuf_pool_is_empty>:
{
 800853c:	b510      	push	{r4, lr}
  SYS_ARCH_PROTECT(old_level);
 800853e:	f004 fc9d 	bl	800ce7c <sys_arch_protect>
  queued = pbuf_free_ooseq_pending;
 8008542:	4b0c      	ldr	r3, [pc, #48]	; (8008574 <pbuf_pool_is_empty+0x38>)
 8008544:	781c      	ldrb	r4, [r3, #0]
 8008546:	b2e4      	uxtb	r4, r4
  pbuf_free_ooseq_pending = 1;
 8008548:	2201      	movs	r2, #1
 800854a:	701a      	strb	r2, [r3, #0]
  SYS_ARCH_UNPROTECT(old_level);
 800854c:	f004 fca2 	bl	800ce94 <sys_arch_unprotect>
  if (!queued) {
 8008550:	b104      	cbz	r4, 8008554 <pbuf_pool_is_empty+0x18>
 8008552:	bd10      	pop	{r4, pc}
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
 8008554:	2200      	movs	r2, #0
 8008556:	4611      	mov	r1, r2
 8008558:	4807      	ldr	r0, [pc, #28]	; (8008578 <pbuf_pool_is_empty+0x3c>)
 800855a:	f7fd ffb3 	bl	80064c4 <tcpip_callback_with_block>
 800855e:	2800      	cmp	r0, #0
 8008560:	d0f7      	beq.n	8008552 <pbuf_pool_is_empty+0x16>
 8008562:	f004 fc8b 	bl	800ce7c <sys_arch_protect>
 8008566:	2200      	movs	r2, #0
 8008568:	4b02      	ldr	r3, [pc, #8]	; (8008574 <pbuf_pool_is_empty+0x38>)
 800856a:	701a      	strb	r2, [r3, #0]
 800856c:	f004 fc92 	bl	800ce94 <sys_arch_unprotect>
}
 8008570:	e7ef      	b.n	8008552 <pbuf_pool_is_empty+0x16>
 8008572:	bf00      	nop
 8008574:	20007974 	.word	0x20007974
 8008578:	080085b1 	.word	0x080085b1

0800857c <pbuf_free_ooseq>:
{
 800857c:	b510      	push	{r4, lr}
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);
 800857e:	f004 fc7d 	bl	800ce7c <sys_arch_protect>
 8008582:	2200      	movs	r2, #0
 8008584:	4b08      	ldr	r3, [pc, #32]	; (80085a8 <pbuf_free_ooseq+0x2c>)
 8008586:	701a      	strb	r2, [r3, #0]
 8008588:	f004 fc84 	bl	800ce94 <sys_arch_unprotect>
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 800858c:	4b07      	ldr	r3, [pc, #28]	; (80085ac <pbuf_free_ooseq+0x30>)
 800858e:	681c      	ldr	r4, [r3, #0]
 8008590:	b144      	cbz	r4, 80085a4 <pbuf_free_ooseq+0x28>
    if (NULL != pcb->ooseq) {
 8008592:	6f20      	ldr	r0, [r4, #112]	; 0x70
 8008594:	b908      	cbnz	r0, 800859a <pbuf_free_ooseq+0x1e>
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 8008596:	68e4      	ldr	r4, [r4, #12]
 8008598:	e7fa      	b.n	8008590 <pbuf_free_ooseq+0x14>
      tcp_segs_free(pcb->ooseq);
 800859a:	f000 fd4c 	bl	8009036 <tcp_segs_free>
      pcb->ooseq = NULL;
 800859e:	2300      	movs	r3, #0
 80085a0:	6723      	str	r3, [r4, #112]	; 0x70
      return;
 80085a2:	bd10      	pop	{r4, pc}
 80085a4:	bd10      	pop	{r4, pc}
 80085a6:	bf00      	nop
 80085a8:	20007974 	.word	0x20007974
 80085ac:	2000797c 	.word	0x2000797c

080085b0 <pbuf_free_ooseq_callback>:
{
 80085b0:	b508      	push	{r3, lr}
  pbuf_free_ooseq();
 80085b2:	f7ff ffe3 	bl	800857c <pbuf_free_ooseq>
 80085b6:	bd08      	pop	{r3, pc}

080085b8 <pbuf_alloced_custom>:
{
 80085b8:	b570      	push	{r4, r5, r6, lr}
 80085ba:	9c04      	ldr	r4, [sp, #16]
  switch (l) {
 80085bc:	2804      	cmp	r0, #4
 80085be:	d80a      	bhi.n	80085d6 <pbuf_alloced_custom+0x1e>
 80085c0:	e8df f000 	tbb	[pc, r0]
 80085c4:	05031412 	.word	0x05031412
 80085c8:	07          	.byte	0x07
 80085c9:	00          	.byte	0x00
    offset = PBUF_LINK_ENCAPSULATION_HLEN + PBUF_LINK_HLEN;
 80085ca:	200e      	movs	r0, #14
    break;
 80085cc:	e00f      	b.n	80085ee <pbuf_alloced_custom+0x36>
    offset = PBUF_LINK_ENCAPSULATION_HLEN;
 80085ce:	2000      	movs	r0, #0
    break;
 80085d0:	e00d      	b.n	80085ee <pbuf_alloced_custom+0x36>
    offset = 0;
 80085d2:	2000      	movs	r0, #0
    break;
 80085d4:	e00b      	b.n	80085ee <pbuf_alloced_custom+0x36>
    LWIP_ASSERT("pbuf_alloced_custom: bad pbuf layer", 0);
 80085d6:	4b13      	ldr	r3, [pc, #76]	; (8008624 <pbuf_alloced_custom+0x6c>)
 80085d8:	f240 12c5 	movw	r2, #453	; 0x1c5
 80085dc:	4912      	ldr	r1, [pc, #72]	; (8008628 <pbuf_alloced_custom+0x70>)
 80085de:	4813      	ldr	r0, [pc, #76]	; (800862c <pbuf_alloced_custom+0x74>)
 80085e0:	f005 faf3 	bl	800dbca <iprintf>
    return NULL;
 80085e4:	2000      	movs	r0, #0
 80085e6:	bd70      	pop	{r4, r5, r6, pc}
    offset = PBUF_LINK_ENCAPSULATION_HLEN + PBUF_LINK_HLEN + PBUF_IP_HLEN + PBUF_TRANSPORT_HLEN;
 80085e8:	2036      	movs	r0, #54	; 0x36
 80085ea:	e000      	b.n	80085ee <pbuf_alloced_custom+0x36>
    offset = PBUF_LINK_ENCAPSULATION_HLEN + PBUF_LINK_HLEN + PBUF_IP_HLEN;
 80085ec:	2022      	movs	r0, #34	; 0x22
  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 80085ee:	3003      	adds	r0, #3
 80085f0:	f020 0003 	bic.w	r0, r0, #3
 80085f4:	180e      	adds	r6, r1, r0
 80085f6:	f8bd 5014 	ldrh.w	r5, [sp, #20]
 80085fa:	42ae      	cmp	r6, r5
 80085fc:	d810      	bhi.n	8008620 <pbuf_alloced_custom+0x68>
  p->pbuf.next = NULL;
 80085fe:	2500      	movs	r5, #0
 8008600:	601d      	str	r5, [r3, #0]
  if (payload_mem != NULL) {
 8008602:	b154      	cbz	r4, 800861a <pbuf_alloced_custom+0x62>
    p->pbuf.payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 8008604:	4420      	add	r0, r4
 8008606:	6058      	str	r0, [r3, #4]
  p->pbuf.flags = PBUF_FLAG_IS_CUSTOM;
 8008608:	2002      	movs	r0, #2
 800860a:	7358      	strb	r0, [r3, #13]
  p->pbuf.len = p->pbuf.tot_len = length;
 800860c:	8119      	strh	r1, [r3, #8]
 800860e:	8159      	strh	r1, [r3, #10]
  p->pbuf.type = type;
 8008610:	731a      	strb	r2, [r3, #12]
  p->pbuf.ref = 1;
 8008612:	2201      	movs	r2, #1
 8008614:	81da      	strh	r2, [r3, #14]
  return &p->pbuf;
 8008616:	4618      	mov	r0, r3
 8008618:	bd70      	pop	{r4, r5, r6, pc}
    p->pbuf.payload = NULL;
 800861a:	2000      	movs	r0, #0
 800861c:	6058      	str	r0, [r3, #4]
 800861e:	e7f3      	b.n	8008608 <pbuf_alloced_custom+0x50>
    return NULL;
 8008620:	2000      	movs	r0, #0
}
 8008622:	bd70      	pop	{r4, r5, r6, pc}
 8008624:	0800f7c0 	.word	0x0800f7c0
 8008628:	0800f5ec 	.word	0x0800f5ec
 800862c:	0800e3b0 	.word	0x0800e3b0

08008630 <pbuf_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_header(struct pbuf *p, s16_t header_size_increment)
{
 8008630:	b508      	push	{r3, lr}
   return pbuf_header_impl(p, header_size_increment, 0);
 8008632:	2200      	movs	r2, #0
 8008634:	f7ff ff1a 	bl	800846c <pbuf_header_impl>
}
 8008638:	bd08      	pop	{r3, pc}

0800863a <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 800863a:	b508      	push	{r3, lr}
   return pbuf_header_impl(p, header_size_increment, 1);
 800863c:	2201      	movs	r2, #1
 800863e:	f7ff ff15 	bl	800846c <pbuf_header_impl>
}
 8008642:	bd08      	pop	{r3, pc}

08008644 <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 8008644:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  u16_t type;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 8008646:	b128      	cbz	r0, 8008654 <pbuf_free+0x10>
 8008648:	4604      	mov	r4, r0
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  LWIP_ASSERT("pbuf_free: sane type",
 800864a:	7b03      	ldrb	r3, [r0, #12]
 800864c:	2b03      	cmp	r3, #3
 800864e:	d80b      	bhi.n	8008668 <pbuf_free+0x24>
{
 8008650:	2600      	movs	r6, #0
 8008652:	e01f      	b.n	8008694 <pbuf_free+0x50>
    LWIP_ASSERT("p != NULL", p != NULL);
 8008654:	4b2b      	ldr	r3, [pc, #172]	; (8008704 <pbuf_free+0xc0>)
 8008656:	f240 22d2 	movw	r2, #722	; 0x2d2
 800865a:	492b      	ldr	r1, [pc, #172]	; (8008708 <pbuf_free+0xc4>)
 800865c:	482b      	ldr	r0, [pc, #172]	; (800870c <pbuf_free+0xc8>)
 800865e:	f005 fab4 	bl	800dbca <iprintf>
    return 0;
 8008662:	2600      	movs	r6, #0
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
}
 8008664:	4630      	mov	r0, r6
 8008666:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  LWIP_ASSERT("pbuf_free: sane type",
 8008668:	4b26      	ldr	r3, [pc, #152]	; (8008704 <pbuf_free+0xc0>)
 800866a:	f240 22de 	movw	r2, #734	; 0x2de
 800866e:	4928      	ldr	r1, [pc, #160]	; (8008710 <pbuf_free+0xcc>)
 8008670:	4826      	ldr	r0, [pc, #152]	; (800870c <pbuf_free+0xc8>)
 8008672:	f005 faaa 	bl	800dbca <iprintf>
 8008676:	e7eb      	b.n	8008650 <pbuf_free+0xc>
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 8008678:	4b22      	ldr	r3, [pc, #136]	; (8008704 <pbuf_free+0xc0>)
 800867a:	f240 22eb 	movw	r2, #747	; 0x2eb
 800867e:	4925      	ldr	r1, [pc, #148]	; (8008714 <pbuf_free+0xd0>)
 8008680:	4822      	ldr	r0, [pc, #136]	; (800870c <pbuf_free+0xc8>)
 8008682:	f005 faa2 	bl	800dbca <iprintf>
 8008686:	e00d      	b.n	80086a4 <pbuf_free+0x60>
        pc->custom_free_function(p);
 8008688:	6923      	ldr	r3, [r4, #16]
 800868a:	4620      	mov	r0, r4
 800868c:	4798      	blx	r3
      count++;
 800868e:	3601      	adds	r6, #1
 8008690:	b2f6      	uxtb	r6, r6
      p = q;
 8008692:	462c      	mov	r4, r5
  while (p != NULL) {
 8008694:	2c00      	cmp	r4, #0
 8008696:	d0e5      	beq.n	8008664 <pbuf_free+0x20>
    SYS_ARCH_PROTECT(old_level);
 8008698:	f004 fbf0 	bl	800ce7c <sys_arch_protect>
 800869c:	4607      	mov	r7, r0
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 800869e:	89e3      	ldrh	r3, [r4, #14]
 80086a0:	2b00      	cmp	r3, #0
 80086a2:	d0e9      	beq.n	8008678 <pbuf_free+0x34>
    ref = --(p->ref);
 80086a4:	89e5      	ldrh	r5, [r4, #14]
 80086a6:	3d01      	subs	r5, #1
 80086a8:	b2ad      	uxth	r5, r5
 80086aa:	81e5      	strh	r5, [r4, #14]
    SYS_ARCH_UNPROTECT(old_level);
 80086ac:	4638      	mov	r0, r7
 80086ae:	f004 fbf1 	bl	800ce94 <sys_arch_unprotect>
    if (ref == 0) {
 80086b2:	bb25      	cbnz	r5, 80086fe <pbuf_free+0xba>
      q = p->next;
 80086b4:	6825      	ldr	r5, [r4, #0]
      type = p->type;
 80086b6:	7b23      	ldrb	r3, [r4, #12]
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 80086b8:	7b62      	ldrb	r2, [r4, #13]
 80086ba:	f012 0f02 	tst.w	r2, #2
 80086be:	d00a      	beq.n	80086d6 <pbuf_free+0x92>
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 80086c0:	6923      	ldr	r3, [r4, #16]
 80086c2:	2b00      	cmp	r3, #0
 80086c4:	d1e0      	bne.n	8008688 <pbuf_free+0x44>
 80086c6:	4b0f      	ldr	r3, [pc, #60]	; (8008704 <pbuf_free+0xc0>)
 80086c8:	f240 22f9 	movw	r2, #761	; 0x2f9
 80086cc:	4912      	ldr	r1, [pc, #72]	; (8008718 <pbuf_free+0xd4>)
 80086ce:	480f      	ldr	r0, [pc, #60]	; (800870c <pbuf_free+0xc8>)
 80086d0:	f005 fa7b 	bl	800dbca <iprintf>
 80086d4:	e7d8      	b.n	8008688 <pbuf_free+0x44>
        if (type == PBUF_POOL) {
 80086d6:	2b03      	cmp	r3, #3
 80086d8:	d007      	beq.n	80086ea <pbuf_free+0xa6>
        } else if (type == PBUF_ROM || type == PBUF_REF) {
 80086da:	3b01      	subs	r3, #1
 80086dc:	b29b      	uxth	r3, r3
 80086de:	2b01      	cmp	r3, #1
 80086e0:	d908      	bls.n	80086f4 <pbuf_free+0xb0>
          mem_free(p);
 80086e2:	4620      	mov	r0, r4
 80086e4:	f7ff fbb4 	bl	8007e50 <mem_free>
 80086e8:	e7d1      	b.n	800868e <pbuf_free+0x4a>
          memp_free(MEMP_PBUF_POOL, p);
 80086ea:	4621      	mov	r1, r4
 80086ec:	200c      	movs	r0, #12
 80086ee:	f7ff fdd3 	bl	8008298 <memp_free>
 80086f2:	e7cc      	b.n	800868e <pbuf_free+0x4a>
          memp_free(MEMP_PBUF, p);
 80086f4:	4621      	mov	r1, r4
 80086f6:	200b      	movs	r0, #11
 80086f8:	f7ff fdce 	bl	8008298 <memp_free>
 80086fc:	e7c7      	b.n	800868e <pbuf_free+0x4a>
      p = NULL;
 80086fe:	2400      	movs	r4, #0
 8008700:	e7c8      	b.n	8008694 <pbuf_free+0x50>
 8008702:	bf00      	nop
 8008704:	0800f7c0 	.word	0x0800f7c0
 8008708:	0800e730 	.word	0x0800e730
 800870c:	0800e3b0 	.word	0x0800e3b0
 8008710:	0800f76c 	.word	0x0800f76c
 8008714:	0800f784 	.word	0x0800f784
 8008718:	0800f79c 	.word	0x0800f79c

0800871c <pbuf_alloc>:
{
 800871c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008720:	460d      	mov	r5, r1
 8008722:	4617      	mov	r7, r2
  switch (layer) {
 8008724:	2804      	cmp	r0, #4
 8008726:	d80a      	bhi.n	800873e <pbuf_alloc+0x22>
 8008728:	e8df f000 	tbb	[pc, r0]
 800872c:	05031412 	.word	0x05031412
 8008730:	07          	.byte	0x07
 8008731:	00          	.byte	0x00
    offset = PBUF_LINK_ENCAPSULATION_HLEN + PBUF_LINK_HLEN;
 8008732:	240e      	movs	r4, #14
    break;
 8008734:	e00f      	b.n	8008756 <pbuf_alloc+0x3a>
    offset = PBUF_LINK_ENCAPSULATION_HLEN;
 8008736:	2400      	movs	r4, #0
    break;
 8008738:	e00d      	b.n	8008756 <pbuf_alloc+0x3a>
    offset = 0;
 800873a:	2400      	movs	r4, #0
    break;
 800873c:	e00b      	b.n	8008756 <pbuf_alloc+0x3a>
    LWIP_ASSERT("pbuf_alloc: bad pbuf layer", 0);
 800873e:	4b64      	ldr	r3, [pc, #400]	; (80088d0 <pbuf_alloc+0x1b4>)
 8008740:	f44f 728b 	mov.w	r2, #278	; 0x116
 8008744:	4963      	ldr	r1, [pc, #396]	; (80088d4 <pbuf_alloc+0x1b8>)
 8008746:	4864      	ldr	r0, [pc, #400]	; (80088d8 <pbuf_alloc+0x1bc>)
 8008748:	f005 fa3f 	bl	800dbca <iprintf>
    return NULL;
 800874c:	2600      	movs	r6, #0
 800874e:	e0b1      	b.n	80088b4 <pbuf_alloc+0x198>
    offset = PBUF_LINK_ENCAPSULATION_HLEN + PBUF_LINK_HLEN + PBUF_IP_HLEN + PBUF_TRANSPORT_HLEN;
 8008750:	2436      	movs	r4, #54	; 0x36
 8008752:	e000      	b.n	8008756 <pbuf_alloc+0x3a>
    offset = PBUF_LINK_ENCAPSULATION_HLEN + PBUF_LINK_HLEN + PBUF_IP_HLEN;
 8008754:	2422      	movs	r4, #34	; 0x22
  switch (type) {
 8008756:	2f03      	cmp	r7, #3
 8008758:	f200 80af 	bhi.w	80088ba <pbuf_alloc+0x19e>
 800875c:	e8df f007 	tbb	[pc, r7]
 8008760:	029b9b7b 	.word	0x029b9b7b
    p = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 8008764:	200c      	movs	r0, #12
 8008766:	f7ff fd7d 	bl	8008264 <memp_malloc>
    if (p == NULL) {
 800876a:	4606      	mov	r6, r0
 800876c:	b1f8      	cbz	r0, 80087ae <pbuf_alloc+0x92>
    p->type = type;
 800876e:	7307      	strb	r7, [r0, #12]
    p->next = NULL;
 8008770:	2300      	movs	r3, #0
 8008772:	6003      	str	r3, [r0, #0]
    p->payload = LWIP_MEM_ALIGN((void *)((u8_t *)p + (SIZEOF_STRUCT_PBUF + offset)));
 8008774:	f104 0310 	add.w	r3, r4, #16
 8008778:	4403      	add	r3, r0
 800877a:	3303      	adds	r3, #3
 800877c:	f023 0303 	bic.w	r3, r3, #3
 8008780:	6043      	str	r3, [r0, #4]
    p->tot_len = length;
 8008782:	8105      	strh	r5, [r0, #8]
    p->len = LWIP_MIN(length, PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset));
 8008784:	1ce2      	adds	r2, r4, #3
 8008786:	f022 0203 	bic.w	r2, r2, #3
 800878a:	f5c2 7214 	rsb	r2, r2, #592	; 0x250
 800878e:	42aa      	cmp	r2, r5
 8008790:	bf28      	it	cs
 8008792:	462a      	movcs	r2, r5
 8008794:	b292      	uxth	r2, r2
 8008796:	8142      	strh	r2, [r0, #10]
    LWIP_ASSERT("check p->payload + p->len does not overflow pbuf",
 8008798:	4413      	add	r3, r2
 800879a:	f500 7818 	add.w	r8, r0, #608	; 0x260
 800879e:	4543      	cmp	r3, r8
 80087a0:	d808      	bhi.n	80087b4 <pbuf_alloc+0x98>
    p->ref = 1;
 80087a2:	2301      	movs	r3, #1
 80087a4:	81f3      	strh	r3, [r6, #14]
    rem_len = length - p->len;
 80087a6:	8973      	ldrh	r3, [r6, #10]
 80087a8:	1aed      	subs	r5, r5, r3
    r = p;
 80087aa:	46b1      	mov	r9, r6
    while (rem_len > 0) {
 80087ac:	e026      	b.n	80087fc <pbuf_alloc+0xe0>
      PBUF_POOL_IS_EMPTY();
 80087ae:	f7ff fec5 	bl	800853c <pbuf_pool_is_empty>
      return NULL;
 80087b2:	e07f      	b.n	80088b4 <pbuf_alloc+0x198>
    LWIP_ASSERT("check p->payload + p->len does not overflow pbuf",
 80087b4:	4b46      	ldr	r3, [pc, #280]	; (80088d0 <pbuf_alloc+0x1b4>)
 80087b6:	f44f 7298 	mov.w	r2, #304	; 0x130
 80087ba:	4948      	ldr	r1, [pc, #288]	; (80088dc <pbuf_alloc+0x1c0>)
 80087bc:	4846      	ldr	r0, [pc, #280]	; (80088d8 <pbuf_alloc+0x1bc>)
 80087be:	f005 fa04 	bl	800dbca <iprintf>
 80087c2:	e7ee      	b.n	80087a2 <pbuf_alloc+0x86>
        PBUF_POOL_IS_EMPTY();
 80087c4:	f7ff feba 	bl	800853c <pbuf_pool_is_empty>
        pbuf_free(p);
 80087c8:	4630      	mov	r0, r6
 80087ca:	f7ff ff3b 	bl	8008644 <pbuf_free>
        return NULL;
 80087ce:	4626      	mov	r6, r4
 80087d0:	e070      	b.n	80088b4 <pbuf_alloc+0x198>
      LWIP_ASSERT("rem_len < max_u16_t", rem_len < 0xffff);
 80087d2:	4b3f      	ldr	r3, [pc, #252]	; (80088d0 <pbuf_alloc+0x1b4>)
 80087d4:	f44f 72a6 	mov.w	r2, #332	; 0x14c
 80087d8:	4941      	ldr	r1, [pc, #260]	; (80088e0 <pbuf_alloc+0x1c4>)
 80087da:	483f      	ldr	r0, [pc, #252]	; (80088d8 <pbuf_alloc+0x1bc>)
 80087dc:	f005 f9f5 	bl	800dbca <iprintf>
 80087e0:	e01e      	b.n	8008820 <pbuf_alloc+0x104>
      LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 80087e2:	4b3b      	ldr	r3, [pc, #236]	; (80088d0 <pbuf_alloc+0x1b4>)
 80087e4:	f44f 72a9 	mov.w	r2, #338	; 0x152
 80087e8:	493e      	ldr	r1, [pc, #248]	; (80088e4 <pbuf_alloc+0x1c8>)
 80087ea:	483b      	ldr	r0, [pc, #236]	; (80088d8 <pbuf_alloc+0x1bc>)
 80087ec:	f005 f9ed 	bl	800dbca <iprintf>
 80087f0:	e024      	b.n	800883c <pbuf_alloc+0x120>
      q->ref = 1;
 80087f2:	2301      	movs	r3, #1
 80087f4:	81e3      	strh	r3, [r4, #14]
      rem_len -= q->len;
 80087f6:	8963      	ldrh	r3, [r4, #10]
 80087f8:	1aed      	subs	r5, r5, r3
      r = q;
 80087fa:	46a1      	mov	r9, r4
    while (rem_len > 0) {
 80087fc:	2d00      	cmp	r5, #0
 80087fe:	dd55      	ble.n	80088ac <pbuf_alloc+0x190>
      q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 8008800:	200c      	movs	r0, #12
 8008802:	f7ff fd2f 	bl	8008264 <memp_malloc>
      if (q == NULL) {
 8008806:	4604      	mov	r4, r0
 8008808:	2800      	cmp	r0, #0
 800880a:	d0db      	beq.n	80087c4 <pbuf_alloc+0xa8>
      q->type = type;
 800880c:	7307      	strb	r7, [r0, #12]
      q->flags = 0;
 800880e:	2300      	movs	r3, #0
 8008810:	7343      	strb	r3, [r0, #13]
      q->next = NULL;
 8008812:	6003      	str	r3, [r0, #0]
      r->next = q;
 8008814:	f8c9 0000 	str.w	r0, [r9]
      LWIP_ASSERT("rem_len < max_u16_t", rem_len < 0xffff);
 8008818:	f64f 73fe 	movw	r3, #65534	; 0xfffe
 800881c:	429d      	cmp	r5, r3
 800881e:	dcd8      	bgt.n	80087d2 <pbuf_alloc+0xb6>
      q->tot_len = (u16_t)rem_len;
 8008820:	b2ab      	uxth	r3, r5
 8008822:	8123      	strh	r3, [r4, #8]
      q->len = LWIP_MIN((u16_t)rem_len, PBUF_POOL_BUFSIZE_ALIGNED);
 8008824:	f5b3 7f14 	cmp.w	r3, #592	; 0x250
 8008828:	bf28      	it	cs
 800882a:	f44f 7314 	movcs.w	r3, #592	; 0x250
 800882e:	8163      	strh	r3, [r4, #10]
      q->payload = (void *)((u8_t *)q + SIZEOF_STRUCT_PBUF);
 8008830:	f104 0310 	add.w	r3, r4, #16
 8008834:	6063      	str	r3, [r4, #4]
      LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 8008836:	f013 0f03 	tst.w	r3, #3
 800883a:	d1d2      	bne.n	80087e2 <pbuf_alloc+0xc6>
      LWIP_ASSERT("check p->payload + p->len does not overflow pbuf",
 800883c:	6873      	ldr	r3, [r6, #4]
 800883e:	8972      	ldrh	r2, [r6, #10]
 8008840:	4413      	add	r3, r2
 8008842:	4598      	cmp	r8, r3
 8008844:	d2d5      	bcs.n	80087f2 <pbuf_alloc+0xd6>
 8008846:	4b22      	ldr	r3, [pc, #136]	; (80088d0 <pbuf_alloc+0x1b4>)
 8008848:	f240 1255 	movw	r2, #341	; 0x155
 800884c:	4923      	ldr	r1, [pc, #140]	; (80088dc <pbuf_alloc+0x1c0>)
 800884e:	4822      	ldr	r0, [pc, #136]	; (80088d8 <pbuf_alloc+0x1bc>)
 8008850:	f005 f9bb 	bl	800dbca <iprintf>
 8008854:	e7cd      	b.n	80087f2 <pbuf_alloc+0xd6>
      mem_size_t alloc_len = LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF + offset) + LWIP_MEM_ALIGN_SIZE(length);
 8008856:	f104 0013 	add.w	r0, r4, #19
 800885a:	f020 0003 	bic.w	r0, r0, #3
 800885e:	b283      	uxth	r3, r0
 8008860:	1cea      	adds	r2, r5, #3
 8008862:	b290      	uxth	r0, r2
 8008864:	f020 0003 	bic.w	r0, r0, #3
 8008868:	4418      	add	r0, r3
 800886a:	b280      	uxth	r0, r0
      if (alloc_len < LWIP_MEM_ALIGN_SIZE(length)) {
 800886c:	f022 0203 	bic.w	r2, r2, #3
 8008870:	4290      	cmp	r0, r2
 8008872:	d32b      	bcc.n	80088cc <pbuf_alloc+0x1b0>
      p = (struct pbuf*)mem_malloc(alloc_len);
 8008874:	f7ff fbe6 	bl	8008044 <mem_malloc>
    if (p == NULL) {
 8008878:	4606      	mov	r6, r0
 800887a:	b1d8      	cbz	r0, 80088b4 <pbuf_alloc+0x198>
    p->payload = LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset));
 800887c:	f104 0310 	add.w	r3, r4, #16
 8008880:	4403      	add	r3, r0
 8008882:	3303      	adds	r3, #3
 8008884:	f023 0303 	bic.w	r3, r3, #3
 8008888:	6043      	str	r3, [r0, #4]
    p->len = p->tot_len = length;
 800888a:	8105      	strh	r5, [r0, #8]
 800888c:	8145      	strh	r5, [r0, #10]
    p->next = NULL;
 800888e:	2300      	movs	r3, #0
 8008890:	6003      	str	r3, [r0, #0]
    p->type = type;
 8008892:	7307      	strb	r7, [r0, #12]
 8008894:	e00a      	b.n	80088ac <pbuf_alloc+0x190>
    p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 8008896:	200b      	movs	r0, #11
 8008898:	f7ff fce4 	bl	8008264 <memp_malloc>
    if (p == NULL) {
 800889c:	4606      	mov	r6, r0
 800889e:	b148      	cbz	r0, 80088b4 <pbuf_alloc+0x198>
    p->payload = NULL;
 80088a0:	2300      	movs	r3, #0
 80088a2:	6043      	str	r3, [r0, #4]
    p->len = p->tot_len = length;
 80088a4:	8105      	strh	r5, [r0, #8]
 80088a6:	8145      	strh	r5, [r0, #10]
    p->next = NULL;
 80088a8:	6003      	str	r3, [r0, #0]
    p->type = type;
 80088aa:	7307      	strb	r7, [r0, #12]
  p->ref = 1;
 80088ac:	2301      	movs	r3, #1
 80088ae:	81f3      	strh	r3, [r6, #14]
  p->flags = 0;
 80088b0:	2300      	movs	r3, #0
 80088b2:	7373      	strb	r3, [r6, #13]
}
 80088b4:	4630      	mov	r0, r6
 80088b6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 80088ba:	4b05      	ldr	r3, [pc, #20]	; (80088d0 <pbuf_alloc+0x1b4>)
 80088bc:	f44f 72c6 	mov.w	r2, #396	; 0x18c
 80088c0:	4909      	ldr	r1, [pc, #36]	; (80088e8 <pbuf_alloc+0x1cc>)
 80088c2:	4805      	ldr	r0, [pc, #20]	; (80088d8 <pbuf_alloc+0x1bc>)
 80088c4:	f005 f981 	bl	800dbca <iprintf>
    return NULL;
 80088c8:	2600      	movs	r6, #0
 80088ca:	e7f3      	b.n	80088b4 <pbuf_alloc+0x198>
        return NULL;
 80088cc:	2600      	movs	r6, #0
 80088ce:	e7f1      	b.n	80088b4 <pbuf_alloc+0x198>
 80088d0:	0800f7c0 	.word	0x0800f7c0
 80088d4:	0800f508 	.word	0x0800f508
 80088d8:	0800e3b0 	.word	0x0800e3b0
 80088dc:	0800f524 	.word	0x0800f524
 80088e0:	0800f58c 	.word	0x0800f58c
 80088e4:	0800f5a0 	.word	0x0800f5a0
 80088e8:	0800f5d0 	.word	0x0800f5d0

080088ec <pbuf_realloc>:
{
 80088ec:	b570      	push	{r4, r5, r6, lr}
 80088ee:	460d      	mov	r5, r1
  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 80088f0:	4604      	mov	r4, r0
 80088f2:	b198      	cbz	r0, 800891c <pbuf_realloc+0x30>
  LWIP_ASSERT("pbuf_realloc: sane p->type", p->type == PBUF_POOL ||
 80088f4:	7b23      	ldrb	r3, [r4, #12]
 80088f6:	2b03      	cmp	r3, #3
 80088f8:	d00b      	beq.n	8008912 <pbuf_realloc+0x26>
 80088fa:	2b01      	cmp	r3, #1
 80088fc:	d009      	beq.n	8008912 <pbuf_realloc+0x26>
 80088fe:	b143      	cbz	r3, 8008912 <pbuf_realloc+0x26>
 8008900:	2b02      	cmp	r3, #2
 8008902:	d006      	beq.n	8008912 <pbuf_realloc+0x26>
 8008904:	4b2b      	ldr	r3, [pc, #172]	; (80089b4 <pbuf_realloc+0xc8>)
 8008906:	f240 12f7 	movw	r2, #503	; 0x1f7
 800890a:	492b      	ldr	r1, [pc, #172]	; (80089b8 <pbuf_realloc+0xcc>)
 800890c:	482b      	ldr	r0, [pc, #172]	; (80089bc <pbuf_realloc+0xd0>)
 800890e:	f005 f95c 	bl	800dbca <iprintf>
  if (new_len >= p->tot_len) {
 8008912:	8926      	ldrh	r6, [r4, #8]
 8008914:	42ae      	cmp	r6, r5
 8008916:	d938      	bls.n	800898a <pbuf_realloc+0x9e>
  grow = new_len - p->tot_len;
 8008918:	1bae      	subs	r6, r5, r6
  while (rem_len > q->len) {
 800891a:	e00d      	b.n	8008938 <pbuf_realloc+0x4c>
  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 800891c:	4b25      	ldr	r3, [pc, #148]	; (80089b4 <pbuf_realloc+0xc8>)
 800891e:	f240 12f3 	movw	r2, #499	; 0x1f3
 8008922:	4927      	ldr	r1, [pc, #156]	; (80089c0 <pbuf_realloc+0xd4>)
 8008924:	4825      	ldr	r0, [pc, #148]	; (80089bc <pbuf_realloc+0xd0>)
 8008926:	f005 f950 	bl	800dbca <iprintf>
 800892a:	e7e3      	b.n	80088f4 <pbuf_realloc+0x8>
    q->tot_len += (u16_t)grow;
 800892c:	8923      	ldrh	r3, [r4, #8]
 800892e:	fa13 f386 	uxtah	r3, r3, r6
 8008932:	8123      	strh	r3, [r4, #8]
    q = q->next;
 8008934:	6824      	ldr	r4, [r4, #0]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 8008936:	b184      	cbz	r4, 800895a <pbuf_realloc+0x6e>
  while (rem_len > q->len) {
 8008938:	8961      	ldrh	r1, [r4, #10]
 800893a:	428d      	cmp	r5, r1
 800893c:	d915      	bls.n	800896a <pbuf_realloc+0x7e>
    rem_len -= q->len;
 800893e:	1a69      	subs	r1, r5, r1
 8008940:	b28d      	uxth	r5, r1
    LWIP_ASSERT("grow < max_u16_t", grow < 0xffff);
 8008942:	f64f 73fe 	movw	r3, #65534	; 0xfffe
 8008946:	429e      	cmp	r6, r3
 8008948:	ddf0      	ble.n	800892c <pbuf_realloc+0x40>
 800894a:	4b1a      	ldr	r3, [pc, #104]	; (80089b4 <pbuf_realloc+0xc8>)
 800894c:	f240 220b 	movw	r2, #523	; 0x20b
 8008950:	491c      	ldr	r1, [pc, #112]	; (80089c4 <pbuf_realloc+0xd8>)
 8008952:	481a      	ldr	r0, [pc, #104]	; (80089bc <pbuf_realloc+0xd0>)
 8008954:	f005 f939 	bl	800dbca <iprintf>
 8008958:	e7e8      	b.n	800892c <pbuf_realloc+0x40>
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 800895a:	4b16      	ldr	r3, [pc, #88]	; (80089b4 <pbuf_realloc+0xc8>)
 800895c:	f240 220f 	movw	r2, #527	; 0x20f
 8008960:	4919      	ldr	r1, [pc, #100]	; (80089c8 <pbuf_realloc+0xdc>)
 8008962:	4816      	ldr	r0, [pc, #88]	; (80089bc <pbuf_realloc+0xd0>)
 8008964:	f005 f931 	bl	800dbca <iprintf>
 8008968:	e7e6      	b.n	8008938 <pbuf_realloc+0x4c>
  if ((q->type == PBUF_RAM) && (rem_len != q->len)
 800896a:	7b23      	ldrb	r3, [r4, #12]
 800896c:	b92b      	cbnz	r3, 800897a <pbuf_realloc+0x8e>
 800896e:	428d      	cmp	r5, r1
 8008970:	d003      	beq.n	800897a <pbuf_realloc+0x8e>
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 8008972:	7b63      	ldrb	r3, [r4, #13]
 8008974:	f013 0f02 	tst.w	r3, #2
 8008978:	d008      	beq.n	800898c <pbuf_realloc+0xa0>
  q->len = rem_len;
 800897a:	8165      	strh	r5, [r4, #10]
  q->tot_len = q->len;
 800897c:	8125      	strh	r5, [r4, #8]
  if (q->next != NULL) {
 800897e:	6820      	ldr	r0, [r4, #0]
 8008980:	b108      	cbz	r0, 8008986 <pbuf_realloc+0x9a>
    pbuf_free(q->next);
 8008982:	f7ff fe5f 	bl	8008644 <pbuf_free>
  q->next = NULL;
 8008986:	2300      	movs	r3, #0
 8008988:	6023      	str	r3, [r4, #0]
 800898a:	bd70      	pop	{r4, r5, r6, pc}
    q = (struct pbuf *)mem_trim(q, (u16_t)((u8_t *)q->payload - (u8_t *)q) + rem_len);
 800898c:	6863      	ldr	r3, [r4, #4]
 800898e:	1b1b      	subs	r3, r3, r4
 8008990:	fa15 f183 	uxtah	r1, r5, r3
 8008994:	b289      	uxth	r1, r1
 8008996:	4620      	mov	r0, r4
 8008998:	f7ff fab8 	bl	8007f0c <mem_trim>
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 800899c:	4604      	mov	r4, r0
 800899e:	2800      	cmp	r0, #0
 80089a0:	d1eb      	bne.n	800897a <pbuf_realloc+0x8e>
 80089a2:	4b04      	ldr	r3, [pc, #16]	; (80089b4 <pbuf_realloc+0xc8>)
 80089a4:	f240 221d 	movw	r2, #541	; 0x21d
 80089a8:	4908      	ldr	r1, [pc, #32]	; (80089cc <pbuf_realloc+0xe0>)
 80089aa:	4804      	ldr	r0, [pc, #16]	; (80089bc <pbuf_realloc+0xd0>)
 80089ac:	f005 f90d 	bl	800dbca <iprintf>
 80089b0:	e7e3      	b.n	800897a <pbuf_realloc+0x8e>
 80089b2:	bf00      	nop
 80089b4:	0800f7c0 	.word	0x0800f7c0
 80089b8:	0800f838 	.word	0x0800f838
 80089bc:	0800e3b0 	.word	0x0800e3b0
 80089c0:	0800f820 	.word	0x0800f820
 80089c4:	0800f854 	.word	0x0800f854
 80089c8:	0800f868 	.word	0x0800f868
 80089cc:	0800f880 	.word	0x0800f880

080089d0 <pbuf_clen>:
u16_t
pbuf_clen(const struct pbuf *p)
{
  u16_t len;

  len = 0;
 80089d0:	2300      	movs	r3, #0
  while (p != NULL) {
 80089d2:	e002      	b.n	80089da <pbuf_clen+0xa>
    ++len;
 80089d4:	3301      	adds	r3, #1
 80089d6:	b29b      	uxth	r3, r3
    p = p->next;
 80089d8:	6800      	ldr	r0, [r0, #0]
  while (p != NULL) {
 80089da:	2800      	cmp	r0, #0
 80089dc:	d1fa      	bne.n	80089d4 <pbuf_clen+0x4>
  }
  return len;
}
 80089de:	4618      	mov	r0, r3
 80089e0:	4770      	bx	lr
	...

080089e4 <pbuf_ref>:
 */
void
pbuf_ref(struct pbuf *p)
{
  /* pbuf given? */
  if (p != NULL) {
 80089e4:	b198      	cbz	r0, 8008a0e <pbuf_ref+0x2a>
{
 80089e6:	b510      	push	{r4, lr}
 80089e8:	4604      	mov	r4, r0
    SYS_ARCH_INC(p->ref, 1);
 80089ea:	f004 fa47 	bl	800ce7c <sys_arch_protect>
 80089ee:	89e3      	ldrh	r3, [r4, #14]
 80089f0:	3301      	adds	r3, #1
 80089f2:	81e3      	strh	r3, [r4, #14]
 80089f4:	f004 fa4e 	bl	800ce94 <sys_arch_unprotect>
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 80089f8:	89e3      	ldrh	r3, [r4, #14]
 80089fa:	b103      	cbz	r3, 80089fe <pbuf_ref+0x1a>
 80089fc:	bd10      	pop	{r4, pc}
 80089fe:	4b04      	ldr	r3, [pc, #16]	; (8008a10 <pbuf_ref+0x2c>)
 8008a00:	f240 3239 	movw	r2, #825	; 0x339
 8008a04:	4903      	ldr	r1, [pc, #12]	; (8008a14 <pbuf_ref+0x30>)
 8008a06:	4804      	ldr	r0, [pc, #16]	; (8008a18 <pbuf_ref+0x34>)
 8008a08:	f005 f8df 	bl	800dbca <iprintf>
  }
}
 8008a0c:	e7f6      	b.n	80089fc <pbuf_ref+0x18>
 8008a0e:	4770      	bx	lr
 8008a10:	0800f7c0 	.word	0x0800f7c0
 8008a14:	0800f89c 	.word	0x0800f89c
 8008a18:	0800e3b0 	.word	0x0800e3b0

08008a1c <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 8008a1c:	b538      	push	{r3, r4, r5, lr}
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 8008a1e:	b110      	cbz	r0, 8008a26 <pbuf_cat+0xa>
 8008a20:	460d      	mov	r5, r1
 8008a22:	4604      	mov	r4, r0
 8008a24:	b961      	cbnz	r1, 8008a40 <pbuf_cat+0x24>
 8008a26:	4b15      	ldr	r3, [pc, #84]	; (8008a7c <pbuf_cat+0x60>)
 8008a28:	f240 324d 	movw	r2, #845	; 0x34d
 8008a2c:	4914      	ldr	r1, [pc, #80]	; (8008a80 <pbuf_cat+0x64>)
 8008a2e:	4815      	ldr	r0, [pc, #84]	; (8008a84 <pbuf_cat+0x68>)
 8008a30:	f005 f8cb 	bl	800dbca <iprintf>
 8008a34:	bd38      	pop	{r3, r4, r5, pc}
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
    /* add total length of second chain to all totals of first chain */
    p->tot_len += t->tot_len;
 8008a36:	892b      	ldrh	r3, [r5, #8]
 8008a38:	8921      	ldrh	r1, [r4, #8]
 8008a3a:	440b      	add	r3, r1
 8008a3c:	8123      	strh	r3, [r4, #8]
  for (p = h; p->next != NULL; p = p->next) {
 8008a3e:	4614      	mov	r4, r2
 8008a40:	6822      	ldr	r2, [r4, #0]
 8008a42:	2a00      	cmp	r2, #0
 8008a44:	d1f7      	bne.n	8008a36 <pbuf_cat+0x1a>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 8008a46:	8922      	ldrh	r2, [r4, #8]
 8008a48:	8963      	ldrh	r3, [r4, #10]
 8008a4a:	429a      	cmp	r2, r3
 8008a4c:	d006      	beq.n	8008a5c <pbuf_cat+0x40>
 8008a4e:	4b0b      	ldr	r3, [pc, #44]	; (8008a7c <pbuf_cat+0x60>)
 8008a50:	f240 3255 	movw	r2, #853	; 0x355
 8008a54:	490c      	ldr	r1, [pc, #48]	; (8008a88 <pbuf_cat+0x6c>)
 8008a56:	480b      	ldr	r0, [pc, #44]	; (8008a84 <pbuf_cat+0x68>)
 8008a58:	f005 f8b7 	bl	800dbca <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 8008a5c:	6823      	ldr	r3, [r4, #0]
 8008a5e:	b133      	cbz	r3, 8008a6e <pbuf_cat+0x52>
 8008a60:	4b06      	ldr	r3, [pc, #24]	; (8008a7c <pbuf_cat+0x60>)
 8008a62:	f240 3256 	movw	r2, #854	; 0x356
 8008a66:	4909      	ldr	r1, [pc, #36]	; (8008a8c <pbuf_cat+0x70>)
 8008a68:	4806      	ldr	r0, [pc, #24]	; (8008a84 <pbuf_cat+0x68>)
 8008a6a:	f005 f8ae 	bl	800dbca <iprintf>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len += t->tot_len;
 8008a6e:	892b      	ldrh	r3, [r5, #8]
 8008a70:	8922      	ldrh	r2, [r4, #8]
 8008a72:	4413      	add	r3, r2
 8008a74:	8123      	strh	r3, [r4, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 8008a76:	6025      	str	r5, [r4, #0]
 8008a78:	bd38      	pop	{r3, r4, r5, pc}
 8008a7a:	bf00      	nop
 8008a7c:	0800f7c0 	.word	0x0800f7c0
 8008a80:	0800f610 	.word	0x0800f610
 8008a84:	0800e3b0 	.word	0x0800e3b0
 8008a88:	0800f648 	.word	0x0800f648
 8008a8c:	0800f678 	.word	0x0800f678

08008a90 <pbuf_chain>:
 * The ->ref field of the first pbuf of the tail chain is adjusted.
 *
 */
void
pbuf_chain(struct pbuf *h, struct pbuf *t)
{
 8008a90:	b510      	push	{r4, lr}
 8008a92:	460c      	mov	r4, r1
  pbuf_cat(h, t);
 8008a94:	f7ff ffc2 	bl	8008a1c <pbuf_cat>
  /* t is now referenced by h */
  pbuf_ref(t);
 8008a98:	4620      	mov	r0, r4
 8008a9a:	f7ff ffa3 	bl	80089e4 <pbuf_ref>
 8008a9e:	bd10      	pop	{r4, pc}

08008aa0 <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 8008aa0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
    (const void*)p_to, (const void*)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 8008aa4:	b150      	cbz	r0, 8008abc <pbuf_copy+0x1c>
 8008aa6:	460d      	mov	r5, r1
 8008aa8:	4607      	mov	r7, r0
 8008aaa:	b139      	cbz	r1, 8008abc <pbuf_copy+0x1c>
 8008aac:	8902      	ldrh	r2, [r0, #8]
 8008aae:	890b      	ldrh	r3, [r1, #8]
 8008ab0:	429a      	cmp	r2, r3
 8008ab2:	d303      	bcc.n	8008abc <pbuf_copy+0x1c>
 8008ab4:	f04f 0800 	mov.w	r8, #0
 8008ab8:	4646      	mov	r6, r8
 8008aba:	e02c      	b.n	8008b16 <pbuf_copy+0x76>
 8008abc:	4b3f      	ldr	r3, [pc, #252]	; (8008bbc <pbuf_copy+0x11c>)
 8008abe:	f240 32bd 	movw	r2, #957	; 0x3bd
 8008ac2:	493f      	ldr	r1, [pc, #252]	; (8008bc0 <pbuf_copy+0x120>)
 8008ac4:	483f      	ldr	r0, [pc, #252]	; (8008bc4 <pbuf_copy+0x124>)
 8008ac6:	f005 f880 	bl	800dbca <iprintf>
 8008aca:	f06f 000f 	mvn.w	r0, #15
 8008ace:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 8008ad2:	1b9b      	subs	r3, r3, r6
 8008ad4:	b29c      	uxth	r4, r3
 8008ad6:	e026      	b.n	8008b26 <pbuf_copy+0x86>
    }
    MEMCPY((u8_t*)p_to->payload + offset_to, (u8_t*)p_from->payload + offset_from, len);
    offset_to += len;
    offset_from += len;
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 8008ad8:	4b38      	ldr	r3, [pc, #224]	; (8008bbc <pbuf_copy+0x11c>)
 8008ada:	f240 32cd 	movw	r2, #973	; 0x3cd
 8008ade:	493a      	ldr	r1, [pc, #232]	; (8008bc8 <pbuf_copy+0x128>)
 8008ae0:	4838      	ldr	r0, [pc, #224]	; (8008bc4 <pbuf_copy+0x124>)
 8008ae2:	f005 f872 	bl	800dbca <iprintf>
 8008ae6:	e02d      	b.n	8008b44 <pbuf_copy+0xa4>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 8008ae8:	4b34      	ldr	r3, [pc, #208]	; (8008bbc <pbuf_copy+0x11c>)
 8008aea:	f240 32ce 	movw	r2, #974	; 0x3ce
 8008aee:	4937      	ldr	r1, [pc, #220]	; (8008bcc <pbuf_copy+0x12c>)
 8008af0:	4834      	ldr	r0, [pc, #208]	; (8008bc4 <pbuf_copy+0x124>)
 8008af2:	f005 f86a 	bl	800dbca <iprintf>
 8008af6:	e028      	b.n	8008b4a <pbuf_copy+0xaa>
    if (offset_from >= p_from->len) {
      /* on to next p_from (if any) */
      offset_from = 0;
      p_from = p_from->next;
    }
    if (offset_to == p_to->len) {
 8008af8:	897b      	ldrh	r3, [r7, #10]
 8008afa:	429e      	cmp	r6, r3
 8008afc:	d02c      	beq.n	8008b58 <pbuf_copy+0xb8>
      offset_to = 0;
      p_to = p_to->next;
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL) , return ERR_ARG;);
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 8008afe:	b11d      	cbz	r5, 8008b08 <pbuf_copy+0x68>
 8008b00:	896a      	ldrh	r2, [r5, #10]
 8008b02:	892b      	ldrh	r3, [r5, #8]
 8008b04:	429a      	cmp	r2, r3
 8008b06:	d039      	beq.n	8008b7c <pbuf_copy+0xdc>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 8008b08:	b11f      	cbz	r7, 8008b12 <pbuf_copy+0x72>
 8008b0a:	897a      	ldrh	r2, [r7, #10]
 8008b0c:	893b      	ldrh	r3, [r7, #8]
 8008b0e:	429a      	cmp	r2, r3
 8008b10:	d042      	beq.n	8008b98 <pbuf_copy+0xf8>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
                  (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 8008b12:	2d00      	cmp	r5, #0
 8008b14:	d04e      	beq.n	8008bb4 <pbuf_copy+0x114>
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 8008b16:	897b      	ldrh	r3, [r7, #10]
 8008b18:	1b99      	subs	r1, r3, r6
 8008b1a:	896c      	ldrh	r4, [r5, #10]
 8008b1c:	eba4 0208 	sub.w	r2, r4, r8
 8008b20:	4291      	cmp	r1, r2
 8008b22:	dbd6      	blt.n	8008ad2 <pbuf_copy+0x32>
      len = p_from->len - offset_from;
 8008b24:	b294      	uxth	r4, r2
    MEMCPY((u8_t*)p_to->payload + offset_to, (u8_t*)p_from->payload + offset_from, len);
 8008b26:	6878      	ldr	r0, [r7, #4]
 8008b28:	6869      	ldr	r1, [r5, #4]
 8008b2a:	4622      	mov	r2, r4
 8008b2c:	4441      	add	r1, r8
 8008b2e:	4430      	add	r0, r6
 8008b30:	f005 f9b7 	bl	800dea2 <memcpy>
    offset_to += len;
 8008b34:	4426      	add	r6, r4
 8008b36:	b2b6      	uxth	r6, r6
    offset_from += len;
 8008b38:	4444      	add	r4, r8
 8008b3a:	fa1f f884 	uxth.w	r8, r4
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 8008b3e:	897b      	ldrh	r3, [r7, #10]
 8008b40:	429e      	cmp	r6, r3
 8008b42:	d8c9      	bhi.n	8008ad8 <pbuf_copy+0x38>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 8008b44:	896b      	ldrh	r3, [r5, #10]
 8008b46:	4598      	cmp	r8, r3
 8008b48:	d8ce      	bhi.n	8008ae8 <pbuf_copy+0x48>
    if (offset_from >= p_from->len) {
 8008b4a:	896b      	ldrh	r3, [r5, #10]
 8008b4c:	4598      	cmp	r8, r3
 8008b4e:	d3d3      	bcc.n	8008af8 <pbuf_copy+0x58>
      p_from = p_from->next;
 8008b50:	682d      	ldr	r5, [r5, #0]
      offset_from = 0;
 8008b52:	f04f 0800 	mov.w	r8, #0
 8008b56:	e7cf      	b.n	8008af8 <pbuf_copy+0x58>
      p_to = p_to->next;
 8008b58:	683f      	ldr	r7, [r7, #0]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL) , return ERR_ARG;);
 8008b5a:	b10f      	cbz	r7, 8008b60 <pbuf_copy+0xc0>
      offset_to = 0;
 8008b5c:	2600      	movs	r6, #0
 8008b5e:	e7ce      	b.n	8008afe <pbuf_copy+0x5e>
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL) , return ERR_ARG;);
 8008b60:	b90d      	cbnz	r5, 8008b66 <pbuf_copy+0xc6>
      offset_to = 0;
 8008b62:	2600      	movs	r6, #0
 8008b64:	e7cb      	b.n	8008afe <pbuf_copy+0x5e>
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL) , return ERR_ARG;);
 8008b66:	4b15      	ldr	r3, [pc, #84]	; (8008bbc <pbuf_copy+0x11c>)
 8008b68:	f44f 7276 	mov.w	r2, #984	; 0x3d8
 8008b6c:	4918      	ldr	r1, [pc, #96]	; (8008bd0 <pbuf_copy+0x130>)
 8008b6e:	4815      	ldr	r0, [pc, #84]	; (8008bc4 <pbuf_copy+0x124>)
 8008b70:	f005 f82b 	bl	800dbca <iprintf>
 8008b74:	f06f 000f 	mvn.w	r0, #15
 8008b78:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 8008b7c:	682b      	ldr	r3, [r5, #0]
 8008b7e:	2b00      	cmp	r3, #0
 8008b80:	d0c2      	beq.n	8008b08 <pbuf_copy+0x68>
 8008b82:	4b0e      	ldr	r3, [pc, #56]	; (8008bbc <pbuf_copy+0x11c>)
 8008b84:	f240 32de 	movw	r2, #990	; 0x3de
 8008b88:	4912      	ldr	r1, [pc, #72]	; (8008bd4 <pbuf_copy+0x134>)
 8008b8a:	480e      	ldr	r0, [pc, #56]	; (8008bc4 <pbuf_copy+0x124>)
 8008b8c:	f005 f81d 	bl	800dbca <iprintf>
 8008b90:	f06f 0005 	mvn.w	r0, #5
 8008b94:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 8008b98:	683b      	ldr	r3, [r7, #0]
 8008b9a:	2b00      	cmp	r3, #0
 8008b9c:	d0b9      	beq.n	8008b12 <pbuf_copy+0x72>
 8008b9e:	4b07      	ldr	r3, [pc, #28]	; (8008bbc <pbuf_copy+0x11c>)
 8008ba0:	f240 32e3 	movw	r2, #995	; 0x3e3
 8008ba4:	490b      	ldr	r1, [pc, #44]	; (8008bd4 <pbuf_copy+0x134>)
 8008ba6:	4807      	ldr	r0, [pc, #28]	; (8008bc4 <pbuf_copy+0x124>)
 8008ba8:	f005 f80f 	bl	800dbca <iprintf>
 8008bac:	f06f 0005 	mvn.w	r0, #5
 8008bb0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 8008bb4:	2000      	movs	r0, #0
}
 8008bb6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008bba:	bf00      	nop
 8008bbc:	0800f7c0 	.word	0x0800f7c0
 8008bc0:	0800f688 	.word	0x0800f688
 8008bc4:	0800e3b0 	.word	0x0800e3b0
 8008bc8:	0800f6b8 	.word	0x0800f6b8
 8008bcc:	0800f6d0 	.word	0x0800f6d0
 8008bd0:	0800f6ec 	.word	0x0800f6ec
 8008bd4:	0800f6fc 	.word	0x0800f6fc

08008bd8 <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 8008bd8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  const struct pbuf *p;
  u16_t left;
  u16_t buf_copy_len;
  u16_t copied_total = 0;

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 8008bdc:	b128      	cbz	r0, 8008bea <pbuf_copy_partial+0x12>
 8008bde:	460f      	mov	r7, r1
 8008be0:	4690      	mov	r8, r2
 8008be2:	4605      	mov	r5, r0
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 8008be4:	b161      	cbz	r1, 8008c00 <pbuf_copy_partial+0x28>
 8008be6:	2600      	movs	r6, #0
 8008be8:	e027      	b.n	8008c3a <pbuf_copy_partial+0x62>
  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 8008bea:	4b1a      	ldr	r3, [pc, #104]	; (8008c54 <pbuf_copy_partial+0x7c>)
 8008bec:	f240 32fe 	movw	r2, #1022	; 0x3fe
 8008bf0:	4919      	ldr	r1, [pc, #100]	; (8008c58 <pbuf_copy_partial+0x80>)
 8008bf2:	481a      	ldr	r0, [pc, #104]	; (8008c5c <pbuf_copy_partial+0x84>)
 8008bf4:	f004 ffe9 	bl	800dbca <iprintf>
 8008bf8:	2600      	movs	r6, #0
      len -= buf_copy_len;
      offset = 0;
    }
  }
  return copied_total;
}
 8008bfa:	4630      	mov	r0, r6
 8008bfc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 8008c00:	4b14      	ldr	r3, [pc, #80]	; (8008c54 <pbuf_copy_partial+0x7c>)
 8008c02:	f240 32ff 	movw	r2, #1023	; 0x3ff
 8008c06:	4916      	ldr	r1, [pc, #88]	; (8008c60 <pbuf_copy_partial+0x88>)
 8008c08:	4814      	ldr	r0, [pc, #80]	; (8008c5c <pbuf_copy_partial+0x84>)
 8008c0a:	f004 ffde 	bl	800dbca <iprintf>
 8008c0e:	2600      	movs	r6, #0
 8008c10:	e7f3      	b.n	8008bfa <pbuf_copy_partial+0x22>
      buf_copy_len = p->len - offset;
 8008c12:	896a      	ldrh	r2, [r5, #10]
 8008c14:	1ad2      	subs	r2, r2, r3
 8008c16:	b294      	uxth	r4, r2
      if (buf_copy_len > len) {
 8008c18:	45a0      	cmp	r8, r4
 8008c1a:	d200      	bcs.n	8008c1e <pbuf_copy_partial+0x46>
        buf_copy_len = len;
 8008c1c:	4644      	mov	r4, r8
      MEMCPY(&((char*)dataptr)[left], &((char*)p->payload)[offset], buf_copy_len);
 8008c1e:	6869      	ldr	r1, [r5, #4]
 8008c20:	4622      	mov	r2, r4
 8008c22:	4419      	add	r1, r3
 8008c24:	19b8      	adds	r0, r7, r6
 8008c26:	f005 f93c 	bl	800dea2 <memcpy>
      copied_total += buf_copy_len;
 8008c2a:	4426      	add	r6, r4
 8008c2c:	b2b6      	uxth	r6, r6
      len -= buf_copy_len;
 8008c2e:	eba8 0404 	sub.w	r4, r8, r4
 8008c32:	fa1f f884 	uxth.w	r8, r4
      offset = 0;
 8008c36:	2300      	movs	r3, #0
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 8008c38:	682d      	ldr	r5, [r5, #0]
 8008c3a:	f1b8 0f00 	cmp.w	r8, #0
 8008c3e:	d0dc      	beq.n	8008bfa <pbuf_copy_partial+0x22>
 8008c40:	2d00      	cmp	r5, #0
 8008c42:	d0da      	beq.n	8008bfa <pbuf_copy_partial+0x22>
    if ((offset != 0) && (offset >= p->len)) {
 8008c44:	2b00      	cmp	r3, #0
 8008c46:	d0e4      	beq.n	8008c12 <pbuf_copy_partial+0x3a>
 8008c48:	8969      	ldrh	r1, [r5, #10]
 8008c4a:	428b      	cmp	r3, r1
 8008c4c:	d3e1      	bcc.n	8008c12 <pbuf_copy_partial+0x3a>
      offset -= p->len;
 8008c4e:	1a5b      	subs	r3, r3, r1
 8008c50:	b29b      	uxth	r3, r3
 8008c52:	e7f1      	b.n	8008c38 <pbuf_copy_partial+0x60>
 8008c54:	0800f7c0 	.word	0x0800f7c0
 8008c58:	0800f728 	.word	0x0800f728
 8008c5c:	0800e3b0 	.word	0x0800e3b0
 8008c60:	0800f748 	.word	0x0800f748

08008c64 <tcp_remove_listener>:
 */
static void
tcp_remove_listener(struct tcp_pcb *list, struct tcp_pcb_listen *lpcb)
{
   struct tcp_pcb *pcb;
   for (pcb = list; pcb != NULL; pcb = pcb->next) {
 8008c64:	e000      	b.n	8008c68 <tcp_remove_listener+0x4>
 8008c66:	68c0      	ldr	r0, [r0, #12]
 8008c68:	b128      	cbz	r0, 8008c76 <tcp_remove_listener+0x12>
      if (pcb->listener == lpcb) {
 8008c6a:	6f83      	ldr	r3, [r0, #120]	; 0x78
 8008c6c:	428b      	cmp	r3, r1
 8008c6e:	d1fa      	bne.n	8008c66 <tcp_remove_listener+0x2>
         pcb->listener = NULL;
 8008c70:	2300      	movs	r3, #0
 8008c72:	6783      	str	r3, [r0, #120]	; 0x78
 8008c74:	e7f7      	b.n	8008c66 <tcp_remove_listener+0x2>
      }
   }
}
 8008c76:	4770      	bx	lr

08008c78 <tcp_new_port>:
 *
 * @return a new (free) local TCP port number
 */
static u16_t
tcp_new_port(void)
{
 8008c78:	b410      	push	{r4}
  u8_t i;
  u16_t n = 0;
 8008c7a:	2400      	movs	r4, #0
 8008c7c:	e009      	b.n	8008c92 <tcp_new_port+0x1a>
  struct tcp_pcb *pcb;

again:
  if (tcp_port++ == TCP_LOCAL_PORT_RANGE_END) {
    tcp_port = TCP_LOCAL_PORT_RANGE_START;
 8008c7e:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 8008c82:	4b14      	ldr	r3, [pc, #80]	; (8008cd4 <tcp_new_port+0x5c>)
 8008c84:	801a      	strh	r2, [r3, #0]
 8008c86:	e00c      	b.n	8008ca2 <tcp_new_port+0x2a>
  }
  /* Check all PCB lists. */
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
      if (pcb->local_port == tcp_port) {
        if (++n > (TCP_LOCAL_PORT_RANGE_END - TCP_LOCAL_PORT_RANGE_START)) {
 8008c88:	3401      	adds	r4, #1
 8008c8a:	b2a4      	uxth	r4, r4
 8008c8c:	f5b4 4f80 	cmp.w	r4, #16384	; 0x4000
 8008c90:	d21e      	bcs.n	8008cd0 <tcp_new_port+0x58>
  if (tcp_port++ == TCP_LOCAL_PORT_RANGE_END) {
 8008c92:	4a10      	ldr	r2, [pc, #64]	; (8008cd4 <tcp_new_port+0x5c>)
 8008c94:	8813      	ldrh	r3, [r2, #0]
 8008c96:	1c59      	adds	r1, r3, #1
 8008c98:	8011      	strh	r1, [r2, #0]
 8008c9a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8008c9e:	4293      	cmp	r3, r2
 8008ca0:	d0ed      	beq.n	8008c7e <tcp_new_port+0x6>
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 8008ca2:	2000      	movs	r0, #0
 8008ca4:	2803      	cmp	r0, #3
 8008ca6:	d80e      	bhi.n	8008cc6 <tcp_new_port+0x4e>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 8008ca8:	4b0b      	ldr	r3, [pc, #44]	; (8008cd8 <tcp_new_port+0x60>)
 8008caa:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8008cae:	681b      	ldr	r3, [r3, #0]
 8008cb0:	b133      	cbz	r3, 8008cc0 <tcp_new_port+0x48>
      if (pcb->local_port == tcp_port) {
 8008cb2:	8ad9      	ldrh	r1, [r3, #22]
 8008cb4:	4a07      	ldr	r2, [pc, #28]	; (8008cd4 <tcp_new_port+0x5c>)
 8008cb6:	8812      	ldrh	r2, [r2, #0]
 8008cb8:	4291      	cmp	r1, r2
 8008cba:	d0e5      	beq.n	8008c88 <tcp_new_port+0x10>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 8008cbc:	68db      	ldr	r3, [r3, #12]
 8008cbe:	e7f7      	b.n	8008cb0 <tcp_new_port+0x38>
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 8008cc0:	3001      	adds	r0, #1
 8008cc2:	b2c0      	uxtb	r0, r0
 8008cc4:	e7ee      	b.n	8008ca4 <tcp_new_port+0x2c>
        }
        goto again;
      }
    }
  }
  return tcp_port;
 8008cc6:	4b03      	ldr	r3, [pc, #12]	; (8008cd4 <tcp_new_port+0x5c>)
 8008cc8:	8818      	ldrh	r0, [r3, #0]
}
 8008cca:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008cce:	4770      	bx	lr
          return 0;
 8008cd0:	2000      	movs	r0, #0
 8008cd2:	e7fa      	b.n	8008cca <tcp_new_port+0x52>
 8008cd4:	2000000c 	.word	0x2000000c
 8008cd8:	0800f9e8 	.word	0x0800f9e8

08008cdc <tcp_listen_closed>:
{
 8008cdc:	b538      	push	{r3, r4, r5, lr}
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 8008cde:	4605      	mov	r5, r0
 8008ce0:	b150      	cbz	r0, 8008cf8 <tcp_listen_closed+0x1c>
  LWIP_ASSERT("pcb->state == LISTEN", pcb->state == LISTEN);
 8008ce2:	7d2b      	ldrb	r3, [r5, #20]
 8008ce4:	2b01      	cmp	r3, #1
 8008ce6:	d005      	beq.n	8008cf4 <tcp_listen_closed+0x18>
 8008ce8:	4b0c      	ldr	r3, [pc, #48]	; (8008d1c <tcp_listen_closed+0x40>)
 8008cea:	22c1      	movs	r2, #193	; 0xc1
 8008cec:	490c      	ldr	r1, [pc, #48]	; (8008d20 <tcp_listen_closed+0x44>)
 8008cee:	480d      	ldr	r0, [pc, #52]	; (8008d24 <tcp_listen_closed+0x48>)
 8008cf0:	f004 ff6b 	bl	800dbca <iprintf>
{
 8008cf4:	2401      	movs	r4, #1
 8008cf6:	e00e      	b.n	8008d16 <tcp_listen_closed+0x3a>
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 8008cf8:	4b08      	ldr	r3, [pc, #32]	; (8008d1c <tcp_listen_closed+0x40>)
 8008cfa:	22c0      	movs	r2, #192	; 0xc0
 8008cfc:	490a      	ldr	r1, [pc, #40]	; (8008d28 <tcp_listen_closed+0x4c>)
 8008cfe:	4809      	ldr	r0, [pc, #36]	; (8008d24 <tcp_listen_closed+0x48>)
 8008d00:	f004 ff63 	bl	800dbca <iprintf>
 8008d04:	e7ed      	b.n	8008ce2 <tcp_listen_closed+0x6>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen*)pcb);
 8008d06:	4b09      	ldr	r3, [pc, #36]	; (8008d2c <tcp_listen_closed+0x50>)
 8008d08:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 8008d0c:	4629      	mov	r1, r5
 8008d0e:	6818      	ldr	r0, [r3, #0]
 8008d10:	f7ff ffa8 	bl	8008c64 <tcp_remove_listener>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 8008d14:	3401      	adds	r4, #1
 8008d16:	2c03      	cmp	r4, #3
 8008d18:	d9f5      	bls.n	8008d06 <tcp_listen_closed+0x2a>
}
 8008d1a:	bd38      	pop	{r3, r4, r5, pc}
 8008d1c:	0800f970 	.word	0x0800f970
 8008d20:	0800f9ac 	.word	0x0800f9ac
 8008d24:	0800e3b0 	.word	0x0800e3b0
 8008d28:	0800f9a0 	.word	0x0800f9a0
 8008d2c:	0800f9e8 	.word	0x0800f9e8

08008d30 <tcp_close_shutdown_fin>:
{
 8008d30:	b538      	push	{r3, r4, r5, lr}
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 8008d32:	4604      	mov	r4, r0
 8008d34:	b140      	cbz	r0, 8008d48 <tcp_close_shutdown_fin+0x18>
  switch (pcb->state) {
 8008d36:	7d23      	ldrb	r3, [r4, #20]
 8008d38:	2b04      	cmp	r3, #4
 8008d3a:	d01a      	beq.n	8008d72 <tcp_close_shutdown_fin+0x42>
 8008d3c:	2b07      	cmp	r3, #7
 8008d3e:	d021      	beq.n	8008d84 <tcp_close_shutdown_fin+0x54>
 8008d40:	2b03      	cmp	r3, #3
 8008d42:	d009      	beq.n	8008d58 <tcp_close_shutdown_fin+0x28>
    return ERR_OK;
 8008d44:	2500      	movs	r5, #0
 8008d46:	e012      	b.n	8008d6e <tcp_close_shutdown_fin+0x3e>
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 8008d48:	4b18      	ldr	r3, [pc, #96]	; (8008dac <tcp_close_shutdown_fin+0x7c>)
 8008d4a:	f240 124d 	movw	r2, #333	; 0x14d
 8008d4e:	4918      	ldr	r1, [pc, #96]	; (8008db0 <tcp_close_shutdown_fin+0x80>)
 8008d50:	4818      	ldr	r0, [pc, #96]	; (8008db4 <tcp_close_shutdown_fin+0x84>)
 8008d52:	f004 ff3a 	bl	800dbca <iprintf>
 8008d56:	e7ee      	b.n	8008d36 <tcp_close_shutdown_fin+0x6>
    err = tcp_send_fin(pcb);
 8008d58:	4620      	mov	r0, r4
 8008d5a:	f003 f891 	bl	800be80 <tcp_send_fin>
    if (err == ERR_OK) {
 8008d5e:	4605      	mov	r5, r0
 8008d60:	b908      	cbnz	r0, 8008d66 <tcp_close_shutdown_fin+0x36>
      pcb->state = FIN_WAIT_1;
 8008d62:	2305      	movs	r3, #5
 8008d64:	7523      	strb	r3, [r4, #20]
  if (err == ERR_OK) {
 8008d66:	b1b5      	cbz	r5, 8008d96 <tcp_close_shutdown_fin+0x66>
  } else if (err == ERR_MEM) {
 8008d68:	f1b5 3fff 	cmp.w	r5, #4294967295	; 0xffffffff
 8008d6c:	d017      	beq.n	8008d9e <tcp_close_shutdown_fin+0x6e>
}
 8008d6e:	4628      	mov	r0, r5
 8008d70:	bd38      	pop	{r3, r4, r5, pc}
    err = tcp_send_fin(pcb);
 8008d72:	4620      	mov	r0, r4
 8008d74:	f003 f884 	bl	800be80 <tcp_send_fin>
    if (err == ERR_OK) {
 8008d78:	4605      	mov	r5, r0
 8008d7a:	2800      	cmp	r0, #0
 8008d7c:	d1f3      	bne.n	8008d66 <tcp_close_shutdown_fin+0x36>
      pcb->state = FIN_WAIT_1;
 8008d7e:	2305      	movs	r3, #5
 8008d80:	7523      	strb	r3, [r4, #20]
 8008d82:	e7f0      	b.n	8008d66 <tcp_close_shutdown_fin+0x36>
    err = tcp_send_fin(pcb);
 8008d84:	4620      	mov	r0, r4
 8008d86:	f003 f87b 	bl	800be80 <tcp_send_fin>
    if (err == ERR_OK) {
 8008d8a:	4605      	mov	r5, r0
 8008d8c:	2800      	cmp	r0, #0
 8008d8e:	d1ea      	bne.n	8008d66 <tcp_close_shutdown_fin+0x36>
      pcb->state = LAST_ACK;
 8008d90:	2309      	movs	r3, #9
 8008d92:	7523      	strb	r3, [r4, #20]
 8008d94:	e7e7      	b.n	8008d66 <tcp_close_shutdown_fin+0x36>
    tcp_output(pcb);
 8008d96:	4620      	mov	r0, r4
 8008d98:	f003 f8ce 	bl	800bf38 <tcp_output>
 8008d9c:	e7e7      	b.n	8008d6e <tcp_close_shutdown_fin+0x3e>
    pcb->flags |= TF_CLOSEPEND;
 8008d9e:	7ea3      	ldrb	r3, [r4, #26]
 8008da0:	f043 0308 	orr.w	r3, r3, #8
 8008da4:	76a3      	strb	r3, [r4, #26]
    return ERR_OK;
 8008da6:	2500      	movs	r5, #0
 8008da8:	e7e1      	b.n	8008d6e <tcp_close_shutdown_fin+0x3e>
 8008daa:	bf00      	nop
 8008dac:	0800f970 	.word	0x0800f970
 8008db0:	0800f9a0 	.word	0x0800f9a0
 8008db4:	0800e3b0 	.word	0x0800e3b0

08008db8 <tcp_init>:
{
 8008db8:	4770      	bx	lr
	...

08008dbc <tcp_bind>:
{
 8008dbc:	b570      	push	{r4, r5, r6, lr}
 8008dbe:	4605      	mov	r5, r0
  if (ipaddr == NULL) {
 8008dc0:	460c      	mov	r4, r1
 8008dc2:	b171      	cbz	r1, 8008de2 <tcp_bind+0x26>
  if ((pcb == NULL) || (ipaddr == NULL)) {
 8008dc4:	2d00      	cmp	r5, #0
 8008dc6:	d039      	beq.n	8008e3c <tcp_bind+0x80>
 8008dc8:	2c00      	cmp	r4, #0
 8008dca:	d03a      	beq.n	8008e42 <tcp_bind+0x86>
  LWIP_ERROR("tcp_bind: can only bind in state CLOSED", pcb->state == CLOSED, return ERR_VAL);
 8008dcc:	7d2b      	ldrb	r3, [r5, #20]
 8008dce:	b953      	cbnz	r3, 8008de6 <tcp_bind+0x2a>
  if (port == 0) {
 8008dd0:	b19a      	cbz	r2, 8008dfa <tcp_bind+0x3e>
 8008dd2:	2600      	movs	r6, #0
    for (i = 0; i < max_pcb_list; i++) {
 8008dd4:	2e03      	cmp	r6, #3
 8008dd6:	dc14      	bgt.n	8008e02 <tcp_bind+0x46>
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 8008dd8:	4b21      	ldr	r3, [pc, #132]	; (8008e60 <tcp_bind+0xa4>)
 8008dda:	f853 3026 	ldr.w	r3, [r3, r6, lsl #2]
 8008dde:	681b      	ldr	r3, [r3, #0]
 8008de0:	e01c      	b.n	8008e1c <tcp_bind+0x60>
    ipaddr = IP4_ADDR_ANY;
 8008de2:	4c20      	ldr	r4, [pc, #128]	; (8008e64 <tcp_bind+0xa8>)
 8008de4:	e7ee      	b.n	8008dc4 <tcp_bind+0x8>
  LWIP_ERROR("tcp_bind: can only bind in state CLOSED", pcb->state == CLOSED, return ERR_VAL);
 8008de6:	4b20      	ldr	r3, [pc, #128]	; (8008e68 <tcp_bind+0xac>)
 8008de8:	f44f 7211 	mov.w	r2, #580	; 0x244
 8008dec:	491f      	ldr	r1, [pc, #124]	; (8008e6c <tcp_bind+0xb0>)
 8008dee:	4820      	ldr	r0, [pc, #128]	; (8008e70 <tcp_bind+0xb4>)
 8008df0:	f004 feeb 	bl	800dbca <iprintf>
 8008df4:	f06f 0005 	mvn.w	r0, #5
 8008df8:	bd70      	pop	{r4, r5, r6, pc}
    port = tcp_new_port();
 8008dfa:	f7ff ff3d 	bl	8008c78 <tcp_new_port>
    if (port == 0) {
 8008dfe:	4602      	mov	r2, r0
 8008e00:	b310      	cbz	r0, 8008e48 <tcp_bind+0x8c>
  if (!ip_addr_isany(ipaddr)) {
 8008e02:	6823      	ldr	r3, [r4, #0]
 8008e04:	b103      	cbz	r3, 8008e08 <tcp_bind+0x4c>
    ip_addr_set(&pcb->local_ip, ipaddr);
 8008e06:	602b      	str	r3, [r5, #0]
  pcb->local_port = port;
 8008e08:	82ea      	strh	r2, [r5, #22]
  TCP_REG(&tcp_bound_pcbs, pcb);
 8008e0a:	4b1a      	ldr	r3, [pc, #104]	; (8008e74 <tcp_bind+0xb8>)
 8008e0c:	681a      	ldr	r2, [r3, #0]
 8008e0e:	60ea      	str	r2, [r5, #12]
 8008e10:	601d      	str	r5, [r3, #0]
 8008e12:	f003 fbf3 	bl	800c5fc <tcp_timer_needed>
  return ERR_OK;
 8008e16:	2000      	movs	r0, #0
 8008e18:	bd70      	pop	{r4, r5, r6, pc}
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 8008e1a:	68db      	ldr	r3, [r3, #12]
 8008e1c:	b163      	cbz	r3, 8008e38 <tcp_bind+0x7c>
        if (cpcb->local_port == port) {
 8008e1e:	8ad9      	ldrh	r1, [r3, #22]
 8008e20:	428a      	cmp	r2, r1
 8008e22:	d1fa      	bne.n	8008e1a <tcp_bind+0x5e>
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 8008e24:	b19b      	cbz	r3, 8008e4e <tcp_bind+0x92>
                (ip_addr_isany(&cpcb->local_ip) ||
 8008e26:	6819      	ldr	r1, [r3, #0]
 8008e28:	b1a1      	cbz	r1, 8008e54 <tcp_bind+0x98>
                ip_addr_isany(ipaddr) ||
 8008e2a:	6820      	ldr	r0, [r4, #0]
 8008e2c:	b1a8      	cbz	r0, 8008e5a <tcp_bind+0x9e>
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 8008e2e:	4281      	cmp	r1, r0
 8008e30:	d1f3      	bne.n	8008e1a <tcp_bind+0x5e>
              return ERR_USE;
 8008e32:	f06f 0007 	mvn.w	r0, #7
}
 8008e36:	bd70      	pop	{r4, r5, r6, pc}
    for (i = 0; i < max_pcb_list; i++) {
 8008e38:	3601      	adds	r6, #1
 8008e3a:	e7cb      	b.n	8008dd4 <tcp_bind+0x18>
    return ERR_VAL;
 8008e3c:	f06f 0005 	mvn.w	r0, #5
 8008e40:	bd70      	pop	{r4, r5, r6, pc}
 8008e42:	f06f 0005 	mvn.w	r0, #5
 8008e46:	bd70      	pop	{r4, r5, r6, pc}
      return ERR_BUF;
 8008e48:	f06f 0001 	mvn.w	r0, #1
 8008e4c:	bd70      	pop	{r4, r5, r6, pc}
              return ERR_USE;
 8008e4e:	f06f 0007 	mvn.w	r0, #7
 8008e52:	bd70      	pop	{r4, r5, r6, pc}
 8008e54:	f06f 0007 	mvn.w	r0, #7
 8008e58:	bd70      	pop	{r4, r5, r6, pc}
 8008e5a:	f06f 0007 	mvn.w	r0, #7
 8008e5e:	bd70      	pop	{r4, r5, r6, pc}
 8008e60:	0800f9e8 	.word	0x0800f9e8
 8008e64:	0800ef98 	.word	0x0800ef98
 8008e68:	0800f970 	.word	0x0800f970
 8008e6c:	0800f8f4 	.word	0x0800f8f4
 8008e70:	0800e3b0 	.word	0x0800e3b0
 8008e74:	20007988 	.word	0x20007988

08008e78 <tcp_listen_with_backlog_and_err>:
{
 8008e78:	b570      	push	{r4, r5, r6, lr}
 8008e7a:	4616      	mov	r6, r2
  LWIP_ERROR("tcp_listen: pcb already connected", pcb->state == CLOSED, res = ERR_CLSD; goto done);
 8008e7c:	7d03      	ldrb	r3, [r0, #20]
 8008e7e:	bb23      	cbnz	r3, 8008eca <tcp_listen_with_backlog_and_err+0x52>
 8008e80:	4604      	mov	r4, r0
  if (pcb->state == LISTEN) {
 8008e82:	2b01      	cmp	r3, #1
 8008e84:	d042      	beq.n	8008f0c <tcp_listen_with_backlog_and_err+0x94>
  lpcb = (struct tcp_pcb_listen *)memp_malloc(MEMP_TCP_PCB_LISTEN);
 8008e86:	2002      	movs	r0, #2
 8008e88:	f7ff f9ec 	bl	8008264 <memp_malloc>
  if (lpcb == NULL) {
 8008e8c:	4605      	mov	r5, r0
 8008e8e:	2800      	cmp	r0, #0
 8008e90:	d043      	beq.n	8008f1a <tcp_listen_with_backlog_and_err+0xa2>
  lpcb->callback_arg = pcb->callback_arg;
 8008e92:	6923      	ldr	r3, [r4, #16]
 8008e94:	6103      	str	r3, [r0, #16]
  lpcb->local_port = pcb->local_port;
 8008e96:	8ae3      	ldrh	r3, [r4, #22]
 8008e98:	82c3      	strh	r3, [r0, #22]
  lpcb->state = LISTEN;
 8008e9a:	2301      	movs	r3, #1
 8008e9c:	7503      	strb	r3, [r0, #20]
  lpcb->prio = pcb->prio;
 8008e9e:	7d63      	ldrb	r3, [r4, #21]
 8008ea0:	7543      	strb	r3, [r0, #21]
  lpcb->so_options = pcb->so_options;
 8008ea2:	7a23      	ldrb	r3, [r4, #8]
 8008ea4:	7203      	strb	r3, [r0, #8]
  lpcb->ttl = pcb->ttl;
 8008ea6:	7aa3      	ldrb	r3, [r4, #10]
 8008ea8:	7283      	strb	r3, [r0, #10]
  lpcb->tos = pcb->tos;
 8008eaa:	7a63      	ldrb	r3, [r4, #9]
 8008eac:	7243      	strb	r3, [r0, #9]
  ip_addr_copy(lpcb->local_ip, pcb->local_ip);
 8008eae:	6823      	ldr	r3, [r4, #0]
 8008eb0:	6003      	str	r3, [r0, #0]
  if (pcb->local_port != 0) {
 8008eb2:	8ae3      	ldrh	r3, [r4, #22]
 8008eb4:	b1e3      	cbz	r3, 8008ef0 <tcp_listen_with_backlog_and_err+0x78>
    TCP_RMV(&tcp_bound_pcbs, pcb);
 8008eb6:	4b1a      	ldr	r3, [pc, #104]	; (8008f20 <tcp_listen_with_backlog_and_err+0xa8>)
 8008eb8:	681b      	ldr	r3, [r3, #0]
 8008eba:	429c      	cmp	r4, r3
 8008ebc:	d010      	beq.n	8008ee0 <tcp_listen_with_backlog_and_err+0x68>
 8008ebe:	b1ab      	cbz	r3, 8008eec <tcp_listen_with_backlog_and_err+0x74>
 8008ec0:	68da      	ldr	r2, [r3, #12]
 8008ec2:	4294      	cmp	r4, r2
 8008ec4:	d010      	beq.n	8008ee8 <tcp_listen_with_backlog_and_err+0x70>
 8008ec6:	4613      	mov	r3, r2
 8008ec8:	e7f9      	b.n	8008ebe <tcp_listen_with_backlog_and_err+0x46>
  LWIP_ERROR("tcp_listen: pcb already connected", pcb->state == CLOSED, res = ERR_CLSD; goto done);
 8008eca:	4b16      	ldr	r3, [pc, #88]	; (8008f24 <tcp_listen_with_backlog_and_err+0xac>)
 8008ecc:	f44f 722d 	mov.w	r2, #692	; 0x2b4
 8008ed0:	4915      	ldr	r1, [pc, #84]	; (8008f28 <tcp_listen_with_backlog_and_err+0xb0>)
 8008ed2:	4816      	ldr	r0, [pc, #88]	; (8008f2c <tcp_listen_with_backlog_and_err+0xb4>)
 8008ed4:	f004 fe79 	bl	800dbca <iprintf>
 8008ed8:	f06f 030e 	mvn.w	r3, #14
  struct tcp_pcb_listen *lpcb = NULL;
 8008edc:	2500      	movs	r5, #0
  LWIP_ERROR("tcp_listen: pcb already connected", pcb->state == CLOSED, res = ERR_CLSD; goto done);
 8008ede:	e018      	b.n	8008f12 <tcp_listen_with_backlog_and_err+0x9a>
    TCP_RMV(&tcp_bound_pcbs, pcb);
 8008ee0:	68da      	ldr	r2, [r3, #12]
 8008ee2:	4b0f      	ldr	r3, [pc, #60]	; (8008f20 <tcp_listen_with_backlog_and_err+0xa8>)
 8008ee4:	601a      	str	r2, [r3, #0]
 8008ee6:	e001      	b.n	8008eec <tcp_listen_with_backlog_and_err+0x74>
 8008ee8:	68e2      	ldr	r2, [r4, #12]
 8008eea:	60da      	str	r2, [r3, #12]
 8008eec:	2300      	movs	r3, #0
 8008eee:	60e3      	str	r3, [r4, #12]
  memp_free(MEMP_TCP_PCB, pcb);
 8008ef0:	4621      	mov	r1, r4
 8008ef2:	2001      	movs	r0, #1
 8008ef4:	f7ff f9d0 	bl	8008298 <memp_free>
  lpcb->accept = tcp_accept_null;
 8008ef8:	4b0d      	ldr	r3, [pc, #52]	; (8008f30 <tcp_listen_with_backlog_and_err+0xb8>)
 8008efa:	61ab      	str	r3, [r5, #24]
  TCP_REG(&tcp_listen_pcbs.pcbs, (struct tcp_pcb *)lpcb);
 8008efc:	4b0d      	ldr	r3, [pc, #52]	; (8008f34 <tcp_listen_with_backlog_and_err+0xbc>)
 8008efe:	681a      	ldr	r2, [r3, #0]
 8008f00:	60ea      	str	r2, [r5, #12]
 8008f02:	601d      	str	r5, [r3, #0]
 8008f04:	f003 fb7a 	bl	800c5fc <tcp_timer_needed>
  res = ERR_OK;
 8008f08:	2300      	movs	r3, #0
 8008f0a:	e002      	b.n	8008f12 <tcp_listen_with_backlog_and_err+0x9a>
    lpcb = (struct tcp_pcb_listen*)pcb;
 8008f0c:	4605      	mov	r5, r0
    res = ERR_ALREADY;
 8008f0e:	f06f 0308 	mvn.w	r3, #8
  if (err != NULL) {
 8008f12:	b106      	cbz	r6, 8008f16 <tcp_listen_with_backlog_and_err+0x9e>
    *err = res;
 8008f14:	7033      	strb	r3, [r6, #0]
}
 8008f16:	4628      	mov	r0, r5
 8008f18:	bd70      	pop	{r4, r5, r6, pc}
    res = ERR_MEM;
 8008f1a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008f1e:	e7f8      	b.n	8008f12 <tcp_listen_with_backlog_and_err+0x9a>
 8008f20:	20007988 	.word	0x20007988
 8008f24:	0800f970 	.word	0x0800f970
 8008f28:	0800f9c4 	.word	0x0800f9c4
 8008f2c:	0800e3b0 	.word	0x0800e3b0
 8008f30:	08009a3f 	.word	0x08009a3f
 8008f34:	20007984 	.word	0x20007984

08008f38 <tcp_update_rcv_ann_wnd>:
{
 8008f38:	b538      	push	{r3, r4, r5, lr}
  u32_t new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 8008f3a:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8008f3c:	8d04      	ldrh	r4, [r0, #40]	; 0x28
 8008f3e:	192a      	adds	r2, r5, r4
  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 8008f40:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 8008f42:	8e43      	ldrh	r3, [r0, #50]	; 0x32
 8008f44:	f5b3 6f86 	cmp.w	r3, #1072	; 0x430
 8008f48:	d901      	bls.n	8008f4e <tcp_update_rcv_ann_wnd+0x16>
 8008f4a:	f44f 6386 	mov.w	r3, #1072	; 0x430
 8008f4e:	440b      	add	r3, r1
 8008f50:	1ad3      	subs	r3, r2, r3
 8008f52:	2b00      	cmp	r3, #0
 8008f54:	db02      	blt.n	8008f5c <tcp_update_rcv_ann_wnd+0x24>
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 8008f56:	8544      	strh	r4, [r0, #42]	; 0x2a
    return new_right_edge - pcb->rcv_ann_right_edge;
 8008f58:	1a50      	subs	r0, r2, r1
 8008f5a:	bd38      	pop	{r3, r4, r5, pc}
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 8008f5c:	1a6b      	subs	r3, r5, r1
 8008f5e:	2b00      	cmp	r3, #0
 8008f60:	dd03      	ble.n	8008f6a <tcp_update_rcv_ann_wnd+0x32>
      pcb->rcv_ann_wnd = 0;
 8008f62:	2200      	movs	r2, #0
 8008f64:	8542      	strh	r2, [r0, #42]	; 0x2a
    return 0;
 8008f66:	4610      	mov	r0, r2
 8008f68:	bd38      	pop	{r3, r4, r5, pc}
 8008f6a:	4604      	mov	r4, r0
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 8008f6c:	1b4d      	subs	r5, r1, r5
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 8008f6e:	f5b5 3f80 	cmp.w	r5, #65536	; 0x10000
 8008f72:	d202      	bcs.n	8008f7a <tcp_update_rcv_ann_wnd+0x42>
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 8008f74:	8565      	strh	r5, [r4, #42]	; 0x2a
    return 0;
 8008f76:	2000      	movs	r0, #0
}
 8008f78:	bd38      	pop	{r3, r4, r5, pc}
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 8008f7a:	4b04      	ldr	r3, [pc, #16]	; (8008f8c <tcp_update_rcv_ann_wnd+0x54>)
 8008f7c:	f44f 7242 	mov.w	r2, #776	; 0x308
 8008f80:	4903      	ldr	r1, [pc, #12]	; (8008f90 <tcp_update_rcv_ann_wnd+0x58>)
 8008f82:	4804      	ldr	r0, [pc, #16]	; (8008f94 <tcp_update_rcv_ann_wnd+0x5c>)
 8008f84:	f004 fe21 	bl	800dbca <iprintf>
 8008f88:	e7f4      	b.n	8008f74 <tcp_update_rcv_ann_wnd+0x3c>
 8008f8a:	bf00      	nop
 8008f8c:	0800f970 	.word	0x0800f970
 8008f90:	0800fc68 	.word	0x0800fc68
 8008f94:	0800e3b0 	.word	0x0800e3b0

08008f98 <tcp_recved>:
{
 8008f98:	b538      	push	{r3, r4, r5, lr}
 8008f9a:	4605      	mov	r5, r0
 8008f9c:	460c      	mov	r4, r1
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 8008f9e:	7d03      	ldrb	r3, [r0, #20]
 8008fa0:	2b01      	cmp	r3, #1
 8008fa2:	d010      	beq.n	8008fc6 <tcp_recved+0x2e>
  pcb->rcv_wnd += len;
 8008fa4:	8d29      	ldrh	r1, [r5, #40]	; 0x28
 8008fa6:	4421      	add	r1, r4
 8008fa8:	b289      	uxth	r1, r1
 8008faa:	8529      	strh	r1, [r5, #40]	; 0x28
  if (pcb->rcv_wnd > TCP_WND_MAX(pcb)) {
 8008fac:	f5b1 6f06 	cmp.w	r1, #2144	; 0x860
 8008fb0:	d911      	bls.n	8008fd6 <tcp_recved+0x3e>
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 8008fb2:	f44f 6306 	mov.w	r3, #2144	; 0x860
 8008fb6:	852b      	strh	r3, [r5, #40]	; 0x28
  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 8008fb8:	4628      	mov	r0, r5
 8008fba:	f7ff ffbd 	bl	8008f38 <tcp_update_rcv_ann_wnd>
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 8008fbe:	f5b0 7f06 	cmp.w	r0, #536	; 0x218
 8008fc2:	da1b      	bge.n	8008ffc <tcp_recved+0x64>
 8008fc4:	bd38      	pop	{r3, r4, r5, pc}
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 8008fc6:	4b11      	ldr	r3, [pc, #68]	; (800900c <tcp_recved+0x74>)
 8008fc8:	f44f 7248 	mov.w	r2, #800	; 0x320
 8008fcc:	4910      	ldr	r1, [pc, #64]	; (8009010 <tcp_recved+0x78>)
 8008fce:	4811      	ldr	r0, [pc, #68]	; (8009014 <tcp_recved+0x7c>)
 8008fd0:	f004 fdfb 	bl	800dbca <iprintf>
 8008fd4:	e7e6      	b.n	8008fa4 <tcp_recved+0xc>
  } else if (pcb->rcv_wnd == 0) {
 8008fd6:	2900      	cmp	r1, #0
 8008fd8:	d1ee      	bne.n	8008fb8 <tcp_recved+0x20>
    if ((pcb->state == CLOSE_WAIT) || (pcb->state == LAST_ACK)) {
 8008fda:	7d2b      	ldrb	r3, [r5, #20]
 8008fdc:	2b07      	cmp	r3, #7
 8008fde:	d009      	beq.n	8008ff4 <tcp_recved+0x5c>
 8008fe0:	2b09      	cmp	r3, #9
 8008fe2:	d007      	beq.n	8008ff4 <tcp_recved+0x5c>
      LWIP_ASSERT("tcp_recved: len wrapped rcv_wnd\n", 0);
 8008fe4:	4b09      	ldr	r3, [pc, #36]	; (800900c <tcp_recved+0x74>)
 8008fe6:	f240 322d 	movw	r2, #813	; 0x32d
 8008fea:	490b      	ldr	r1, [pc, #44]	; (8009018 <tcp_recved+0x80>)
 8008fec:	4809      	ldr	r0, [pc, #36]	; (8009014 <tcp_recved+0x7c>)
 8008fee:	f004 fdec 	bl	800dbca <iprintf>
 8008ff2:	e7e1      	b.n	8008fb8 <tcp_recved+0x20>
      pcb->rcv_wnd = TCP_WND_MAX(pcb);
 8008ff4:	f44f 6306 	mov.w	r3, #2144	; 0x860
 8008ff8:	852b      	strh	r3, [r5, #40]	; 0x28
 8008ffa:	e7dd      	b.n	8008fb8 <tcp_recved+0x20>
    tcp_ack_now(pcb);
 8008ffc:	7eab      	ldrb	r3, [r5, #26]
 8008ffe:	f043 0302 	orr.w	r3, r3, #2
 8009002:	76ab      	strb	r3, [r5, #26]
    tcp_output(pcb);
 8009004:	4628      	mov	r0, r5
 8009006:	f002 ff97 	bl	800bf38 <tcp_output>
}
 800900a:	e7db      	b.n	8008fc4 <tcp_recved+0x2c>
 800900c:	0800f970 	.word	0x0800f970
 8009010:	0800fa94 	.word	0x0800fa94
 8009014:	0800e3b0 	.word	0x0800e3b0
 8009018:	0800fabc 	.word	0x0800fabc

0800901c <tcp_seg_free>:
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
  if (seg != NULL) {
 800901c:	b150      	cbz	r0, 8009034 <tcp_seg_free+0x18>
{
 800901e:	b510      	push	{r4, lr}
 8009020:	4604      	mov	r4, r0
    if (seg->p != NULL) {
 8009022:	6840      	ldr	r0, [r0, #4]
 8009024:	b108      	cbz	r0, 800902a <tcp_seg_free+0xe>
      pbuf_free(seg->p);
 8009026:	f7ff fb0d 	bl	8008644 <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 800902a:	4621      	mov	r1, r4
 800902c:	2003      	movs	r0, #3
 800902e:	f7ff f933 	bl	8008298 <memp_free>
 8009032:	bd10      	pop	{r4, pc}
 8009034:	4770      	bx	lr

08009036 <tcp_segs_free>:
  while (seg != NULL) {
 8009036:	b138      	cbz	r0, 8009048 <tcp_segs_free+0x12>
{
 8009038:	b510      	push	{r4, lr}
    struct tcp_seg *next = seg->next;
 800903a:	6804      	ldr	r4, [r0, #0]
    tcp_seg_free(seg);
 800903c:	f7ff ffee 	bl	800901c <tcp_seg_free>
    seg = next;
 8009040:	4620      	mov	r0, r4
  while (seg != NULL) {
 8009042:	2c00      	cmp	r4, #0
 8009044:	d1f9      	bne.n	800903a <tcp_segs_free+0x4>
}
 8009046:	bd10      	pop	{r4, pc}
 8009048:	4770      	bx	lr

0800904a <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
 800904a:	b538      	push	{r3, r4, r5, lr}
 800904c:	4605      	mov	r5, r0
  struct tcp_seg *cseg;

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 800904e:	2003      	movs	r0, #3
 8009050:	f7ff f908 	bl	8008264 <memp_malloc>
  if (cseg == NULL) {
 8009054:	4604      	mov	r4, r0
 8009056:	b150      	cbz	r0, 800906e <tcp_seg_copy+0x24>
    return NULL;
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 8009058:	6828      	ldr	r0, [r5, #0]
 800905a:	6869      	ldr	r1, [r5, #4]
 800905c:	68aa      	ldr	r2, [r5, #8]
 800905e:	68eb      	ldr	r3, [r5, #12]
 8009060:	6020      	str	r0, [r4, #0]
 8009062:	6061      	str	r1, [r4, #4]
 8009064:	60a2      	str	r2, [r4, #8]
 8009066:	60e3      	str	r3, [r4, #12]
  pbuf_ref(cseg->p);
 8009068:	6860      	ldr	r0, [r4, #4]
 800906a:	f7ff fcbb 	bl	80089e4 <pbuf_ref>
  return cseg;
}
 800906e:	4620      	mov	r0, r4
 8009070:	bd38      	pop	{r3, r4, r5, pc}

08009072 <tcp_arg>:
void
tcp_arg(struct tcp_pcb *pcb, void *arg)
{
  /* This function is allowed to be called for both listen pcbs and
     connection pcbs. */
  if (pcb != NULL) {
 8009072:	b100      	cbz	r0, 8009076 <tcp_arg+0x4>
    pcb->callback_arg = arg;
 8009074:	6101      	str	r1, [r0, #16]
 8009076:	4770      	bx	lr

08009078 <tcp_recv>:
 * @param recv callback function to call for this pcb when data is received
 */
void
tcp_recv(struct tcp_pcb *pcb, tcp_recv_fn recv)
{
  if (pcb != NULL) {
 8009078:	b180      	cbz	r0, 800909c <tcp_recv+0x24>
{
 800907a:	b538      	push	{r3, r4, r5, lr}
 800907c:	4604      	mov	r4, r0
 800907e:	460d      	mov	r5, r1
    LWIP_ASSERT("invalid socket state for recv callback", pcb->state != LISTEN);
 8009080:	7d03      	ldrb	r3, [r0, #20]
 8009082:	2b01      	cmp	r3, #1
 8009084:	d002      	beq.n	800908c <tcp_recv+0x14>
    pcb->recv = recv;
 8009086:	f8c4 5080 	str.w	r5, [r4, #128]	; 0x80
 800908a:	bd38      	pop	{r3, r4, r5, pc}
    LWIP_ASSERT("invalid socket state for recv callback", pcb->state != LISTEN);
 800908c:	4b04      	ldr	r3, [pc, #16]	; (80090a0 <tcp_recv+0x28>)
 800908e:	f240 62bb 	movw	r2, #1723	; 0x6bb
 8009092:	4904      	ldr	r1, [pc, #16]	; (80090a4 <tcp_recv+0x2c>)
 8009094:	4804      	ldr	r0, [pc, #16]	; (80090a8 <tcp_recv+0x30>)
 8009096:	f004 fd98 	bl	800dbca <iprintf>
 800909a:	e7f4      	b.n	8009086 <tcp_recv+0xe>
 800909c:	4770      	bx	lr
 800909e:	bf00      	nop
 80090a0:	0800f970 	.word	0x0800f970
 80090a4:	0800fa6c 	.word	0x0800fa6c
 80090a8:	0800e3b0 	.word	0x0800e3b0

080090ac <tcp_sent>:
 * @param sent callback function to call for this pcb when data is successfully sent
 */
void
tcp_sent(struct tcp_pcb *pcb, tcp_sent_fn sent)
{
  if (pcb != NULL) {
 80090ac:	b178      	cbz	r0, 80090ce <tcp_sent+0x22>
{
 80090ae:	b538      	push	{r3, r4, r5, lr}
 80090b0:	4604      	mov	r4, r0
 80090b2:	460d      	mov	r5, r1
    LWIP_ASSERT("invalid socket state for sent callback", pcb->state != LISTEN);
 80090b4:	7d03      	ldrb	r3, [r0, #20]
 80090b6:	2b01      	cmp	r3, #1
 80090b8:	d001      	beq.n	80090be <tcp_sent+0x12>
    pcb->sent = sent;
 80090ba:	67e5      	str	r5, [r4, #124]	; 0x7c
 80090bc:	bd38      	pop	{r3, r4, r5, pc}
    LWIP_ASSERT("invalid socket state for sent callback", pcb->state != LISTEN);
 80090be:	4b04      	ldr	r3, [pc, #16]	; (80090d0 <tcp_sent+0x24>)
 80090c0:	f240 62cc 	movw	r2, #1740	; 0x6cc
 80090c4:	4903      	ldr	r1, [pc, #12]	; (80090d4 <tcp_sent+0x28>)
 80090c6:	4804      	ldr	r0, [pc, #16]	; (80090d8 <tcp_sent+0x2c>)
 80090c8:	f004 fd7f 	bl	800dbca <iprintf>
 80090cc:	e7f5      	b.n	80090ba <tcp_sent+0xe>
 80090ce:	4770      	bx	lr
 80090d0:	0800f970 	.word	0x0800f970
 80090d4:	0800fae0 	.word	0x0800fae0
 80090d8:	0800e3b0 	.word	0x0800e3b0

080090dc <tcp_err>:
 *        has occurred on the connection
 */
void
tcp_err(struct tcp_pcb *pcb, tcp_err_fn err)
{
  if (pcb != NULL) {
 80090dc:	b180      	cbz	r0, 8009100 <tcp_err+0x24>
{
 80090de:	b538      	push	{r3, r4, r5, lr}
 80090e0:	4604      	mov	r4, r0
 80090e2:	460d      	mov	r5, r1
    LWIP_ASSERT("invalid socket state for err callback", pcb->state != LISTEN);
 80090e4:	7d03      	ldrb	r3, [r0, #20]
 80090e6:	2b01      	cmp	r3, #1
 80090e8:	d002      	beq.n	80090f0 <tcp_err+0x14>
    pcb->errf = err;
 80090ea:	f8c4 508c 	str.w	r5, [r4, #140]	; 0x8c
 80090ee:	bd38      	pop	{r3, r4, r5, pc}
    LWIP_ASSERT("invalid socket state for err callback", pcb->state != LISTEN);
 80090f0:	4b04      	ldr	r3, [pc, #16]	; (8009104 <tcp_err+0x28>)
 80090f2:	f44f 62dc 	mov.w	r2, #1760	; 0x6e0
 80090f6:	4904      	ldr	r1, [pc, #16]	; (8009108 <tcp_err+0x2c>)
 80090f8:	4804      	ldr	r0, [pc, #16]	; (800910c <tcp_err+0x30>)
 80090fa:	f004 fd66 	bl	800dbca <iprintf>
 80090fe:	e7f4      	b.n	80090ea <tcp_err+0xe>
 8009100:	4770      	bx	lr
 8009102:	bf00      	nop
 8009104:	0800f970 	.word	0x0800f970
 8009108:	0800f938 	.word	0x0800f938
 800910c:	0800e3b0 	.word	0x0800e3b0

08009110 <tcp_accept>:
 *        connection has been connected to another host
 */
void
tcp_accept(struct tcp_pcb *pcb, tcp_accept_fn accept)
{
  if ((pcb != NULL) && (pcb->state == LISTEN)) {
 8009110:	b110      	cbz	r0, 8009118 <tcp_accept+0x8>
 8009112:	7d02      	ldrb	r2, [r0, #20]
 8009114:	2a01      	cmp	r2, #1
 8009116:	d000      	beq.n	800911a <tcp_accept+0xa>
 8009118:	4770      	bx	lr
    struct tcp_pcb_listen *lpcb = (struct tcp_pcb_listen*)pcb;
    lpcb->accept = accept;
 800911a:	6181      	str	r1, [r0, #24]
  }
}
 800911c:	e7fc      	b.n	8009118 <tcp_accept+0x8>
	...

08009120 <tcp_poll>:
 * timer interval, which is called twice a second.
 *
 */
void
tcp_poll(struct tcp_pcb *pcb, tcp_poll_fn poll, u8_t interval)
{
 8009120:	b570      	push	{r4, r5, r6, lr}
 8009122:	4604      	mov	r4, r0
 8009124:	460e      	mov	r6, r1
 8009126:	4615      	mov	r5, r2
  LWIP_ASSERT("invalid socket state for poll", pcb->state != LISTEN);
 8009128:	7d03      	ldrb	r3, [r0, #20]
 800912a:	2b01      	cmp	r3, #1
 800912c:	d003      	beq.n	8009136 <tcp_poll+0x16>
#if LWIP_CALLBACK_API
  pcb->poll = poll;
 800912e:	f8c4 6088 	str.w	r6, [r4, #136]	; 0x88
#else /* LWIP_CALLBACK_API */
  LWIP_UNUSED_ARG(poll);
#endif /* LWIP_CALLBACK_API */
  pcb->pollinterval = interval;
 8009132:	7725      	strb	r5, [r4, #28]
 8009134:	bd70      	pop	{r4, r5, r6, pc}
  LWIP_ASSERT("invalid socket state for poll", pcb->state != LISTEN);
 8009136:	4b04      	ldr	r3, [pc, #16]	; (8009148 <tcp_poll+0x28>)
 8009138:	f240 7203 	movw	r2, #1795	; 0x703
 800913c:	4903      	ldr	r1, [pc, #12]	; (800914c <tcp_poll+0x2c>)
 800913e:	4804      	ldr	r0, [pc, #16]	; (8009150 <tcp_poll+0x30>)
 8009140:	f004 fd43 	bl	800dbca <iprintf>
 8009144:	e7f3      	b.n	800912e <tcp_poll+0xe>
 8009146:	bf00      	nop
 8009148:	0800f970 	.word	0x0800f970
 800914c:	0800fa4c 	.word	0x0800fa4c
 8009150:	0800e3b0 	.word	0x0800e3b0

08009154 <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 8009154:	b538      	push	{r3, r4, r5, lr}
  if (pcb->state != CLOSED &&
 8009156:	7d03      	ldrb	r3, [r0, #20]
 8009158:	b1e3      	cbz	r3, 8009194 <tcp_pcb_purge+0x40>
 800915a:	2b0a      	cmp	r3, #10
 800915c:	d01a      	beq.n	8009194 <tcp_pcb_purge+0x40>
     pcb->state != TIME_WAIT &&
 800915e:	2b01      	cmp	r3, #1
 8009160:	d018      	beq.n	8009194 <tcp_pcb_purge+0x40>
 8009162:	4604      	mov	r4, r0

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
 8009164:	6f40      	ldr	r0, [r0, #116]	; 0x74
 8009166:	b118      	cbz	r0, 8009170 <tcp_pcb_purge+0x1c>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
 8009168:	f7ff fa6c 	bl	8008644 <pbuf_free>
      pcb->refused_data = NULL;
 800916c:	2300      	movs	r3, #0
 800916e:	6763      	str	r3, [r4, #116]	; 0x74
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
    }
    tcp_segs_free(pcb->ooseq);
 8009170:	6f20      	ldr	r0, [r4, #112]	; 0x70
 8009172:	f7ff ff60 	bl	8009036 <tcp_segs_free>
    pcb->ooseq = NULL;
 8009176:	2500      	movs	r5, #0
 8009178:	6725      	str	r5, [r4, #112]	; 0x70
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
 800917a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800917e:	8623      	strh	r3, [r4, #48]	; 0x30

    tcp_segs_free(pcb->unsent);
 8009180:	6ea0      	ldr	r0, [r4, #104]	; 0x68
 8009182:	f7ff ff58 	bl	8009036 <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 8009186:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 8009188:	f7ff ff55 	bl	8009036 <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 800918c:	66a5      	str	r5, [r4, #104]	; 0x68
 800918e:	66e5      	str	r5, [r4, #108]	; 0x6c
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
 8009190:	f8a4 5064 	strh.w	r5, [r4, #100]	; 0x64
 8009194:	bd38      	pop	{r3, r4, r5, pc}
	...

08009198 <tcp_slowtmr>:
{
 8009198:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800919c:	b082      	sub	sp, #8
  ++tcp_ticks;
 800919e:	4aae      	ldr	r2, [pc, #696]	; (8009458 <tcp_slowtmr+0x2c0>)
 80091a0:	6813      	ldr	r3, [r2, #0]
 80091a2:	3301      	adds	r3, #1
 80091a4:	6013      	str	r3, [r2, #0]
  ++tcp_timer_ctr;
 80091a6:	4aad      	ldr	r2, [pc, #692]	; (800945c <tcp_slowtmr+0x2c4>)
 80091a8:	7813      	ldrb	r3, [r2, #0]
 80091aa:	3301      	adds	r3, #1
 80091ac:	7013      	strb	r3, [r2, #0]
  pcb = tcp_active_pcbs;
 80091ae:	4bac      	ldr	r3, [pc, #688]	; (8009460 <tcp_slowtmr+0x2c8>)
 80091b0:	681c      	ldr	r4, [r3, #0]
  prev = NULL;
 80091b2:	2600      	movs	r6, #0
  while (pcb != NULL) {
 80091b4:	e018      	b.n	80091e8 <tcp_slowtmr+0x50>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 80091b6:	4bab      	ldr	r3, [pc, #684]	; (8009464 <tcp_slowtmr+0x2cc>)
 80091b8:	f44f 727c 	mov.w	r2, #1008	; 0x3f0
 80091bc:	49aa      	ldr	r1, [pc, #680]	; (8009468 <tcp_slowtmr+0x2d0>)
 80091be:	48ab      	ldr	r0, [pc, #684]	; (800946c <tcp_slowtmr+0x2d4>)
 80091c0:	f004 fd03 	bl	800dbca <iprintf>
 80091c4:	e016      	b.n	80091f4 <tcp_slowtmr+0x5c>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 80091c6:	4ba7      	ldr	r3, [pc, #668]	; (8009464 <tcp_slowtmr+0x2cc>)
 80091c8:	f240 32f1 	movw	r2, #1009	; 0x3f1
 80091cc:	49a8      	ldr	r1, [pc, #672]	; (8009470 <tcp_slowtmr+0x2d8>)
 80091ce:	48a7      	ldr	r0, [pc, #668]	; (800946c <tcp_slowtmr+0x2d4>)
 80091d0:	f004 fcfb 	bl	800dbca <iprintf>
 80091d4:	e011      	b.n	80091fa <tcp_slowtmr+0x62>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 80091d6:	4ba3      	ldr	r3, [pc, #652]	; (8009464 <tcp_slowtmr+0x2cc>)
 80091d8:	f240 32f2 	movw	r2, #1010	; 0x3f2
 80091dc:	49a5      	ldr	r1, [pc, #660]	; (8009474 <tcp_slowtmr+0x2dc>)
 80091de:	48a3      	ldr	r0, [pc, #652]	; (800946c <tcp_slowtmr+0x2d4>)
 80091e0:	f004 fcf3 	bl	800dbca <iprintf>
 80091e4:	e00c      	b.n	8009200 <tcp_slowtmr+0x68>
      pcb = pcb->next;
 80091e6:	68e4      	ldr	r4, [r4, #12]
  while (pcb != NULL) {
 80091e8:	2c00      	cmp	r4, #0
 80091ea:	f000 817c 	beq.w	80094e6 <tcp_slowtmr+0x34e>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 80091ee:	7d23      	ldrb	r3, [r4, #20]
 80091f0:	2b00      	cmp	r3, #0
 80091f2:	d0e0      	beq.n	80091b6 <tcp_slowtmr+0x1e>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 80091f4:	7d23      	ldrb	r3, [r4, #20]
 80091f6:	2b01      	cmp	r3, #1
 80091f8:	d0e5      	beq.n	80091c6 <tcp_slowtmr+0x2e>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 80091fa:	7d23      	ldrb	r3, [r4, #20]
 80091fc:	2b0a      	cmp	r3, #10
 80091fe:	d0ea      	beq.n	80091d6 <tcp_slowtmr+0x3e>
    if (pcb->last_timer == tcp_timer_ctr) {
 8009200:	7f62      	ldrb	r2, [r4, #29]
 8009202:	4b96      	ldr	r3, [pc, #600]	; (800945c <tcp_slowtmr+0x2c4>)
 8009204:	781b      	ldrb	r3, [r3, #0]
 8009206:	429a      	cmp	r2, r3
 8009208:	d0ed      	beq.n	80091e6 <tcp_slowtmr+0x4e>
    pcb->last_timer = tcp_timer_ctr;
 800920a:	7763      	strb	r3, [r4, #29]
    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 800920c:	7d23      	ldrb	r3, [r4, #20]
 800920e:	2b02      	cmp	r3, #2
 8009210:	d016      	beq.n	8009240 <tcp_slowtmr+0xa8>
    else if (pcb->nrtx >= TCP_MAXRTX) {
 8009212:	f894 2042 	ldrb.w	r2, [r4, #66]	; 0x42
 8009216:	2a0b      	cmp	r2, #11
 8009218:	d860      	bhi.n	80092dc <tcp_slowtmr+0x144>
      if (pcb->persist_backoff > 0) {
 800921a:	f894 5095 	ldrb.w	r5, [r4, #149]	; 0x95
 800921e:	b335      	cbz	r5, 800926e <tcp_slowtmr+0xd6>
        u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff-1];
 8009220:	3d01      	subs	r5, #1
 8009222:	4b95      	ldr	r3, [pc, #596]	; (8009478 <tcp_slowtmr+0x2e0>)
 8009224:	5d5a      	ldrb	r2, [r3, r5]
        if (pcb->persist_cnt < backoff_cnt) {
 8009226:	f894 3094 	ldrb.w	r3, [r4, #148]	; 0x94
 800922a:	429a      	cmp	r2, r3
 800922c:	d902      	bls.n	8009234 <tcp_slowtmr+0x9c>
          pcb->persist_cnt++;
 800922e:	3301      	adds	r3, #1
 8009230:	f884 3094 	strb.w	r3, [r4, #148]	; 0x94
        if (pcb->persist_cnt >= backoff_cnt) {
 8009234:	f894 3094 	ldrb.w	r3, [r4, #148]	; 0x94
 8009238:	429a      	cmp	r2, r3
 800923a:	d907      	bls.n	800924c <tcp_slowtmr+0xb4>
    pcb_remove = 0;
 800923c:	2500      	movs	r5, #0
 800923e:	e04e      	b.n	80092de <tcp_slowtmr+0x146>
    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 8009240:	f894 2042 	ldrb.w	r2, [r4, #66]	; 0x42
 8009244:	2a05      	cmp	r2, #5
 8009246:	d9e4      	bls.n	8009212 <tcp_slowtmr+0x7a>
      ++pcb_remove;
 8009248:	2501      	movs	r5, #1
 800924a:	e048      	b.n	80092de <tcp_slowtmr+0x146>
          if (tcp_zero_window_probe(pcb) == ERR_OK) {
 800924c:	4620      	mov	r0, r4
 800924e:	f003 f8c2 	bl	800c3d6 <tcp_zero_window_probe>
 8009252:	2800      	cmp	r0, #0
 8009254:	d150      	bne.n	80092f8 <tcp_slowtmr+0x160>
            pcb->persist_cnt = 0;
 8009256:	2300      	movs	r3, #0
 8009258:	f884 3094 	strb.w	r3, [r4, #148]	; 0x94
            if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 800925c:	f894 3095 	ldrb.w	r3, [r4, #149]	; 0x95
 8009260:	2b06      	cmp	r3, #6
 8009262:	d84b      	bhi.n	80092fc <tcp_slowtmr+0x164>
              pcb->persist_backoff++;
 8009264:	3301      	adds	r3, #1
 8009266:	f884 3095 	strb.w	r3, [r4, #149]	; 0x95
    pcb_remove = 0;
 800926a:	2500      	movs	r5, #0
 800926c:	e037      	b.n	80092de <tcp_slowtmr+0x146>
        if (pcb->rtime >= 0) {
 800926e:	f9b4 1030 	ldrsh.w	r1, [r4, #48]	; 0x30
 8009272:	2900      	cmp	r1, #0
 8009274:	db01      	blt.n	800927a <tcp_slowtmr+0xe2>
          ++pcb->rtime;
 8009276:	3101      	adds	r1, #1
 8009278:	8621      	strh	r1, [r4, #48]	; 0x30
        if (pcb->unacked != NULL && pcb->rtime >= pcb->rto) {
 800927a:	6ee1      	ldr	r1, [r4, #108]	; 0x6c
 800927c:	b379      	cbz	r1, 80092de <tcp_slowtmr+0x146>
 800927e:	f9b4 0030 	ldrsh.w	r0, [r4, #48]	; 0x30
 8009282:	f9b4 1040 	ldrsh.w	r1, [r4, #64]	; 0x40
 8009286:	4288      	cmp	r0, r1
 8009288:	db29      	blt.n	80092de <tcp_slowtmr+0x146>
          if (pcb->state != SYN_SENT) {
 800928a:	2b02      	cmp	r3, #2
 800928c:	d00d      	beq.n	80092aa <tcp_slowtmr+0x112>
            u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff)-1);
 800928e:	2a0c      	cmp	r2, #12
 8009290:	bf28      	it	cs
 8009292:	220c      	movcs	r2, #12
            pcb->rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 8009294:	f9b4 103c 	ldrsh.w	r1, [r4, #60]	; 0x3c
 8009298:	f9b4 303e 	ldrsh.w	r3, [r4, #62]	; 0x3e
 800929c:	eb03 03e1 	add.w	r3, r3, r1, asr #3
 80092a0:	4976      	ldr	r1, [pc, #472]	; (800947c <tcp_slowtmr+0x2e4>)
 80092a2:	5c8a      	ldrb	r2, [r1, r2]
 80092a4:	4093      	lsls	r3, r2
 80092a6:	f8a4 3040 	strh.w	r3, [r4, #64]	; 0x40
          pcb->rtime = 0;
 80092aa:	2300      	movs	r3, #0
 80092ac:	8623      	strh	r3, [r4, #48]	; 0x30
          eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 80092ae:	f8b4 305c 	ldrh.w	r3, [r4, #92]	; 0x5c
 80092b2:	f8b4 2048 	ldrh.w	r2, [r4, #72]	; 0x48
 80092b6:	4293      	cmp	r3, r2
 80092b8:	bf28      	it	cs
 80092ba:	4613      	movcs	r3, r2
          pcb->ssthresh = eff_wnd >> 1;
 80092bc:	085b      	lsrs	r3, r3, #1
 80092be:	f8a4 304a 	strh.w	r3, [r4, #74]	; 0x4a
          if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 80092c2:	8e61      	ldrh	r1, [r4, #50]	; 0x32
 80092c4:	004a      	lsls	r2, r1, #1
 80092c6:	b292      	uxth	r2, r2
 80092c8:	4293      	cmp	r3, r2
 80092ca:	d201      	bcs.n	80092d0 <tcp_slowtmr+0x138>
            pcb->ssthresh = (pcb->mss << 1);
 80092cc:	f8a4 204a 	strh.w	r2, [r4, #74]	; 0x4a
          pcb->cwnd = pcb->mss;
 80092d0:	f8a4 1048 	strh.w	r1, [r4, #72]	; 0x48
          tcp_rexmit_rto(pcb);
 80092d4:	4620      	mov	r0, r4
 80092d6:	f002 ffe1 	bl	800c29c <tcp_rexmit_rto>
 80092da:	e000      	b.n	80092de <tcp_slowtmr+0x146>
      ++pcb_remove;
 80092dc:	2501      	movs	r5, #1
    if (pcb->state == FIN_WAIT_2) {
 80092de:	7d23      	ldrb	r3, [r4, #20]
 80092e0:	2b06      	cmp	r3, #6
 80092e2:	d00d      	beq.n	8009300 <tcp_slowtmr+0x168>
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 80092e4:	7a22      	ldrb	r2, [r4, #8]
 80092e6:	f012 0f08 	tst.w	r2, #8
 80092ea:	d043      	beq.n	8009374 <tcp_slowtmr+0x1dc>
 80092ec:	2b04      	cmp	r3, #4
 80092ee:	d014      	beq.n	800931a <tcp_slowtmr+0x182>
       ((pcb->state == ESTABLISHED) ||
 80092f0:	2b07      	cmp	r3, #7
 80092f2:	d012      	beq.n	800931a <tcp_slowtmr+0x182>
    pcb_reset = 0;
 80092f4:	2700      	movs	r7, #0
 80092f6:	e03e      	b.n	8009376 <tcp_slowtmr+0x1de>
    pcb_remove = 0;
 80092f8:	2500      	movs	r5, #0
 80092fa:	e7f0      	b.n	80092de <tcp_slowtmr+0x146>
 80092fc:	2500      	movs	r5, #0
 80092fe:	e7ee      	b.n	80092de <tcp_slowtmr+0x146>
      if (pcb->flags & TF_RXCLOSED) {
 8009300:	7ea2      	ldrb	r2, [r4, #26]
 8009302:	f012 0f10 	tst.w	r2, #16
 8009306:	d0ed      	beq.n	80092e4 <tcp_slowtmr+0x14c>
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 8009308:	6a21      	ldr	r1, [r4, #32]
 800930a:	4a53      	ldr	r2, [pc, #332]	; (8009458 <tcp_slowtmr+0x2c0>)
 800930c:	6812      	ldr	r2, [r2, #0]
 800930e:	1a52      	subs	r2, r2, r1
 8009310:	2a28      	cmp	r2, #40	; 0x28
 8009312:	d9e7      	bls.n	80092e4 <tcp_slowtmr+0x14c>
          ++pcb_remove;
 8009314:	3501      	adds	r5, #1
 8009316:	b2ed      	uxtb	r5, r5
 8009318:	e7e4      	b.n	80092e4 <tcp_slowtmr+0x14c>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800931a:	4b4f      	ldr	r3, [pc, #316]	; (8009458 <tcp_slowtmr+0x2c0>)
 800931c:	681a      	ldr	r2, [r3, #0]
 800931e:	6a23      	ldr	r3, [r4, #32]
 8009320:	1ad2      	subs	r2, r2, r3
         (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL)
 8009322:	f8d4 1090 	ldr.w	r1, [r4, #144]	; 0x90
 8009326:	f501 2324 	add.w	r3, r1, #671744	; 0xa4000
 800932a:	f603 43b8 	addw	r3, r3, #3256	; 0xcb8
 800932e:	4854      	ldr	r0, [pc, #336]	; (8009480 <tcp_slowtmr+0x2e8>)
 8009330:	fba0 0303 	umull	r0, r3, r0, r3
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8009334:	ebb2 1f53 	cmp.w	r2, r3, lsr #5
 8009338:	d903      	bls.n	8009342 <tcp_slowtmr+0x1aa>
        ++pcb_remove;
 800933a:	3501      	adds	r5, #1
 800933c:	b2ed      	uxtb	r5, r5
        ++pcb_reset;
 800933e:	2701      	movs	r7, #1
 8009340:	e019      	b.n	8009376 <tcp_slowtmr+0x1de>
                (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 8009342:	f894 3096 	ldrb.w	r3, [r4, #150]	; 0x96
 8009346:	484f      	ldr	r0, [pc, #316]	; (8009484 <tcp_slowtmr+0x2ec>)
 8009348:	fb00 1303 	mla	r3, r0, r3, r1
                / TCP_SLOW_INTERVAL)
 800934c:	494c      	ldr	r1, [pc, #304]	; (8009480 <tcp_slowtmr+0x2e8>)
 800934e:	fba1 1303 	umull	r1, r3, r1, r3
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 8009352:	ebb2 1f53 	cmp.w	r2, r3, lsr #5
 8009356:	d801      	bhi.n	800935c <tcp_slowtmr+0x1c4>
    pcb_reset = 0;
 8009358:	2700      	movs	r7, #0
 800935a:	e00c      	b.n	8009376 <tcp_slowtmr+0x1de>
        err = tcp_keepalive(pcb);
 800935c:	4620      	mov	r0, r4
 800935e:	f003 f80e 	bl	800c37e <tcp_keepalive>
        if (err == ERR_OK) {
 8009362:	2800      	cmp	r0, #0
 8009364:	d13a      	bne.n	80093dc <tcp_slowtmr+0x244>
          pcb->keep_cnt_sent++;
 8009366:	f894 3096 	ldrb.w	r3, [r4, #150]	; 0x96
 800936a:	3301      	adds	r3, #1
 800936c:	f884 3096 	strb.w	r3, [r4, #150]	; 0x96
    pcb_reset = 0;
 8009370:	2700      	movs	r7, #0
 8009372:	e000      	b.n	8009376 <tcp_slowtmr+0x1de>
 8009374:	2700      	movs	r7, #0
    if (pcb->ooseq != NULL &&
 8009376:	6f20      	ldr	r0, [r4, #112]	; 0x70
 8009378:	b150      	cbz	r0, 8009390 <tcp_slowtmr+0x1f8>
        (u32_t)tcp_ticks - pcb->tmr >= pcb->rto * TCP_OOSEQ_TIMEOUT) {
 800937a:	4b37      	ldr	r3, [pc, #220]	; (8009458 <tcp_slowtmr+0x2c0>)
 800937c:	681a      	ldr	r2, [r3, #0]
 800937e:	6a23      	ldr	r3, [r4, #32]
 8009380:	1ad2      	subs	r2, r2, r3
 8009382:	f9b4 3040 	ldrsh.w	r3, [r4, #64]	; 0x40
 8009386:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800938a:	0059      	lsls	r1, r3, #1
    if (pcb->ooseq != NULL &&
 800938c:	428a      	cmp	r2, r1
 800938e:	d227      	bcs.n	80093e0 <tcp_slowtmr+0x248>
    if (pcb->state == SYN_RCVD) {
 8009390:	7d23      	ldrb	r3, [r4, #20]
 8009392:	2b03      	cmp	r3, #3
 8009394:	d029      	beq.n	80093ea <tcp_slowtmr+0x252>
    if (pcb->state == LAST_ACK) {
 8009396:	2b09      	cmp	r3, #9
 8009398:	d030      	beq.n	80093fc <tcp_slowtmr+0x264>
    if (pcb_remove) {
 800939a:	2d00      	cmp	r5, #0
 800939c:	d137      	bne.n	800940e <tcp_slowtmr+0x276>
      pcb = pcb->next;
 800939e:	68e5      	ldr	r5, [r4, #12]
      ++prev->polltmr;
 80093a0:	7ee3      	ldrb	r3, [r4, #27]
 80093a2:	3301      	adds	r3, #1
 80093a4:	b2db      	uxtb	r3, r3
 80093a6:	76e3      	strb	r3, [r4, #27]
      if (prev->polltmr >= prev->pollinterval) {
 80093a8:	7f22      	ldrb	r2, [r4, #28]
 80093aa:	4293      	cmp	r3, r2
 80093ac:	f0c0 8098 	bcc.w	80094e0 <tcp_slowtmr+0x348>
        prev->polltmr = 0;
 80093b0:	2300      	movs	r3, #0
 80093b2:	76e3      	strb	r3, [r4, #27]
        tcp_active_pcbs_changed = 0;
 80093b4:	4a34      	ldr	r2, [pc, #208]	; (8009488 <tcp_slowtmr+0x2f0>)
 80093b6:	7013      	strb	r3, [r2, #0]
        TCP_EVENT_POLL(prev, err);
 80093b8:	f8d4 3088 	ldr.w	r3, [r4, #136]	; 0x88
 80093bc:	2b00      	cmp	r3, #0
 80093be:	f000 8087 	beq.w	80094d0 <tcp_slowtmr+0x338>
 80093c2:	4621      	mov	r1, r4
 80093c4:	6920      	ldr	r0, [r4, #16]
 80093c6:	4798      	blx	r3
        if (tcp_active_pcbs_changed) {
 80093c8:	4b2f      	ldr	r3, [pc, #188]	; (8009488 <tcp_slowtmr+0x2f0>)
 80093ca:	781b      	ldrb	r3, [r3, #0]
 80093cc:	2b00      	cmp	r3, #0
 80093ce:	f47f aeee 	bne.w	80091ae <tcp_slowtmr+0x16>
        if (err == ERR_OK) {
 80093d2:	2800      	cmp	r0, #0
 80093d4:	d07e      	beq.n	80094d4 <tcp_slowtmr+0x33c>
      prev = pcb;
 80093d6:	4626      	mov	r6, r4
      pcb = pcb->next;
 80093d8:	462c      	mov	r4, r5
 80093da:	e705      	b.n	80091e8 <tcp_slowtmr+0x50>
    pcb_reset = 0;
 80093dc:	2700      	movs	r7, #0
 80093de:	e7ca      	b.n	8009376 <tcp_slowtmr+0x1de>
      tcp_segs_free(pcb->ooseq);
 80093e0:	f7ff fe29 	bl	8009036 <tcp_segs_free>
      pcb->ooseq = NULL;
 80093e4:	2300      	movs	r3, #0
 80093e6:	6723      	str	r3, [r4, #112]	; 0x70
 80093e8:	e7d2      	b.n	8009390 <tcp_slowtmr+0x1f8>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 80093ea:	6a21      	ldr	r1, [r4, #32]
 80093ec:	4a1a      	ldr	r2, [pc, #104]	; (8009458 <tcp_slowtmr+0x2c0>)
 80093ee:	6812      	ldr	r2, [r2, #0]
 80093f0:	1a52      	subs	r2, r2, r1
 80093f2:	2a28      	cmp	r2, #40	; 0x28
 80093f4:	d9cf      	bls.n	8009396 <tcp_slowtmr+0x1fe>
        ++pcb_remove;
 80093f6:	3501      	adds	r5, #1
 80093f8:	b2ed      	uxtb	r5, r5
 80093fa:	e7cc      	b.n	8009396 <tcp_slowtmr+0x1fe>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 80093fc:	6a22      	ldr	r2, [r4, #32]
 80093fe:	4b16      	ldr	r3, [pc, #88]	; (8009458 <tcp_slowtmr+0x2c0>)
 8009400:	681b      	ldr	r3, [r3, #0]
 8009402:	1a9b      	subs	r3, r3, r2
 8009404:	2bf0      	cmp	r3, #240	; 0xf0
 8009406:	d9c8      	bls.n	800939a <tcp_slowtmr+0x202>
        ++pcb_remove;
 8009408:	3501      	adds	r5, #1
 800940a:	b2ed      	uxtb	r5, r5
 800940c:	e7c5      	b.n	800939a <tcp_slowtmr+0x202>
      tcp_err_fn err_fn = pcb->errf;
 800940e:	f8d4 508c 	ldr.w	r5, [r4, #140]	; 0x8c
      tcp_pcb_purge(pcb);
 8009412:	4620      	mov	r0, r4
 8009414:	f7ff fe9e 	bl	8009154 <tcp_pcb_purge>
      if (prev != NULL) {
 8009418:	2e00      	cmp	r6, #0
 800941a:	d03f      	beq.n	800949c <tcp_slowtmr+0x304>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 800941c:	4b10      	ldr	r3, [pc, #64]	; (8009460 <tcp_slowtmr+0x2c8>)
 800941e:	681b      	ldr	r3, [r3, #0]
 8009420:	429c      	cmp	r4, r3
 8009422:	d033      	beq.n	800948c <tcp_slowtmr+0x2f4>
        prev->next = pcb->next;
 8009424:	68e3      	ldr	r3, [r4, #12]
 8009426:	60f3      	str	r3, [r6, #12]
      if (pcb_reset) {
 8009428:	2f00      	cmp	r7, #0
 800942a:	d146      	bne.n	80094ba <tcp_slowtmr+0x322>
      err_arg = pcb->callback_arg;
 800942c:	f8d4 8010 	ldr.w	r8, [r4, #16]
      pcb = pcb->next;
 8009430:	68e7      	ldr	r7, [r4, #12]
      memp_free(MEMP_TCP_PCB, pcb2);
 8009432:	4621      	mov	r1, r4
 8009434:	2001      	movs	r0, #1
 8009436:	f7fe ff2f 	bl	8008298 <memp_free>
      tcp_active_pcbs_changed = 0;
 800943a:	2200      	movs	r2, #0
 800943c:	4b12      	ldr	r3, [pc, #72]	; (8009488 <tcp_slowtmr+0x2f0>)
 800943e:	701a      	strb	r2, [r3, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 8009440:	b11d      	cbz	r5, 800944a <tcp_slowtmr+0x2b2>
 8009442:	f06f 010c 	mvn.w	r1, #12
 8009446:	4640      	mov	r0, r8
 8009448:	47a8      	blx	r5
      if (tcp_active_pcbs_changed) {
 800944a:	4b0f      	ldr	r3, [pc, #60]	; (8009488 <tcp_slowtmr+0x2f0>)
 800944c:	781b      	ldrb	r3, [r3, #0]
 800944e:	2b00      	cmp	r3, #0
 8009450:	f47f aead 	bne.w	80091ae <tcp_slowtmr+0x16>
      pcb = pcb->next;
 8009454:	463c      	mov	r4, r7
 8009456:	e6c7      	b.n	80091e8 <tcp_slowtmr+0x50>
 8009458:	20007980 	.word	0x20007980
 800945c:	20003f82 	.word	0x20003f82
 8009460:	2000797c 	.word	0x2000797c
 8009464:	0800f970 	.word	0x0800f970
 8009468:	0800fb08 	.word	0x0800fb08
 800946c:	0800e3b0 	.word	0x0800e3b0
 8009470:	0800fb34 	.word	0x0800fb34
 8009474:	0800fb60 	.word	0x0800fb60
 8009478:	0800fa44 	.word	0x0800fa44
 800947c:	0800f8e4 	.word	0x0800f8e4
 8009480:	10624dd3 	.word	0x10624dd3
 8009484:	000124f8 	.word	0x000124f8
 8009488:	20007978 	.word	0x20007978
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 800948c:	4b39      	ldr	r3, [pc, #228]	; (8009574 <tcp_slowtmr+0x3dc>)
 800948e:	f240 4289 	movw	r2, #1161	; 0x489
 8009492:	4939      	ldr	r1, [pc, #228]	; (8009578 <tcp_slowtmr+0x3e0>)
 8009494:	4839      	ldr	r0, [pc, #228]	; (800957c <tcp_slowtmr+0x3e4>)
 8009496:	f004 fb98 	bl	800dbca <iprintf>
 800949a:	e7c3      	b.n	8009424 <tcp_slowtmr+0x28c>
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 800949c:	4b38      	ldr	r3, [pc, #224]	; (8009580 <tcp_slowtmr+0x3e8>)
 800949e:	681b      	ldr	r3, [r3, #0]
 80094a0:	429c      	cmp	r4, r3
 80094a2:	d006      	beq.n	80094b2 <tcp_slowtmr+0x31a>
 80094a4:	4b33      	ldr	r3, [pc, #204]	; (8009574 <tcp_slowtmr+0x3dc>)
 80094a6:	f240 428d 	movw	r2, #1165	; 0x48d
 80094aa:	4936      	ldr	r1, [pc, #216]	; (8009584 <tcp_slowtmr+0x3ec>)
 80094ac:	4833      	ldr	r0, [pc, #204]	; (800957c <tcp_slowtmr+0x3e4>)
 80094ae:	f004 fb8c 	bl	800dbca <iprintf>
        tcp_active_pcbs = pcb->next;
 80094b2:	68e2      	ldr	r2, [r4, #12]
 80094b4:	4b32      	ldr	r3, [pc, #200]	; (8009580 <tcp_slowtmr+0x3e8>)
 80094b6:	601a      	str	r2, [r3, #0]
 80094b8:	e7b6      	b.n	8009428 <tcp_slowtmr+0x290>
        tcp_rst(pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 80094ba:	6a61      	ldr	r1, [r4, #36]	; 0x24
 80094bc:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 80094be:	8b23      	ldrh	r3, [r4, #24]
 80094c0:	9301      	str	r3, [sp, #4]
 80094c2:	8ae3      	ldrh	r3, [r4, #22]
 80094c4:	9300      	str	r3, [sp, #0]
 80094c6:	1d23      	adds	r3, r4, #4
 80094c8:	4622      	mov	r2, r4
 80094ca:	f002 fe91 	bl	800c1f0 <tcp_rst>
 80094ce:	e7ad      	b.n	800942c <tcp_slowtmr+0x294>
        TCP_EVENT_POLL(prev, err);
 80094d0:	2000      	movs	r0, #0
 80094d2:	e779      	b.n	80093c8 <tcp_slowtmr+0x230>
          tcp_output(prev);
 80094d4:	4620      	mov	r0, r4
 80094d6:	f002 fd2f 	bl	800bf38 <tcp_output>
      prev = pcb;
 80094da:	4626      	mov	r6, r4
      pcb = pcb->next;
 80094dc:	462c      	mov	r4, r5
 80094de:	e683      	b.n	80091e8 <tcp_slowtmr+0x50>
      prev = pcb;
 80094e0:	4626      	mov	r6, r4
      pcb = pcb->next;
 80094e2:	462c      	mov	r4, r5
 80094e4:	e680      	b.n	80091e8 <tcp_slowtmr+0x50>
  pcb = tcp_tw_pcbs;
 80094e6:	4b28      	ldr	r3, [pc, #160]	; (8009588 <tcp_slowtmr+0x3f0>)
 80094e8:	681d      	ldr	r5, [r3, #0]
  while (pcb != NULL) {
 80094ea:	e003      	b.n	80094f4 <tcp_slowtmr+0x35c>
      ++pcb_remove;
 80094ec:	2301      	movs	r3, #1
    if (pcb_remove) {
 80094ee:	b9ab      	cbnz	r3, 800951c <tcp_slowtmr+0x384>
      prev = pcb;
 80094f0:	462c      	mov	r4, r5
      pcb = pcb->next;
 80094f2:	68ed      	ldr	r5, [r5, #12]
  while (pcb != NULL) {
 80094f4:	2d00      	cmp	r5, #0
 80094f6:	d039      	beq.n	800956c <tcp_slowtmr+0x3d4>
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 80094f8:	7d2b      	ldrb	r3, [r5, #20]
 80094fa:	2b0a      	cmp	r3, #10
 80094fc:	d006      	beq.n	800950c <tcp_slowtmr+0x374>
 80094fe:	4b1d      	ldr	r3, [pc, #116]	; (8009574 <tcp_slowtmr+0x3dc>)
 8009500:	f240 42bd 	movw	r2, #1213	; 0x4bd
 8009504:	4921      	ldr	r1, [pc, #132]	; (800958c <tcp_slowtmr+0x3f4>)
 8009506:	481d      	ldr	r0, [pc, #116]	; (800957c <tcp_slowtmr+0x3e4>)
 8009508:	f004 fb5f 	bl	800dbca <iprintf>
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 800950c:	6a2a      	ldr	r2, [r5, #32]
 800950e:	4b20      	ldr	r3, [pc, #128]	; (8009590 <tcp_slowtmr+0x3f8>)
 8009510:	681b      	ldr	r3, [r3, #0]
 8009512:	1a9b      	subs	r3, r3, r2
 8009514:	2bf0      	cmp	r3, #240	; 0xf0
 8009516:	d8e9      	bhi.n	80094ec <tcp_slowtmr+0x354>
    pcb_remove = 0;
 8009518:	2300      	movs	r3, #0
 800951a:	e7e8      	b.n	80094ee <tcp_slowtmr+0x356>
      tcp_pcb_purge(pcb);
 800951c:	4628      	mov	r0, r5
 800951e:	f7ff fe19 	bl	8009154 <tcp_pcb_purge>
      if (prev != NULL) {
 8009522:	b1a4      	cbz	r4, 800954e <tcp_slowtmr+0x3b6>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 8009524:	4b18      	ldr	r3, [pc, #96]	; (8009588 <tcp_slowtmr+0x3f0>)
 8009526:	681b      	ldr	r3, [r3, #0]
 8009528:	429d      	cmp	r5, r3
 800952a:	d008      	beq.n	800953e <tcp_slowtmr+0x3a6>
        prev->next = pcb->next;
 800952c:	68eb      	ldr	r3, [r5, #12]
 800952e:	60e3      	str	r3, [r4, #12]
      pcb = pcb->next;
 8009530:	68ee      	ldr	r6, [r5, #12]
      memp_free(MEMP_TCP_PCB, pcb2);
 8009532:	4629      	mov	r1, r5
 8009534:	2001      	movs	r0, #1
 8009536:	f7fe feaf 	bl	8008298 <memp_free>
      pcb = pcb->next;
 800953a:	4635      	mov	r5, r6
 800953c:	e7da      	b.n	80094f4 <tcp_slowtmr+0x35c>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 800953e:	4b0d      	ldr	r3, [pc, #52]	; (8009574 <tcp_slowtmr+0x3dc>)
 8009540:	f240 42cb 	movw	r2, #1227	; 0x4cb
 8009544:	4913      	ldr	r1, [pc, #76]	; (8009594 <tcp_slowtmr+0x3fc>)
 8009546:	480d      	ldr	r0, [pc, #52]	; (800957c <tcp_slowtmr+0x3e4>)
 8009548:	f004 fb3f 	bl	800dbca <iprintf>
 800954c:	e7ee      	b.n	800952c <tcp_slowtmr+0x394>
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 800954e:	4b0e      	ldr	r3, [pc, #56]	; (8009588 <tcp_slowtmr+0x3f0>)
 8009550:	681b      	ldr	r3, [r3, #0]
 8009552:	429d      	cmp	r5, r3
 8009554:	d006      	beq.n	8009564 <tcp_slowtmr+0x3cc>
 8009556:	4b07      	ldr	r3, [pc, #28]	; (8009574 <tcp_slowtmr+0x3dc>)
 8009558:	f240 42cf 	movw	r2, #1231	; 0x4cf
 800955c:	490e      	ldr	r1, [pc, #56]	; (8009598 <tcp_slowtmr+0x400>)
 800955e:	4807      	ldr	r0, [pc, #28]	; (800957c <tcp_slowtmr+0x3e4>)
 8009560:	f004 fb33 	bl	800dbca <iprintf>
        tcp_tw_pcbs = pcb->next;
 8009564:	68ea      	ldr	r2, [r5, #12]
 8009566:	4b08      	ldr	r3, [pc, #32]	; (8009588 <tcp_slowtmr+0x3f0>)
 8009568:	601a      	str	r2, [r3, #0]
 800956a:	e7e1      	b.n	8009530 <tcp_slowtmr+0x398>
}
 800956c:	b002      	add	sp, #8
 800956e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009572:	bf00      	nop
 8009574:	0800f970 	.word	0x0800f970
 8009578:	0800fb90 	.word	0x0800fb90
 800957c:	0800e3b0 	.word	0x0800e3b0
 8009580:	2000797c 	.word	0x2000797c
 8009584:	0800fbbc 	.word	0x0800fbbc
 8009588:	2000798c 	.word	0x2000798c
 800958c:	0800fbe8 	.word	0x0800fbe8
 8009590:	20007980 	.word	0x20007980
 8009594:	0800fc18 	.word	0x0800fc18
 8009598:	0800fc40 	.word	0x0800fc40

0800959c <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
 800959c:	b510      	push	{r4, lr}
 800959e:	460c      	mov	r4, r1
  TCP_RMV(pcblist, pcb);
 80095a0:	6803      	ldr	r3, [r0, #0]
 80095a2:	428b      	cmp	r3, r1
 80095a4:	d005      	beq.n	80095b2 <tcp_pcb_remove+0x16>
 80095a6:	b14b      	cbz	r3, 80095bc <tcp_pcb_remove+0x20>
 80095a8:	68da      	ldr	r2, [r3, #12]
 80095aa:	4294      	cmp	r4, r2
 80095ac:	d004      	beq.n	80095b8 <tcp_pcb_remove+0x1c>
 80095ae:	4613      	mov	r3, r2
 80095b0:	e7f9      	b.n	80095a6 <tcp_pcb_remove+0xa>
 80095b2:	68db      	ldr	r3, [r3, #12]
 80095b4:	6003      	str	r3, [r0, #0]
 80095b6:	e001      	b.n	80095bc <tcp_pcb_remove+0x20>
 80095b8:	68e2      	ldr	r2, [r4, #12]
 80095ba:	60da      	str	r2, [r3, #12]
 80095bc:	2300      	movs	r3, #0
 80095be:	60e3      	str	r3, [r4, #12]

  tcp_pcb_purge(pcb);
 80095c0:	4620      	mov	r0, r4
 80095c2:	f7ff fdc7 	bl	8009154 <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if (pcb->state != TIME_WAIT &&
 80095c6:	7d23      	ldrb	r3, [r4, #20]
 80095c8:	2b0a      	cmp	r3, #10
 80095ca:	d005      	beq.n	80095d8 <tcp_pcb_remove+0x3c>
 80095cc:	2b01      	cmp	r3, #1
 80095ce:	d003      	beq.n	80095d8 <tcp_pcb_remove+0x3c>
     pcb->state != LISTEN &&
     pcb->flags & TF_ACK_DELAY) {
 80095d0:	7ea3      	ldrb	r3, [r4, #26]
     pcb->state != LISTEN &&
 80095d2:	f013 0f01 	tst.w	r3, #1
 80095d6:	d121      	bne.n	800961c <tcp_pcb_remove+0x80>
    pcb->flags |= TF_ACK_NOW;
    tcp_output(pcb);
  }

  if (pcb->state != LISTEN) {
 80095d8:	7d23      	ldrb	r3, [r4, #20]
 80095da:	2b01      	cmp	r3, #1
 80095dc:	d01a      	beq.n	8009614 <tcp_pcb_remove+0x78>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 80095de:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 80095e0:	b133      	cbz	r3, 80095f0 <tcp_pcb_remove+0x54>
 80095e2:	4b12      	ldr	r3, [pc, #72]	; (800962c <tcp_pcb_remove+0x90>)
 80095e4:	f240 7253 	movw	r2, #1875	; 0x753
 80095e8:	4911      	ldr	r1, [pc, #68]	; (8009630 <tcp_pcb_remove+0x94>)
 80095ea:	4812      	ldr	r0, [pc, #72]	; (8009634 <tcp_pcb_remove+0x98>)
 80095ec:	f004 faed 	bl	800dbca <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 80095f0:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 80095f2:	b133      	cbz	r3, 8009602 <tcp_pcb_remove+0x66>
 80095f4:	4b0d      	ldr	r3, [pc, #52]	; (800962c <tcp_pcb_remove+0x90>)
 80095f6:	f240 7254 	movw	r2, #1876	; 0x754
 80095fa:	490f      	ldr	r1, [pc, #60]	; (8009638 <tcp_pcb_remove+0x9c>)
 80095fc:	480d      	ldr	r0, [pc, #52]	; (8009634 <tcp_pcb_remove+0x98>)
 80095fe:	f004 fae4 	bl	800dbca <iprintf>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 8009602:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8009604:	b133      	cbz	r3, 8009614 <tcp_pcb_remove+0x78>
 8009606:	4b09      	ldr	r3, [pc, #36]	; (800962c <tcp_pcb_remove+0x90>)
 8009608:	f240 7256 	movw	r2, #1878	; 0x756
 800960c:	490b      	ldr	r1, [pc, #44]	; (800963c <tcp_pcb_remove+0xa0>)
 800960e:	4809      	ldr	r0, [pc, #36]	; (8009634 <tcp_pcb_remove+0x98>)
 8009610:	f004 fadb 	bl	800dbca <iprintf>
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 8009614:	2300      	movs	r3, #0
 8009616:	7523      	strb	r3, [r4, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 8009618:	82e3      	strh	r3, [r4, #22]
 800961a:	bd10      	pop	{r4, pc}
    pcb->flags |= TF_ACK_NOW;
 800961c:	f043 0302 	orr.w	r3, r3, #2
 8009620:	76a3      	strb	r3, [r4, #26]
    tcp_output(pcb);
 8009622:	4620      	mov	r0, r4
 8009624:	f002 fc88 	bl	800bf38 <tcp_output>
 8009628:	e7d6      	b.n	80095d8 <tcp_pcb_remove+0x3c>
 800962a:	bf00      	nop
 800962c:	0800f970 	.word	0x0800f970
 8009630:	0800f9f8 	.word	0x0800f9f8
 8009634:	0800e3b0 	.word	0x0800e3b0
 8009638:	0800fa10 	.word	0x0800fa10
 800963c:	0800fa2c 	.word	0x0800fa2c

08009640 <tcp_close_shutdown>:
{
 8009640:	b510      	push	{r4, lr}
 8009642:	b082      	sub	sp, #8
 8009644:	4604      	mov	r4, r0
  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 8009646:	b121      	cbz	r1, 8009652 <tcp_close_shutdown+0x12>
 8009648:	7d03      	ldrb	r3, [r0, #20]
 800964a:	2b04      	cmp	r3, #4
 800964c:	d00c      	beq.n	8009668 <tcp_close_shutdown+0x28>
 800964e:	2b07      	cmp	r3, #7
 8009650:	d00a      	beq.n	8009668 <tcp_close_shutdown+0x28>
  switch (pcb->state) {
 8009652:	7d23      	ldrb	r3, [r4, #20]
 8009654:	2b01      	cmp	r3, #1
 8009656:	d072      	beq.n	800973e <tcp_close_shutdown+0xfe>
 8009658:	2b00      	cmp	r3, #0
 800965a:	d055      	beq.n	8009708 <tcp_close_shutdown+0xc8>
 800965c:	2b02      	cmp	r3, #2
 800965e:	d07b      	beq.n	8009758 <tcp_close_shutdown+0x118>
    return tcp_close_shutdown_fin(pcb);
 8009660:	4620      	mov	r0, r4
 8009662:	f7ff fb65 	bl	8008d30 <tcp_close_shutdown_fin>
 8009666:	e068      	b.n	800973a <tcp_close_shutdown+0xfa>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 8009668:	6f63      	ldr	r3, [r4, #116]	; 0x74
 800966a:	b1d3      	cbz	r3, 80096a2 <tcp_close_shutdown+0x62>
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 800966c:	7ea3      	ldrb	r3, [r4, #26]
 800966e:	f013 0f10 	tst.w	r3, #16
 8009672:	d01b      	beq.n	80096ac <tcp_close_shutdown+0x6c>
      tcp_rst(pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 8009674:	8b23      	ldrh	r3, [r4, #24]
 8009676:	9301      	str	r3, [sp, #4]
 8009678:	8ae3      	ldrh	r3, [r4, #22]
 800967a:	9300      	str	r3, [sp, #0]
 800967c:	1d23      	adds	r3, r4, #4
 800967e:	4622      	mov	r2, r4
 8009680:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8009682:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 8009684:	f002 fdb4 	bl	800c1f0 <tcp_rst>
      tcp_pcb_purge(pcb);
 8009688:	4620      	mov	r0, r4
 800968a:	f7ff fd63 	bl	8009154 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 800968e:	4b38      	ldr	r3, [pc, #224]	; (8009770 <tcp_close_shutdown+0x130>)
 8009690:	681b      	ldr	r3, [r3, #0]
 8009692:	429c      	cmp	r4, r3
 8009694:	d012      	beq.n	80096bc <tcp_close_shutdown+0x7c>
 8009696:	b1bb      	cbz	r3, 80096c8 <tcp_close_shutdown+0x88>
 8009698:	68da      	ldr	r2, [r3, #12]
 800969a:	4294      	cmp	r4, r2
 800969c:	d012      	beq.n	80096c4 <tcp_close_shutdown+0x84>
 800969e:	4613      	mov	r3, r2
 80096a0:	e7f9      	b.n	8009696 <tcp_close_shutdown+0x56>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 80096a2:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 80096a4:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 80096a8:	d1e0      	bne.n	800966c <tcp_close_shutdown+0x2c>
 80096aa:	e7d2      	b.n	8009652 <tcp_close_shutdown+0x12>
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 80096ac:	4b31      	ldr	r3, [pc, #196]	; (8009774 <tcp_close_shutdown+0x134>)
 80096ae:	f240 120f 	movw	r2, #271	; 0x10f
 80096b2:	4931      	ldr	r1, [pc, #196]	; (8009778 <tcp_close_shutdown+0x138>)
 80096b4:	4831      	ldr	r0, [pc, #196]	; (800977c <tcp_close_shutdown+0x13c>)
 80096b6:	f004 fa88 	bl	800dbca <iprintf>
 80096ba:	e7db      	b.n	8009674 <tcp_close_shutdown+0x34>
      TCP_RMV_ACTIVE(pcb);
 80096bc:	68da      	ldr	r2, [r3, #12]
 80096be:	4b2c      	ldr	r3, [pc, #176]	; (8009770 <tcp_close_shutdown+0x130>)
 80096c0:	601a      	str	r2, [r3, #0]
 80096c2:	e001      	b.n	80096c8 <tcp_close_shutdown+0x88>
 80096c4:	68e2      	ldr	r2, [r4, #12]
 80096c6:	60da      	str	r2, [r3, #12]
 80096c8:	2300      	movs	r3, #0
 80096ca:	60e3      	str	r3, [r4, #12]
 80096cc:	2201      	movs	r2, #1
 80096ce:	4b2c      	ldr	r3, [pc, #176]	; (8009780 <tcp_close_shutdown+0x140>)
 80096d0:	701a      	strb	r2, [r3, #0]
      if (pcb->state == ESTABLISHED) {
 80096d2:	7d23      	ldrb	r3, [r4, #20]
 80096d4:	2b04      	cmp	r3, #4
 80096d6:	d009      	beq.n	80096ec <tcp_close_shutdown+0xac>
        if (tcp_input_pcb == pcb) {
 80096d8:	4b2a      	ldr	r3, [pc, #168]	; (8009784 <tcp_close_shutdown+0x144>)
 80096da:	681b      	ldr	r3, [r3, #0]
 80096dc:	429c      	cmp	r4, r3
 80096de:	d00f      	beq.n	8009700 <tcp_close_shutdown+0xc0>
          memp_free(MEMP_TCP_PCB, pcb);
 80096e0:	4621      	mov	r1, r4
 80096e2:	2001      	movs	r0, #1
 80096e4:	f7fe fdd8 	bl	8008298 <memp_free>
      return ERR_OK;
 80096e8:	2000      	movs	r0, #0
 80096ea:	e026      	b.n	800973a <tcp_close_shutdown+0xfa>
        pcb->state = TIME_WAIT;
 80096ec:	230a      	movs	r3, #10
 80096ee:	7523      	strb	r3, [r4, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 80096f0:	4b25      	ldr	r3, [pc, #148]	; (8009788 <tcp_close_shutdown+0x148>)
 80096f2:	681a      	ldr	r2, [r3, #0]
 80096f4:	60e2      	str	r2, [r4, #12]
 80096f6:	601c      	str	r4, [r3, #0]
 80096f8:	f002 ff80 	bl	800c5fc <tcp_timer_needed>
      return ERR_OK;
 80096fc:	2000      	movs	r0, #0
 80096fe:	e01c      	b.n	800973a <tcp_close_shutdown+0xfa>
          tcp_trigger_input_pcb_close();
 8009700:	f001 feca 	bl	800b498 <tcp_trigger_input_pcb_close>
      return ERR_OK;
 8009704:	2000      	movs	r0, #0
 8009706:	e018      	b.n	800973a <tcp_close_shutdown+0xfa>
    if (pcb->local_port != 0) {
 8009708:	8ae3      	ldrh	r3, [r4, #22]
 800970a:	b18b      	cbz	r3, 8009730 <tcp_close_shutdown+0xf0>
      TCP_RMV(&tcp_bound_pcbs, pcb);
 800970c:	4b1f      	ldr	r3, [pc, #124]	; (800978c <tcp_close_shutdown+0x14c>)
 800970e:	681b      	ldr	r3, [r3, #0]
 8009710:	429c      	cmp	r4, r3
 8009712:	d005      	beq.n	8009720 <tcp_close_shutdown+0xe0>
 8009714:	b153      	cbz	r3, 800972c <tcp_close_shutdown+0xec>
 8009716:	68da      	ldr	r2, [r3, #12]
 8009718:	4294      	cmp	r4, r2
 800971a:	d005      	beq.n	8009728 <tcp_close_shutdown+0xe8>
 800971c:	4613      	mov	r3, r2
 800971e:	e7f9      	b.n	8009714 <tcp_close_shutdown+0xd4>
 8009720:	68da      	ldr	r2, [r3, #12]
 8009722:	4b1a      	ldr	r3, [pc, #104]	; (800978c <tcp_close_shutdown+0x14c>)
 8009724:	601a      	str	r2, [r3, #0]
 8009726:	e001      	b.n	800972c <tcp_close_shutdown+0xec>
 8009728:	68e2      	ldr	r2, [r4, #12]
 800972a:	60da      	str	r2, [r3, #12]
 800972c:	2300      	movs	r3, #0
 800972e:	60e3      	str	r3, [r4, #12]
    memp_free(MEMP_TCP_PCB, pcb);
 8009730:	4621      	mov	r1, r4
 8009732:	2001      	movs	r0, #1
 8009734:	f7fe fdb0 	bl	8008298 <memp_free>
  return ERR_OK;
 8009738:	2000      	movs	r0, #0
}
 800973a:	b002      	add	sp, #8
 800973c:	bd10      	pop	{r4, pc}
    tcp_listen_closed(pcb);
 800973e:	4620      	mov	r0, r4
 8009740:	f7ff facc 	bl	8008cdc <tcp_listen_closed>
    tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 8009744:	4621      	mov	r1, r4
 8009746:	4812      	ldr	r0, [pc, #72]	; (8009790 <tcp_close_shutdown+0x150>)
 8009748:	f7ff ff28 	bl	800959c <tcp_pcb_remove>
    memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 800974c:	4621      	mov	r1, r4
 800974e:	2002      	movs	r0, #2
 8009750:	f7fe fda2 	bl	8008298 <memp_free>
  return ERR_OK;
 8009754:	2000      	movs	r0, #0
    break;
 8009756:	e7f0      	b.n	800973a <tcp_close_shutdown+0xfa>
    TCP_PCB_REMOVE_ACTIVE(pcb);
 8009758:	4621      	mov	r1, r4
 800975a:	4805      	ldr	r0, [pc, #20]	; (8009770 <tcp_close_shutdown+0x130>)
 800975c:	f7ff ff1e 	bl	800959c <tcp_pcb_remove>
 8009760:	2001      	movs	r0, #1
 8009762:	4b07      	ldr	r3, [pc, #28]	; (8009780 <tcp_close_shutdown+0x140>)
 8009764:	7018      	strb	r0, [r3, #0]
    memp_free(MEMP_TCP_PCB, pcb);
 8009766:	4621      	mov	r1, r4
 8009768:	f7fe fd96 	bl	8008298 <memp_free>
  return ERR_OK;
 800976c:	2000      	movs	r0, #0
    break;
 800976e:	e7e4      	b.n	800973a <tcp_close_shutdown+0xfa>
 8009770:	2000797c 	.word	0x2000797c
 8009774:	0800f970 	.word	0x0800f970
 8009778:	0800f91c 	.word	0x0800f91c
 800977c:	0800e3b0 	.word	0x0800e3b0
 8009780:	20007978 	.word	0x20007978
 8009784:	20007990 	.word	0x20007990
 8009788:	2000798c 	.word	0x2000798c
 800978c:	20007988 	.word	0x20007988
 8009790:	20007984 	.word	0x20007984

08009794 <tcp_close>:
{
 8009794:	b508      	push	{r3, lr}
  if (pcb->state != LISTEN) {
 8009796:	7d03      	ldrb	r3, [r0, #20]
 8009798:	2b01      	cmp	r3, #1
 800979a:	d003      	beq.n	80097a4 <tcp_close+0x10>
    pcb->flags |= TF_RXCLOSED;
 800979c:	7e83      	ldrb	r3, [r0, #26]
 800979e:	f043 0310 	orr.w	r3, r3, #16
 80097a2:	7683      	strb	r3, [r0, #26]
  return tcp_close_shutdown(pcb, 1);
 80097a4:	2101      	movs	r1, #1
 80097a6:	f7ff ff4b 	bl	8009640 <tcp_close_shutdown>
}
 80097aa:	bd08      	pop	{r3, pc}

080097ac <tcp_recv_null>:
{
 80097ac:	b510      	push	{r4, lr}
 80097ae:	4608      	mov	r0, r1
  if (p != NULL) {
 80097b0:	b142      	cbz	r2, 80097c4 <tcp_recv_null+0x18>
 80097b2:	4614      	mov	r4, r2
    tcp_recved(pcb, p->tot_len);
 80097b4:	8911      	ldrh	r1, [r2, #8]
 80097b6:	f7ff fbef 	bl	8008f98 <tcp_recved>
    pbuf_free(p);
 80097ba:	4620      	mov	r0, r4
 80097bc:	f7fe ff42 	bl	8008644 <pbuf_free>
  return ERR_OK;
 80097c0:	2000      	movs	r0, #0
 80097c2:	bd10      	pop	{r4, pc}
  } else if (err == ERR_OK) {
 80097c4:	b10b      	cbz	r3, 80097ca <tcp_recv_null+0x1e>
  return ERR_OK;
 80097c6:	2000      	movs	r0, #0
}
 80097c8:	bd10      	pop	{r4, pc}
    return tcp_close(pcb);
 80097ca:	f7ff ffe3 	bl	8009794 <tcp_close>
 80097ce:	bd10      	pop	{r4, pc}

080097d0 <tcp_process_refused_data>:
{
 80097d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80097d2:	4604      	mov	r4, r0
    u8_t refused_flags = pcb->refused_data->flags;
 80097d4:	6f46      	ldr	r6, [r0, #116]	; 0x74
 80097d6:	7b77      	ldrb	r7, [r6, #13]
    pcb->refused_data = NULL;
 80097d8:	2300      	movs	r3, #0
 80097da:	6743      	str	r3, [r0, #116]	; 0x74
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 80097dc:	f8d0 5080 	ldr.w	r5, [r0, #128]	; 0x80
 80097e0:	b1dd      	cbz	r5, 800981a <tcp_process_refused_data+0x4a>
 80097e2:	4632      	mov	r2, r6
 80097e4:	4601      	mov	r1, r0
 80097e6:	6900      	ldr	r0, [r0, #16]
 80097e8:	47a8      	blx	r5
 80097ea:	4605      	mov	r5, r0
    if (err == ERR_OK) {
 80097ec:	b9fd      	cbnz	r5, 800982e <tcp_process_refused_data+0x5e>
      if (refused_flags & PBUF_FLAG_TCP_FIN
 80097ee:	f017 0f20 	tst.w	r7, #32
 80097f2:	d022      	beq.n	800983a <tcp_process_refused_data+0x6a>
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 80097f4:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 80097f6:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 80097fa:	d001      	beq.n	8009800 <tcp_process_refused_data+0x30>
          pcb->rcv_wnd++;
 80097fc:	3301      	adds	r3, #1
 80097fe:	8523      	strh	r3, [r4, #40]	; 0x28
        TCP_EVENT_CLOSED(pcb, err);
 8009800:	f8d4 6080 	ldr.w	r6, [r4, #128]	; 0x80
 8009804:	b18e      	cbz	r6, 800982a <tcp_process_refused_data+0x5a>
 8009806:	2300      	movs	r3, #0
 8009808:	461a      	mov	r2, r3
 800980a:	4621      	mov	r1, r4
 800980c:	6920      	ldr	r0, [r4, #16]
 800980e:	47b0      	blx	r6
        if (err == ERR_ABRT) {
 8009810:	f110 0f0d 	cmn.w	r0, #13
 8009814:	d111      	bne.n	800983a <tcp_process_refused_data+0x6a>
          return ERR_ABRT;
 8009816:	4605      	mov	r5, r0
 8009818:	e00f      	b.n	800983a <tcp_process_refused_data+0x6a>
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 800981a:	2300      	movs	r3, #0
 800981c:	4632      	mov	r2, r6
 800981e:	4601      	mov	r1, r0
 8009820:	4618      	mov	r0, r3
 8009822:	f7ff ffc3 	bl	80097ac <tcp_recv_null>
 8009826:	4605      	mov	r5, r0
 8009828:	e7e0      	b.n	80097ec <tcp_process_refused_data+0x1c>
        TCP_EVENT_CLOSED(pcb, err);
 800982a:	4628      	mov	r0, r5
 800982c:	e7f0      	b.n	8009810 <tcp_process_refused_data+0x40>
    } else if (err == ERR_ABRT) {
 800982e:	f115 0f0d 	cmn.w	r5, #13
 8009832:	d002      	beq.n	800983a <tcp_process_refused_data+0x6a>
      pcb->refused_data = refused_data;
 8009834:	6766      	str	r6, [r4, #116]	; 0x74
      return ERR_INPROGRESS;
 8009836:	f06f 0504 	mvn.w	r5, #4
}
 800983a:	4628      	mov	r0, r5
 800983c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08009840 <tcp_fasttmr>:
{
 8009840:	b570      	push	{r4, r5, r6, lr}
  ++tcp_timer_ctr;
 8009842:	4a1c      	ldr	r2, [pc, #112]	; (80098b4 <tcp_fasttmr+0x74>)
 8009844:	7813      	ldrb	r3, [r2, #0]
 8009846:	3301      	adds	r3, #1
 8009848:	7013      	strb	r3, [r2, #0]
  pcb = tcp_active_pcbs;
 800984a:	4b1b      	ldr	r3, [pc, #108]	; (80098b8 <tcp_fasttmr+0x78>)
 800984c:	681c      	ldr	r4, [r3, #0]
  while (pcb != NULL) {
 800984e:	e013      	b.n	8009878 <tcp_fasttmr+0x38>
        tcp_ack_now(pcb);
 8009850:	f043 0302 	orr.w	r3, r3, #2
 8009854:	76a3      	strb	r3, [r4, #26]
        tcp_output(pcb);
 8009856:	4620      	mov	r0, r4
 8009858:	f002 fb6e 	bl	800bf38 <tcp_output>
        pcb->flags &= ~(TF_ACK_DELAY | TF_ACK_NOW);
 800985c:	7ea3      	ldrb	r3, [r4, #26]
 800985e:	f023 0303 	bic.w	r3, r3, #3
 8009862:	76a3      	strb	r3, [r4, #26]
 8009864:	e013      	b.n	800988e <tcp_fasttmr+0x4e>
        pcb->flags &= ~(TF_CLOSEPEND);
 8009866:	f023 0308 	bic.w	r3, r3, #8
 800986a:	76a3      	strb	r3, [r4, #26]
        tcp_close_shutdown_fin(pcb);
 800986c:	4620      	mov	r0, r4
 800986e:	f7ff fa5f 	bl	8008d30 <tcp_close_shutdown_fin>
 8009872:	e010      	b.n	8009896 <tcp_fasttmr+0x56>
      pcb = pcb->next;
 8009874:	68e5      	ldr	r5, [r4, #12]
{
 8009876:	462c      	mov	r4, r5
  while (pcb != NULL) {
 8009878:	b1dc      	cbz	r4, 80098b2 <tcp_fasttmr+0x72>
    if (pcb->last_timer != tcp_timer_ctr) {
 800987a:	7f62      	ldrb	r2, [r4, #29]
 800987c:	4b0d      	ldr	r3, [pc, #52]	; (80098b4 <tcp_fasttmr+0x74>)
 800987e:	781b      	ldrb	r3, [r3, #0]
 8009880:	429a      	cmp	r2, r3
 8009882:	d0f7      	beq.n	8009874 <tcp_fasttmr+0x34>
      pcb->last_timer = tcp_timer_ctr;
 8009884:	7763      	strb	r3, [r4, #29]
      if (pcb->flags & TF_ACK_DELAY) {
 8009886:	7ea3      	ldrb	r3, [r4, #26]
 8009888:	f013 0f01 	tst.w	r3, #1
 800988c:	d1e0      	bne.n	8009850 <tcp_fasttmr+0x10>
      if (pcb->flags & TF_CLOSEPEND) {
 800988e:	7ea3      	ldrb	r3, [r4, #26]
 8009890:	f013 0f08 	tst.w	r3, #8
 8009894:	d1e7      	bne.n	8009866 <tcp_fasttmr+0x26>
      next = pcb->next;
 8009896:	68e5      	ldr	r5, [r4, #12]
      if (pcb->refused_data != NULL) {
 8009898:	6f63      	ldr	r3, [r4, #116]	; 0x74
 800989a:	2b00      	cmp	r3, #0
 800989c:	d0eb      	beq.n	8009876 <tcp_fasttmr+0x36>
        tcp_active_pcbs_changed = 0;
 800989e:	4e07      	ldr	r6, [pc, #28]	; (80098bc <tcp_fasttmr+0x7c>)
 80098a0:	2300      	movs	r3, #0
 80098a2:	7033      	strb	r3, [r6, #0]
        tcp_process_refused_data(pcb);
 80098a4:	4620      	mov	r0, r4
 80098a6:	f7ff ff93 	bl	80097d0 <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 80098aa:	7833      	ldrb	r3, [r6, #0]
 80098ac:	2b00      	cmp	r3, #0
 80098ae:	d0e2      	beq.n	8009876 <tcp_fasttmr+0x36>
 80098b0:	e7cb      	b.n	800984a <tcp_fasttmr+0xa>
}
 80098b2:	bd70      	pop	{r4, r5, r6, pc}
 80098b4:	20003f82 	.word	0x20003f82
 80098b8:	2000797c 	.word	0x2000797c
 80098bc:	20007978 	.word	0x20007978

080098c0 <tcp_tmr>:
{
 80098c0:	b508      	push	{r3, lr}
  tcp_fasttmr();
 80098c2:	f7ff ffbd 	bl	8009840 <tcp_fasttmr>
  if (++tcp_timer & 1) {
 80098c6:	4a06      	ldr	r2, [pc, #24]	; (80098e0 <tcp_tmr+0x20>)
 80098c8:	7813      	ldrb	r3, [r2, #0]
 80098ca:	3301      	adds	r3, #1
 80098cc:	b2db      	uxtb	r3, r3
 80098ce:	7013      	strb	r3, [r2, #0]
 80098d0:	f013 0f01 	tst.w	r3, #1
 80098d4:	d100      	bne.n	80098d8 <tcp_tmr+0x18>
 80098d6:	bd08      	pop	{r3, pc}
    tcp_slowtmr();
 80098d8:	f7ff fc5e 	bl	8009198 <tcp_slowtmr>
}
 80098dc:	e7fb      	b.n	80098d6 <tcp_tmr+0x16>
 80098de:	bf00      	nop
 80098e0:	20003f81 	.word	0x20003f81

080098e4 <tcp_shutdown>:
  if (pcb->state == LISTEN) {
 80098e4:	7d03      	ldrb	r3, [r0, #20]
 80098e6:	2b01      	cmp	r3, #1
 80098e8:	d020      	beq.n	800992c <tcp_shutdown+0x48>
{
 80098ea:	b570      	push	{r4, r5, r6, lr}
 80098ec:	4616      	mov	r6, r2
 80098ee:	460d      	mov	r5, r1
 80098f0:	4604      	mov	r4, r0
  if (shut_rx) {
 80098f2:	b151      	cbz	r1, 800990a <tcp_shutdown+0x26>
    pcb->flags |= TF_RXCLOSED;
 80098f4:	7e83      	ldrb	r3, [r0, #26]
 80098f6:	f043 0310 	orr.w	r3, r3, #16
 80098fa:	7683      	strb	r3, [r0, #26]
    if (shut_tx) {
 80098fc:	b992      	cbnz	r2, 8009924 <tcp_shutdown+0x40>
    if (pcb->refused_data != NULL) {
 80098fe:	6f40      	ldr	r0, [r0, #116]	; 0x74
 8009900:	b118      	cbz	r0, 800990a <tcp_shutdown+0x26>
      pbuf_free(pcb->refused_data);
 8009902:	f7fe fe9f 	bl	8008644 <pbuf_free>
      pcb->refused_data = NULL;
 8009906:	2300      	movs	r3, #0
 8009908:	6763      	str	r3, [r4, #116]	; 0x74
  if (shut_tx) {
 800990a:	b196      	cbz	r6, 8009932 <tcp_shutdown+0x4e>
    switch (pcb->state) {
 800990c:	7d23      	ldrb	r3, [r4, #20]
 800990e:	2b03      	cmp	r3, #3
 8009910:	d311      	bcc.n	8009936 <tcp_shutdown+0x52>
 8009912:	2b04      	cmp	r3, #4
 8009914:	d901      	bls.n	800991a <tcp_shutdown+0x36>
 8009916:	2b07      	cmp	r3, #7
 8009918:	d10d      	bne.n	8009936 <tcp_shutdown+0x52>
      return tcp_close_shutdown(pcb, (u8_t)shut_rx);
 800991a:	b2e9      	uxtb	r1, r5
 800991c:	4620      	mov	r0, r4
 800991e:	f7ff fe8f 	bl	8009640 <tcp_close_shutdown>
 8009922:	bd70      	pop	{r4, r5, r6, pc}
      return tcp_close_shutdown(pcb, 1);
 8009924:	2101      	movs	r1, #1
 8009926:	f7ff fe8b 	bl	8009640 <tcp_close_shutdown>
 800992a:	bd70      	pop	{r4, r5, r6, pc}
    return ERR_CONN;
 800992c:	f06f 000a 	mvn.w	r0, #10
 8009930:	4770      	bx	lr
  return ERR_OK;
 8009932:	2000      	movs	r0, #0
 8009934:	bd70      	pop	{r4, r5, r6, pc}
      return ERR_CONN;
 8009936:	f06f 000a 	mvn.w	r0, #10
}
 800993a:	bd70      	pop	{r4, r5, r6, pc}

0800993c <tcp_abandon>:
{
 800993c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009940:	b082      	sub	sp, #8
 8009942:	4604      	mov	r4, r0
 8009944:	460d      	mov	r5, r1
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 8009946:	7d03      	ldrb	r3, [r0, #20]
 8009948:	2b01      	cmp	r3, #1
 800994a:	d01a      	beq.n	8009982 <tcp_abandon+0x46>
  if (pcb->state == TIME_WAIT) {
 800994c:	7d23      	ldrb	r3, [r4, #20]
 800994e:	2b0a      	cmp	r3, #10
 8009950:	d01f      	beq.n	8009992 <tcp_abandon+0x56>
    seqno = pcb->snd_nxt;
 8009952:	f8d4 804c 	ldr.w	r8, [r4, #76]	; 0x4c
    ackno = pcb->rcv_nxt;
 8009956:	f8d4 9024 	ldr.w	r9, [r4, #36]	; 0x24
    errf = pcb->errf;
 800995a:	f8d4 608c 	ldr.w	r6, [r4, #140]	; 0x8c
    errf_arg = pcb->callback_arg;
 800995e:	6927      	ldr	r7, [r4, #16]
    if (pcb->state == CLOSED) {
 8009960:	2b00      	cmp	r3, #0
 8009962:	d141      	bne.n	80099e8 <tcp_abandon+0xac>
      if (pcb->local_port != 0) {
 8009964:	f8b4 a016 	ldrh.w	sl, [r4, #22]
 8009968:	f1ba 0f00 	cmp.w	sl, #0
 800996c:	d046      	beq.n	80099fc <tcp_abandon+0xc0>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 800996e:	4b2a      	ldr	r3, [pc, #168]	; (8009a18 <tcp_abandon+0xdc>)
 8009970:	681b      	ldr	r3, [r3, #0]
 8009972:	429c      	cmp	r4, r3
 8009974:	d016      	beq.n	80099a4 <tcp_abandon+0x68>
 8009976:	b1db      	cbz	r3, 80099b0 <tcp_abandon+0x74>
 8009978:	68da      	ldr	r2, [r3, #12]
 800997a:	4294      	cmp	r4, r2
 800997c:	d016      	beq.n	80099ac <tcp_abandon+0x70>
 800997e:	4613      	mov	r3, r2
 8009980:	e7f9      	b.n	8009976 <tcp_abandon+0x3a>
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 8009982:	4b26      	ldr	r3, [pc, #152]	; (8009a1c <tcp_abandon+0xe0>)
 8009984:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8009988:	4925      	ldr	r1, [pc, #148]	; (8009a20 <tcp_abandon+0xe4>)
 800998a:	4826      	ldr	r0, [pc, #152]	; (8009a24 <tcp_abandon+0xe8>)
 800998c:	f004 f91d 	bl	800dbca <iprintf>
 8009990:	e7dc      	b.n	800994c <tcp_abandon+0x10>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 8009992:	4621      	mov	r1, r4
 8009994:	4824      	ldr	r0, [pc, #144]	; (8009a28 <tcp_abandon+0xec>)
 8009996:	f7ff fe01 	bl	800959c <tcp_pcb_remove>
    memp_free(MEMP_TCP_PCB, pcb);
 800999a:	4621      	mov	r1, r4
 800999c:	2001      	movs	r0, #1
 800999e:	f7fe fc7b 	bl	8008298 <memp_free>
 80099a2:	e01e      	b.n	80099e2 <tcp_abandon+0xa6>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 80099a4:	68da      	ldr	r2, [r3, #12]
 80099a6:	4b1c      	ldr	r3, [pc, #112]	; (8009a18 <tcp_abandon+0xdc>)
 80099a8:	601a      	str	r2, [r3, #0]
 80099aa:	e001      	b.n	80099b0 <tcp_abandon+0x74>
 80099ac:	68e2      	ldr	r2, [r4, #12]
 80099ae:	60da      	str	r2, [r3, #12]
 80099b0:	2500      	movs	r5, #0
 80099b2:	60e5      	str	r5, [r4, #12]
    u16_t local_port = 0;
 80099b4:	46aa      	mov	sl, r5
    if (pcb->unacked != NULL) {
 80099b6:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 80099b8:	b108      	cbz	r0, 80099be <tcp_abandon+0x82>
      tcp_segs_free(pcb->unacked);
 80099ba:	f7ff fb3c 	bl	8009036 <tcp_segs_free>
    if (pcb->unsent != NULL) {
 80099be:	6ea0      	ldr	r0, [r4, #104]	; 0x68
 80099c0:	b108      	cbz	r0, 80099c6 <tcp_abandon+0x8a>
      tcp_segs_free(pcb->unsent);
 80099c2:	f7ff fb38 	bl	8009036 <tcp_segs_free>
    if (pcb->ooseq != NULL) {
 80099c6:	6f20      	ldr	r0, [r4, #112]	; 0x70
 80099c8:	b108      	cbz	r0, 80099ce <tcp_abandon+0x92>
      tcp_segs_free(pcb->ooseq);
 80099ca:	f7ff fb34 	bl	8009036 <tcp_segs_free>
    if (send_rst) {
 80099ce:	b9bd      	cbnz	r5, 8009a00 <tcp_abandon+0xc4>
    memp_free(MEMP_TCP_PCB, pcb);
 80099d0:	4621      	mov	r1, r4
 80099d2:	2001      	movs	r0, #1
 80099d4:	f7fe fc60 	bl	8008298 <memp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 80099d8:	b11e      	cbz	r6, 80099e2 <tcp_abandon+0xa6>
 80099da:	f06f 010c 	mvn.w	r1, #12
 80099de:	4638      	mov	r0, r7
 80099e0:	47b0      	blx	r6
}
 80099e2:	b002      	add	sp, #8
 80099e4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      local_port = pcb->local_port;
 80099e8:	f8b4 a016 	ldrh.w	sl, [r4, #22]
      TCP_PCB_REMOVE_ACTIVE(pcb);
 80099ec:	4621      	mov	r1, r4
 80099ee:	480f      	ldr	r0, [pc, #60]	; (8009a2c <tcp_abandon+0xf0>)
 80099f0:	f7ff fdd4 	bl	800959c <tcp_pcb_remove>
 80099f4:	2201      	movs	r2, #1
 80099f6:	4b0e      	ldr	r3, [pc, #56]	; (8009a30 <tcp_abandon+0xf4>)
 80099f8:	701a      	strb	r2, [r3, #0]
 80099fa:	e7dc      	b.n	80099b6 <tcp_abandon+0x7a>
    int send_rst = 0;
 80099fc:	2500      	movs	r5, #0
 80099fe:	e7da      	b.n	80099b6 <tcp_abandon+0x7a>
      tcp_rst(seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 8009a00:	8b23      	ldrh	r3, [r4, #24]
 8009a02:	9301      	str	r3, [sp, #4]
 8009a04:	f8cd a000 	str.w	sl, [sp]
 8009a08:	1d23      	adds	r3, r4, #4
 8009a0a:	4622      	mov	r2, r4
 8009a0c:	4649      	mov	r1, r9
 8009a0e:	4640      	mov	r0, r8
 8009a10:	f002 fbee 	bl	800c1f0 <tcp_rst>
 8009a14:	e7dc      	b.n	80099d0 <tcp_abandon+0x94>
 8009a16:	bf00      	nop
 8009a18:	20007988 	.word	0x20007988
 8009a1c:	0800f970 	.word	0x0800f970
 8009a20:	0800f8b0 	.word	0x0800f8b0
 8009a24:	0800e3b0 	.word	0x0800e3b0
 8009a28:	2000798c 	.word	0x2000798c
 8009a2c:	2000797c 	.word	0x2000797c
 8009a30:	20007978 	.word	0x20007978

08009a34 <tcp_abort>:
{
 8009a34:	b508      	push	{r3, lr}
  tcp_abandon(pcb, 1);
 8009a36:	2101      	movs	r1, #1
 8009a38:	f7ff ff80 	bl	800993c <tcp_abandon>
 8009a3c:	bd08      	pop	{r3, pc}

08009a3e <tcp_accept_null>:
{
 8009a3e:	b508      	push	{r3, lr}
  tcp_abort(pcb);
 8009a40:	4608      	mov	r0, r1
 8009a42:	f7ff fff7 	bl	8009a34 <tcp_abort>
}
 8009a46:	f06f 000c 	mvn.w	r0, #12
 8009a4a:	bd08      	pop	{r3, pc}

08009a4c <tcp_kill_timewait>:
{
 8009a4c:	b510      	push	{r4, lr}
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8009a4e:	4b0a      	ldr	r3, [pc, #40]	; (8009a78 <tcp_kill_timewait+0x2c>)
 8009a50:	681b      	ldr	r3, [r3, #0]
  inactivity = 0;
 8009a52:	2400      	movs	r4, #0
  inactive = NULL;
 8009a54:	4620      	mov	r0, r4
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8009a56:	e000      	b.n	8009a5a <tcp_kill_timewait+0xe>
 8009a58:	68db      	ldr	r3, [r3, #12]
 8009a5a:	b143      	cbz	r3, 8009a6e <tcp_kill_timewait+0x22>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 8009a5c:	6a19      	ldr	r1, [r3, #32]
 8009a5e:	4a07      	ldr	r2, [pc, #28]	; (8009a7c <tcp_kill_timewait+0x30>)
 8009a60:	6812      	ldr	r2, [r2, #0]
 8009a62:	1a52      	subs	r2, r2, r1
 8009a64:	4294      	cmp	r4, r2
 8009a66:	d8f7      	bhi.n	8009a58 <tcp_kill_timewait+0xc>
      inactivity = tcp_ticks - pcb->tmr;
 8009a68:	4614      	mov	r4, r2
      inactive = pcb;
 8009a6a:	4618      	mov	r0, r3
 8009a6c:	e7f4      	b.n	8009a58 <tcp_kill_timewait+0xc>
  if (inactive != NULL) {
 8009a6e:	b108      	cbz	r0, 8009a74 <tcp_kill_timewait+0x28>
    tcp_abort(inactive);
 8009a70:	f7ff ffe0 	bl	8009a34 <tcp_abort>
 8009a74:	bd10      	pop	{r4, pc}
 8009a76:	bf00      	nop
 8009a78:	2000798c 	.word	0x2000798c
 8009a7c:	20007980 	.word	0x20007980

08009a80 <tcp_kill_prio>:
{
 8009a80:	b570      	push	{r4, r5, r6, lr}
 8009a82:	4602      	mov	r2, r0
  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 8009a84:	f010 0f80 	tst.w	r0, #128	; 0x80
 8009a88:	d000      	beq.n	8009a8c <tcp_kill_prio+0xc>
 8009a8a:	227f      	movs	r2, #127	; 0x7f
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8009a8c:	4b0b      	ldr	r3, [pc, #44]	; (8009abc <tcp_kill_prio+0x3c>)
 8009a8e:	681b      	ldr	r3, [r3, #0]
  inactivity = 0;
 8009a90:	2400      	movs	r4, #0
  inactive = NULL;
 8009a92:	4620      	mov	r0, r4
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8009a94:	b91b      	cbnz	r3, 8009a9e <tcp_kill_prio+0x1e>
  if (inactive != NULL) {
 8009a96:	b108      	cbz	r0, 8009a9c <tcp_kill_prio+0x1c>
    tcp_abort(inactive);
 8009a98:	f7ff ffcc 	bl	8009a34 <tcp_abort>
 8009a9c:	bd70      	pop	{r4, r5, r6, pc}
    if (pcb->prio <= mprio &&
 8009a9e:	7d5d      	ldrb	r5, [r3, #21]
 8009aa0:	42aa      	cmp	r2, r5
 8009aa2:	d308      	bcc.n	8009ab6 <tcp_kill_prio+0x36>
       (u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 8009aa4:	6a1e      	ldr	r6, [r3, #32]
 8009aa6:	4906      	ldr	r1, [pc, #24]	; (8009ac0 <tcp_kill_prio+0x40>)
 8009aa8:	6809      	ldr	r1, [r1, #0]
 8009aaa:	1b89      	subs	r1, r1, r6
    if (pcb->prio <= mprio &&
 8009aac:	428c      	cmp	r4, r1
 8009aae:	d802      	bhi.n	8009ab6 <tcp_kill_prio+0x36>
      mprio = pcb->prio;
 8009ab0:	462a      	mov	r2, r5
      inactivity = tcp_ticks - pcb->tmr;
 8009ab2:	460c      	mov	r4, r1
      inactive = pcb;
 8009ab4:	4618      	mov	r0, r3
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8009ab6:	68db      	ldr	r3, [r3, #12]
 8009ab8:	e7ec      	b.n	8009a94 <tcp_kill_prio+0x14>
 8009aba:	bf00      	nop
 8009abc:	2000797c 	.word	0x2000797c
 8009ac0:	20007980 	.word	0x20007980

08009ac4 <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t* old_addr, struct tcp_pcb* pcb_list)
{
 8009ac4:	b538      	push	{r3, r4, r5, lr}
 8009ac6:	4604      	mov	r4, r0
 8009ac8:	4608      	mov	r0, r1
  struct tcp_pcb *pcb;
  pcb = pcb_list;
  while (pcb != NULL) {
 8009aca:	e003      	b.n	8009ad4 <tcp_netif_ip_addr_changed_pcblist+0x10>
      /* connections to link-local addresses must persist (RFC3927 ch. 1.9) */
      && (!IP_IS_V4_VAL(pcb->local_ip) || !ip4_addr_islinklocal(ip_2_ip4(&pcb->local_ip)))
#endif /* LWIP_AUTOIP */
      ) {
      /* this connection must be aborted */
      struct tcp_pcb *next = pcb->next;
 8009acc:	68c5      	ldr	r5, [r0, #12]
      LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
      tcp_abort(pcb);
 8009ace:	f7ff ffb1 	bl	8009a34 <tcp_abort>
      pcb = next;
 8009ad2:	4628      	mov	r0, r5
  while (pcb != NULL) {
 8009ad4:	b128      	cbz	r0, 8009ae2 <tcp_netif_ip_addr_changed_pcblist+0x1e>
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 8009ad6:	6802      	ldr	r2, [r0, #0]
 8009ad8:	6823      	ldr	r3, [r4, #0]
 8009ada:	429a      	cmp	r2, r3
 8009adc:	d0f6      	beq.n	8009acc <tcp_netif_ip_addr_changed_pcblist+0x8>
    } else {
      pcb = pcb->next;
 8009ade:	68c0      	ldr	r0, [r0, #12]
 8009ae0:	e7f8      	b.n	8009ad4 <tcp_netif_ip_addr_changed_pcblist+0x10>
    }
  }
}
 8009ae2:	bd38      	pop	{r3, r4, r5, pc}

08009ae4 <tcp_kill_state>:
{
 8009ae4:	b538      	push	{r3, r4, r5, lr}
 8009ae6:	4604      	mov	r4, r0
  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 8009ae8:	f1a0 0308 	sub.w	r3, r0, #8
 8009aec:	b2db      	uxtb	r3, r3
 8009aee:	2b01      	cmp	r3, #1
 8009af0:	d906      	bls.n	8009b00 <tcp_kill_state+0x1c>
 8009af2:	4b0f      	ldr	r3, [pc, #60]	; (8009b30 <tcp_kill_state+0x4c>)
 8009af4:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8009af8:	490e      	ldr	r1, [pc, #56]	; (8009b34 <tcp_kill_state+0x50>)
 8009afa:	480f      	ldr	r0, [pc, #60]	; (8009b38 <tcp_kill_state+0x54>)
 8009afc:	f004 f865 	bl	800dbca <iprintf>
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8009b00:	4b0e      	ldr	r3, [pc, #56]	; (8009b3c <tcp_kill_state+0x58>)
 8009b02:	681b      	ldr	r3, [r3, #0]
  inactivity = 0;
 8009b04:	2100      	movs	r1, #0
  inactive = NULL;
 8009b06:	4608      	mov	r0, r1
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8009b08:	e000      	b.n	8009b0c <tcp_kill_state+0x28>
 8009b0a:	68db      	ldr	r3, [r3, #12]
 8009b0c:	b15b      	cbz	r3, 8009b26 <tcp_kill_state+0x42>
    if (pcb->state == state) {
 8009b0e:	7d1a      	ldrb	r2, [r3, #20]
 8009b10:	4294      	cmp	r4, r2
 8009b12:	d1fa      	bne.n	8009b0a <tcp_kill_state+0x26>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 8009b14:	6a1d      	ldr	r5, [r3, #32]
 8009b16:	4a0a      	ldr	r2, [pc, #40]	; (8009b40 <tcp_kill_state+0x5c>)
 8009b18:	6812      	ldr	r2, [r2, #0]
 8009b1a:	1b52      	subs	r2, r2, r5
 8009b1c:	4291      	cmp	r1, r2
 8009b1e:	d8f4      	bhi.n	8009b0a <tcp_kill_state+0x26>
        inactivity = tcp_ticks - pcb->tmr;
 8009b20:	4611      	mov	r1, r2
        inactive = pcb;
 8009b22:	4618      	mov	r0, r3
 8009b24:	e7f1      	b.n	8009b0a <tcp_kill_state+0x26>
  if (inactive != NULL) {
 8009b26:	b110      	cbz	r0, 8009b2e <tcp_kill_state+0x4a>
    tcp_abandon(inactive, 0);
 8009b28:	2100      	movs	r1, #0
 8009b2a:	f7ff ff07 	bl	800993c <tcp_abandon>
 8009b2e:	bd38      	pop	{r3, r4, r5, pc}
 8009b30:	0800f970 	.word	0x0800f970
 8009b34:	0800f960 	.word	0x0800f960
 8009b38:	0800e3b0 	.word	0x0800e3b0
 8009b3c:	2000797c 	.word	0x2000797c
 8009b40:	20007980 	.word	0x20007980

08009b44 <tcp_alloc>:
{
 8009b44:	b538      	push	{r3, r4, r5, lr}
 8009b46:	4605      	mov	r5, r0
  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8009b48:	2001      	movs	r0, #1
 8009b4a:	f7fe fb8b 	bl	8008264 <memp_malloc>
  if (pcb == NULL) {
 8009b4e:	4604      	mov	r4, r0
 8009b50:	b368      	cbz	r0, 8009bae <tcp_alloc+0x6a>
  if (pcb != NULL) {
 8009b52:	b354      	cbz	r4, 8009baa <tcp_alloc+0x66>
    memset(pcb, 0, sizeof(struct tcp_pcb));
 8009b54:	2298      	movs	r2, #152	; 0x98
 8009b56:	2100      	movs	r1, #0
 8009b58:	4620      	mov	r0, r4
 8009b5a:	f004 f9ad 	bl	800deb8 <memset>
    pcb->prio = prio;
 8009b5e:	7565      	strb	r5, [r4, #21]
    pcb->snd_buf = TCP_SND_BUF;
 8009b60:	f44f 6386 	mov.w	r3, #1072	; 0x430
 8009b64:	f8a4 3060 	strh.w	r3, [r4, #96]	; 0x60
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 8009b68:	f44f 6206 	mov.w	r2, #2144	; 0x860
 8009b6c:	8562      	strh	r2, [r4, #42]	; 0x2a
 8009b6e:	8522      	strh	r2, [r4, #40]	; 0x28
    pcb->ttl = TCP_TTL;
 8009b70:	22ff      	movs	r2, #255	; 0xff
 8009b72:	72a2      	strb	r2, [r4, #10]
    pcb->mss = INITIAL_MSS;
 8009b74:	f44f 7206 	mov.w	r2, #536	; 0x218
 8009b78:	8662      	strh	r2, [r4, #50]	; 0x32
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 8009b7a:	2206      	movs	r2, #6
 8009b7c:	f8a4 2040 	strh.w	r2, [r4, #64]	; 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 8009b80:	87e2      	strh	r2, [r4, #62]	; 0x3e
    pcb->rtime = -1;
 8009b82:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8009b86:	8622      	strh	r2, [r4, #48]	; 0x30
    pcb->cwnd = 1;
 8009b88:	2201      	movs	r2, #1
 8009b8a:	f8a4 2048 	strh.w	r2, [r4, #72]	; 0x48
    pcb->tmr = tcp_ticks;
 8009b8e:	4a19      	ldr	r2, [pc, #100]	; (8009bf4 <tcp_alloc+0xb0>)
 8009b90:	6812      	ldr	r2, [r2, #0]
 8009b92:	6222      	str	r2, [r4, #32]
    pcb->last_timer = tcp_timer_ctr;
 8009b94:	4a18      	ldr	r2, [pc, #96]	; (8009bf8 <tcp_alloc+0xb4>)
 8009b96:	7812      	ldrb	r2, [r2, #0]
 8009b98:	7762      	strb	r2, [r4, #29]
    pcb->ssthresh = TCP_SND_BUF;
 8009b9a:	f8a4 304a 	strh.w	r3, [r4, #74]	; 0x4a
    pcb->recv = tcp_recv_null;
 8009b9e:	4b17      	ldr	r3, [pc, #92]	; (8009bfc <tcp_alloc+0xb8>)
 8009ba0:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 8009ba4:	4b16      	ldr	r3, [pc, #88]	; (8009c00 <tcp_alloc+0xbc>)
 8009ba6:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
}
 8009baa:	4620      	mov	r0, r4
 8009bac:	bd38      	pop	{r3, r4, r5, pc}
    tcp_kill_timewait();
 8009bae:	f7ff ff4d 	bl	8009a4c <tcp_kill_timewait>
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8009bb2:	2001      	movs	r0, #1
 8009bb4:	f7fe fb56 	bl	8008264 <memp_malloc>
    if (pcb == NULL) {
 8009bb8:	4604      	mov	r4, r0
 8009bba:	2800      	cmp	r0, #0
 8009bbc:	d1c9      	bne.n	8009b52 <tcp_alloc+0xe>
      tcp_kill_state(LAST_ACK);
 8009bbe:	2009      	movs	r0, #9
 8009bc0:	f7ff ff90 	bl	8009ae4 <tcp_kill_state>
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8009bc4:	2001      	movs	r0, #1
 8009bc6:	f7fe fb4d 	bl	8008264 <memp_malloc>
      if (pcb == NULL) {
 8009bca:	4604      	mov	r4, r0
 8009bcc:	2800      	cmp	r0, #0
 8009bce:	d1c0      	bne.n	8009b52 <tcp_alloc+0xe>
        tcp_kill_state(CLOSING);
 8009bd0:	2008      	movs	r0, #8
 8009bd2:	f7ff ff87 	bl	8009ae4 <tcp_kill_state>
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8009bd6:	2001      	movs	r0, #1
 8009bd8:	f7fe fb44 	bl	8008264 <memp_malloc>
        if (pcb == NULL) {
 8009bdc:	4604      	mov	r4, r0
 8009bde:	2800      	cmp	r0, #0
 8009be0:	d1b7      	bne.n	8009b52 <tcp_alloc+0xe>
          tcp_kill_prio(prio);
 8009be2:	4628      	mov	r0, r5
 8009be4:	f7ff ff4c 	bl	8009a80 <tcp_kill_prio>
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8009be8:	2001      	movs	r0, #1
 8009bea:	f7fe fb3b 	bl	8008264 <memp_malloc>
 8009bee:	4604      	mov	r4, r0
 8009bf0:	e7af      	b.n	8009b52 <tcp_alloc+0xe>
 8009bf2:	bf00      	nop
 8009bf4:	20007980 	.word	0x20007980
 8009bf8:	20003f82 	.word	0x20003f82
 8009bfc:	080097ad 	.word	0x080097ad
 8009c00:	006ddd00 	.word	0x006ddd00

08009c04 <tcp_new_ip_type>:
{
 8009c04:	b508      	push	{r3, lr}
  pcb = tcp_alloc(TCP_PRIO_NORMAL);
 8009c06:	2040      	movs	r0, #64	; 0x40
 8009c08:	f7ff ff9c 	bl	8009b44 <tcp_alloc>
}
 8009c0c:	bd08      	pop	{r3, pc}
	...

08009c10 <tcp_next_iss>:
  iss += tcp_ticks;       /* XXX */
 8009c10:	4b03      	ldr	r3, [pc, #12]	; (8009c20 <tcp_next_iss+0x10>)
 8009c12:	6818      	ldr	r0, [r3, #0]
 8009c14:	4a03      	ldr	r2, [pc, #12]	; (8009c24 <tcp_next_iss+0x14>)
 8009c16:	6812      	ldr	r2, [r2, #0]
 8009c18:	4410      	add	r0, r2
 8009c1a:	6018      	str	r0, [r3, #0]
}
 8009c1c:	4770      	bx	lr
 8009c1e:	bf00      	nop
 8009c20:	20000008 	.word	0x20000008
 8009c24:	20007980 	.word	0x20007980

08009c28 <tcp_eff_send_mss_impl>:
{
 8009c28:	b510      	push	{r4, lr}
 8009c2a:	4604      	mov	r4, r0
  outif = ip_route(src, dest);
 8009c2c:	4608      	mov	r0, r1
 8009c2e:	f7fd fa97 	bl	8007160 <ip4_route>
    if (outif == NULL) {
 8009c32:	b138      	cbz	r0, 8009c44 <tcp_eff_send_mss_impl+0x1c>
    mtu = outif->mtu;
 8009c34:	8c43      	ldrh	r3, [r0, #34]	; 0x22
  if (mtu != 0) {
 8009c36:	b13b      	cbz	r3, 8009c48 <tcp_eff_send_mss_impl+0x20>
      mss_s = mtu - IP_HLEN - TCP_HLEN;
 8009c38:	3b28      	subs	r3, #40	; 0x28
 8009c3a:	b298      	uxth	r0, r3
    sendmss = LWIP_MIN(sendmss, mss_s);
 8009c3c:	42a0      	cmp	r0, r4
 8009c3e:	bf28      	it	cs
 8009c40:	4620      	movcs	r0, r4
 8009c42:	bd10      	pop	{r4, pc}
      return sendmss;
 8009c44:	4620      	mov	r0, r4
 8009c46:	bd10      	pop	{r4, pc}
 8009c48:	4620      	mov	r0, r4
}
 8009c4a:	bd10      	pop	{r4, pc}

08009c4c <tcp_netif_ip_addr_changed>:
void
tcp_netif_ip_addr_changed(const ip_addr_t* old_addr, const ip_addr_t* new_addr)
{
  struct tcp_pcb_listen *lpcb, *next;

  if (!ip_addr_isany(old_addr)) {
 8009c4c:	b308      	cbz	r0, 8009c92 <tcp_netif_ip_addr_changed+0x46>
{
 8009c4e:	b570      	push	{r4, r5, r6, lr}
 8009c50:	4604      	mov	r4, r0
  if (!ip_addr_isany(old_addr)) {
 8009c52:	6803      	ldr	r3, [r0, #0]
 8009c54:	b903      	cbnz	r3, 8009c58 <tcp_netif_ip_addr_changed+0xc>
 8009c56:	bd70      	pop	{r4, r5, r6, pc}
 8009c58:	460e      	mov	r6, r1
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 8009c5a:	4b0e      	ldr	r3, [pc, #56]	; (8009c94 <tcp_netif_ip_addr_changed+0x48>)
 8009c5c:	6819      	ldr	r1, [r3, #0]
 8009c5e:	f7ff ff31 	bl	8009ac4 <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 8009c62:	4b0d      	ldr	r3, [pc, #52]	; (8009c98 <tcp_netif_ip_addr_changed+0x4c>)
 8009c64:	6819      	ldr	r1, [r3, #0]
 8009c66:	4620      	mov	r0, r4
 8009c68:	f7ff ff2c 	bl	8009ac4 <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
 8009c6c:	2e00      	cmp	r6, #0
 8009c6e:	d0f2      	beq.n	8009c56 <tcp_netif_ip_addr_changed+0xa>
 8009c70:	6833      	ldr	r3, [r6, #0]
 8009c72:	2b00      	cmp	r3, #0
 8009c74:	d0ef      	beq.n	8009c56 <tcp_netif_ip_addr_changed+0xa>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = next) {
 8009c76:	4b09      	ldr	r3, [pc, #36]	; (8009c9c <tcp_netif_ip_addr_changed+0x50>)
 8009c78:	681b      	ldr	r3, [r3, #0]
 8009c7a:	e000      	b.n	8009c7e <tcp_netif_ip_addr_changed+0x32>
{
 8009c7c:	4613      	mov	r3, r2
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = next) {
 8009c7e:	2b00      	cmp	r3, #0
 8009c80:	d0e9      	beq.n	8009c56 <tcp_netif_ip_addr_changed+0xa>
        next = lpcb->next;
 8009c82:	68da      	ldr	r2, [r3, #12]
        /* PCB bound to current local interface address? */
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 8009c84:	681d      	ldr	r5, [r3, #0]
 8009c86:	6820      	ldr	r0, [r4, #0]
 8009c88:	4285      	cmp	r5, r0
 8009c8a:	d1f7      	bne.n	8009c7c <tcp_netif_ip_addr_changed+0x30>
          /* The PCB is listening to the old ipaddr and
            * is set to listen to the new one instead */
          ip_addr_copy(lpcb->local_ip, *new_addr);
 8009c8c:	6831      	ldr	r1, [r6, #0]
 8009c8e:	6019      	str	r1, [r3, #0]
 8009c90:	e7f4      	b.n	8009c7c <tcp_netif_ip_addr_changed+0x30>
 8009c92:	4770      	bx	lr
 8009c94:	2000797c 	.word	0x2000797c
 8009c98:	20007988 	.word	0x20007988
 8009c9c:	20007984 	.word	0x20007984

08009ca0 <tcp_getoptbyte>:
}

static u8_t
tcp_getoptbyte(void)
{
  if ((tcphdr_opt2 == NULL) || (tcp_optidx < tcphdr_opt1len)) {
 8009ca0:	4b0e      	ldr	r3, [pc, #56]	; (8009cdc <tcp_getoptbyte+0x3c>)
 8009ca2:	6819      	ldr	r1, [r3, #0]
 8009ca4:	b189      	cbz	r1, 8009cca <tcp_getoptbyte+0x2a>
 8009ca6:	4b0e      	ldr	r3, [pc, #56]	; (8009ce0 <tcp_getoptbyte+0x40>)
 8009ca8:	881b      	ldrh	r3, [r3, #0]
 8009caa:	4a0e      	ldr	r2, [pc, #56]	; (8009ce4 <tcp_getoptbyte+0x44>)
 8009cac:	8812      	ldrh	r2, [r2, #0]
 8009cae:	4293      	cmp	r3, r2
 8009cb0:	d30b      	bcc.n	8009cca <tcp_getoptbyte+0x2a>
{
 8009cb2:	b410      	push	{r4}
    u8_t* opts = (u8_t *)tcphdr + TCP_HLEN;
    return opts[tcp_optidx++];
  } else {
    u8_t idx = (u8_t)(tcp_optidx++ - tcphdr_opt1len);
 8009cb4:	1c5c      	adds	r4, r3, #1
 8009cb6:	480a      	ldr	r0, [pc, #40]	; (8009ce0 <tcp_getoptbyte+0x40>)
 8009cb8:	8004      	strh	r4, [r0, #0]
 8009cba:	b2db      	uxtb	r3, r3
 8009cbc:	b2d2      	uxtb	r2, r2
 8009cbe:	1a9b      	subs	r3, r3, r2
 8009cc0:	b2db      	uxtb	r3, r3
    return tcphdr_opt2[idx];
 8009cc2:	5cc8      	ldrb	r0, [r1, r3]
  }
}
 8009cc4:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009cc8:	4770      	bx	lr
    u8_t* opts = (u8_t *)tcphdr + TCP_HLEN;
 8009cca:	4b07      	ldr	r3, [pc, #28]	; (8009ce8 <tcp_getoptbyte+0x48>)
 8009ccc:	681b      	ldr	r3, [r3, #0]
    return opts[tcp_optidx++];
 8009cce:	4904      	ldr	r1, [pc, #16]	; (8009ce0 <tcp_getoptbyte+0x40>)
 8009cd0:	880a      	ldrh	r2, [r1, #0]
 8009cd2:	1c50      	adds	r0, r2, #1
 8009cd4:	8008      	strh	r0, [r1, #0]
 8009cd6:	4413      	add	r3, r2
 8009cd8:	7d18      	ldrb	r0, [r3, #20]
 8009cda:	4770      	bx	lr
 8009cdc:	20003fb8 	.word	0x20003fb8
 8009ce0:	20003fac 	.word	0x20003fac
 8009ce4:	20003fb4 	.word	0x20003fb4
 8009ce8:	20003fb0 	.word	0x20003fb0

08009cec <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 8009cec:	b538      	push	{r3, r4, r5, lr}
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 8009cee:	4b1f      	ldr	r3, [pc, #124]	; (8009d6c <tcp_parseopt+0x80>)
 8009cf0:	881b      	ldrh	r3, [r3, #0]
 8009cf2:	2b00      	cmp	r3, #0
 8009cf4:	d038      	beq.n	8009d68 <tcp_parseopt+0x7c>
 8009cf6:	4605      	mov	r5, r0
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 8009cf8:	2200      	movs	r2, #0
 8009cfa:	4b1d      	ldr	r3, [pc, #116]	; (8009d70 <tcp_parseopt+0x84>)
 8009cfc:	801a      	strh	r2, [r3, #0]
 8009cfe:	4b1c      	ldr	r3, [pc, #112]	; (8009d70 <tcp_parseopt+0x84>)
 8009d00:	881a      	ldrh	r2, [r3, #0]
 8009d02:	4b1a      	ldr	r3, [pc, #104]	; (8009d6c <tcp_parseopt+0x80>)
 8009d04:	881b      	ldrh	r3, [r3, #0]
 8009d06:	429a      	cmp	r2, r3
 8009d08:	d22e      	bcs.n	8009d68 <tcp_parseopt+0x7c>
      u8_t opt = tcp_getoptbyte();
 8009d0a:	f7ff ffc9 	bl	8009ca0 <tcp_getoptbyte>
      switch (opt) {
 8009d0e:	2801      	cmp	r0, #1
 8009d10:	d0f5      	beq.n	8009cfe <tcp_parseopt+0x12>
 8009d12:	b348      	cbz	r0, 8009d68 <tcp_parseopt+0x7c>
 8009d14:	2802      	cmp	r0, #2
 8009d16:	d11d      	bne.n	8009d54 <tcp_parseopt+0x68>
        /* NOP option. */
        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
        break;
      case LWIP_TCP_OPT_MSS:
        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
        if (tcp_getoptbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 8009d18:	f7ff ffc2 	bl	8009ca0 <tcp_getoptbyte>
 8009d1c:	2804      	cmp	r0, #4
 8009d1e:	d123      	bne.n	8009d68 <tcp_parseopt+0x7c>
 8009d20:	4b13      	ldr	r3, [pc, #76]	; (8009d70 <tcp_parseopt+0x84>)
 8009d22:	881b      	ldrh	r3, [r3, #0]
 8009d24:	3302      	adds	r3, #2
 8009d26:	4a11      	ldr	r2, [pc, #68]	; (8009d6c <tcp_parseopt+0x80>)
 8009d28:	8812      	ldrh	r2, [r2, #0]
 8009d2a:	4293      	cmp	r3, r2
 8009d2c:	dc1c      	bgt.n	8009d68 <tcp_parseopt+0x7c>
          /* Bad length */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
          return;
        }
        /* An MSS option with the right option length. */
        mss = (tcp_getoptbyte() << 8);
 8009d2e:	f7ff ffb7 	bl	8009ca0 <tcp_getoptbyte>
 8009d32:	b283      	uxth	r3, r0
 8009d34:	021b      	lsls	r3, r3, #8
 8009d36:	b29c      	uxth	r4, r3
        mss |= tcp_getoptbyte();
 8009d38:	f7ff ffb2 	bl	8009ca0 <tcp_getoptbyte>
 8009d3c:	b280      	uxth	r0, r0
 8009d3e:	ea44 0300 	orr.w	r3, r4, r0
        /* Limit the mss to the configured TCP_MSS and prevent division by zero */
        pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 8009d42:	1e5a      	subs	r2, r3, #1
 8009d44:	b292      	uxth	r2, r2
 8009d46:	f5b2 7f06 	cmp.w	r2, #536	; 0x218
 8009d4a:	d301      	bcc.n	8009d50 <tcp_parseopt+0x64>
 8009d4c:	f44f 7306 	mov.w	r3, #536	; 0x218
 8009d50:	866b      	strh	r3, [r5, #50]	; 0x32
        break;
 8009d52:	e7d4      	b.n	8009cfe <tcp_parseopt+0x12>
        tcp_optidx += LWIP_TCP_OPT_LEN_TS - 6;
        break;
#endif
      default:
        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
        data = tcp_getoptbyte();
 8009d54:	f7ff ffa4 	bl	8009ca0 <tcp_getoptbyte>
        if (data < 2) {
 8009d58:	2801      	cmp	r0, #1
 8009d5a:	d905      	bls.n	8009d68 <tcp_parseopt+0x7c>
             and we don't process them further. */
          return;
        }
        /* All other options have a length field, so that we easily
           can skip past them. */
        tcp_optidx += data - 2;
 8009d5c:	4b04      	ldr	r3, [pc, #16]	; (8009d70 <tcp_parseopt+0x84>)
 8009d5e:	881a      	ldrh	r2, [r3, #0]
 8009d60:	4410      	add	r0, r2
 8009d62:	3802      	subs	r0, #2
 8009d64:	8018      	strh	r0, [r3, #0]
 8009d66:	e7ca      	b.n	8009cfe <tcp_parseopt+0x12>
 8009d68:	bd38      	pop	{r3, r4, r5, pc}
 8009d6a:	bf00      	nop
 8009d6c:	20003fbc 	.word	0x20003fbc
 8009d70:	20003fac 	.word	0x20003fac

08009d74 <tcp_input_delayed_close>:
  if (recv_flags & TF_CLOSED) {
 8009d74:	4b0e      	ldr	r3, [pc, #56]	; (8009db0 <tcp_input_delayed_close+0x3c>)
 8009d76:	781b      	ldrb	r3, [r3, #0]
 8009d78:	f013 0f10 	tst.w	r3, #16
 8009d7c:	d016      	beq.n	8009dac <tcp_input_delayed_close+0x38>
{
 8009d7e:	b510      	push	{r4, lr}
 8009d80:	4604      	mov	r4, r0
    if (!(pcb->flags & TF_RXCLOSED)) {
 8009d82:	7e83      	ldrb	r3, [r0, #26]
 8009d84:	f013 0f10 	tst.w	r3, #16
 8009d88:	d106      	bne.n	8009d98 <tcp_input_delayed_close+0x24>
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 8009d8a:	f8d0 308c 	ldr.w	r3, [r0, #140]	; 0x8c
 8009d8e:	b11b      	cbz	r3, 8009d98 <tcp_input_delayed_close+0x24>
 8009d90:	f06f 010e 	mvn.w	r1, #14
 8009d94:	6900      	ldr	r0, [r0, #16]
 8009d96:	4798      	blx	r3
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 8009d98:	4621      	mov	r1, r4
 8009d9a:	4806      	ldr	r0, [pc, #24]	; (8009db4 <tcp_input_delayed_close+0x40>)
 8009d9c:	f7ff fbfe 	bl	800959c <tcp_pcb_remove>
    memp_free(MEMP_TCP_PCB, pcb);
 8009da0:	4621      	mov	r1, r4
 8009da2:	2001      	movs	r0, #1
 8009da4:	f7fe fa78 	bl	8008298 <memp_free>
    return 1;
 8009da8:	2001      	movs	r0, #1
 8009daa:	bd10      	pop	{r4, pc}
  return 0;
 8009dac:	2000      	movs	r0, #0
 8009dae:	4770      	bx	lr
 8009db0:	20003fa4 	.word	0x20003fa4
 8009db4:	2000797c 	.word	0x2000797c

08009db8 <tcp_timewait_input>:
  if (flags & TCP_RST) {
 8009db8:	4b1c      	ldr	r3, [pc, #112]	; (8009e2c <tcp_timewait_input+0x74>)
 8009dba:	781b      	ldrb	r3, [r3, #0]
 8009dbc:	f013 0f04 	tst.w	r3, #4
 8009dc0:	d132      	bne.n	8009e28 <tcp_timewait_input+0x70>
{
 8009dc2:	b510      	push	{r4, lr}
 8009dc4:	b082      	sub	sp, #8
  if (flags & TCP_SYN) {
 8009dc6:	f013 0f02 	tst.w	r3, #2
 8009dca:	d01c      	beq.n	8009e06 <tcp_timewait_input+0x4e>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 8009dcc:	4b18      	ldr	r3, [pc, #96]	; (8009e30 <tcp_timewait_input+0x78>)
 8009dce:	6819      	ldr	r1, [r3, #0]
 8009dd0:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8009dd2:	1aca      	subs	r2, r1, r3
 8009dd4:	2a00      	cmp	r2, #0
 8009dd6:	db1c      	blt.n	8009e12 <tcp_timewait_input+0x5a>
 8009dd8:	8d02      	ldrh	r2, [r0, #40]	; 0x28
 8009dda:	4413      	add	r3, r2
 8009ddc:	1acb      	subs	r3, r1, r3
 8009dde:	2b00      	cmp	r3, #0
 8009de0:	dc17      	bgt.n	8009e12 <tcp_timewait_input+0x5a>
        ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8009de2:	4b14      	ldr	r3, [pc, #80]	; (8009e34 <tcp_timewait_input+0x7c>)
 8009de4:	681b      	ldr	r3, [r3, #0]
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 8009de6:	4a14      	ldr	r2, [pc, #80]	; (8009e38 <tcp_timewait_input+0x80>)
 8009de8:	4814      	ldr	r0, [pc, #80]	; (8009e3c <tcp_timewait_input+0x84>)
 8009dea:	8800      	ldrh	r0, [r0, #0]
 8009dec:	881c      	ldrh	r4, [r3, #0]
 8009dee:	9401      	str	r4, [sp, #4]
 8009df0:	885b      	ldrh	r3, [r3, #2]
 8009df2:	9300      	str	r3, [sp, #0]
 8009df4:	4613      	mov	r3, r2
 8009df6:	3204      	adds	r2, #4
 8009df8:	4401      	add	r1, r0
 8009dfa:	4811      	ldr	r0, [pc, #68]	; (8009e40 <tcp_timewait_input+0x88>)
 8009dfc:	6800      	ldr	r0, [r0, #0]
 8009dfe:	f002 f9f7 	bl	800c1f0 <tcp_rst>
}
 8009e02:	b002      	add	sp, #8
 8009e04:	bd10      	pop	{r4, pc}
  } else if (flags & TCP_FIN) {
 8009e06:	f013 0f01 	tst.w	r3, #1
 8009e0a:	d002      	beq.n	8009e12 <tcp_timewait_input+0x5a>
    pcb->tmr = tcp_ticks;
 8009e0c:	4b0d      	ldr	r3, [pc, #52]	; (8009e44 <tcp_timewait_input+0x8c>)
 8009e0e:	681b      	ldr	r3, [r3, #0]
 8009e10:	6203      	str	r3, [r0, #32]
  if ((tcplen > 0)) {
 8009e12:	4b0a      	ldr	r3, [pc, #40]	; (8009e3c <tcp_timewait_input+0x84>)
 8009e14:	881b      	ldrh	r3, [r3, #0]
 8009e16:	2b00      	cmp	r3, #0
 8009e18:	d0f3      	beq.n	8009e02 <tcp_timewait_input+0x4a>
    pcb->flags |= TF_ACK_NOW;
 8009e1a:	7e83      	ldrb	r3, [r0, #26]
 8009e1c:	f043 0302 	orr.w	r3, r3, #2
 8009e20:	7683      	strb	r3, [r0, #26]
    tcp_output(pcb);
 8009e22:	f002 f889 	bl	800bf38 <tcp_output>
 8009e26:	e7ec      	b.n	8009e02 <tcp_timewait_input+0x4a>
 8009e28:	4770      	bx	lr
 8009e2a:	bf00      	nop
 8009e2c:	20003f88 	.word	0x20003f88
 8009e30:	20003fa8 	.word	0x20003fa8
 8009e34:	20003fb0 	.word	0x20003fb0
 8009e38:	2000427c 	.word	0x2000427c
 8009e3c:	20003fbe 	.word	0x20003fbe
 8009e40:	20003f84 	.word	0x20003f84
 8009e44:	20007980 	.word	0x20007980

08009e48 <tcp_listen_input>:
  if (flags & TCP_RST) {
 8009e48:	4b3c      	ldr	r3, [pc, #240]	; (8009f3c <tcp_listen_input+0xf4>)
 8009e4a:	781b      	ldrb	r3, [r3, #0]
 8009e4c:	f013 0f04 	tst.w	r3, #4
 8009e50:	d173      	bne.n	8009f3a <tcp_listen_input+0xf2>
{
 8009e52:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009e54:	b083      	sub	sp, #12
 8009e56:	4605      	mov	r5, r0
  if (flags & TCP_ACK) {
 8009e58:	f013 0f10 	tst.w	r3, #16
 8009e5c:	d104      	bne.n	8009e68 <tcp_listen_input+0x20>
  } else if (flags & TCP_SYN) {
 8009e5e:	f013 0f02 	tst.w	r3, #2
 8009e62:	d114      	bne.n	8009e8e <tcp_listen_input+0x46>
}
 8009e64:	b003      	add	sp, #12
 8009e66:	bdf0      	pop	{r4, r5, r6, r7, pc}
      ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8009e68:	4b35      	ldr	r3, [pc, #212]	; (8009f40 <tcp_listen_input+0xf8>)
 8009e6a:	681b      	ldr	r3, [r3, #0]
    tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 8009e6c:	4a35      	ldr	r2, [pc, #212]	; (8009f44 <tcp_listen_input+0xfc>)
 8009e6e:	4936      	ldr	r1, [pc, #216]	; (8009f48 <tcp_listen_input+0x100>)
 8009e70:	880c      	ldrh	r4, [r1, #0]
 8009e72:	4936      	ldr	r1, [pc, #216]	; (8009f4c <tcp_listen_input+0x104>)
 8009e74:	6809      	ldr	r1, [r1, #0]
 8009e76:	4836      	ldr	r0, [pc, #216]	; (8009f50 <tcp_listen_input+0x108>)
 8009e78:	6800      	ldr	r0, [r0, #0]
 8009e7a:	881d      	ldrh	r5, [r3, #0]
 8009e7c:	9501      	str	r5, [sp, #4]
 8009e7e:	885b      	ldrh	r3, [r3, #2]
 8009e80:	9300      	str	r3, [sp, #0]
 8009e82:	4613      	mov	r3, r2
 8009e84:	3204      	adds	r2, #4
 8009e86:	4421      	add	r1, r4
 8009e88:	f002 f9b2 	bl	800c1f0 <tcp_rst>
 8009e8c:	e7ea      	b.n	8009e64 <tcp_listen_input+0x1c>
    npcb = tcp_alloc(pcb->prio);
 8009e8e:	7d40      	ldrb	r0, [r0, #21]
 8009e90:	f7ff fe58 	bl	8009b44 <tcp_alloc>
    if (npcb == NULL) {
 8009e94:	4604      	mov	r4, r0
 8009e96:	2800      	cmp	r0, #0
 8009e98:	d041      	beq.n	8009f1e <tcp_listen_input+0xd6>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 8009e9a:	4b2e      	ldr	r3, [pc, #184]	; (8009f54 <tcp_listen_input+0x10c>)
 8009e9c:	695a      	ldr	r2, [r3, #20]
 8009e9e:	6002      	str	r2, [r0, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 8009ea0:	691b      	ldr	r3, [r3, #16]
 8009ea2:	6043      	str	r3, [r0, #4]
    npcb->local_port = pcb->local_port;
 8009ea4:	8aeb      	ldrh	r3, [r5, #22]
 8009ea6:	82c3      	strh	r3, [r0, #22]
    npcb->remote_port = tcphdr->src;
 8009ea8:	4e25      	ldr	r6, [pc, #148]	; (8009f40 <tcp_listen_input+0xf8>)
 8009eaa:	6833      	ldr	r3, [r6, #0]
 8009eac:	881b      	ldrh	r3, [r3, #0]
 8009eae:	8303      	strh	r3, [r0, #24]
    npcb->state = SYN_RCVD;
 8009eb0:	2303      	movs	r3, #3
 8009eb2:	7503      	strb	r3, [r0, #20]
    npcb->rcv_nxt = seqno + 1;
 8009eb4:	4f25      	ldr	r7, [pc, #148]	; (8009f4c <tcp_listen_input+0x104>)
 8009eb6:	683b      	ldr	r3, [r7, #0]
 8009eb8:	3301      	adds	r3, #1
 8009eba:	6243      	str	r3, [r0, #36]	; 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 8009ebc:	62c3      	str	r3, [r0, #44]	; 0x2c
    iss = tcp_next_iss(npcb);
 8009ebe:	f7ff fea7 	bl	8009c10 <tcp_next_iss>
    npcb->snd_wl2 = iss;
 8009ec2:	6560      	str	r0, [r4, #84]	; 0x54
    npcb->snd_nxt = iss;
 8009ec4:	64e0      	str	r0, [r4, #76]	; 0x4c
    npcb->lastack = iss;
 8009ec6:	6460      	str	r0, [r4, #68]	; 0x44
    npcb->snd_lbb = iss;
 8009ec8:	65a0      	str	r0, [r4, #88]	; 0x58
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 8009eca:	683b      	ldr	r3, [r7, #0]
 8009ecc:	3b01      	subs	r3, #1
 8009ece:	6523      	str	r3, [r4, #80]	; 0x50
    npcb->callback_arg = pcb->callback_arg;
 8009ed0:	692b      	ldr	r3, [r5, #16]
 8009ed2:	6123      	str	r3, [r4, #16]
    npcb->listener = pcb;
 8009ed4:	67a5      	str	r5, [r4, #120]	; 0x78
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 8009ed6:	7a2b      	ldrb	r3, [r5, #8]
 8009ed8:	f003 030c 	and.w	r3, r3, #12
 8009edc:	7223      	strb	r3, [r4, #8]
    TCP_REG_ACTIVE(npcb);
 8009ede:	4b1e      	ldr	r3, [pc, #120]	; (8009f58 <tcp_listen_input+0x110>)
 8009ee0:	681a      	ldr	r2, [r3, #0]
 8009ee2:	60e2      	str	r2, [r4, #12]
 8009ee4:	601c      	str	r4, [r3, #0]
 8009ee6:	f002 fb89 	bl	800c5fc <tcp_timer_needed>
 8009eea:	2201      	movs	r2, #1
 8009eec:	4b1b      	ldr	r3, [pc, #108]	; (8009f5c <tcp_listen_input+0x114>)
 8009eee:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 8009ef0:	4620      	mov	r0, r4
 8009ef2:	f7ff fefb 	bl	8009cec <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 8009ef6:	6833      	ldr	r3, [r6, #0]
 8009ef8:	89db      	ldrh	r3, [r3, #14]
 8009efa:	f8a4 305c 	strh.w	r3, [r4, #92]	; 0x5c
    npcb->snd_wnd_max = npcb->snd_wnd;
 8009efe:	f8a4 305e 	strh.w	r3, [r4, #94]	; 0x5e
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 8009f02:	1d21      	adds	r1, r4, #4
 8009f04:	8e60      	ldrh	r0, [r4, #50]	; 0x32
 8009f06:	f7ff fe8f 	bl	8009c28 <tcp_eff_send_mss_impl>
 8009f0a:	8660      	strh	r0, [r4, #50]	; 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 8009f0c:	2112      	movs	r1, #18
 8009f0e:	4620      	mov	r0, r4
 8009f10:	f001 ff02 	bl	800bd18 <tcp_enqueue_flags>
    if (rc != ERR_OK) {
 8009f14:	b960      	cbnz	r0, 8009f30 <tcp_listen_input+0xe8>
    tcp_output(npcb);
 8009f16:	4620      	mov	r0, r4
 8009f18:	f002 f80e 	bl	800bf38 <tcp_output>
 8009f1c:	e7a2      	b.n	8009e64 <tcp_listen_input+0x1c>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 8009f1e:	69ab      	ldr	r3, [r5, #24]
 8009f20:	2b00      	cmp	r3, #0
 8009f22:	d09f      	beq.n	8009e64 <tcp_listen_input+0x1c>
 8009f24:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8009f28:	2100      	movs	r1, #0
 8009f2a:	6928      	ldr	r0, [r5, #16]
 8009f2c:	4798      	blx	r3
 8009f2e:	e799      	b.n	8009e64 <tcp_listen_input+0x1c>
      tcp_abandon(npcb, 0);
 8009f30:	2100      	movs	r1, #0
 8009f32:	4620      	mov	r0, r4
 8009f34:	f7ff fd02 	bl	800993c <tcp_abandon>
      return;
 8009f38:	e794      	b.n	8009e64 <tcp_listen_input+0x1c>
 8009f3a:	4770      	bx	lr
 8009f3c:	20003f88 	.word	0x20003f88
 8009f40:	20003fb0 	.word	0x20003fb0
 8009f44:	2000427c 	.word	0x2000427c
 8009f48:	20003fbe 	.word	0x20003fbe
 8009f4c:	20003fa8 	.word	0x20003fa8
 8009f50:	20003f84 	.word	0x20003f84
 8009f54:	2000426c 	.word	0x2000426c
 8009f58:	2000797c 	.word	0x2000797c
 8009f5c:	20007978 	.word	0x20007978

08009f60 <tcp_oos_insert_segment>:
{
 8009f60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009f62:	4605      	mov	r5, r0
 8009f64:	460c      	mov	r4, r1
  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 8009f66:	68c3      	ldr	r3, [r0, #12]
 8009f68:	8998      	ldrh	r0, [r3, #12]
 8009f6a:	f7fc fb4f 	bl	800660c <lwip_htons>
 8009f6e:	f010 0f01 	tst.w	r0, #1
 8009f72:	d009      	beq.n	8009f88 <tcp_oos_insert_segment+0x28>
    tcp_segs_free(next);
 8009f74:	4620      	mov	r0, r4
 8009f76:	f7ff f85e 	bl	8009036 <tcp_segs_free>
    next = NULL;
 8009f7a:	2400      	movs	r4, #0
 8009f7c:	e02e      	b.n	8009fdc <tcp_oos_insert_segment+0x7c>
      next = next->next;
 8009f7e:	6826      	ldr	r6, [r4, #0]
      tcp_seg_free(old_seg);
 8009f80:	4620      	mov	r0, r4
 8009f82:	f7ff f84b 	bl	800901c <tcp_seg_free>
      next = next->next;
 8009f86:	4634      	mov	r4, r6
    while (next &&
 8009f88:	b1c4      	cbz	r4, 8009fbc <tcp_oos_insert_segment+0x5c>
           TCP_SEQ_GEQ((seqno + cseg->len),
 8009f8a:	892b      	ldrh	r3, [r5, #8]
 8009f8c:	4a14      	ldr	r2, [pc, #80]	; (8009fe0 <tcp_oos_insert_segment+0x80>)
 8009f8e:	6812      	ldr	r2, [r2, #0]
 8009f90:	4413      	add	r3, r2
 8009f92:	68e1      	ldr	r1, [r4, #12]
 8009f94:	684a      	ldr	r2, [r1, #4]
 8009f96:	8920      	ldrh	r0, [r4, #8]
 8009f98:	4402      	add	r2, r0
 8009f9a:	1a9b      	subs	r3, r3, r2
    while (next &&
 8009f9c:	2b00      	cmp	r3, #0
 8009f9e:	db0d      	blt.n	8009fbc <tcp_oos_insert_segment+0x5c>
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 8009fa0:	8988      	ldrh	r0, [r1, #12]
 8009fa2:	f7fc fb33 	bl	800660c <lwip_htons>
 8009fa6:	f010 0f01 	tst.w	r0, #1
 8009faa:	d0e8      	beq.n	8009f7e <tcp_oos_insert_segment+0x1e>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 8009fac:	68ef      	ldr	r7, [r5, #12]
 8009fae:	89be      	ldrh	r6, [r7, #12]
 8009fb0:	2001      	movs	r0, #1
 8009fb2:	f7fc fb2b 	bl	800660c <lwip_htons>
 8009fb6:	4330      	orrs	r0, r6
 8009fb8:	81b8      	strh	r0, [r7, #12]
 8009fba:	e7e0      	b.n	8009f7e <tcp_oos_insert_segment+0x1e>
    if (next &&
 8009fbc:	b174      	cbz	r4, 8009fdc <tcp_oos_insert_segment+0x7c>
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 8009fbe:	892b      	ldrh	r3, [r5, #8]
 8009fc0:	4a07      	ldr	r2, [pc, #28]	; (8009fe0 <tcp_oos_insert_segment+0x80>)
 8009fc2:	6811      	ldr	r1, [r2, #0]
 8009fc4:	440b      	add	r3, r1
 8009fc6:	68e2      	ldr	r2, [r4, #12]
 8009fc8:	6852      	ldr	r2, [r2, #4]
 8009fca:	1a9b      	subs	r3, r3, r2
    if (next &&
 8009fcc:	2b00      	cmp	r3, #0
 8009fce:	dd05      	ble.n	8009fdc <tcp_oos_insert_segment+0x7c>
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 8009fd0:	1a52      	subs	r2, r2, r1
 8009fd2:	b291      	uxth	r1, r2
 8009fd4:	8129      	strh	r1, [r5, #8]
      pbuf_realloc(cseg->p, cseg->len);
 8009fd6:	6868      	ldr	r0, [r5, #4]
 8009fd8:	f7fe fc88 	bl	80088ec <pbuf_realloc>
  cseg->next = next;
 8009fdc:	602c      	str	r4, [r5, #0]
 8009fde:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009fe0:	20003fa8 	.word	0x20003fa8

08009fe4 <tcp_receive>:
{
 8009fe4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009fe8:	4604      	mov	r4, r0
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 8009fea:	7d03      	ldrb	r3, [r0, #20]
 8009fec:	2b03      	cmp	r3, #3
 8009fee:	d979      	bls.n	800a0e4 <tcp_receive+0x100>
  if (flags & TCP_ACK) {
 8009ff0:	4bae      	ldr	r3, [pc, #696]	; (800a2ac <tcp_receive+0x2c8>)
 8009ff2:	781b      	ldrb	r3, [r3, #0]
 8009ff4:	f013 0f10 	tst.w	r3, #16
 8009ff8:	f000 81aa 	beq.w	800a350 <tcp_receive+0x36c>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 8009ffc:	f8b4 005c 	ldrh.w	r0, [r4, #92]	; 0x5c
 800a000:	6d62      	ldr	r2, [r4, #84]	; 0x54
 800a002:	1886      	adds	r6, r0, r2
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 800a004:	6d21      	ldr	r1, [r4, #80]	; 0x50
 800a006:	4baa      	ldr	r3, [pc, #680]	; (800a2b0 <tcp_receive+0x2cc>)
 800a008:	681b      	ldr	r3, [r3, #0]
 800a00a:	1acd      	subs	r5, r1, r3
 800a00c:	2d00      	cmp	r5, #0
 800a00e:	db7c      	blt.n	800a10a <tcp_receive+0x126>
 800a010:	4299      	cmp	r1, r3
 800a012:	d06f      	beq.n	800a0f4 <tcp_receive+0x110>
       (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 800a014:	49a7      	ldr	r1, [pc, #668]	; (800a2b4 <tcp_receive+0x2d0>)
 800a016:	6809      	ldr	r1, [r1, #0]
       (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800a018:	428a      	cmp	r2, r1
 800a01a:	d071      	beq.n	800a100 <tcp_receive+0x11c>
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 800a01c:	4ba5      	ldr	r3, [pc, #660]	; (800a2b4 <tcp_receive+0x2d0>)
 800a01e:	681b      	ldr	r3, [r3, #0]
 800a020:	6c61      	ldr	r1, [r4, #68]	; 0x44
 800a022:	1a5a      	subs	r2, r3, r1
 800a024:	2a00      	cmp	r2, #0
 800a026:	f340 8095 	ble.w	800a154 <tcp_receive+0x170>
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack+1, pcb->snd_nxt)) {
 800a02a:	2a01      	cmp	r2, #1
 800a02c:	d404      	bmi.n	800a038 <tcp_receive+0x54>
 800a02e:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
 800a030:	1a9a      	subs	r2, r3, r2
 800a032:	2a00      	cmp	r2, #0
 800a034:	f340 80cc 	ble.w	800a1d0 <tcp_receive+0x1ec>
      tcp_send_empty_ack(pcb);
 800a038:	4620      	mov	r0, r4
 800a03a:	f001 ff43 	bl	800bec4 <tcp_send_empty_ack>
    while (pcb->unsent != NULL &&
 800a03e:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 800a040:	2b00      	cmp	r3, #0
 800a042:	f000 8176 	beq.w	800a332 <tcp_receive+0x34e>
           TCP_SEQ_BETWEEN(ackno, lwip_ntohl(pcb->unsent->tcphdr->seqno) +
 800a046:	4a9b      	ldr	r2, [pc, #620]	; (800a2b4 <tcp_receive+0x2d0>)
 800a048:	6815      	ldr	r5, [r2, #0]
 800a04a:	68db      	ldr	r3, [r3, #12]
 800a04c:	6858      	ldr	r0, [r3, #4]
 800a04e:	f7fc fae0 	bl	8006612 <lwip_htonl>
 800a052:	4606      	mov	r6, r0
 800a054:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 800a056:	891f      	ldrh	r7, [r3, #8]
 800a058:	68db      	ldr	r3, [r3, #12]
 800a05a:	8998      	ldrh	r0, [r3, #12]
 800a05c:	f7fc fad6 	bl	800660c <lwip_htons>
 800a060:	f010 0f03 	tst.w	r0, #3
 800a064:	f000 8163 	beq.w	800a32e <tcp_receive+0x34a>
 800a068:	2301      	movs	r3, #1
 800a06a:	443b      	add	r3, r7
 800a06c:	441e      	add	r6, r3
 800a06e:	1bad      	subs	r5, r5, r6
    while (pcb->unsent != NULL &&
 800a070:	2d00      	cmp	r5, #0
 800a072:	f2c0 815e 	blt.w	800a332 <tcp_receive+0x34e>
           TCP_SEQ_BETWEEN(ackno, lwip_ntohl(pcb->unsent->tcphdr->seqno) +
 800a076:	4b8f      	ldr	r3, [pc, #572]	; (800a2b4 <tcp_receive+0x2d0>)
 800a078:	681b      	ldr	r3, [r3, #0]
 800a07a:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
 800a07c:	1a9b      	subs	r3, r3, r2
 800a07e:	2b00      	cmp	r3, #0
 800a080:	f300 8157 	bgt.w	800a332 <tcp_receive+0x34e>
      next = pcb->unsent;
 800a084:	6ea5      	ldr	r5, [r4, #104]	; 0x68
      pcb->unsent = pcb->unsent->next;
 800a086:	682b      	ldr	r3, [r5, #0]
 800a088:	66a3      	str	r3, [r4, #104]	; 0x68
      if (pcb->unsent == NULL) {
 800a08a:	2b00      	cmp	r3, #0
 800a08c:	f000 8144 	beq.w	800a318 <tcp_receive+0x334>
      LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= pbuf_clen(next->p)));
 800a090:	f8b4 6062 	ldrh.w	r6, [r4, #98]	; 0x62
 800a094:	6868      	ldr	r0, [r5, #4]
 800a096:	f7fe fc9b 	bl	80089d0 <pbuf_clen>
 800a09a:	4286      	cmp	r6, r0
 800a09c:	f0c0 813f 	bcc.w	800a31e <tcp_receive+0x33a>
      pcb->snd_queuelen -= pbuf_clen(next->p);
 800a0a0:	6868      	ldr	r0, [r5, #4]
 800a0a2:	f7fe fc95 	bl	80089d0 <pbuf_clen>
 800a0a6:	f8b4 3062 	ldrh.w	r3, [r4, #98]	; 0x62
 800a0aa:	1a18      	subs	r0, r3, r0
 800a0ac:	f8a4 0062 	strh.w	r0, [r4, #98]	; 0x62
      recv_acked += next->len;
 800a0b0:	892b      	ldrh	r3, [r5, #8]
 800a0b2:	4a81      	ldr	r2, [pc, #516]	; (800a2b8 <tcp_receive+0x2d4>)
 800a0b4:	8811      	ldrh	r1, [r2, #0]
 800a0b6:	440b      	add	r3, r1
 800a0b8:	8013      	strh	r3, [r2, #0]
      tcp_seg_free(next);
 800a0ba:	4628      	mov	r0, r5
 800a0bc:	f7fe ffae 	bl	800901c <tcp_seg_free>
      if (pcb->snd_queuelen != 0) {
 800a0c0:	f8b4 3062 	ldrh.w	r3, [r4, #98]	; 0x62
 800a0c4:	2b00      	cmp	r3, #0
 800a0c6:	d0ba      	beq.n	800a03e <tcp_receive+0x5a>
        LWIP_ASSERT("tcp_receive: valid queue length",
 800a0c8:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 800a0ca:	2b00      	cmp	r3, #0
 800a0cc:	d1b7      	bne.n	800a03e <tcp_receive+0x5a>
 800a0ce:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 800a0d0:	2b00      	cmp	r3, #0
 800a0d2:	d1b4      	bne.n	800a03e <tcp_receive+0x5a>
 800a0d4:	4b79      	ldr	r3, [pc, #484]	; (800a2bc <tcp_receive+0x2d8>)
 800a0d6:	f240 42dd 	movw	r2, #1245	; 0x4dd
 800a0da:	4979      	ldr	r1, [pc, #484]	; (800a2c0 <tcp_receive+0x2dc>)
 800a0dc:	4879      	ldr	r0, [pc, #484]	; (800a2c4 <tcp_receive+0x2e0>)
 800a0de:	f003 fd74 	bl	800dbca <iprintf>
 800a0e2:	e7ac      	b.n	800a03e <tcp_receive+0x5a>
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 800a0e4:	4b75      	ldr	r3, [pc, #468]	; (800a2bc <tcp_receive+0x2d8>)
 800a0e6:	f44f 6281 	mov.w	r2, #1032	; 0x408
 800a0ea:	4977      	ldr	r1, [pc, #476]	; (800a2c8 <tcp_receive+0x2e4>)
 800a0ec:	4875      	ldr	r0, [pc, #468]	; (800a2c4 <tcp_receive+0x2e0>)
 800a0ee:	f003 fd6c 	bl	800dbca <iprintf>
 800a0f2:	e77d      	b.n	8009ff0 <tcp_receive+0xc>
       (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800a0f4:	496f      	ldr	r1, [pc, #444]	; (800a2b4 <tcp_receive+0x2d0>)
 800a0f6:	6809      	ldr	r1, [r1, #0]
 800a0f8:	1a51      	subs	r1, r2, r1
 800a0fa:	2900      	cmp	r1, #0
 800a0fc:	da8a      	bge.n	800a014 <tcp_receive+0x30>
 800a0fe:	e004      	b.n	800a10a <tcp_receive+0x126>
       (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 800a100:	4a72      	ldr	r2, [pc, #456]	; (800a2cc <tcp_receive+0x2e8>)
 800a102:	6812      	ldr	r2, [r2, #0]
 800a104:	89d2      	ldrh	r2, [r2, #14]
 800a106:	4290      	cmp	r0, r2
 800a108:	d288      	bcs.n	800a01c <tcp_receive+0x38>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 800a10a:	4a70      	ldr	r2, [pc, #448]	; (800a2cc <tcp_receive+0x2e8>)
 800a10c:	6812      	ldr	r2, [r2, #0]
 800a10e:	89d2      	ldrh	r2, [r2, #14]
 800a110:	b291      	uxth	r1, r2
 800a112:	f8a4 205c 	strh.w	r2, [r4, #92]	; 0x5c
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 800a116:	f8b4 005e 	ldrh.w	r0, [r4, #94]	; 0x5e
 800a11a:	4281      	cmp	r1, r0
 800a11c:	d901      	bls.n	800a122 <tcp_receive+0x13e>
        pcb->snd_wnd_max = pcb->snd_wnd;
 800a11e:	f8a4 205e 	strh.w	r2, [r4, #94]	; 0x5e
      pcb->snd_wl1 = seqno;
 800a122:	6523      	str	r3, [r4, #80]	; 0x50
      pcb->snd_wl2 = ackno;
 800a124:	4b63      	ldr	r3, [pc, #396]	; (800a2b4 <tcp_receive+0x2d0>)
 800a126:	681b      	ldr	r3, [r3, #0]
 800a128:	6563      	str	r3, [r4, #84]	; 0x54
      if (pcb->snd_wnd == 0) {
 800a12a:	b951      	cbnz	r1, 800a142 <tcp_receive+0x15e>
        if (pcb->persist_backoff == 0) {
 800a12c:	f894 3095 	ldrb.w	r3, [r4, #149]	; 0x95
 800a130:	2b00      	cmp	r3, #0
 800a132:	f47f af73 	bne.w	800a01c <tcp_receive+0x38>
          pcb->persist_cnt = 0;
 800a136:	f884 3094 	strb.w	r3, [r4, #148]	; 0x94
          pcb->persist_backoff = 1;
 800a13a:	2301      	movs	r3, #1
 800a13c:	f884 3095 	strb.w	r3, [r4, #149]	; 0x95
 800a140:	e76c      	b.n	800a01c <tcp_receive+0x38>
      } else if (pcb->persist_backoff > 0) {
 800a142:	f894 3095 	ldrb.w	r3, [r4, #149]	; 0x95
 800a146:	2b00      	cmp	r3, #0
 800a148:	f43f af68 	beq.w	800a01c <tcp_receive+0x38>
          pcb->persist_backoff = 0;
 800a14c:	2300      	movs	r3, #0
 800a14e:	f884 3095 	strb.w	r3, [r4, #149]	; 0x95
 800a152:	e763      	b.n	800a01c <tcp_receive+0x38>
      if (tcplen == 0) {
 800a154:	4a5e      	ldr	r2, [pc, #376]	; (800a2d0 <tcp_receive+0x2ec>)
 800a156:	8812      	ldrh	r2, [r2, #0]
 800a158:	bb7a      	cbnz	r2, 800a1ba <tcp_receive+0x1d6>
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 800a15a:	6d62      	ldr	r2, [r4, #84]	; 0x54
 800a15c:	f8b4 005c 	ldrh.w	r0, [r4, #92]	; 0x5c
 800a160:	4402      	add	r2, r0
 800a162:	4296      	cmp	r6, r2
 800a164:	d001      	beq.n	800a16a <tcp_receive+0x186>
  int found_dupack = 0;
 800a166:	2300      	movs	r3, #0
 800a168:	e028      	b.n	800a1bc <tcp_receive+0x1d8>
          if (pcb->rtime >= 0) {
 800a16a:	f9b4 2030 	ldrsh.w	r2, [r4, #48]	; 0x30
 800a16e:	2a00      	cmp	r2, #0
 800a170:	db2a      	blt.n	800a1c8 <tcp_receive+0x1e4>
            if (pcb->lastack == ackno) {
 800a172:	428b      	cmp	r3, r1
 800a174:	d001      	beq.n	800a17a <tcp_receive+0x196>
  int found_dupack = 0;
 800a176:	2300      	movs	r3, #0
 800a178:	e020      	b.n	800a1bc <tcp_receive+0x1d8>
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 800a17a:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800a17e:	1c53      	adds	r3, r2, #1
 800a180:	b2db      	uxtb	r3, r3
 800a182:	429a      	cmp	r2, r3
 800a184:	d201      	bcs.n	800a18a <tcp_receive+0x1a6>
                ++pcb->dupacks;
 800a186:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
              if (pcb->dupacks > 3) {
 800a18a:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800a18e:	2b03      	cmp	r3, #3
 800a190:	d90a      	bls.n	800a1a8 <tcp_receive+0x1c4>
                if ((tcpwnd_size_t)(pcb->cwnd + pcb->mss) > pcb->cwnd) {
 800a192:	f8b4 2048 	ldrh.w	r2, [r4, #72]	; 0x48
 800a196:	8e63      	ldrh	r3, [r4, #50]	; 0x32
 800a198:	4413      	add	r3, r2
 800a19a:	b29b      	uxth	r3, r3
 800a19c:	429a      	cmp	r2, r3
 800a19e:	d215      	bcs.n	800a1cc <tcp_receive+0x1e8>
                  pcb->cwnd += pcb->mss;
 800a1a0:	f8a4 3048 	strh.w	r3, [r4, #72]	; 0x48
              found_dupack = 1;
 800a1a4:	2301      	movs	r3, #1
 800a1a6:	e009      	b.n	800a1bc <tcp_receive+0x1d8>
              } else if (pcb->dupacks == 3) {
 800a1a8:	2b03      	cmp	r3, #3
 800a1aa:	d001      	beq.n	800a1b0 <tcp_receive+0x1cc>
              found_dupack = 1;
 800a1ac:	2301      	movs	r3, #1
 800a1ae:	e005      	b.n	800a1bc <tcp_receive+0x1d8>
                tcp_rexmit_fast(pcb);
 800a1b0:	4620      	mov	r0, r4
 800a1b2:	f002 f8b8 	bl	800c326 <tcp_rexmit_fast>
              found_dupack = 1;
 800a1b6:	2301      	movs	r3, #1
 800a1b8:	e000      	b.n	800a1bc <tcp_receive+0x1d8>
  int found_dupack = 0;
 800a1ba:	2300      	movs	r3, #0
      if (!found_dupack) {
 800a1bc:	2b00      	cmp	r3, #0
 800a1be:	f47f af3e 	bne.w	800a03e <tcp_receive+0x5a>
        pcb->dupacks = 0;
 800a1c2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a1c6:	e73a      	b.n	800a03e <tcp_receive+0x5a>
  int found_dupack = 0;
 800a1c8:	2300      	movs	r3, #0
 800a1ca:	e7f7      	b.n	800a1bc <tcp_receive+0x1d8>
              found_dupack = 1;
 800a1cc:	2301      	movs	r3, #1
 800a1ce:	e7f5      	b.n	800a1bc <tcp_receive+0x1d8>
      if (pcb->flags & TF_INFR) {
 800a1d0:	7ea2      	ldrb	r2, [r4, #26]
 800a1d2:	f012 0f04 	tst.w	r2, #4
 800a1d6:	d006      	beq.n	800a1e6 <tcp_receive+0x202>
        pcb->flags &= ~TF_INFR;
 800a1d8:	f022 0204 	bic.w	r2, r2, #4
 800a1dc:	76a2      	strb	r2, [r4, #26]
        pcb->cwnd = pcb->ssthresh;
 800a1de:	f8b4 204a 	ldrh.w	r2, [r4, #74]	; 0x4a
 800a1e2:	f8a4 2048 	strh.w	r2, [r4, #72]	; 0x48
      pcb->nrtx = 0;
 800a1e6:	2100      	movs	r1, #0
 800a1e8:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
      pcb->rto = (pcb->sa >> 3) + pcb->sv;
 800a1ec:	f9b4 003c 	ldrsh.w	r0, [r4, #60]	; 0x3c
 800a1f0:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 800a1f2:	eb02 02e0 	add.w	r2, r2, r0, asr #3
 800a1f6:	f8a4 2040 	strh.w	r2, [r4, #64]	; 0x40
      pcb->dupacks = 0;
 800a1fa:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
      pcb->lastack = ackno;
 800a1fe:	6463      	str	r3, [r4, #68]	; 0x44
      if (pcb->state >= ESTABLISHED) {
 800a200:	7d23      	ldrb	r3, [r4, #20]
 800a202:	2b03      	cmp	r3, #3
 800a204:	d90c      	bls.n	800a220 <tcp_receive+0x23c>
        if (pcb->cwnd < pcb->ssthresh) {
 800a206:	f8b4 2048 	ldrh.w	r2, [r4, #72]	; 0x48
 800a20a:	f8b4 304a 	ldrh.w	r3, [r4, #74]	; 0x4a
 800a20e:	429a      	cmp	r2, r3
 800a210:	d260      	bcs.n	800a2d4 <tcp_receive+0x2f0>
          if ((tcpwnd_size_t)(pcb->cwnd + pcb->mss) > pcb->cwnd) {
 800a212:	8e63      	ldrh	r3, [r4, #50]	; 0x32
 800a214:	4413      	add	r3, r2
 800a216:	b29b      	uxth	r3, r3
 800a218:	429a      	cmp	r2, r3
 800a21a:	d201      	bcs.n	800a220 <tcp_receive+0x23c>
            pcb->cwnd += pcb->mss;
 800a21c:	f8a4 3048 	strh.w	r3, [r4, #72]	; 0x48
      while (pcb->unacked != NULL &&
 800a220:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 800a222:	2b00      	cmp	r3, #0
 800a224:	d06d      	beq.n	800a302 <tcp_receive+0x31e>
             TCP_SEQ_LEQ(lwip_ntohl(pcb->unacked->tcphdr->seqno) +
 800a226:	68db      	ldr	r3, [r3, #12]
 800a228:	6858      	ldr	r0, [r3, #4]
 800a22a:	f7fc f9f2 	bl	8006612 <lwip_htonl>
 800a22e:	4605      	mov	r5, r0
 800a230:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 800a232:	891e      	ldrh	r6, [r3, #8]
 800a234:	68db      	ldr	r3, [r3, #12]
 800a236:	8998      	ldrh	r0, [r3, #12]
 800a238:	f7fc f9e8 	bl	800660c <lwip_htons>
 800a23c:	f010 0f03 	tst.w	r0, #3
 800a240:	d05d      	beq.n	800a2fe <tcp_receive+0x31a>
 800a242:	2301      	movs	r3, #1
 800a244:	4433      	add	r3, r6
 800a246:	441d      	add	r5, r3
 800a248:	4b1a      	ldr	r3, [pc, #104]	; (800a2b4 <tcp_receive+0x2d0>)
 800a24a:	681b      	ldr	r3, [r3, #0]
 800a24c:	1aed      	subs	r5, r5, r3
      while (pcb->unacked != NULL &&
 800a24e:	2d00      	cmp	r5, #0
 800a250:	dc57      	bgt.n	800a302 <tcp_receive+0x31e>
        next = pcb->unacked;
 800a252:	6ee5      	ldr	r5, [r4, #108]	; 0x6c
        pcb->unacked = pcb->unacked->next;
 800a254:	682b      	ldr	r3, [r5, #0]
 800a256:	66e3      	str	r3, [r4, #108]	; 0x6c
        LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= pbuf_clen(next->p)));
 800a258:	f8b4 6062 	ldrh.w	r6, [r4, #98]	; 0x62
 800a25c:	6868      	ldr	r0, [r5, #4]
 800a25e:	f7fe fbb7 	bl	80089d0 <pbuf_clen>
 800a262:	4286      	cmp	r6, r0
 800a264:	d343      	bcc.n	800a2ee <tcp_receive+0x30a>
        pcb->snd_queuelen -= pbuf_clen(next->p);
 800a266:	6868      	ldr	r0, [r5, #4]
 800a268:	f7fe fbb2 	bl	80089d0 <pbuf_clen>
 800a26c:	f8b4 3062 	ldrh.w	r3, [r4, #98]	; 0x62
 800a270:	1a18      	subs	r0, r3, r0
 800a272:	f8a4 0062 	strh.w	r0, [r4, #98]	; 0x62
        recv_acked += next->len;
 800a276:	892b      	ldrh	r3, [r5, #8]
 800a278:	4a0f      	ldr	r2, [pc, #60]	; (800a2b8 <tcp_receive+0x2d4>)
 800a27a:	8811      	ldrh	r1, [r2, #0]
 800a27c:	440b      	add	r3, r1
 800a27e:	8013      	strh	r3, [r2, #0]
        tcp_seg_free(next);
 800a280:	4628      	mov	r0, r5
 800a282:	f7fe fecb 	bl	800901c <tcp_seg_free>
        if (pcb->snd_queuelen != 0) {
 800a286:	f8b4 3062 	ldrh.w	r3, [r4, #98]	; 0x62
 800a28a:	2b00      	cmp	r3, #0
 800a28c:	d0c8      	beq.n	800a220 <tcp_receive+0x23c>
          LWIP_ASSERT("tcp_receive: valid queue length", pcb->unacked != NULL ||
 800a28e:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 800a290:	2b00      	cmp	r3, #0
 800a292:	d1c5      	bne.n	800a220 <tcp_receive+0x23c>
 800a294:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 800a296:	2b00      	cmp	r3, #0
 800a298:	d1c2      	bne.n	800a220 <tcp_receive+0x23c>
 800a29a:	4b08      	ldr	r3, [pc, #32]	; (800a2bc <tcp_receive+0x2d8>)
 800a29c:	f240 42a7 	movw	r2, #1191	; 0x4a7
 800a2a0:	4907      	ldr	r1, [pc, #28]	; (800a2c0 <tcp_receive+0x2dc>)
 800a2a2:	4808      	ldr	r0, [pc, #32]	; (800a2c4 <tcp_receive+0x2e0>)
 800a2a4:	f003 fc91 	bl	800dbca <iprintf>
 800a2a8:	e7ba      	b.n	800a220 <tcp_receive+0x23c>
 800a2aa:	bf00      	nop
 800a2ac:	20003f88 	.word	0x20003f88
 800a2b0:	20003fa8 	.word	0x20003fa8
 800a2b4:	20003f84 	.word	0x20003f84
 800a2b8:	20003f9c 	.word	0x20003f9c
 800a2bc:	0800fe4c 	.word	0x0800fe4c
 800a2c0:	0800fec4 	.word	0x0800fec4
 800a2c4:	0800e3b0 	.word	0x0800e3b0
 800a2c8:	0800fe80 	.word	0x0800fe80
 800a2cc:	20003fb0 	.word	0x20003fb0
 800a2d0:	20003fbe 	.word	0x20003fbe
          tcpwnd_size_t new_cwnd = (pcb->cwnd + pcb->mss * pcb->mss / pcb->cwnd);
 800a2d4:	8e63      	ldrh	r3, [r4, #50]	; 0x32
 800a2d6:	fb03 f303 	mul.w	r3, r3, r3
 800a2da:	fb93 f3f2 	sdiv	r3, r3, r2
 800a2de:	fa12 f383 	uxtah	r3, r2, r3
 800a2e2:	b29b      	uxth	r3, r3
          if (new_cwnd > pcb->cwnd) {
 800a2e4:	429a      	cmp	r2, r3
 800a2e6:	d29b      	bcs.n	800a220 <tcp_receive+0x23c>
            pcb->cwnd = new_cwnd;
 800a2e8:	f8a4 3048 	strh.w	r3, [r4, #72]	; 0x48
 800a2ec:	e798      	b.n	800a220 <tcp_receive+0x23c>
        LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= pbuf_clen(next->p)));
 800a2ee:	4ba2      	ldr	r3, [pc, #648]	; (800a578 <tcp_receive+0x594>)
 800a2f0:	f240 429e 	movw	r2, #1182	; 0x49e
 800a2f4:	49a1      	ldr	r1, [pc, #644]	; (800a57c <tcp_receive+0x598>)
 800a2f6:	48a2      	ldr	r0, [pc, #648]	; (800a580 <tcp_receive+0x59c>)
 800a2f8:	f003 fc67 	bl	800dbca <iprintf>
 800a2fc:	e7b3      	b.n	800a266 <tcp_receive+0x282>
             TCP_SEQ_LEQ(lwip_ntohl(pcb->unacked->tcphdr->seqno) +
 800a2fe:	2300      	movs	r3, #0
 800a300:	e7a0      	b.n	800a244 <tcp_receive+0x260>
      if (pcb->unacked == NULL) {
 800a302:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 800a304:	b123      	cbz	r3, 800a310 <tcp_receive+0x32c>
        pcb->rtime = 0;
 800a306:	2300      	movs	r3, #0
 800a308:	8623      	strh	r3, [r4, #48]	; 0x30
      pcb->polltmr = 0;
 800a30a:	2300      	movs	r3, #0
 800a30c:	76e3      	strb	r3, [r4, #27]
 800a30e:	e696      	b.n	800a03e <tcp_receive+0x5a>
        pcb->rtime = -1;
 800a310:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800a314:	8623      	strh	r3, [r4, #48]	; 0x30
 800a316:	e7f8      	b.n	800a30a <tcp_receive+0x326>
        pcb->unsent_oversize = 0;
 800a318:	f8a4 3064 	strh.w	r3, [r4, #100]	; 0x64
 800a31c:	e6b8      	b.n	800a090 <tcp_receive+0xac>
      LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= pbuf_clen(next->p)));
 800a31e:	4b96      	ldr	r3, [pc, #600]	; (800a578 <tcp_receive+0x594>)
 800a320:	f240 42d5 	movw	r2, #1237	; 0x4d5
 800a324:	4995      	ldr	r1, [pc, #596]	; (800a57c <tcp_receive+0x598>)
 800a326:	4896      	ldr	r0, [pc, #600]	; (800a580 <tcp_receive+0x59c>)
 800a328:	f003 fc4f 	bl	800dbca <iprintf>
 800a32c:	e6b8      	b.n	800a0a0 <tcp_receive+0xbc>
           TCP_SEQ_BETWEEN(ackno, lwip_ntohl(pcb->unsent->tcphdr->seqno) +
 800a32e:	2300      	movs	r3, #0
 800a330:	e69b      	b.n	800a06a <tcp_receive+0x86>
    pcb->snd_buf += recv_acked;
 800a332:	f8b4 3060 	ldrh.w	r3, [r4, #96]	; 0x60
 800a336:	4a93      	ldr	r2, [pc, #588]	; (800a584 <tcp_receive+0x5a0>)
 800a338:	8812      	ldrh	r2, [r2, #0]
 800a33a:	4413      	add	r3, r2
 800a33c:	f8a4 3060 	strh.w	r3, [r4, #96]	; 0x60
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 800a340:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800a342:	b12b      	cbz	r3, 800a350 <tcp_receive+0x36c>
 800a344:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 800a346:	4990      	ldr	r1, [pc, #576]	; (800a588 <tcp_receive+0x5a4>)
 800a348:	6809      	ldr	r1, [r1, #0]
 800a34a:	1a52      	subs	r2, r2, r1
 800a34c:	2a00      	cmp	r2, #0
 800a34e:	db29      	blt.n	800a3a4 <tcp_receive+0x3c0>
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 800a350:	4b8e      	ldr	r3, [pc, #568]	; (800a58c <tcp_receive+0x5a8>)
 800a352:	881b      	ldrh	r3, [r3, #0]
 800a354:	2b00      	cmp	r3, #0
 800a356:	f000 834b 	beq.w	800a9f0 <tcp_receive+0xa0c>
 800a35a:	7d22      	ldrb	r2, [r4, #20]
 800a35c:	2a06      	cmp	r2, #6
 800a35e:	f200 8347 	bhi.w	800a9f0 <tcp_receive+0xa0c>
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 800a362:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800a364:	4a8a      	ldr	r2, [pc, #552]	; (800a590 <tcp_receive+0x5ac>)
 800a366:	6812      	ldr	r2, [r2, #0]
 800a368:	1a8e      	subs	r6, r1, r2
 800a36a:	2e01      	cmp	r6, #1
 800a36c:	d404      	bmi.n	800a378 <tcp_receive+0x394>
 800a36e:	4413      	add	r3, r2
 800a370:	1acb      	subs	r3, r1, r3
 800a372:	3301      	adds	r3, #1
 800a374:	2b00      	cmp	r3, #0
 800a376:	dd36      	ble.n	800a3e6 <tcp_receive+0x402>
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 800a378:	1a52      	subs	r2, r2, r1
 800a37a:	2a00      	cmp	r2, #0
 800a37c:	f2c0 8093 	blt.w	800a4a6 <tcp_receive+0x4c2>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800a380:	4b83      	ldr	r3, [pc, #524]	; (800a590 <tcp_receive+0x5ac>)
 800a382:	6819      	ldr	r1, [r3, #0]
 800a384:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800a386:	1a8b      	subs	r3, r1, r2
 800a388:	2b00      	cmp	r3, #0
 800a38a:	db06      	blt.n	800a39a <tcp_receive+0x3b6>
 800a38c:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 800a38e:	4413      	add	r3, r2
 800a390:	1acb      	subs	r3, r1, r3
 800a392:	3301      	adds	r3, #1
 800a394:	2b00      	cmp	r3, #0
 800a396:	f340 808b 	ble.w	800a4b0 <tcp_receive+0x4cc>
      tcp_send_empty_ack(pcb);
 800a39a:	4620      	mov	r0, r4
 800a39c:	f001 fd92 	bl	800bec4 <tcp_send_empty_ack>
 800a3a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      m = (s16_t)(tcp_ticks - pcb->rttest);
 800a3a4:	4a7b      	ldr	r2, [pc, #492]	; (800a594 <tcp_receive+0x5b0>)
 800a3a6:	6812      	ldr	r2, [r2, #0]
 800a3a8:	1ad2      	subs	r2, r2, r3
 800a3aa:	b292      	uxth	r2, r2
      m = m - (pcb->sa >> 3);
 800a3ac:	f9b4 103c 	ldrsh.w	r1, [r4, #60]	; 0x3c
 800a3b0:	eba2 02e1 	sub.w	r2, r2, r1, asr #3
 800a3b4:	b292      	uxth	r2, r2
 800a3b6:	b213      	sxth	r3, r2
      pcb->sa += m;
 800a3b8:	4411      	add	r1, r2
 800a3ba:	b209      	sxth	r1, r1
 800a3bc:	87a1      	strh	r1, [r4, #60]	; 0x3c
      if (m < 0) {
 800a3be:	2b00      	cmp	r3, #0
 800a3c0:	db0e      	blt.n	800a3e0 <tcp_receive+0x3fc>
      m = m - (pcb->sv >> 2);
 800a3c2:	f9b4 203e 	ldrsh.w	r2, [r4, #62]	; 0x3e
 800a3c6:	eba3 03a2 	sub.w	r3, r3, r2, asr #2
      pcb->sv += m;
 800a3ca:	fa12 f383 	uxtah	r3, r2, r3
 800a3ce:	b29b      	uxth	r3, r3
 800a3d0:	87e3      	strh	r3, [r4, #62]	; 0x3e
      pcb->rto = (pcb->sa >> 3) + pcb->sv;
 800a3d2:	eb03 03e1 	add.w	r3, r3, r1, asr #3
 800a3d6:	f8a4 3040 	strh.w	r3, [r4, #64]	; 0x40
      pcb->rttest = 0;
 800a3da:	2300      	movs	r3, #0
 800a3dc:	6363      	str	r3, [r4, #52]	; 0x34
 800a3de:	e7b7      	b.n	800a350 <tcp_receive+0x36c>
        m = -m;
 800a3e0:	4253      	negs	r3, r2
 800a3e2:	b21b      	sxth	r3, r3
 800a3e4:	e7ed      	b.n	800a3c2 <tcp_receive+0x3de>
      struct pbuf *p = inseg.p;
 800a3e6:	4b6c      	ldr	r3, [pc, #432]	; (800a598 <tcp_receive+0x5b4>)
 800a3e8:	685d      	ldr	r5, [r3, #4]
      off = pcb->rcv_nxt - seqno;
 800a3ea:	4637      	mov	r7, r6
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 800a3ec:	b195      	cbz	r5, 800a414 <tcp_receive+0x430>
      LWIP_ASSERT("insane offset!", (off < 0x7fff));
 800a3ee:	f647 73fe 	movw	r3, #32766	; 0x7ffe
 800a3f2:	429e      	cmp	r6, r3
 800a3f4:	dc16      	bgt.n	800a424 <tcp_receive+0x440>
      if (inseg.p->len < off) {
 800a3f6:	4b68      	ldr	r3, [pc, #416]	; (800a598 <tcp_receive+0x5b4>)
 800a3f8:	6858      	ldr	r0, [r3, #4]
 800a3fa:	8943      	ldrh	r3, [r0, #10]
 800a3fc:	429e      	cmp	r6, r3
 800a3fe:	dd44      	ble.n	800a48a <tcp_receive+0x4a6>
        LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 800a400:	8903      	ldrh	r3, [r0, #8]
 800a402:	429e      	cmp	r6, r3
 800a404:	dc16      	bgt.n	800a434 <tcp_receive+0x450>
        new_tot_len = (u16_t)(inseg.p->tot_len - off);
 800a406:	4b64      	ldr	r3, [pc, #400]	; (800a598 <tcp_receive+0x5b4>)
 800a408:	685b      	ldr	r3, [r3, #4]
 800a40a:	891a      	ldrh	r2, [r3, #8]
 800a40c:	b2b6      	uxth	r6, r6
 800a40e:	1b92      	subs	r2, r2, r6
 800a410:	b292      	uxth	r2, r2
        while (p->len < off) {
 800a412:	e01c      	b.n	800a44e <tcp_receive+0x46a>
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 800a414:	4b58      	ldr	r3, [pc, #352]	; (800a578 <tcp_receive+0x594>)
 800a416:	f240 523c 	movw	r2, #1340	; 0x53c
 800a41a:	4960      	ldr	r1, [pc, #384]	; (800a59c <tcp_receive+0x5b8>)
 800a41c:	4858      	ldr	r0, [pc, #352]	; (800a580 <tcp_receive+0x59c>)
 800a41e:	f003 fbd4 	bl	800dbca <iprintf>
 800a422:	e7e4      	b.n	800a3ee <tcp_receive+0x40a>
      LWIP_ASSERT("insane offset!", (off < 0x7fff));
 800a424:	4b54      	ldr	r3, [pc, #336]	; (800a578 <tcp_receive+0x594>)
 800a426:	f240 523d 	movw	r2, #1341	; 0x53d
 800a42a:	495d      	ldr	r1, [pc, #372]	; (800a5a0 <tcp_receive+0x5bc>)
 800a42c:	4854      	ldr	r0, [pc, #336]	; (800a580 <tcp_receive+0x59c>)
 800a42e:	f003 fbcc 	bl	800dbca <iprintf>
 800a432:	e7e0      	b.n	800a3f6 <tcp_receive+0x412>
        LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 800a434:	4b50      	ldr	r3, [pc, #320]	; (800a578 <tcp_receive+0x594>)
 800a436:	f240 523f 	movw	r2, #1343	; 0x53f
 800a43a:	495a      	ldr	r1, [pc, #360]	; (800a5a4 <tcp_receive+0x5c0>)
 800a43c:	4850      	ldr	r0, [pc, #320]	; (800a580 <tcp_receive+0x59c>)
 800a43e:	f003 fbc4 	bl	800dbca <iprintf>
 800a442:	e7e0      	b.n	800a406 <tcp_receive+0x422>
          off -= p->len;
 800a444:	1aff      	subs	r7, r7, r3
          p->tot_len = new_tot_len;
 800a446:	812a      	strh	r2, [r5, #8]
          p->len = 0;
 800a448:	2300      	movs	r3, #0
 800a44a:	816b      	strh	r3, [r5, #10]
          p = p->next;
 800a44c:	682d      	ldr	r5, [r5, #0]
        while (p->len < off) {
 800a44e:	896b      	ldrh	r3, [r5, #10]
 800a450:	429f      	cmp	r7, r3
 800a452:	dcf7      	bgt.n	800a444 <tcp_receive+0x460>
        if (pbuf_header(p, (s16_t)-off)) {
 800a454:	4279      	negs	r1, r7
 800a456:	b209      	sxth	r1, r1
 800a458:	4628      	mov	r0, r5
 800a45a:	f7fe f8e9 	bl	8008630 <pbuf_header>
 800a45e:	b960      	cbnz	r0, 800a47a <tcp_receive+0x496>
      inseg.len -= (u16_t)(pcb->rcv_nxt - seqno);
 800a460:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800a462:	484b      	ldr	r0, [pc, #300]	; (800a590 <tcp_receive+0x5ac>)
 800a464:	6803      	ldr	r3, [r0, #0]
 800a466:	1a9b      	subs	r3, r3, r2
 800a468:	494b      	ldr	r1, [pc, #300]	; (800a598 <tcp_receive+0x5b4>)
 800a46a:	890d      	ldrh	r5, [r1, #8]
 800a46c:	fa15 f383 	uxtah	r3, r5, r3
 800a470:	810b      	strh	r3, [r1, #8]
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 800a472:	68cb      	ldr	r3, [r1, #12]
 800a474:	6002      	str	r2, [r0, #0]
 800a476:	605a      	str	r2, [r3, #4]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 800a478:	e782      	b.n	800a380 <tcp_receive+0x39c>
          LWIP_ASSERT("pbuf_header failed", 0);
 800a47a:	4b3f      	ldr	r3, [pc, #252]	; (800a578 <tcp_receive+0x594>)
 800a47c:	f240 524c 	movw	r2, #1356	; 0x54c
 800a480:	4949      	ldr	r1, [pc, #292]	; (800a5a8 <tcp_receive+0x5c4>)
 800a482:	483f      	ldr	r0, [pc, #252]	; (800a580 <tcp_receive+0x59c>)
 800a484:	f003 fba1 	bl	800dbca <iprintf>
 800a488:	e7ea      	b.n	800a460 <tcp_receive+0x47c>
        if (pbuf_header(inseg.p, (s16_t)-off)) {
 800a48a:	4271      	negs	r1, r6
 800a48c:	b209      	sxth	r1, r1
 800a48e:	f7fe f8cf 	bl	8008630 <pbuf_header>
 800a492:	2800      	cmp	r0, #0
 800a494:	d0e4      	beq.n	800a460 <tcp_receive+0x47c>
          LWIP_ASSERT("pbuf_header failed", 0);
 800a496:	4b38      	ldr	r3, [pc, #224]	; (800a578 <tcp_receive+0x594>)
 800a498:	f240 5251 	movw	r2, #1361	; 0x551
 800a49c:	4942      	ldr	r1, [pc, #264]	; (800a5a8 <tcp_receive+0x5c4>)
 800a49e:	4838      	ldr	r0, [pc, #224]	; (800a580 <tcp_receive+0x59c>)
 800a4a0:	f003 fb93 	bl	800dbca <iprintf>
 800a4a4:	e7dc      	b.n	800a460 <tcp_receive+0x47c>
        tcp_ack_now(pcb);
 800a4a6:	7ea3      	ldrb	r3, [r4, #26]
 800a4a8:	f043 0302 	orr.w	r3, r3, #2
 800a4ac:	76a3      	strb	r3, [r4, #26]
 800a4ae:	e767      	b.n	800a380 <tcp_receive+0x39c>
      if (pcb->rcv_nxt == seqno) {
 800a4b0:	4291      	cmp	r1, r2
 800a4b2:	d008      	beq.n	800a4c6 <tcp_receive+0x4e2>
        tcp_send_empty_ack(pcb);
 800a4b4:	4620      	mov	r0, r4
 800a4b6:	f001 fd05 	bl	800bec4 <tcp_send_empty_ack>
        if (pcb->ooseq == NULL) {
 800a4ba:	6f25      	ldr	r5, [r4, #112]	; 0x70
 800a4bc:	2d00      	cmp	r5, #0
 800a4be:	f000 81ad 	beq.w	800a81c <tcp_receive+0x838>
 800a4c2:	2600      	movs	r6, #0
 800a4c4:	e1e4      	b.n	800a890 <tcp_receive+0x8ac>
        tcplen = TCP_TCPLEN(&inseg);
 800a4c6:	4b34      	ldr	r3, [pc, #208]	; (800a598 <tcp_receive+0x5b4>)
 800a4c8:	891d      	ldrh	r5, [r3, #8]
 800a4ca:	68db      	ldr	r3, [r3, #12]
 800a4cc:	8998      	ldrh	r0, [r3, #12]
 800a4ce:	f7fc f89d 	bl	800660c <lwip_htons>
 800a4d2:	f010 0f03 	tst.w	r0, #3
 800a4d6:	d015      	beq.n	800a504 <tcp_receive+0x520>
 800a4d8:	2301      	movs	r3, #1
 800a4da:	442b      	add	r3, r5
 800a4dc:	b29b      	uxth	r3, r3
 800a4de:	4a2b      	ldr	r2, [pc, #172]	; (800a58c <tcp_receive+0x5a8>)
 800a4e0:	8013      	strh	r3, [r2, #0]
        if (tcplen > pcb->rcv_wnd) {
 800a4e2:	8d22      	ldrh	r2, [r4, #40]	; 0x28
 800a4e4:	4293      	cmp	r3, r2
 800a4e6:	d80f      	bhi.n	800a508 <tcp_receive+0x524>
        if (pcb->ooseq != NULL) {
 800a4e8:	6f23      	ldr	r3, [r4, #112]	; 0x70
 800a4ea:	2b00      	cmp	r3, #0
 800a4ec:	f000 80ed 	beq.w	800a6ca <tcp_receive+0x6e6>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800a4f0:	4b29      	ldr	r3, [pc, #164]	; (800a598 <tcp_receive+0x5b4>)
 800a4f2:	68db      	ldr	r3, [r3, #12]
 800a4f4:	8998      	ldrh	r0, [r3, #12]
 800a4f6:	f7fc f889 	bl	800660c <lwip_htons>
 800a4fa:	f010 0f01 	tst.w	r0, #1
 800a4fe:	d168      	bne.n	800a5d2 <tcp_receive+0x5ee>
            next = pcb->ooseq;
 800a500:	6f25      	ldr	r5, [r4, #112]	; 0x70
            while (next &&
 800a502:	e077      	b.n	800a5f4 <tcp_receive+0x610>
        tcplen = TCP_TCPLEN(&inseg);
 800a504:	2300      	movs	r3, #0
 800a506:	e7e8      	b.n	800a4da <tcp_receive+0x4f6>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800a508:	4b23      	ldr	r3, [pc, #140]	; (800a598 <tcp_receive+0x5b4>)
 800a50a:	68db      	ldr	r3, [r3, #12]
 800a50c:	8998      	ldrh	r0, [r3, #12]
 800a50e:	f7fc f87d 	bl	800660c <lwip_htons>
 800a512:	f010 0f01 	tst.w	r0, #1
 800a516:	d14b      	bne.n	800a5b0 <tcp_receive+0x5cc>
          inseg.len = (u16_t)pcb->rcv_wnd;
 800a518:	8d22      	ldrh	r2, [r4, #40]	; 0x28
 800a51a:	4b1f      	ldr	r3, [pc, #124]	; (800a598 <tcp_receive+0x5b4>)
 800a51c:	811a      	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 800a51e:	68db      	ldr	r3, [r3, #12]
 800a520:	8998      	ldrh	r0, [r3, #12]
 800a522:	f7fc f873 	bl	800660c <lwip_htons>
 800a526:	f010 0f02 	tst.w	r0, #2
 800a52a:	d003      	beq.n	800a534 <tcp_receive+0x550>
            inseg.len -= 1;
 800a52c:	4a1a      	ldr	r2, [pc, #104]	; (800a598 <tcp_receive+0x5b4>)
 800a52e:	8913      	ldrh	r3, [r2, #8]
 800a530:	3b01      	subs	r3, #1
 800a532:	8113      	strh	r3, [r2, #8]
          pbuf_realloc(inseg.p, inseg.len);
 800a534:	4d18      	ldr	r5, [pc, #96]	; (800a598 <tcp_receive+0x5b4>)
 800a536:	8929      	ldrh	r1, [r5, #8]
 800a538:	6868      	ldr	r0, [r5, #4]
 800a53a:	f7fe f9d7 	bl	80088ec <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 800a53e:	892e      	ldrh	r6, [r5, #8]
 800a540:	68eb      	ldr	r3, [r5, #12]
 800a542:	8998      	ldrh	r0, [r3, #12]
 800a544:	f7fc f862 	bl	800660c <lwip_htons>
 800a548:	f010 0f03 	tst.w	r0, #3
 800a54c:	d03f      	beq.n	800a5ce <tcp_receive+0x5ea>
 800a54e:	2301      	movs	r3, #1
 800a550:	4433      	add	r3, r6
 800a552:	b29b      	uxth	r3, r3
 800a554:	4a0d      	ldr	r2, [pc, #52]	; (800a58c <tcp_receive+0x5a8>)
 800a556:	8013      	strh	r3, [r2, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 800a558:	4a0d      	ldr	r2, [pc, #52]	; (800a590 <tcp_receive+0x5ac>)
 800a55a:	6812      	ldr	r2, [r2, #0]
 800a55c:	4413      	add	r3, r2
 800a55e:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800a560:	8d21      	ldrh	r1, [r4, #40]	; 0x28
 800a562:	440a      	add	r2, r1
 800a564:	4293      	cmp	r3, r2
 800a566:	d0bf      	beq.n	800a4e8 <tcp_receive+0x504>
 800a568:	4b03      	ldr	r3, [pc, #12]	; (800a578 <tcp_receive+0x594>)
 800a56a:	f240 527f 	movw	r2, #1407	; 0x57f
 800a56e:	490f      	ldr	r1, [pc, #60]	; (800a5ac <tcp_receive+0x5c8>)
 800a570:	4803      	ldr	r0, [pc, #12]	; (800a580 <tcp_receive+0x59c>)
 800a572:	f003 fb2a 	bl	800dbca <iprintf>
 800a576:	e7b7      	b.n	800a4e8 <tcp_receive+0x504>
 800a578:	0800fe4c 	.word	0x0800fe4c
 800a57c:	0800fe9c 	.word	0x0800fe9c
 800a580:	0800e3b0 	.word	0x0800e3b0
 800a584:	20003f9c 	.word	0x20003f9c
 800a588:	20003f84 	.word	0x20003f84
 800a58c:	20003fbe 	.word	0x20003fbe
 800a590:	20003fa8 	.word	0x20003fa8
 800a594:	20007980 	.word	0x20007980
 800a598:	20003f8c 	.word	0x20003f8c
 800a59c:	0800fee4 	.word	0x0800fee4
 800a5a0:	0800fef4 	.word	0x0800fef4
 800a5a4:	0800ff04 	.word	0x0800ff04
 800a5a8:	0800ff14 	.word	0x0800ff14
 800a5ac:	0800ff28 	.word	0x0800ff28
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 800a5b0:	4ba9      	ldr	r3, [pc, #676]	; (800a858 <tcp_receive+0x874>)
 800a5b2:	68de      	ldr	r6, [r3, #12]
 800a5b4:	89b0      	ldrh	r0, [r6, #12]
 800a5b6:	f420 557c 	bic.w	r5, r0, #16128	; 0x3f00
 800a5ba:	b2ad      	uxth	r5, r5
 800a5bc:	f7fc f826 	bl	800660c <lwip_htons>
 800a5c0:	f000 003e 	and.w	r0, r0, #62	; 0x3e
 800a5c4:	f7fc f822 	bl	800660c <lwip_htons>
 800a5c8:	4328      	orrs	r0, r5
 800a5ca:	81b0      	strh	r0, [r6, #12]
 800a5cc:	e7a4      	b.n	800a518 <tcp_receive+0x534>
          tcplen = TCP_TCPLEN(&inseg);
 800a5ce:	2300      	movs	r3, #0
 800a5d0:	e7be      	b.n	800a550 <tcp_receive+0x56c>
            while (pcb->ooseq != NULL) {
 800a5d2:	6f20      	ldr	r0, [r4, #112]	; 0x70
 800a5d4:	2800      	cmp	r0, #0
 800a5d6:	d078      	beq.n	800a6ca <tcp_receive+0x6e6>
              pcb->ooseq = pcb->ooseq->next;
 800a5d8:	6803      	ldr	r3, [r0, #0]
 800a5da:	6723      	str	r3, [r4, #112]	; 0x70
              tcp_seg_free(old_ooseq);
 800a5dc:	f7fe fd1e 	bl	800901c <tcp_seg_free>
 800a5e0:	e7f7      	b.n	800a5d2 <tcp_receive+0x5ee>
                tcplen = TCP_TCPLEN(&inseg);
 800a5e2:	2300      	movs	r3, #0
 800a5e4:	443b      	add	r3, r7
 800a5e6:	4a9d      	ldr	r2, [pc, #628]	; (800a85c <tcp_receive+0x878>)
 800a5e8:	8013      	strh	r3, [r2, #0]
              next = next->next;
 800a5ea:	682e      	ldr	r6, [r5, #0]
              tcp_seg_free(prev);
 800a5ec:	4628      	mov	r0, r5
 800a5ee:	f7fe fd15 	bl	800901c <tcp_seg_free>
              next = next->next;
 800a5f2:	4635      	mov	r5, r6
            while (next &&
 800a5f4:	b375      	cbz	r5, 800a654 <tcp_receive+0x670>
                   TCP_SEQ_GEQ(seqno + tcplen,
 800a5f6:	4b99      	ldr	r3, [pc, #612]	; (800a85c <tcp_receive+0x878>)
 800a5f8:	881b      	ldrh	r3, [r3, #0]
 800a5fa:	4a99      	ldr	r2, [pc, #612]	; (800a860 <tcp_receive+0x87c>)
 800a5fc:	6812      	ldr	r2, [r2, #0]
 800a5fe:	4413      	add	r3, r2
 800a600:	68e9      	ldr	r1, [r5, #12]
 800a602:	684a      	ldr	r2, [r1, #4]
 800a604:	8928      	ldrh	r0, [r5, #8]
 800a606:	4402      	add	r2, r0
 800a608:	1a9b      	subs	r3, r3, r2
            while (next &&
 800a60a:	2b00      	cmp	r3, #0
 800a60c:	db22      	blt.n	800a654 <tcp_receive+0x670>
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 800a60e:	8988      	ldrh	r0, [r1, #12]
 800a610:	f7fb fffc 	bl	800660c <lwip_htons>
 800a614:	f010 0f01 	tst.w	r0, #1
 800a618:	d0e7      	beq.n	800a5ea <tcp_receive+0x606>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 800a61a:	4b8f      	ldr	r3, [pc, #572]	; (800a858 <tcp_receive+0x874>)
 800a61c:	68db      	ldr	r3, [r3, #12]
 800a61e:	8998      	ldrh	r0, [r3, #12]
 800a620:	f7fb fff4 	bl	800660c <lwip_htons>
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 800a624:	f010 0f02 	tst.w	r0, #2
 800a628:	d1df      	bne.n	800a5ea <tcp_receive+0x606>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 800a62a:	4e8b      	ldr	r6, [pc, #556]	; (800a858 <tcp_receive+0x874>)
 800a62c:	f8d6 800c 	ldr.w	r8, [r6, #12]
 800a630:	f8b8 700c 	ldrh.w	r7, [r8, #12]
 800a634:	2001      	movs	r0, #1
 800a636:	f7fb ffe9 	bl	800660c <lwip_htons>
 800a63a:	4338      	orrs	r0, r7
 800a63c:	f8a8 000c 	strh.w	r0, [r8, #12]
                tcplen = TCP_TCPLEN(&inseg);
 800a640:	8937      	ldrh	r7, [r6, #8]
 800a642:	68f3      	ldr	r3, [r6, #12]
 800a644:	8998      	ldrh	r0, [r3, #12]
 800a646:	f7fb ffe1 	bl	800660c <lwip_htons>
 800a64a:	f010 0f03 	tst.w	r0, #3
 800a64e:	d0c8      	beq.n	800a5e2 <tcp_receive+0x5fe>
 800a650:	2301      	movs	r3, #1
 800a652:	e7c7      	b.n	800a5e4 <tcp_receive+0x600>
            if (next &&
 800a654:	2d00      	cmp	r5, #0
 800a656:	d037      	beq.n	800a6c8 <tcp_receive+0x6e4>
                TCP_SEQ_GT(seqno + tcplen,
 800a658:	4b81      	ldr	r3, [pc, #516]	; (800a860 <tcp_receive+0x87c>)
 800a65a:	6819      	ldr	r1, [r3, #0]
 800a65c:	4b7f      	ldr	r3, [pc, #508]	; (800a85c <tcp_receive+0x878>)
 800a65e:	881b      	ldrh	r3, [r3, #0]
 800a660:	440b      	add	r3, r1
 800a662:	68ea      	ldr	r2, [r5, #12]
 800a664:	6852      	ldr	r2, [r2, #4]
 800a666:	1a9b      	subs	r3, r3, r2
            if (next &&
 800a668:	2b00      	cmp	r3, #0
 800a66a:	dd2d      	ble.n	800a6c8 <tcp_receive+0x6e4>
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 800a66c:	1a52      	subs	r2, r2, r1
 800a66e:	4b7a      	ldr	r3, [pc, #488]	; (800a858 <tcp_receive+0x874>)
 800a670:	811a      	strh	r2, [r3, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 800a672:	68db      	ldr	r3, [r3, #12]
 800a674:	8998      	ldrh	r0, [r3, #12]
 800a676:	f7fb ffc9 	bl	800660c <lwip_htons>
 800a67a:	f010 0f02 	tst.w	r0, #2
 800a67e:	d003      	beq.n	800a688 <tcp_receive+0x6a4>
                inseg.len -= 1;
 800a680:	4a75      	ldr	r2, [pc, #468]	; (800a858 <tcp_receive+0x874>)
 800a682:	8913      	ldrh	r3, [r2, #8]
 800a684:	3b01      	subs	r3, #1
 800a686:	8113      	strh	r3, [r2, #8]
              pbuf_realloc(inseg.p, inseg.len);
 800a688:	4e73      	ldr	r6, [pc, #460]	; (800a858 <tcp_receive+0x874>)
 800a68a:	8931      	ldrh	r1, [r6, #8]
 800a68c:	6870      	ldr	r0, [r6, #4]
 800a68e:	f7fe f92d 	bl	80088ec <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 800a692:	8937      	ldrh	r7, [r6, #8]
 800a694:	68f3      	ldr	r3, [r6, #12]
 800a696:	8998      	ldrh	r0, [r3, #12]
 800a698:	f7fb ffb8 	bl	800660c <lwip_htons>
 800a69c:	f010 0f03 	tst.w	r0, #3
 800a6a0:	d03b      	beq.n	800a71a <tcp_receive+0x736>
 800a6a2:	2301      	movs	r3, #1
 800a6a4:	443b      	add	r3, r7
 800a6a6:	b29b      	uxth	r3, r3
 800a6a8:	4a6c      	ldr	r2, [pc, #432]	; (800a85c <tcp_receive+0x878>)
 800a6aa:	8013      	strh	r3, [r2, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 800a6ac:	4a6c      	ldr	r2, [pc, #432]	; (800a860 <tcp_receive+0x87c>)
 800a6ae:	6812      	ldr	r2, [r2, #0]
 800a6b0:	4413      	add	r3, r2
 800a6b2:	68ea      	ldr	r2, [r5, #12]
 800a6b4:	6852      	ldr	r2, [r2, #4]
 800a6b6:	4293      	cmp	r3, r2
 800a6b8:	d006      	beq.n	800a6c8 <tcp_receive+0x6e4>
 800a6ba:	4b6a      	ldr	r3, [pc, #424]	; (800a864 <tcp_receive+0x880>)
 800a6bc:	f240 52af 	movw	r2, #1455	; 0x5af
 800a6c0:	4969      	ldr	r1, [pc, #420]	; (800a868 <tcp_receive+0x884>)
 800a6c2:	486a      	ldr	r0, [pc, #424]	; (800a86c <tcp_receive+0x888>)
 800a6c4:	f003 fa81 	bl	800dbca <iprintf>
            pcb->ooseq = next;
 800a6c8:	6725      	str	r5, [r4, #112]	; 0x70
        pcb->rcv_nxt = seqno + tcplen;
 800a6ca:	4b64      	ldr	r3, [pc, #400]	; (800a85c <tcp_receive+0x878>)
 800a6cc:	881a      	ldrh	r2, [r3, #0]
 800a6ce:	4b64      	ldr	r3, [pc, #400]	; (800a860 <tcp_receive+0x87c>)
 800a6d0:	681b      	ldr	r3, [r3, #0]
 800a6d2:	4413      	add	r3, r2
 800a6d4:	6263      	str	r3, [r4, #36]	; 0x24
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 800a6d6:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 800a6d8:	429a      	cmp	r2, r3
 800a6da:	d820      	bhi.n	800a71e <tcp_receive+0x73a>
        pcb->rcv_wnd -= tcplen;
 800a6dc:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 800a6de:	4a5f      	ldr	r2, [pc, #380]	; (800a85c <tcp_receive+0x878>)
 800a6e0:	8812      	ldrh	r2, [r2, #0]
 800a6e2:	1a9b      	subs	r3, r3, r2
 800a6e4:	8523      	strh	r3, [r4, #40]	; 0x28
        tcp_update_rcv_ann_wnd(pcb);
 800a6e6:	4620      	mov	r0, r4
 800a6e8:	f7fe fc26 	bl	8008f38 <tcp_update_rcv_ann_wnd>
        if (inseg.p->tot_len > 0) {
 800a6ec:	4b5a      	ldr	r3, [pc, #360]	; (800a858 <tcp_receive+0x874>)
 800a6ee:	685b      	ldr	r3, [r3, #4]
 800a6f0:	891a      	ldrh	r2, [r3, #8]
 800a6f2:	b122      	cbz	r2, 800a6fe <tcp_receive+0x71a>
          recv_data = inseg.p;
 800a6f4:	4a5e      	ldr	r2, [pc, #376]	; (800a870 <tcp_receive+0x88c>)
 800a6f6:	6013      	str	r3, [r2, #0]
          inseg.p = NULL;
 800a6f8:	2200      	movs	r2, #0
 800a6fa:	4b57      	ldr	r3, [pc, #348]	; (800a858 <tcp_receive+0x874>)
 800a6fc:	605a      	str	r2, [r3, #4]
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800a6fe:	4b56      	ldr	r3, [pc, #344]	; (800a858 <tcp_receive+0x874>)
 800a700:	68db      	ldr	r3, [r3, #12]
 800a702:	8998      	ldrh	r0, [r3, #12]
 800a704:	f7fb ff82 	bl	800660c <lwip_htons>
 800a708:	f010 0f01 	tst.w	r0, #1
 800a70c:	d035      	beq.n	800a77a <tcp_receive+0x796>
          recv_flags |= TF_GOT_FIN;
 800a70e:	4a59      	ldr	r2, [pc, #356]	; (800a874 <tcp_receive+0x890>)
 800a710:	7813      	ldrb	r3, [r2, #0]
 800a712:	f043 0320 	orr.w	r3, r3, #32
 800a716:	7013      	strb	r3, [r2, #0]
 800a718:	e02f      	b.n	800a77a <tcp_receive+0x796>
              tcplen = TCP_TCPLEN(&inseg);
 800a71a:	2300      	movs	r3, #0
 800a71c:	e7c2      	b.n	800a6a4 <tcp_receive+0x6c0>
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 800a71e:	4b51      	ldr	r3, [pc, #324]	; (800a864 <tcp_receive+0x880>)
 800a720:	f240 52b9 	movw	r2, #1465	; 0x5b9
 800a724:	4954      	ldr	r1, [pc, #336]	; (800a878 <tcp_receive+0x894>)
 800a726:	4851      	ldr	r0, [pc, #324]	; (800a86c <tcp_receive+0x888>)
 800a728:	f003 fa4f 	bl	800dbca <iprintf>
 800a72c:	e7d6      	b.n	800a6dc <tcp_receive+0x6f8>
          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 800a72e:	2300      	movs	r3, #0
 800a730:	e035      	b.n	800a79e <tcp_receive+0x7ba>
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 800a732:	2300      	movs	r3, #0
 800a734:	e041      	b.n	800a7ba <tcp_receive+0x7d6>
 800a736:	4b4b      	ldr	r3, [pc, #300]	; (800a864 <tcp_receive+0x880>)
 800a738:	f240 52de 	movw	r2, #1502	; 0x5de
 800a73c:	494f      	ldr	r1, [pc, #316]	; (800a87c <tcp_receive+0x898>)
 800a73e:	484b      	ldr	r0, [pc, #300]	; (800a86c <tcp_receive+0x888>)
 800a740:	f003 fa43 	bl	800dbca <iprintf>
 800a744:	e03c      	b.n	800a7c0 <tcp_receive+0x7dc>
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 800a746:	2300      	movs	r3, #0
 800a748:	e043      	b.n	800a7d2 <tcp_receive+0x7ee>
              recv_data = cseg->p;
 800a74a:	4b49      	ldr	r3, [pc, #292]	; (800a870 <tcp_receive+0x88c>)
 800a74c:	6019      	str	r1, [r3, #0]
            cseg->p = NULL;
 800a74e:	2300      	movs	r3, #0
 800a750:	606b      	str	r3, [r5, #4]
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 800a752:	68eb      	ldr	r3, [r5, #12]
 800a754:	8998      	ldrh	r0, [r3, #12]
 800a756:	f7fb ff59 	bl	800660c <lwip_htons>
 800a75a:	f010 0f01 	tst.w	r0, #1
 800a75e:	d007      	beq.n	800a770 <tcp_receive+0x78c>
            recv_flags |= TF_GOT_FIN;
 800a760:	4a44      	ldr	r2, [pc, #272]	; (800a874 <tcp_receive+0x890>)
 800a762:	7813      	ldrb	r3, [r2, #0]
 800a764:	f043 0320 	orr.w	r3, r3, #32
 800a768:	7013      	strb	r3, [r2, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 800a76a:	7d23      	ldrb	r3, [r4, #20]
 800a76c:	2b04      	cmp	r3, #4
 800a76e:	d042      	beq.n	800a7f6 <tcp_receive+0x812>
          pcb->ooseq = cseg->next;
 800a770:	682b      	ldr	r3, [r5, #0]
 800a772:	6723      	str	r3, [r4, #112]	; 0x70
          tcp_seg_free(cseg);
 800a774:	4628      	mov	r0, r5
 800a776:	f7fe fc51 	bl	800901c <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 800a77a:	6f25      	ldr	r5, [r4, #112]	; 0x70
 800a77c:	2d00      	cmp	r5, #0
 800a77e:	d03d      	beq.n	800a7fc <tcp_receive+0x818>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 800a780:	68ea      	ldr	r2, [r5, #12]
 800a782:	6853      	ldr	r3, [r2, #4]
 800a784:	6a61      	ldr	r1, [r4, #36]	; 0x24
        while (pcb->ooseq != NULL &&
 800a786:	428b      	cmp	r3, r1
 800a788:	d138      	bne.n	800a7fc <tcp_receive+0x818>
          seqno = pcb->ooseq->tcphdr->seqno;
 800a78a:	4935      	ldr	r1, [pc, #212]	; (800a860 <tcp_receive+0x87c>)
 800a78c:	600b      	str	r3, [r1, #0]
          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 800a78e:	892e      	ldrh	r6, [r5, #8]
 800a790:	8990      	ldrh	r0, [r2, #12]
 800a792:	f7fb ff3b 	bl	800660c <lwip_htons>
 800a796:	f010 0f03 	tst.w	r0, #3
 800a79a:	d0c8      	beq.n	800a72e <tcp_receive+0x74a>
 800a79c:	2301      	movs	r3, #1
 800a79e:	199a      	adds	r2, r3, r6
 800a7a0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a7a2:	4413      	add	r3, r2
 800a7a4:	6263      	str	r3, [r4, #36]	; 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 800a7a6:	8d26      	ldrh	r6, [r4, #40]	; 0x28
 800a7a8:	892f      	ldrh	r7, [r5, #8]
 800a7aa:	68eb      	ldr	r3, [r5, #12]
 800a7ac:	8998      	ldrh	r0, [r3, #12]
 800a7ae:	f7fb ff2d 	bl	800660c <lwip_htons>
 800a7b2:	f010 0f03 	tst.w	r0, #3
 800a7b6:	d0bc      	beq.n	800a732 <tcp_receive+0x74e>
 800a7b8:	2301      	movs	r3, #1
 800a7ba:	443b      	add	r3, r7
 800a7bc:	429e      	cmp	r6, r3
 800a7be:	d3ba      	bcc.n	800a736 <tcp_receive+0x752>
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 800a7c0:	892e      	ldrh	r6, [r5, #8]
 800a7c2:	68eb      	ldr	r3, [r5, #12]
 800a7c4:	8998      	ldrh	r0, [r3, #12]
 800a7c6:	f7fb ff21 	bl	800660c <lwip_htons>
 800a7ca:	f010 0f03 	tst.w	r0, #3
 800a7ce:	d0ba      	beq.n	800a746 <tcp_receive+0x762>
 800a7d0:	2301      	movs	r3, #1
 800a7d2:	199a      	adds	r2, r3, r6
 800a7d4:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 800a7d6:	1a9b      	subs	r3, r3, r2
 800a7d8:	8523      	strh	r3, [r4, #40]	; 0x28
          tcp_update_rcv_ann_wnd(pcb);
 800a7da:	4620      	mov	r0, r4
 800a7dc:	f7fe fbac 	bl	8008f38 <tcp_update_rcv_ann_wnd>
          if (cseg->p->tot_len > 0) {
 800a7e0:	6869      	ldr	r1, [r5, #4]
 800a7e2:	890b      	ldrh	r3, [r1, #8]
 800a7e4:	2b00      	cmp	r3, #0
 800a7e6:	d0b4      	beq.n	800a752 <tcp_receive+0x76e>
            if (recv_data) {
 800a7e8:	4b21      	ldr	r3, [pc, #132]	; (800a870 <tcp_receive+0x88c>)
 800a7ea:	6818      	ldr	r0, [r3, #0]
 800a7ec:	2800      	cmp	r0, #0
 800a7ee:	d0ac      	beq.n	800a74a <tcp_receive+0x766>
              pbuf_cat(recv_data, cseg->p);
 800a7f0:	f7fe f914 	bl	8008a1c <pbuf_cat>
 800a7f4:	e7ab      	b.n	800a74e <tcp_receive+0x76a>
              pcb->state = CLOSE_WAIT;
 800a7f6:	2307      	movs	r3, #7
 800a7f8:	7523      	strb	r3, [r4, #20]
 800a7fa:	e7b9      	b.n	800a770 <tcp_receive+0x78c>
        tcp_ack(pcb);
 800a7fc:	7ea3      	ldrb	r3, [r4, #26]
 800a7fe:	f013 0f01 	tst.w	r3, #1
 800a802:	d006      	beq.n	800a812 <tcp_receive+0x82e>
 800a804:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 800a808:	f043 0302 	orr.w	r3, r3, #2
 800a80c:	76a3      	strb	r3, [r4, #26]
 800a80e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a812:	f043 0301 	orr.w	r3, r3, #1
 800a816:	76a3      	strb	r3, [r4, #26]
 800a818:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
          pcb->ooseq = tcp_seg_copy(&inseg);
 800a81c:	480e      	ldr	r0, [pc, #56]	; (800a858 <tcp_receive+0x874>)
 800a81e:	f7fe fc14 	bl	800904a <tcp_seg_copy>
 800a822:	6720      	str	r0, [r4, #112]	; 0x70
 800a824:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
              if (inseg.len > next->len) {
 800a828:	4b0b      	ldr	r3, [pc, #44]	; (800a858 <tcp_receive+0x874>)
 800a82a:	891a      	ldrh	r2, [r3, #8]
 800a82c:	892b      	ldrh	r3, [r5, #8]
 800a82e:	429a      	cmp	r2, r3
 800a830:	f240 80ee 	bls.w	800aa10 <tcp_receive+0xa2c>
                cseg = tcp_seg_copy(&inseg);
 800a834:	4808      	ldr	r0, [pc, #32]	; (800a858 <tcp_receive+0x874>)
 800a836:	f7fe fc08 	bl	800904a <tcp_seg_copy>
                if (cseg != NULL) {
 800a83a:	4603      	mov	r3, r0
 800a83c:	2800      	cmp	r0, #0
 800a83e:	f000 80e7 	beq.w	800aa10 <tcp_receive+0xa2c>
                  if (prev != NULL) {
 800a842:	b136      	cbz	r6, 800a852 <tcp_receive+0x86e>
                    prev->next = cseg;
 800a844:	6030      	str	r0, [r6, #0]
                  tcp_oos_insert_segment(cseg, next);
 800a846:	4629      	mov	r1, r5
 800a848:	4618      	mov	r0, r3
 800a84a:	f7ff fb89 	bl	8009f60 <tcp_oos_insert_segment>
 800a84e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
                    pcb->ooseq = cseg;
 800a852:	6720      	str	r0, [r4, #112]	; 0x70
 800a854:	e7f7      	b.n	800a846 <tcp_receive+0x862>
 800a856:	bf00      	nop
 800a858:	20003f8c 	.word	0x20003f8c
 800a85c:	20003fbe 	.word	0x20003fbe
 800a860:	20003fa8 	.word	0x20003fa8
 800a864:	0800fe4c 	.word	0x0800fe4c
 800a868:	0800ff60 	.word	0x0800ff60
 800a86c:	0800e3b0 	.word	0x0800e3b0
 800a870:	20003fa0 	.word	0x20003fa0
 800a874:	20003fa4 	.word	0x20003fa4
 800a878:	0800ff9c 	.word	0x0800ff9c
 800a87c:	0800ffbc 	.word	0x0800ffbc
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 800a880:	1a5a      	subs	r2, r3, r1
 800a882:	2a00      	cmp	r2, #0
 800a884:	db35      	blt.n	800a8f2 <tcp_receive+0x90e>
              if (next->next == NULL &&
 800a886:	682a      	ldr	r2, [r5, #0]
 800a888:	462e      	mov	r6, r5
 800a88a:	2a00      	cmp	r2, #0
 800a88c:	d03d      	beq.n	800a90a <tcp_receive+0x926>
 800a88e:	4615      	mov	r5, r2
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 800a890:	2d00      	cmp	r5, #0
 800a892:	f000 80ab 	beq.w	800a9ec <tcp_receive+0xa08>
            if (seqno == next->tcphdr->seqno) {
 800a896:	68e8      	ldr	r0, [r5, #12]
 800a898:	6841      	ldr	r1, [r0, #4]
 800a89a:	4b5e      	ldr	r3, [pc, #376]	; (800aa14 <tcp_receive+0xa30>)
 800a89c:	681b      	ldr	r3, [r3, #0]
 800a89e:	4299      	cmp	r1, r3
 800a8a0:	d0c2      	beq.n	800a828 <tcp_receive+0x844>
              if (prev == NULL) {
 800a8a2:	2e00      	cmp	r6, #0
 800a8a4:	d0ec      	beq.n	800a880 <tcp_receive+0x89c>
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno+1, next->tcphdr->seqno-1)) {
 800a8a6:	68f2      	ldr	r2, [r6, #12]
 800a8a8:	6852      	ldr	r2, [r2, #4]
 800a8aa:	1a9a      	subs	r2, r3, r2
 800a8ac:	2a01      	cmp	r2, #1
 800a8ae:	d4ea      	bmi.n	800a886 <tcp_receive+0x8a2>
 800a8b0:	1a5a      	subs	r2, r3, r1
 800a8b2:	3201      	adds	r2, #1
 800a8b4:	2a00      	cmp	r2, #0
 800a8b6:	dce6      	bgt.n	800a886 <tcp_receive+0x8a2>
                  cseg = tcp_seg_copy(&inseg);
 800a8b8:	4857      	ldr	r0, [pc, #348]	; (800aa18 <tcp_receive+0xa34>)
 800a8ba:	f7fe fbc6 	bl	800904a <tcp_seg_copy>
                  if (cseg != NULL) {
 800a8be:	4604      	mov	r4, r0
 800a8c0:	2800      	cmp	r0, #0
 800a8c2:	f000 80a5 	beq.w	800aa10 <tcp_receive+0xa2c>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 800a8c6:	68f3      	ldr	r3, [r6, #12]
 800a8c8:	6859      	ldr	r1, [r3, #4]
 800a8ca:	8932      	ldrh	r2, [r6, #8]
 800a8cc:	440a      	add	r2, r1
 800a8ce:	4b51      	ldr	r3, [pc, #324]	; (800aa14 <tcp_receive+0xa30>)
 800a8d0:	681b      	ldr	r3, [r3, #0]
 800a8d2:	1ad2      	subs	r2, r2, r3
 800a8d4:	2a00      	cmp	r2, #0
 800a8d6:	dd05      	ble.n	800a8e4 <tcp_receive+0x900>
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 800a8d8:	1a5b      	subs	r3, r3, r1
 800a8da:	b299      	uxth	r1, r3
 800a8dc:	8131      	strh	r1, [r6, #8]
                      pbuf_realloc(prev->p, prev->len);
 800a8de:	6870      	ldr	r0, [r6, #4]
 800a8e0:	f7fe f804 	bl	80088ec <pbuf_realloc>
                    prev->next = cseg;
 800a8e4:	6034      	str	r4, [r6, #0]
                    tcp_oos_insert_segment(cseg, next);
 800a8e6:	4629      	mov	r1, r5
 800a8e8:	4620      	mov	r0, r4
 800a8ea:	f7ff fb39 	bl	8009f60 <tcp_oos_insert_segment>
 800a8ee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
                  cseg = tcp_seg_copy(&inseg);
 800a8f2:	4849      	ldr	r0, [pc, #292]	; (800aa18 <tcp_receive+0xa34>)
 800a8f4:	f7fe fba9 	bl	800904a <tcp_seg_copy>
                  if (cseg != NULL) {
 800a8f8:	2800      	cmp	r0, #0
 800a8fa:	f000 8089 	beq.w	800aa10 <tcp_receive+0xa2c>
                    pcb->ooseq = cseg;
 800a8fe:	6720      	str	r0, [r4, #112]	; 0x70
                    tcp_oos_insert_segment(cseg, next);
 800a900:	4629      	mov	r1, r5
 800a902:	f7ff fb2d 	bl	8009f60 <tcp_oos_insert_segment>
 800a906:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 800a90a:	1a5b      	subs	r3, r3, r1
              if (next->next == NULL &&
 800a90c:	2b00      	cmp	r3, #0
 800a90e:	dc01      	bgt.n	800a914 <tcp_receive+0x930>
 800a910:	4615      	mov	r5, r2
 800a912:	e7bd      	b.n	800a890 <tcp_receive+0x8ac>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 800a914:	8980      	ldrh	r0, [r0, #12]
 800a916:	f7fb fe79 	bl	800660c <lwip_htons>
 800a91a:	f010 0f01 	tst.w	r0, #1
 800a91e:	d177      	bne.n	800aa10 <tcp_receive+0xa2c>
                next->next = tcp_seg_copy(&inseg);
 800a920:	483d      	ldr	r0, [pc, #244]	; (800aa18 <tcp_receive+0xa34>)
 800a922:	f7fe fb92 	bl	800904a <tcp_seg_copy>
 800a926:	6028      	str	r0, [r5, #0]
                if (next->next != NULL) {
 800a928:	2800      	cmp	r0, #0
 800a92a:	d071      	beq.n	800aa10 <tcp_receive+0xa2c>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 800a92c:	68eb      	ldr	r3, [r5, #12]
 800a92e:	6859      	ldr	r1, [r3, #4]
 800a930:	892a      	ldrh	r2, [r5, #8]
 800a932:	440a      	add	r2, r1
 800a934:	4b37      	ldr	r3, [pc, #220]	; (800aa14 <tcp_receive+0xa30>)
 800a936:	681b      	ldr	r3, [r3, #0]
 800a938:	1ad2      	subs	r2, r2, r3
 800a93a:	2a00      	cmp	r2, #0
 800a93c:	dd05      	ble.n	800a94a <tcp_receive+0x966>
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 800a93e:	1a5b      	subs	r3, r3, r1
 800a940:	b299      	uxth	r1, r3
 800a942:	8129      	strh	r1, [r5, #8]
                    pbuf_realloc(next->p, next->len);
 800a944:	6868      	ldr	r0, [r5, #4]
 800a946:	f7fd ffd1 	bl	80088ec <pbuf_realloc>
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 800a94a:	4b34      	ldr	r3, [pc, #208]	; (800aa1c <tcp_receive+0xa38>)
 800a94c:	881b      	ldrh	r3, [r3, #0]
 800a94e:	4a31      	ldr	r2, [pc, #196]	; (800aa14 <tcp_receive+0xa30>)
 800a950:	6812      	ldr	r2, [r2, #0]
 800a952:	4413      	add	r3, r2
 800a954:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800a956:	8d21      	ldrh	r1, [r4, #40]	; 0x28
 800a958:	440a      	add	r2, r1
 800a95a:	1a9b      	subs	r3, r3, r2
 800a95c:	2b00      	cmp	r3, #0
 800a95e:	dd57      	ble.n	800aa10 <tcp_receive+0xa2c>
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 800a960:	682b      	ldr	r3, [r5, #0]
 800a962:	68db      	ldr	r3, [r3, #12]
 800a964:	8998      	ldrh	r0, [r3, #12]
 800a966:	f7fb fe51 	bl	800660c <lwip_htons>
 800a96a:	f010 0f01 	tst.w	r0, #1
 800a96e:	d12c      	bne.n	800a9ca <tcp_receive+0x9e6>
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 800a970:	682a      	ldr	r2, [r5, #0]
 800a972:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800a974:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 800a976:	440b      	add	r3, r1
 800a978:	b29b      	uxth	r3, r3
 800a97a:	4926      	ldr	r1, [pc, #152]	; (800aa14 <tcp_receive+0xa30>)
 800a97c:	6809      	ldr	r1, [r1, #0]
 800a97e:	1a5b      	subs	r3, r3, r1
 800a980:	8113      	strh	r3, [r2, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 800a982:	682b      	ldr	r3, [r5, #0]
 800a984:	8919      	ldrh	r1, [r3, #8]
 800a986:	6858      	ldr	r0, [r3, #4]
 800a988:	f7fd ffb0 	bl	80088ec <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 800a98c:	682b      	ldr	r3, [r5, #0]
 800a98e:	891d      	ldrh	r5, [r3, #8]
 800a990:	68db      	ldr	r3, [r3, #12]
 800a992:	8998      	ldrh	r0, [r3, #12]
 800a994:	f7fb fe3a 	bl	800660c <lwip_htons>
 800a998:	f010 0f03 	tst.w	r0, #3
 800a99c:	d024      	beq.n	800a9e8 <tcp_receive+0xa04>
 800a99e:	2301      	movs	r3, #1
 800a9a0:	442b      	add	r3, r5
 800a9a2:	b29b      	uxth	r3, r3
 800a9a4:	4a1d      	ldr	r2, [pc, #116]	; (800aa1c <tcp_receive+0xa38>)
 800a9a6:	8013      	strh	r3, [r2, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 800a9a8:	4a1a      	ldr	r2, [pc, #104]	; (800aa14 <tcp_receive+0xa30>)
 800a9aa:	6812      	ldr	r2, [r2, #0]
 800a9ac:	4413      	add	r3, r2
 800a9ae:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800a9b0:	8d21      	ldrh	r1, [r4, #40]	; 0x28
 800a9b2:	440a      	add	r2, r1
 800a9b4:	4293      	cmp	r3, r2
 800a9b6:	d02b      	beq.n	800aa10 <tcp_receive+0xa2c>
 800a9b8:	4b19      	ldr	r3, [pc, #100]	; (800aa20 <tcp_receive+0xa3c>)
 800a9ba:	f240 627b 	movw	r2, #1659	; 0x67b
 800a9be:	4919      	ldr	r1, [pc, #100]	; (800aa24 <tcp_receive+0xa40>)
 800a9c0:	4819      	ldr	r0, [pc, #100]	; (800aa28 <tcp_receive+0xa44>)
 800a9c2:	f003 f902 	bl	800dbca <iprintf>
 800a9c6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 800a9ca:	682b      	ldr	r3, [r5, #0]
 800a9cc:	68df      	ldr	r7, [r3, #12]
 800a9ce:	89b8      	ldrh	r0, [r7, #12]
 800a9d0:	f420 567c 	bic.w	r6, r0, #16128	; 0x3f00
 800a9d4:	b2b6      	uxth	r6, r6
 800a9d6:	f7fb fe19 	bl	800660c <lwip_htons>
 800a9da:	f000 003e 	and.w	r0, r0, #62	; 0x3e
 800a9de:	f7fb fe15 	bl	800660c <lwip_htons>
 800a9e2:	4330      	orrs	r0, r6
 800a9e4:	81b8      	strh	r0, [r7, #12]
 800a9e6:	e7c3      	b.n	800a970 <tcp_receive+0x98c>
                    tcplen = TCP_TCPLEN(next->next);
 800a9e8:	2300      	movs	r3, #0
 800a9ea:	e7d9      	b.n	800a9a0 <tcp_receive+0x9bc>
 800a9ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 800a9f0:	4b08      	ldr	r3, [pc, #32]	; (800aa14 <tcp_receive+0xa30>)
 800a9f2:	681b      	ldr	r3, [r3, #0]
 800a9f4:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800a9f6:	1a99      	subs	r1, r3, r2
 800a9f8:	2900      	cmp	r1, #0
 800a9fa:	db05      	blt.n	800aa08 <tcp_receive+0xa24>
 800a9fc:	8d21      	ldrh	r1, [r4, #40]	; 0x28
 800a9fe:	440a      	add	r2, r1
 800aa00:	1a9b      	subs	r3, r3, r2
 800aa02:	3301      	adds	r3, #1
 800aa04:	2b00      	cmp	r3, #0
 800aa06:	dd03      	ble.n	800aa10 <tcp_receive+0xa2c>
      tcp_ack_now(pcb);
 800aa08:	7ea3      	ldrb	r3, [r4, #26]
 800aa0a:	f043 0302 	orr.w	r3, r3, #2
 800aa0e:	76a3      	strb	r3, [r4, #26]
 800aa10:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800aa14:	20003fa8 	.word	0x20003fa8
 800aa18:	20003f8c 	.word	0x20003f8c
 800aa1c:	20003fbe 	.word	0x20003fbe
 800aa20:	0800fe4c 	.word	0x0800fe4c
 800aa24:	0800ff28 	.word	0x0800ff28
 800aa28:	0800e3b0 	.word	0x0800e3b0

0800aa2c <tcp_process>:
{
 800aa2c:	b570      	push	{r4, r5, r6, lr}
 800aa2e:	b082      	sub	sp, #8
 800aa30:	4604      	mov	r4, r0
  if (flags & TCP_RST) {
 800aa32:	4ba3      	ldr	r3, [pc, #652]	; (800acc0 <tcp_process+0x294>)
 800aa34:	781b      	ldrb	r3, [r3, #0]
 800aa36:	f013 0f04 	tst.w	r3, #4
 800aa3a:	d03d      	beq.n	800aab8 <tcp_process+0x8c>
    if (pcb->state == SYN_SENT) {
 800aa3c:	7d01      	ldrb	r1, [r0, #20]
 800aa3e:	2902      	cmp	r1, #2
 800aa40:	d012      	beq.n	800aa68 <tcp_process+0x3c>
      if (seqno == pcb->rcv_nxt) {
 800aa42:	6a42      	ldr	r2, [r0, #36]	; 0x24
 800aa44:	4b9f      	ldr	r3, [pc, #636]	; (800acc4 <tcp_process+0x298>)
 800aa46:	681b      	ldr	r3, [r3, #0]
 800aa48:	429a      	cmp	r2, r3
 800aa4a:	d01c      	beq.n	800aa86 <tcp_process+0x5a>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800aa4c:	1a98      	subs	r0, r3, r2
 800aa4e:	2800      	cmp	r0, #0
 800aa50:	db1b      	blt.n	800aa8a <tcp_process+0x5e>
 800aa52:	8d20      	ldrh	r0, [r4, #40]	; 0x28
 800aa54:	4402      	add	r2, r0
 800aa56:	1a9b      	subs	r3, r3, r2
 800aa58:	2b00      	cmp	r3, #0
 800aa5a:	dd0c      	ble.n	800aa76 <tcp_process+0x4a>
  u8_t acceptable = 0;
 800aa5c:	2300      	movs	r3, #0
    if (acceptable) {
 800aa5e:	b9b3      	cbnz	r3, 800aa8e <tcp_process+0x62>
      return ERR_OK;
 800aa60:	2500      	movs	r5, #0
}
 800aa62:	4628      	mov	r0, r5
 800aa64:	b002      	add	sp, #8
 800aa66:	bd70      	pop	{r4, r5, r6, pc}
      if (ackno == pcb->snd_nxt) {
 800aa68:	6cc2      	ldr	r2, [r0, #76]	; 0x4c
 800aa6a:	4b97      	ldr	r3, [pc, #604]	; (800acc8 <tcp_process+0x29c>)
 800aa6c:	681b      	ldr	r3, [r3, #0]
 800aa6e:	429a      	cmp	r2, r3
 800aa70:	d007      	beq.n	800aa82 <tcp_process+0x56>
  u8_t acceptable = 0;
 800aa72:	2300      	movs	r3, #0
 800aa74:	e7f3      	b.n	800aa5e <tcp_process+0x32>
        tcp_ack_now(pcb);
 800aa76:	7ea3      	ldrb	r3, [r4, #26]
 800aa78:	f043 0302 	orr.w	r3, r3, #2
 800aa7c:	76a3      	strb	r3, [r4, #26]
  u8_t acceptable = 0;
 800aa7e:	2300      	movs	r3, #0
 800aa80:	e7ed      	b.n	800aa5e <tcp_process+0x32>
        acceptable = 1;
 800aa82:	2301      	movs	r3, #1
 800aa84:	e7eb      	b.n	800aa5e <tcp_process+0x32>
        acceptable = 1;
 800aa86:	2301      	movs	r3, #1
 800aa88:	e7e9      	b.n	800aa5e <tcp_process+0x32>
  u8_t acceptable = 0;
 800aa8a:	2300      	movs	r3, #0
 800aa8c:	e7e7      	b.n	800aa5e <tcp_process+0x32>
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 800aa8e:	b159      	cbz	r1, 800aaa8 <tcp_process+0x7c>
      recv_flags |= TF_RESET;
 800aa90:	4a8e      	ldr	r2, [pc, #568]	; (800accc <tcp_process+0x2a0>)
 800aa92:	7813      	ldrb	r3, [r2, #0]
 800aa94:	f043 0308 	orr.w	r3, r3, #8
 800aa98:	7013      	strb	r3, [r2, #0]
      pcb->flags &= ~TF_ACK_DELAY;
 800aa9a:	7ea3      	ldrb	r3, [r4, #26]
 800aa9c:	f023 0301 	bic.w	r3, r3, #1
 800aaa0:	76a3      	strb	r3, [r4, #26]
      return ERR_RST;
 800aaa2:	f06f 050d 	mvn.w	r5, #13
 800aaa6:	e7dc      	b.n	800aa62 <tcp_process+0x36>
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 800aaa8:	4b89      	ldr	r3, [pc, #548]	; (800acd0 <tcp_process+0x2a4>)
 800aaaa:	f240 22e7 	movw	r2, #743	; 0x2e7
 800aaae:	4989      	ldr	r1, [pc, #548]	; (800acd4 <tcp_process+0x2a8>)
 800aab0:	4889      	ldr	r0, [pc, #548]	; (800acd8 <tcp_process+0x2ac>)
 800aab2:	f003 f88a 	bl	800dbca <iprintf>
 800aab6:	e7eb      	b.n	800aa90 <tcp_process+0x64>
  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 800aab8:	f013 0f02 	tst.w	r3, #2
 800aabc:	d00a      	beq.n	800aad4 <tcp_process+0xa8>
 800aabe:	7d03      	ldrb	r3, [r0, #20]
 800aac0:	3b02      	subs	r3, #2
 800aac2:	b2db      	uxtb	r3, r3
 800aac4:	2b01      	cmp	r3, #1
 800aac6:	d905      	bls.n	800aad4 <tcp_process+0xa8>
    tcp_ack_now(pcb);
 800aac8:	7e83      	ldrb	r3, [r0, #26]
 800aaca:	f043 0302 	orr.w	r3, r3, #2
 800aace:	7683      	strb	r3, [r0, #26]
    return ERR_OK;
 800aad0:	2500      	movs	r5, #0
 800aad2:	e7c6      	b.n	800aa62 <tcp_process+0x36>
  if ((pcb->flags & TF_RXCLOSED) == 0) {
 800aad4:	7ea3      	ldrb	r3, [r4, #26]
 800aad6:	f013 0f10 	tst.w	r3, #16
 800aada:	d102      	bne.n	800aae2 <tcp_process+0xb6>
    pcb->tmr = tcp_ticks;
 800aadc:	4b7f      	ldr	r3, [pc, #508]	; (800acdc <tcp_process+0x2b0>)
 800aade:	681b      	ldr	r3, [r3, #0]
 800aae0:	6223      	str	r3, [r4, #32]
  pcb->keep_cnt_sent = 0;
 800aae2:	2300      	movs	r3, #0
 800aae4:	f884 3096 	strb.w	r3, [r4, #150]	; 0x96
  tcp_parseopt(pcb);
 800aae8:	4620      	mov	r0, r4
 800aaea:	f7ff f8ff 	bl	8009cec <tcp_parseopt>
  switch (pcb->state) {
 800aaee:	7d23      	ldrb	r3, [r4, #20]
 800aaf0:	3b02      	subs	r3, #2
 800aaf2:	2b07      	cmp	r3, #7
 800aaf4:	f200 8219 	bhi.w	800af2a <tcp_process+0x4fe>
 800aaf8:	e8df f013 	tbh	[pc, r3, lsl #1]
 800aafc:	009b0008 	.word	0x009b0008
 800ab00:	01460135 	.word	0x01460135
 800ab04:	0135019c 	.word	0x0135019c
 800ab08:	01fd01ca 	.word	0x01fd01ca
    if ((flags & TCP_ACK) && (flags & TCP_SYN)
 800ab0c:	4b6c      	ldr	r3, [pc, #432]	; (800acc0 <tcp_process+0x294>)
 800ab0e:	781b      	ldrb	r3, [r3, #0]
 800ab10:	f003 0212 	and.w	r2, r3, #18
 800ab14:	2a12      	cmp	r2, #18
 800ab16:	d004      	beq.n	800ab22 <tcp_process+0xf6>
    else if (flags & TCP_ACK) {
 800ab18:	f013 0f10 	tst.w	r3, #16
 800ab1c:	d16b      	bne.n	800abf6 <tcp_process+0x1ca>
  return ERR_OK;
 800ab1e:	2500      	movs	r5, #0
 800ab20:	e79f      	b.n	800aa62 <tcp_process+0x36>
        && (ackno == pcb->lastack + 1)) {
 800ab22:	6c62      	ldr	r2, [r4, #68]	; 0x44
 800ab24:	3201      	adds	r2, #1
 800ab26:	4968      	ldr	r1, [pc, #416]	; (800acc8 <tcp_process+0x29c>)
 800ab28:	6809      	ldr	r1, [r1, #0]
 800ab2a:	428a      	cmp	r2, r1
 800ab2c:	d1f4      	bne.n	800ab18 <tcp_process+0xec>
      pcb->rcv_nxt = seqno + 1;
 800ab2e:	4b65      	ldr	r3, [pc, #404]	; (800acc4 <tcp_process+0x298>)
 800ab30:	681b      	ldr	r3, [r3, #0]
 800ab32:	1c5a      	adds	r2, r3, #1
 800ab34:	6262      	str	r2, [r4, #36]	; 0x24
      pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 800ab36:	62e2      	str	r2, [r4, #44]	; 0x2c
      pcb->lastack = ackno;
 800ab38:	6461      	str	r1, [r4, #68]	; 0x44
      pcb->snd_wnd = tcphdr->wnd;
 800ab3a:	4a69      	ldr	r2, [pc, #420]	; (800ace0 <tcp_process+0x2b4>)
 800ab3c:	6812      	ldr	r2, [r2, #0]
 800ab3e:	89d2      	ldrh	r2, [r2, #14]
 800ab40:	f8a4 205c 	strh.w	r2, [r4, #92]	; 0x5c
      pcb->snd_wnd_max = pcb->snd_wnd;
 800ab44:	f8a4 205e 	strh.w	r2, [r4, #94]	; 0x5e
      pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 800ab48:	3b01      	subs	r3, #1
 800ab4a:	6523      	str	r3, [r4, #80]	; 0x50
      pcb->state = ESTABLISHED;
 800ab4c:	2304      	movs	r3, #4
 800ab4e:	7523      	strb	r3, [r4, #20]
      pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 800ab50:	18e1      	adds	r1, r4, r3
 800ab52:	8e60      	ldrh	r0, [r4, #50]	; 0x32
 800ab54:	f7ff f868 	bl	8009c28 <tcp_eff_send_mss_impl>
 800ab58:	8660      	strh	r0, [r4, #50]	; 0x32
      pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 800ab5a:	0043      	lsls	r3, r0, #1
 800ab5c:	f241 121c 	movw	r2, #4380	; 0x111c
 800ab60:	4293      	cmp	r3, r2
 800ab62:	bf38      	it	cc
 800ab64:	4613      	movcc	r3, r2
 800ab66:	0080      	lsls	r0, r0, #2
 800ab68:	4283      	cmp	r3, r0
 800ab6a:	bf28      	it	cs
 800ab6c:	4603      	movcs	r3, r0
 800ab6e:	f8a4 3048 	strh.w	r3, [r4, #72]	; 0x48
      LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 800ab72:	f8b4 3062 	ldrh.w	r3, [r4, #98]	; 0x62
 800ab76:	b31b      	cbz	r3, 800abc0 <tcp_process+0x194>
      --pcb->snd_queuelen;
 800ab78:	f8b4 3062 	ldrh.w	r3, [r4, #98]	; 0x62
 800ab7c:	3b01      	subs	r3, #1
 800ab7e:	f8a4 3062 	strh.w	r3, [r4, #98]	; 0x62
      rseg = pcb->unacked;
 800ab82:	6ee5      	ldr	r5, [r4, #108]	; 0x6c
      if (rseg == NULL) {
 800ab84:	b325      	cbz	r5, 800abd0 <tcp_process+0x1a4>
        pcb->unacked = rseg->next;
 800ab86:	682b      	ldr	r3, [r5, #0]
 800ab88:	66e3      	str	r3, [r4, #108]	; 0x6c
      tcp_seg_free(rseg);
 800ab8a:	4628      	mov	r0, r5
 800ab8c:	f7fe fa46 	bl	800901c <tcp_seg_free>
      if (pcb->unacked == NULL) {
 800ab90:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 800ab92:	b353      	cbz	r3, 800abea <tcp_process+0x1be>
        pcb->rtime = 0;
 800ab94:	2300      	movs	r3, #0
 800ab96:	8623      	strh	r3, [r4, #48]	; 0x30
        pcb->nrtx = 0;
 800ab98:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
      TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 800ab9c:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
 800aba0:	b33b      	cbz	r3, 800abf2 <tcp_process+0x1c6>
 800aba2:	2200      	movs	r2, #0
 800aba4:	4621      	mov	r1, r4
 800aba6:	6920      	ldr	r0, [r4, #16]
 800aba8:	4798      	blx	r3
 800abaa:	4605      	mov	r5, r0
      if (err == ERR_ABRT) {
 800abac:	f115 0f0d 	cmn.w	r5, #13
 800abb0:	f43f af57 	beq.w	800aa62 <tcp_process+0x36>
      tcp_ack_now(pcb);
 800abb4:	7ea3      	ldrb	r3, [r4, #26]
 800abb6:	f043 0302 	orr.w	r3, r3, #2
 800abba:	76a3      	strb	r3, [r4, #26]
  return ERR_OK;
 800abbc:	2500      	movs	r5, #0
      tcp_ack_now(pcb);
 800abbe:	e750      	b.n	800aa62 <tcp_process+0x36>
      LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 800abc0:	4b43      	ldr	r3, [pc, #268]	; (800acd0 <tcp_process+0x2a4>)
 800abc2:	f240 321a 	movw	r2, #794	; 0x31a
 800abc6:	4947      	ldr	r1, [pc, #284]	; (800ace4 <tcp_process+0x2b8>)
 800abc8:	4843      	ldr	r0, [pc, #268]	; (800acd8 <tcp_process+0x2ac>)
 800abca:	f002 fffe 	bl	800dbca <iprintf>
 800abce:	e7d3      	b.n	800ab78 <tcp_process+0x14c>
        rseg = pcb->unsent;
 800abd0:	6ea5      	ldr	r5, [r4, #104]	; 0x68
        LWIP_ASSERT("no segment to free", rseg != NULL);
 800abd2:	b115      	cbz	r5, 800abda <tcp_process+0x1ae>
        pcb->unsent = rseg->next;
 800abd4:	682b      	ldr	r3, [r5, #0]
 800abd6:	66a3      	str	r3, [r4, #104]	; 0x68
 800abd8:	e7d7      	b.n	800ab8a <tcp_process+0x15e>
        LWIP_ASSERT("no segment to free", rseg != NULL);
 800abda:	4b3d      	ldr	r3, [pc, #244]	; (800acd0 <tcp_process+0x2a4>)
 800abdc:	f240 3222 	movw	r2, #802	; 0x322
 800abe0:	4941      	ldr	r1, [pc, #260]	; (800ace8 <tcp_process+0x2bc>)
 800abe2:	483d      	ldr	r0, [pc, #244]	; (800acd8 <tcp_process+0x2ac>)
 800abe4:	f002 fff1 	bl	800dbca <iprintf>
 800abe8:	e7f4      	b.n	800abd4 <tcp_process+0x1a8>
        pcb->rtime = -1;
 800abea:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800abee:	8623      	strh	r3, [r4, #48]	; 0x30
 800abf0:	e7d4      	b.n	800ab9c <tcp_process+0x170>
      TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 800abf2:	2500      	movs	r5, #0
 800abf4:	e7da      	b.n	800abac <tcp_process+0x180>
        ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800abf6:	4b3a      	ldr	r3, [pc, #232]	; (800ace0 <tcp_process+0x2b4>)
 800abf8:	681b      	ldr	r3, [r3, #0]
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 800abfa:	4a3c      	ldr	r2, [pc, #240]	; (800acec <tcp_process+0x2c0>)
 800abfc:	493c      	ldr	r1, [pc, #240]	; (800acf0 <tcp_process+0x2c4>)
 800abfe:	880d      	ldrh	r5, [r1, #0]
 800ac00:	4930      	ldr	r1, [pc, #192]	; (800acc4 <tcp_process+0x298>)
 800ac02:	6809      	ldr	r1, [r1, #0]
 800ac04:	4830      	ldr	r0, [pc, #192]	; (800acc8 <tcp_process+0x29c>)
 800ac06:	6800      	ldr	r0, [r0, #0]
 800ac08:	881e      	ldrh	r6, [r3, #0]
 800ac0a:	9601      	str	r6, [sp, #4]
 800ac0c:	885b      	ldrh	r3, [r3, #2]
 800ac0e:	9300      	str	r3, [sp, #0]
 800ac10:	4613      	mov	r3, r2
 800ac12:	3204      	adds	r2, #4
 800ac14:	4429      	add	r1, r5
 800ac16:	f001 faeb 	bl	800c1f0 <tcp_rst>
      if (pcb->nrtx < TCP_SYNMAXRTX) {
 800ac1a:	f894 3042 	ldrb.w	r3, [r4, #66]	; 0x42
 800ac1e:	2b05      	cmp	r3, #5
 800ac20:	d901      	bls.n	800ac26 <tcp_process+0x1fa>
  return ERR_OK;
 800ac22:	2500      	movs	r5, #0
 800ac24:	e71d      	b.n	800aa62 <tcp_process+0x36>
        pcb->rtime = 0;
 800ac26:	2500      	movs	r5, #0
 800ac28:	8625      	strh	r5, [r4, #48]	; 0x30
        tcp_rexmit_rto(pcb);
 800ac2a:	4620      	mov	r0, r4
 800ac2c:	f001 fb36 	bl	800c29c <tcp_rexmit_rto>
 800ac30:	e717      	b.n	800aa62 <tcp_process+0x36>
    if (flags & TCP_ACK) {
 800ac32:	4b23      	ldr	r3, [pc, #140]	; (800acc0 <tcp_process+0x294>)
 800ac34:	781b      	ldrb	r3, [r3, #0]
 800ac36:	f013 0f10 	tst.w	r3, #16
 800ac3a:	f000 8083 	beq.w	800ad44 <tcp_process+0x318>
      if (TCP_SEQ_BETWEEN(ackno, pcb->lastack+1, pcb->snd_nxt)) {
 800ac3e:	4b22      	ldr	r3, [pc, #136]	; (800acc8 <tcp_process+0x29c>)
 800ac40:	6818      	ldr	r0, [r3, #0]
 800ac42:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800ac44:	1ac3      	subs	r3, r0, r3
 800ac46:	2b01      	cmp	r3, #1
 800ac48:	d403      	bmi.n	800ac52 <tcp_process+0x226>
 800ac4a:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 800ac4c:	1ac3      	subs	r3, r0, r3
 800ac4e:	2b00      	cmp	r3, #0
 800ac50:	dd11      	ble.n	800ac76 <tcp_process+0x24a>
          ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800ac52:	4b23      	ldr	r3, [pc, #140]	; (800ace0 <tcp_process+0x2b4>)
 800ac54:	681b      	ldr	r3, [r3, #0]
        tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 800ac56:	4a25      	ldr	r2, [pc, #148]	; (800acec <tcp_process+0x2c0>)
 800ac58:	4925      	ldr	r1, [pc, #148]	; (800acf0 <tcp_process+0x2c4>)
 800ac5a:	880c      	ldrh	r4, [r1, #0]
 800ac5c:	4919      	ldr	r1, [pc, #100]	; (800acc4 <tcp_process+0x298>)
 800ac5e:	6809      	ldr	r1, [r1, #0]
 800ac60:	881d      	ldrh	r5, [r3, #0]
 800ac62:	9501      	str	r5, [sp, #4]
 800ac64:	885b      	ldrh	r3, [r3, #2]
 800ac66:	9300      	str	r3, [sp, #0]
 800ac68:	4613      	mov	r3, r2
 800ac6a:	3204      	adds	r2, #4
 800ac6c:	4421      	add	r1, r4
 800ac6e:	f001 fabf 	bl	800c1f0 <tcp_rst>
  return ERR_OK;
 800ac72:	2500      	movs	r5, #0
 800ac74:	e6f5      	b.n	800aa62 <tcp_process+0x36>
        pcb->state = ESTABLISHED;
 800ac76:	2304      	movs	r3, #4
 800ac78:	7523      	strb	r3, [r4, #20]
        LWIP_ASSERT("pcb->listener->accept != NULL",
 800ac7a:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 800ac7c:	b10b      	cbz	r3, 800ac82 <tcp_process+0x256>
 800ac7e:	699b      	ldr	r3, [r3, #24]
 800ac80:	b19b      	cbz	r3, 800acaa <tcp_process+0x27e>
        if (pcb->listener == NULL) {
 800ac82:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 800ac84:	b1cb      	cbz	r3, 800acba <tcp_process+0x28e>
          TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 800ac86:	699b      	ldr	r3, [r3, #24]
 800ac88:	b3b3      	cbz	r3, 800acf8 <tcp_process+0x2cc>
 800ac8a:	2200      	movs	r2, #0
 800ac8c:	4621      	mov	r1, r4
 800ac8e:	6920      	ldr	r0, [r4, #16]
 800ac90:	4798      	blx	r3
 800ac92:	4605      	mov	r5, r0
        if (err != ERR_OK) {
 800ac94:	b39d      	cbz	r5, 800acfe <tcp_process+0x2d2>
          if (err != ERR_ABRT) {
 800ac96:	f115 0f0d 	cmn.w	r5, #13
 800ac9a:	f43f aee2 	beq.w	800aa62 <tcp_process+0x36>
            tcp_abort(pcb);
 800ac9e:	4620      	mov	r0, r4
 800aca0:	f7fe fec8 	bl	8009a34 <tcp_abort>
          return ERR_ABRT;
 800aca4:	f06f 050c 	mvn.w	r5, #12
 800aca8:	e6db      	b.n	800aa62 <tcp_process+0x36>
        LWIP_ASSERT("pcb->listener->accept != NULL",
 800acaa:	4b09      	ldr	r3, [pc, #36]	; (800acd0 <tcp_process+0x2a4>)
 800acac:	f240 3251 	movw	r2, #849	; 0x351
 800acb0:	4910      	ldr	r1, [pc, #64]	; (800acf4 <tcp_process+0x2c8>)
 800acb2:	4809      	ldr	r0, [pc, #36]	; (800acd8 <tcp_process+0x2ac>)
 800acb4:	f002 ff89 	bl	800dbca <iprintf>
 800acb8:	e7e3      	b.n	800ac82 <tcp_process+0x256>
          err = ERR_VAL;
 800acba:	f06f 0505 	mvn.w	r5, #5
 800acbe:	e7e9      	b.n	800ac94 <tcp_process+0x268>
 800acc0:	20003f88 	.word	0x20003f88
 800acc4:	20003fa8 	.word	0x20003fa8
 800acc8:	20003f84 	.word	0x20003f84
 800accc:	20003fa4 	.word	0x20003fa4
 800acd0:	0800fe4c 	.word	0x0800fe4c
 800acd4:	0800fde0 	.word	0x0800fde0
 800acd8:	0800e3b0 	.word	0x0800e3b0
 800acdc:	20007980 	.word	0x20007980
 800ace0:	20003fb0 	.word	0x20003fb0
 800ace4:	0800fe00 	.word	0x0800fe00
 800ace8:	0800fe18 	.word	0x0800fe18
 800acec:	2000427c 	.word	0x2000427c
 800acf0:	20003fbe 	.word	0x20003fbe
 800acf4:	0800fe2c 	.word	0x0800fe2c
          TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 800acf8:	f06f 050f 	mvn.w	r5, #15
 800acfc:	e7ca      	b.n	800ac94 <tcp_process+0x268>
        tcp_receive(pcb);
 800acfe:	4620      	mov	r0, r4
 800ad00:	f7ff f970 	bl	8009fe4 <tcp_receive>
        if (recv_acked != 0) {
 800ad04:	4b8f      	ldr	r3, [pc, #572]	; (800af44 <tcp_process+0x518>)
 800ad06:	881b      	ldrh	r3, [r3, #0]
 800ad08:	b113      	cbz	r3, 800ad10 <tcp_process+0x2e4>
          recv_acked--;
 800ad0a:	3b01      	subs	r3, #1
 800ad0c:	4a8d      	ldr	r2, [pc, #564]	; (800af44 <tcp_process+0x518>)
 800ad0e:	8013      	strh	r3, [r2, #0]
        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 800ad10:	8e62      	ldrh	r2, [r4, #50]	; 0x32
 800ad12:	0053      	lsls	r3, r2, #1
 800ad14:	f241 111c 	movw	r1, #4380	; 0x111c
 800ad18:	428b      	cmp	r3, r1
 800ad1a:	bf38      	it	cc
 800ad1c:	460b      	movcc	r3, r1
 800ad1e:	0092      	lsls	r2, r2, #2
 800ad20:	4293      	cmp	r3, r2
 800ad22:	bf28      	it	cs
 800ad24:	4613      	movcs	r3, r2
 800ad26:	f8a4 3048 	strh.w	r3, [r4, #72]	; 0x48
        if (recv_flags & TF_GOT_FIN) {
 800ad2a:	4b87      	ldr	r3, [pc, #540]	; (800af48 <tcp_process+0x51c>)
 800ad2c:	781b      	ldrb	r3, [r3, #0]
 800ad2e:	f013 0f20 	tst.w	r3, #32
 800ad32:	f43f ae96 	beq.w	800aa62 <tcp_process+0x36>
          tcp_ack_now(pcb);
 800ad36:	7ea3      	ldrb	r3, [r4, #26]
 800ad38:	f043 0302 	orr.w	r3, r3, #2
 800ad3c:	76a3      	strb	r3, [r4, #26]
          pcb->state = CLOSE_WAIT;
 800ad3e:	2307      	movs	r3, #7
 800ad40:	7523      	strb	r3, [r4, #20]
 800ad42:	e68e      	b.n	800aa62 <tcp_process+0x36>
    } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 800ad44:	f013 0f02 	tst.w	r3, #2
 800ad48:	f000 80f1 	beq.w	800af2e <tcp_process+0x502>
 800ad4c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800ad4e:	3b01      	subs	r3, #1
 800ad50:	4a7e      	ldr	r2, [pc, #504]	; (800af4c <tcp_process+0x520>)
 800ad52:	6812      	ldr	r2, [r2, #0]
 800ad54:	4293      	cmp	r3, r2
 800ad56:	d001      	beq.n	800ad5c <tcp_process+0x330>
  return ERR_OK;
 800ad58:	2500      	movs	r5, #0
 800ad5a:	e682      	b.n	800aa62 <tcp_process+0x36>
      tcp_rexmit(pcb);
 800ad5c:	4620      	mov	r0, r4
 800ad5e:	f001 fab8 	bl	800c2d2 <tcp_rexmit>
  return ERR_OK;
 800ad62:	2500      	movs	r5, #0
 800ad64:	e67d      	b.n	800aa62 <tcp_process+0x36>
    tcp_receive(pcb);
 800ad66:	4620      	mov	r0, r4
 800ad68:	f7ff f93c 	bl	8009fe4 <tcp_receive>
    if (recv_flags & TF_GOT_FIN) { /* passive close */
 800ad6c:	4b76      	ldr	r3, [pc, #472]	; (800af48 <tcp_process+0x51c>)
 800ad6e:	781b      	ldrb	r3, [r3, #0]
 800ad70:	f013 0f20 	tst.w	r3, #32
 800ad74:	f000 80dd 	beq.w	800af32 <tcp_process+0x506>
      tcp_ack_now(pcb);
 800ad78:	7ea3      	ldrb	r3, [r4, #26]
 800ad7a:	f043 0302 	orr.w	r3, r3, #2
 800ad7e:	76a3      	strb	r3, [r4, #26]
      pcb->state = CLOSE_WAIT;
 800ad80:	2307      	movs	r3, #7
 800ad82:	7523      	strb	r3, [r4, #20]
  return ERR_OK;
 800ad84:	2500      	movs	r5, #0
 800ad86:	e66c      	b.n	800aa62 <tcp_process+0x36>
    tcp_receive(pcb);
 800ad88:	4620      	mov	r0, r4
 800ad8a:	f7ff f92b 	bl	8009fe4 <tcp_receive>
    if (recv_flags & TF_GOT_FIN) {
 800ad8e:	4b6e      	ldr	r3, [pc, #440]	; (800af48 <tcp_process+0x51c>)
 800ad90:	781b      	ldrb	r3, [r3, #0]
 800ad92:	f013 0f20 	tst.w	r3, #32
 800ad96:	d038      	beq.n	800ae0a <tcp_process+0x3de>
      if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800ad98:	4b6d      	ldr	r3, [pc, #436]	; (800af50 <tcp_process+0x524>)
 800ad9a:	781b      	ldrb	r3, [r3, #0]
 800ad9c:	f013 0f10 	tst.w	r3, #16
 800ada0:	d004      	beq.n	800adac <tcp_process+0x380>
 800ada2:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
 800ada4:	4b6b      	ldr	r3, [pc, #428]	; (800af54 <tcp_process+0x528>)
 800ada6:	681b      	ldr	r3, [r3, #0]
 800ada8:	429a      	cmp	r2, r3
 800adaa:	d007      	beq.n	800adbc <tcp_process+0x390>
        tcp_ack_now(pcb);
 800adac:	7ea3      	ldrb	r3, [r4, #26]
 800adae:	f043 0302 	orr.w	r3, r3, #2
 800adb2:	76a3      	strb	r3, [r4, #26]
        pcb->state = CLOSING;
 800adb4:	2308      	movs	r3, #8
 800adb6:	7523      	strb	r3, [r4, #20]
  return ERR_OK;
 800adb8:	2500      	movs	r5, #0
 800adba:	e652      	b.n	800aa62 <tcp_process+0x36>
          pcb->unsent == NULL) {
 800adbc:	6ea3      	ldr	r3, [r4, #104]	; 0x68
      if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800adbe:	2b00      	cmp	r3, #0
 800adc0:	d1f4      	bne.n	800adac <tcp_process+0x380>
        tcp_ack_now(pcb);
 800adc2:	7ea3      	ldrb	r3, [r4, #26]
 800adc4:	f043 0302 	orr.w	r3, r3, #2
 800adc8:	76a3      	strb	r3, [r4, #26]
        tcp_pcb_purge(pcb);
 800adca:	4620      	mov	r0, r4
 800adcc:	f7fe f9c2 	bl	8009154 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 800add0:	4b61      	ldr	r3, [pc, #388]	; (800af58 <tcp_process+0x52c>)
 800add2:	681b      	ldr	r3, [r3, #0]
 800add4:	429c      	cmp	r4, r3
 800add6:	d005      	beq.n	800ade4 <tcp_process+0x3b8>
 800add8:	b153      	cbz	r3, 800adf0 <tcp_process+0x3c4>
 800adda:	68da      	ldr	r2, [r3, #12]
 800addc:	4294      	cmp	r4, r2
 800adde:	d005      	beq.n	800adec <tcp_process+0x3c0>
 800ade0:	4613      	mov	r3, r2
 800ade2:	e7f9      	b.n	800add8 <tcp_process+0x3ac>
 800ade4:	68da      	ldr	r2, [r3, #12]
 800ade6:	4b5c      	ldr	r3, [pc, #368]	; (800af58 <tcp_process+0x52c>)
 800ade8:	601a      	str	r2, [r3, #0]
 800adea:	e001      	b.n	800adf0 <tcp_process+0x3c4>
 800adec:	68e2      	ldr	r2, [r4, #12]
 800adee:	60da      	str	r2, [r3, #12]
 800adf0:	2201      	movs	r2, #1
 800adf2:	4b5a      	ldr	r3, [pc, #360]	; (800af5c <tcp_process+0x530>)
 800adf4:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 800adf6:	230a      	movs	r3, #10
 800adf8:	7523      	strb	r3, [r4, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 800adfa:	4b59      	ldr	r3, [pc, #356]	; (800af60 <tcp_process+0x534>)
 800adfc:	681a      	ldr	r2, [r3, #0]
 800adfe:	60e2      	str	r2, [r4, #12]
 800ae00:	601c      	str	r4, [r3, #0]
 800ae02:	f001 fbfb 	bl	800c5fc <tcp_timer_needed>
  return ERR_OK;
 800ae06:	2500      	movs	r5, #0
        TCP_REG(&tcp_tw_pcbs, pcb);
 800ae08:	e62b      	b.n	800aa62 <tcp_process+0x36>
    } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800ae0a:	4b51      	ldr	r3, [pc, #324]	; (800af50 <tcp_process+0x524>)
 800ae0c:	781b      	ldrb	r3, [r3, #0]
 800ae0e:	f013 0f10 	tst.w	r3, #16
 800ae12:	f000 8090 	beq.w	800af36 <tcp_process+0x50a>
 800ae16:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
 800ae18:	4b4e      	ldr	r3, [pc, #312]	; (800af54 <tcp_process+0x528>)
 800ae1a:	681b      	ldr	r3, [r3, #0]
 800ae1c:	429a      	cmp	r2, r3
 800ae1e:	d001      	beq.n	800ae24 <tcp_process+0x3f8>
  return ERR_OK;
 800ae20:	2500      	movs	r5, #0
 800ae22:	e61e      	b.n	800aa62 <tcp_process+0x36>
               pcb->unsent == NULL) {
 800ae24:	6ea3      	ldr	r3, [r4, #104]	; 0x68
    } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800ae26:	b10b      	cbz	r3, 800ae2c <tcp_process+0x400>
  return ERR_OK;
 800ae28:	2500      	movs	r5, #0
 800ae2a:	e61a      	b.n	800aa62 <tcp_process+0x36>
      pcb->state = FIN_WAIT_2;
 800ae2c:	2306      	movs	r3, #6
 800ae2e:	7523      	strb	r3, [r4, #20]
  return ERR_OK;
 800ae30:	2500      	movs	r5, #0
 800ae32:	e616      	b.n	800aa62 <tcp_process+0x36>
    tcp_receive(pcb);
 800ae34:	4620      	mov	r0, r4
 800ae36:	f7ff f8d5 	bl	8009fe4 <tcp_receive>
    if (recv_flags & TF_GOT_FIN) {
 800ae3a:	4b43      	ldr	r3, [pc, #268]	; (800af48 <tcp_process+0x51c>)
 800ae3c:	781b      	ldrb	r3, [r3, #0]
 800ae3e:	f013 0f20 	tst.w	r3, #32
 800ae42:	d101      	bne.n	800ae48 <tcp_process+0x41c>
  return ERR_OK;
 800ae44:	2500      	movs	r5, #0
 800ae46:	e60c      	b.n	800aa62 <tcp_process+0x36>
      tcp_ack_now(pcb);
 800ae48:	7ea3      	ldrb	r3, [r4, #26]
 800ae4a:	f043 0302 	orr.w	r3, r3, #2
 800ae4e:	76a3      	strb	r3, [r4, #26]
      tcp_pcb_purge(pcb);
 800ae50:	4620      	mov	r0, r4
 800ae52:	f7fe f97f 	bl	8009154 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 800ae56:	4b40      	ldr	r3, [pc, #256]	; (800af58 <tcp_process+0x52c>)
 800ae58:	681b      	ldr	r3, [r3, #0]
 800ae5a:	429c      	cmp	r4, r3
 800ae5c:	d005      	beq.n	800ae6a <tcp_process+0x43e>
 800ae5e:	b153      	cbz	r3, 800ae76 <tcp_process+0x44a>
 800ae60:	68da      	ldr	r2, [r3, #12]
 800ae62:	4294      	cmp	r4, r2
 800ae64:	d005      	beq.n	800ae72 <tcp_process+0x446>
 800ae66:	4613      	mov	r3, r2
 800ae68:	e7f9      	b.n	800ae5e <tcp_process+0x432>
 800ae6a:	68da      	ldr	r2, [r3, #12]
 800ae6c:	4b3a      	ldr	r3, [pc, #232]	; (800af58 <tcp_process+0x52c>)
 800ae6e:	601a      	str	r2, [r3, #0]
 800ae70:	e001      	b.n	800ae76 <tcp_process+0x44a>
 800ae72:	68e2      	ldr	r2, [r4, #12]
 800ae74:	60da      	str	r2, [r3, #12]
 800ae76:	2201      	movs	r2, #1
 800ae78:	4b38      	ldr	r3, [pc, #224]	; (800af5c <tcp_process+0x530>)
 800ae7a:	701a      	strb	r2, [r3, #0]
      pcb->state = TIME_WAIT;
 800ae7c:	230a      	movs	r3, #10
 800ae7e:	7523      	strb	r3, [r4, #20]
      TCP_REG(&tcp_tw_pcbs, pcb);
 800ae80:	4b37      	ldr	r3, [pc, #220]	; (800af60 <tcp_process+0x534>)
 800ae82:	681a      	ldr	r2, [r3, #0]
 800ae84:	60e2      	str	r2, [r4, #12]
 800ae86:	601c      	str	r4, [r3, #0]
 800ae88:	f001 fbb8 	bl	800c5fc <tcp_timer_needed>
  return ERR_OK;
 800ae8c:	2500      	movs	r5, #0
 800ae8e:	e5e8      	b.n	800aa62 <tcp_process+0x36>
    tcp_receive(pcb);
 800ae90:	4620      	mov	r0, r4
 800ae92:	f7ff f8a7 	bl	8009fe4 <tcp_receive>
    if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 800ae96:	4b2e      	ldr	r3, [pc, #184]	; (800af50 <tcp_process+0x524>)
 800ae98:	781b      	ldrb	r3, [r3, #0]
 800ae9a:	f013 0f10 	tst.w	r3, #16
 800ae9e:	d04c      	beq.n	800af3a <tcp_process+0x50e>
 800aea0:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
 800aea2:	4b2c      	ldr	r3, [pc, #176]	; (800af54 <tcp_process+0x528>)
 800aea4:	681b      	ldr	r3, [r3, #0]
 800aea6:	429a      	cmp	r2, r3
 800aea8:	d001      	beq.n	800aeae <tcp_process+0x482>
  return ERR_OK;
 800aeaa:	2500      	movs	r5, #0
 800aeac:	e5d9      	b.n	800aa62 <tcp_process+0x36>
    if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 800aeae:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 800aeb0:	b10b      	cbz	r3, 800aeb6 <tcp_process+0x48a>
  return ERR_OK;
 800aeb2:	2500      	movs	r5, #0
 800aeb4:	e5d5      	b.n	800aa62 <tcp_process+0x36>
      tcp_pcb_purge(pcb);
 800aeb6:	4620      	mov	r0, r4
 800aeb8:	f7fe f94c 	bl	8009154 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 800aebc:	4b26      	ldr	r3, [pc, #152]	; (800af58 <tcp_process+0x52c>)
 800aebe:	681b      	ldr	r3, [r3, #0]
 800aec0:	429c      	cmp	r4, r3
 800aec2:	d005      	beq.n	800aed0 <tcp_process+0x4a4>
 800aec4:	b153      	cbz	r3, 800aedc <tcp_process+0x4b0>
 800aec6:	68da      	ldr	r2, [r3, #12]
 800aec8:	4294      	cmp	r4, r2
 800aeca:	d005      	beq.n	800aed8 <tcp_process+0x4ac>
 800aecc:	4613      	mov	r3, r2
 800aece:	e7f9      	b.n	800aec4 <tcp_process+0x498>
 800aed0:	68da      	ldr	r2, [r3, #12]
 800aed2:	4b21      	ldr	r3, [pc, #132]	; (800af58 <tcp_process+0x52c>)
 800aed4:	601a      	str	r2, [r3, #0]
 800aed6:	e001      	b.n	800aedc <tcp_process+0x4b0>
 800aed8:	68e2      	ldr	r2, [r4, #12]
 800aeda:	60da      	str	r2, [r3, #12]
 800aedc:	2201      	movs	r2, #1
 800aede:	4b1f      	ldr	r3, [pc, #124]	; (800af5c <tcp_process+0x530>)
 800aee0:	701a      	strb	r2, [r3, #0]
      pcb->state = TIME_WAIT;
 800aee2:	230a      	movs	r3, #10
 800aee4:	7523      	strb	r3, [r4, #20]
      TCP_REG(&tcp_tw_pcbs, pcb);
 800aee6:	4b1e      	ldr	r3, [pc, #120]	; (800af60 <tcp_process+0x534>)
 800aee8:	681a      	ldr	r2, [r3, #0]
 800aeea:	60e2      	str	r2, [r4, #12]
 800aeec:	601c      	str	r4, [r3, #0]
 800aeee:	f001 fb85 	bl	800c5fc <tcp_timer_needed>
  return ERR_OK;
 800aef2:	2500      	movs	r5, #0
 800aef4:	e5b5      	b.n	800aa62 <tcp_process+0x36>
    tcp_receive(pcb);
 800aef6:	4620      	mov	r0, r4
 800aef8:	f7ff f874 	bl	8009fe4 <tcp_receive>
    if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 800aefc:	4b14      	ldr	r3, [pc, #80]	; (800af50 <tcp_process+0x524>)
 800aefe:	781b      	ldrb	r3, [r3, #0]
 800af00:	f013 0f10 	tst.w	r3, #16
 800af04:	d01b      	beq.n	800af3e <tcp_process+0x512>
 800af06:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
 800af08:	4b12      	ldr	r3, [pc, #72]	; (800af54 <tcp_process+0x528>)
 800af0a:	681b      	ldr	r3, [r3, #0]
 800af0c:	429a      	cmp	r2, r3
 800af0e:	d001      	beq.n	800af14 <tcp_process+0x4e8>
  return ERR_OK;
 800af10:	2500      	movs	r5, #0
 800af12:	e5a6      	b.n	800aa62 <tcp_process+0x36>
    if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 800af14:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 800af16:	b10b      	cbz	r3, 800af1c <tcp_process+0x4f0>
  return ERR_OK;
 800af18:	2500      	movs	r5, #0
 800af1a:	e5a2      	b.n	800aa62 <tcp_process+0x36>
      recv_flags |= TF_CLOSED;
 800af1c:	4a0a      	ldr	r2, [pc, #40]	; (800af48 <tcp_process+0x51c>)
 800af1e:	7813      	ldrb	r3, [r2, #0]
 800af20:	f043 0310 	orr.w	r3, r3, #16
 800af24:	7013      	strb	r3, [r2, #0]
  return ERR_OK;
 800af26:	2500      	movs	r5, #0
 800af28:	e59b      	b.n	800aa62 <tcp_process+0x36>
 800af2a:	2500      	movs	r5, #0
 800af2c:	e599      	b.n	800aa62 <tcp_process+0x36>
 800af2e:	2500      	movs	r5, #0
 800af30:	e597      	b.n	800aa62 <tcp_process+0x36>
 800af32:	2500      	movs	r5, #0
 800af34:	e595      	b.n	800aa62 <tcp_process+0x36>
 800af36:	2500      	movs	r5, #0
 800af38:	e593      	b.n	800aa62 <tcp_process+0x36>
 800af3a:	2500      	movs	r5, #0
 800af3c:	e591      	b.n	800aa62 <tcp_process+0x36>
 800af3e:	2500      	movs	r5, #0
 800af40:	e58f      	b.n	800aa62 <tcp_process+0x36>
 800af42:	bf00      	nop
 800af44:	20003f9c 	.word	0x20003f9c
 800af48:	20003fa4 	.word	0x20003fa4
 800af4c:	20003fa8 	.word	0x20003fa8
 800af50:	20003f88 	.word	0x20003f88
 800af54:	20003f84 	.word	0x20003f84
 800af58:	2000797c 	.word	0x2000797c
 800af5c:	20007978 	.word	0x20007978
 800af60:	2000798c 	.word	0x2000798c

0800af64 <tcp_input>:
{
 800af64:	b570      	push	{r4, r5, r6, lr}
 800af66:	b082      	sub	sp, #8
 800af68:	4604      	mov	r4, r0
  tcphdr = (struct tcp_hdr *)p->payload;
 800af6a:	6842      	ldr	r2, [r0, #4]
 800af6c:	4b9f      	ldr	r3, [pc, #636]	; (800b1ec <tcp_input+0x288>)
 800af6e:	601a      	str	r2, [r3, #0]
  if (p->len < TCP_HLEN) {
 800af70:	8943      	ldrh	r3, [r0, #10]
 800af72:	2b13      	cmp	r3, #19
 800af74:	d93e      	bls.n	800aff4 <tcp_input+0x90>
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 800af76:	4b9e      	ldr	r3, [pc, #632]	; (800b1f0 <tcp_input+0x28c>)
 800af78:	6819      	ldr	r1, [r3, #0]
 800af7a:	6958      	ldr	r0, [r3, #20]
 800af7c:	f7fc faab 	bl	80074d6 <ip4_addr_isbroadcast_u32>
 800af80:	2800      	cmp	r0, #0
 800af82:	d137      	bne.n	800aff4 <tcp_input+0x90>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 800af84:	4b9a      	ldr	r3, [pc, #616]	; (800b1f0 <tcp_input+0x28c>)
 800af86:	695b      	ldr	r3, [r3, #20]
 800af88:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 800af8c:	2be0      	cmp	r3, #224	; 0xe0
 800af8e:	d031      	beq.n	800aff4 <tcp_input+0x90>
  hdrlen_bytes = TCPH_HDRLEN(tcphdr) * 4;
 800af90:	4b96      	ldr	r3, [pc, #600]	; (800b1ec <tcp_input+0x288>)
 800af92:	681b      	ldr	r3, [r3, #0]
 800af94:	8998      	ldrh	r0, [r3, #12]
 800af96:	f7fb fb39 	bl	800660c <lwip_htons>
 800af9a:	f3c0 310f 	ubfx	r1, r0, #12, #16
 800af9e:	0089      	lsls	r1, r1, #2
 800afa0:	b2c9      	uxtb	r1, r1
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 800afa2:	2913      	cmp	r1, #19
 800afa4:	d926      	bls.n	800aff4 <tcp_input+0x90>
 800afa6:	b289      	uxth	r1, r1
 800afa8:	8923      	ldrh	r3, [r4, #8]
 800afaa:	4299      	cmp	r1, r3
 800afac:	d822      	bhi.n	800aff4 <tcp_input+0x90>
  tcphdr_optlen = hdrlen_bytes - TCP_HLEN;
 800afae:	f1a1 0314 	sub.w	r3, r1, #20
 800afb2:	b29b      	uxth	r3, r3
 800afb4:	4a8f      	ldr	r2, [pc, #572]	; (800b1f4 <tcp_input+0x290>)
 800afb6:	8013      	strh	r3, [r2, #0]
  tcphdr_opt2 = NULL;
 800afb8:	2000      	movs	r0, #0
 800afba:	4a8f      	ldr	r2, [pc, #572]	; (800b1f8 <tcp_input+0x294>)
 800afbc:	6010      	str	r0, [r2, #0]
  if (p->len >= hdrlen_bytes) {
 800afbe:	8962      	ldrh	r2, [r4, #10]
 800afc0:	4291      	cmp	r1, r2
 800afc2:	d91c      	bls.n	800affe <tcp_input+0x9a>
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 800afc4:	6823      	ldr	r3, [r4, #0]
 800afc6:	2b00      	cmp	r3, #0
 800afc8:	d051      	beq.n	800b06e <tcp_input+0x10a>
    pbuf_header(p, -TCP_HLEN);
 800afca:	f06f 0113 	mvn.w	r1, #19
 800afce:	4620      	mov	r0, r4
 800afd0:	f7fd fb2e 	bl	8008630 <pbuf_header>
    tcphdr_opt1len = p->len;
 800afd4:	8961      	ldrh	r1, [r4, #10]
 800afd6:	4b89      	ldr	r3, [pc, #548]	; (800b1fc <tcp_input+0x298>)
 800afd8:	8019      	strh	r1, [r3, #0]
    opt2len = tcphdr_optlen - tcphdr_opt1len;
 800afda:	4b86      	ldr	r3, [pc, #536]	; (800b1f4 <tcp_input+0x290>)
 800afdc:	881d      	ldrh	r5, [r3, #0]
 800afde:	1a6d      	subs	r5, r5, r1
 800afe0:	b2ad      	uxth	r5, r5
    pbuf_header(p, -(s16_t)tcphdr_opt1len);
 800afe2:	4249      	negs	r1, r1
 800afe4:	b209      	sxth	r1, r1
 800afe6:	4620      	mov	r0, r4
 800afe8:	f7fd fb22 	bl	8008630 <pbuf_header>
    if (opt2len > p->next->len) {
 800afec:	6820      	ldr	r0, [r4, #0]
 800afee:	8943      	ldrh	r3, [r0, #10]
 800aff0:	429d      	cmp	r5, r3
 800aff2:	d943      	bls.n	800b07c <tcp_input+0x118>
  pbuf_free(p);
 800aff4:	4620      	mov	r0, r4
 800aff6:	f7fd fb25 	bl	8008644 <pbuf_free>
}
 800affa:	b002      	add	sp, #8
 800affc:	bd70      	pop	{r4, r5, r6, pc}
    tcphdr_opt1len = tcphdr_optlen;
 800affe:	4a7f      	ldr	r2, [pc, #508]	; (800b1fc <tcp_input+0x298>)
 800b000:	8013      	strh	r3, [r2, #0]
    pbuf_header(p, -(s16_t)hdrlen_bytes); /* cannot fail */
 800b002:	4249      	negs	r1, r1
 800b004:	4620      	mov	r0, r4
 800b006:	f7fd fb13 	bl	8008630 <pbuf_header>
  tcphdr->src = lwip_ntohs(tcphdr->src);
 800b00a:	4d78      	ldr	r5, [pc, #480]	; (800b1ec <tcp_input+0x288>)
 800b00c:	682e      	ldr	r6, [r5, #0]
 800b00e:	8830      	ldrh	r0, [r6, #0]
 800b010:	f7fb fafc 	bl	800660c <lwip_htons>
 800b014:	8030      	strh	r0, [r6, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 800b016:	682e      	ldr	r6, [r5, #0]
 800b018:	8870      	ldrh	r0, [r6, #2]
 800b01a:	f7fb faf7 	bl	800660c <lwip_htons>
 800b01e:	8070      	strh	r0, [r6, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 800b020:	682e      	ldr	r6, [r5, #0]
 800b022:	6870      	ldr	r0, [r6, #4]
 800b024:	f7fb faf5 	bl	8006612 <lwip_htonl>
 800b028:	6070      	str	r0, [r6, #4]
 800b02a:	4b75      	ldr	r3, [pc, #468]	; (800b200 <tcp_input+0x29c>)
 800b02c:	6018      	str	r0, [r3, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 800b02e:	682e      	ldr	r6, [r5, #0]
 800b030:	68b0      	ldr	r0, [r6, #8]
 800b032:	f7fb faee 	bl	8006612 <lwip_htonl>
 800b036:	60b0      	str	r0, [r6, #8]
 800b038:	4b72      	ldr	r3, [pc, #456]	; (800b204 <tcp_input+0x2a0>)
 800b03a:	6018      	str	r0, [r3, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 800b03c:	682e      	ldr	r6, [r5, #0]
 800b03e:	89f0      	ldrh	r0, [r6, #14]
 800b040:	f7fb fae4 	bl	800660c <lwip_htons>
 800b044:	81f0      	strh	r0, [r6, #14]
  flags = TCPH_FLAGS(tcphdr);
 800b046:	682b      	ldr	r3, [r5, #0]
 800b048:	8998      	ldrh	r0, [r3, #12]
 800b04a:	f7fb fadf 	bl	800660c <lwip_htons>
 800b04e:	f000 033f 	and.w	r3, r0, #63	; 0x3f
 800b052:	4a6d      	ldr	r2, [pc, #436]	; (800b208 <tcp_input+0x2a4>)
 800b054:	7013      	strb	r3, [r2, #0]
  tcplen = p->tot_len + ((flags & (TCP_FIN | TCP_SYN)) ? 1 : 0);
 800b056:	8922      	ldrh	r2, [r4, #8]
 800b058:	f013 0303 	ands.w	r3, r3, #3
 800b05c:	bf18      	it	ne
 800b05e:	2301      	movne	r3, #1
 800b060:	4413      	add	r3, r2
 800b062:	4a6a      	ldr	r2, [pc, #424]	; (800b20c <tcp_input+0x2a8>)
 800b064:	8013      	strh	r3, [r2, #0]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800b066:	4b6a      	ldr	r3, [pc, #424]	; (800b210 <tcp_input+0x2ac>)
 800b068:	681d      	ldr	r5, [r3, #0]
  prev = NULL;
 800b06a:	2600      	movs	r6, #0
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800b06c:	e033      	b.n	800b0d6 <tcp_input+0x172>
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 800b06e:	4b69      	ldr	r3, [pc, #420]	; (800b214 <tcp_input+0x2b0>)
 800b070:	22b2      	movs	r2, #178	; 0xb2
 800b072:	4969      	ldr	r1, [pc, #420]	; (800b218 <tcp_input+0x2b4>)
 800b074:	4869      	ldr	r0, [pc, #420]	; (800b21c <tcp_input+0x2b8>)
 800b076:	f002 fda8 	bl	800dbca <iprintf>
 800b07a:	e7a6      	b.n	800afca <tcp_input+0x66>
    tcphdr_opt2 = (u8_t*)p->next->payload;
 800b07c:	6842      	ldr	r2, [r0, #4]
 800b07e:	4b5e      	ldr	r3, [pc, #376]	; (800b1f8 <tcp_input+0x294>)
 800b080:	601a      	str	r2, [r3, #0]
    pbuf_header(p->next, -(s16_t)opt2len);
 800b082:	4269      	negs	r1, r5
 800b084:	b209      	sxth	r1, r1
 800b086:	f7fd fad3 	bl	8008630 <pbuf_header>
    p->tot_len -= opt2len;
 800b08a:	8923      	ldrh	r3, [r4, #8]
 800b08c:	1b5d      	subs	r5, r3, r5
 800b08e:	8125      	strh	r5, [r4, #8]
    LWIP_ASSERT("p->len == 0", p->len == 0);
 800b090:	8963      	ldrh	r3, [r4, #10]
 800b092:	b95b      	cbnz	r3, 800b0ac <tcp_input+0x148>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 800b094:	8922      	ldrh	r2, [r4, #8]
 800b096:	6823      	ldr	r3, [r4, #0]
 800b098:	891b      	ldrh	r3, [r3, #8]
 800b09a:	429a      	cmp	r2, r3
 800b09c:	d0b5      	beq.n	800b00a <tcp_input+0xa6>
 800b09e:	4b5d      	ldr	r3, [pc, #372]	; (800b214 <tcp_input+0x2b0>)
 800b0a0:	22d0      	movs	r2, #208	; 0xd0
 800b0a2:	495f      	ldr	r1, [pc, #380]	; (800b220 <tcp_input+0x2bc>)
 800b0a4:	485d      	ldr	r0, [pc, #372]	; (800b21c <tcp_input+0x2b8>)
 800b0a6:	f002 fd90 	bl	800dbca <iprintf>
 800b0aa:	e7ae      	b.n	800b00a <tcp_input+0xa6>
    LWIP_ASSERT("p->len == 0", p->len == 0);
 800b0ac:	4b59      	ldr	r3, [pc, #356]	; (800b214 <tcp_input+0x2b0>)
 800b0ae:	22cf      	movs	r2, #207	; 0xcf
 800b0b0:	495c      	ldr	r1, [pc, #368]	; (800b224 <tcp_input+0x2c0>)
 800b0b2:	485a      	ldr	r0, [pc, #360]	; (800b21c <tcp_input+0x2b8>)
 800b0b4:	f002 fd89 	bl	800dbca <iprintf>
 800b0b8:	e7ec      	b.n	800b094 <tcp_input+0x130>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 800b0ba:	7d2b      	ldrb	r3, [r5, #20]
 800b0bc:	2b0a      	cmp	r3, #10
 800b0be:	d016      	beq.n	800b0ee <tcp_input+0x18a>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 800b0c0:	7d2b      	ldrb	r3, [r5, #20]
 800b0c2:	2b01      	cmp	r3, #1
 800b0c4:	d01a      	beq.n	800b0fc <tcp_input+0x198>
    if (pcb->remote_port == tcphdr->src &&
 800b0c6:	8b29      	ldrh	r1, [r5, #24]
 800b0c8:	4b48      	ldr	r3, [pc, #288]	; (800b1ec <tcp_input+0x288>)
 800b0ca:	681b      	ldr	r3, [r3, #0]
 800b0cc:	881a      	ldrh	r2, [r3, #0]
 800b0ce:	4291      	cmp	r1, r2
 800b0d0:	d01b      	beq.n	800b10a <tcp_input+0x1a6>
    prev = pcb;
 800b0d2:	462e      	mov	r6, r5
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800b0d4:	68ed      	ldr	r5, [r5, #12]
 800b0d6:	2d00      	cmp	r5, #0
 800b0d8:	d032      	beq.n	800b140 <tcp_input+0x1dc>
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 800b0da:	7d2b      	ldrb	r3, [r5, #20]
 800b0dc:	2b00      	cmp	r3, #0
 800b0de:	d1ec      	bne.n	800b0ba <tcp_input+0x156>
 800b0e0:	4b4c      	ldr	r3, [pc, #304]	; (800b214 <tcp_input+0x2b0>)
 800b0e2:	22e2      	movs	r2, #226	; 0xe2
 800b0e4:	4950      	ldr	r1, [pc, #320]	; (800b228 <tcp_input+0x2c4>)
 800b0e6:	484d      	ldr	r0, [pc, #308]	; (800b21c <tcp_input+0x2b8>)
 800b0e8:	f002 fd6f 	bl	800dbca <iprintf>
 800b0ec:	e7e5      	b.n	800b0ba <tcp_input+0x156>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 800b0ee:	4b49      	ldr	r3, [pc, #292]	; (800b214 <tcp_input+0x2b0>)
 800b0f0:	22e3      	movs	r2, #227	; 0xe3
 800b0f2:	494e      	ldr	r1, [pc, #312]	; (800b22c <tcp_input+0x2c8>)
 800b0f4:	4849      	ldr	r0, [pc, #292]	; (800b21c <tcp_input+0x2b8>)
 800b0f6:	f002 fd68 	bl	800dbca <iprintf>
 800b0fa:	e7e1      	b.n	800b0c0 <tcp_input+0x15c>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 800b0fc:	4b45      	ldr	r3, [pc, #276]	; (800b214 <tcp_input+0x2b0>)
 800b0fe:	22e4      	movs	r2, #228	; 0xe4
 800b100:	494b      	ldr	r1, [pc, #300]	; (800b230 <tcp_input+0x2cc>)
 800b102:	4846      	ldr	r0, [pc, #280]	; (800b21c <tcp_input+0x2b8>)
 800b104:	f002 fd61 	bl	800dbca <iprintf>
 800b108:	e7dd      	b.n	800b0c6 <tcp_input+0x162>
        pcb->local_port == tcphdr->dest &&
 800b10a:	8aea      	ldrh	r2, [r5, #22]
 800b10c:	885b      	ldrh	r3, [r3, #2]
    if (pcb->remote_port == tcphdr->src &&
 800b10e:	429a      	cmp	r2, r3
 800b110:	d1df      	bne.n	800b0d2 <tcp_input+0x16e>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800b112:	686a      	ldr	r2, [r5, #4]
 800b114:	4b36      	ldr	r3, [pc, #216]	; (800b1f0 <tcp_input+0x28c>)
 800b116:	691b      	ldr	r3, [r3, #16]
        pcb->local_port == tcphdr->dest &&
 800b118:	429a      	cmp	r2, r3
 800b11a:	d1da      	bne.n	800b0d2 <tcp_input+0x16e>
        ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800b11c:	682a      	ldr	r2, [r5, #0]
 800b11e:	4b34      	ldr	r3, [pc, #208]	; (800b1f0 <tcp_input+0x28c>)
 800b120:	695b      	ldr	r3, [r3, #20]
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800b122:	429a      	cmp	r2, r3
 800b124:	d1d5      	bne.n	800b0d2 <tcp_input+0x16e>
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 800b126:	68eb      	ldr	r3, [r5, #12]
 800b128:	429d      	cmp	r5, r3
 800b12a:	d04d      	beq.n	800b1c8 <tcp_input+0x264>
      if (prev != NULL) {
 800b12c:	b12e      	cbz	r6, 800b13a <tcp_input+0x1d6>
        prev->next = pcb->next;
 800b12e:	68eb      	ldr	r3, [r5, #12]
 800b130:	60f3      	str	r3, [r6, #12]
        pcb->next = tcp_active_pcbs;
 800b132:	4b37      	ldr	r3, [pc, #220]	; (800b210 <tcp_input+0x2ac>)
 800b134:	681a      	ldr	r2, [r3, #0]
 800b136:	60ea      	str	r2, [r5, #12]
        tcp_active_pcbs = pcb;
 800b138:	601d      	str	r5, [r3, #0]
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 800b13a:	68eb      	ldr	r3, [r5, #12]
 800b13c:	429d      	cmp	r5, r3
 800b13e:	d04a      	beq.n	800b1d6 <tcp_input+0x272>
  if (pcb == NULL) {
 800b140:	2d00      	cmp	r5, #0
 800b142:	d04f      	beq.n	800b1e4 <tcp_input+0x280>
  if (pcb != NULL) {
 800b144:	2d00      	cmp	r5, #0
 800b146:	f000 8168 	beq.w	800b41a <tcp_input+0x4b6>
    inseg.next = NULL;
 800b14a:	4a3a      	ldr	r2, [pc, #232]	; (800b234 <tcp_input+0x2d0>)
 800b14c:	2300      	movs	r3, #0
 800b14e:	6013      	str	r3, [r2, #0]
    inseg.len = p->tot_len;
 800b150:	8921      	ldrh	r1, [r4, #8]
 800b152:	8111      	strh	r1, [r2, #8]
    inseg.p = p;
 800b154:	6054      	str	r4, [r2, #4]
    inseg.tcphdr = tcphdr;
 800b156:	4925      	ldr	r1, [pc, #148]	; (800b1ec <tcp_input+0x288>)
 800b158:	6809      	ldr	r1, [r1, #0]
 800b15a:	60d1      	str	r1, [r2, #12]
    recv_data = NULL;
 800b15c:	4a36      	ldr	r2, [pc, #216]	; (800b238 <tcp_input+0x2d4>)
 800b15e:	6013      	str	r3, [r2, #0]
    recv_flags = 0;
 800b160:	4a36      	ldr	r2, [pc, #216]	; (800b23c <tcp_input+0x2d8>)
 800b162:	7013      	strb	r3, [r2, #0]
    recv_acked = 0;
 800b164:	4a36      	ldr	r2, [pc, #216]	; (800b240 <tcp_input+0x2dc>)
 800b166:	8013      	strh	r3, [r2, #0]
    if (flags & TCP_PSH) {
 800b168:	4b27      	ldr	r3, [pc, #156]	; (800b208 <tcp_input+0x2a4>)
 800b16a:	781b      	ldrb	r3, [r3, #0]
 800b16c:	f013 0f08 	tst.w	r3, #8
 800b170:	d003      	beq.n	800b17a <tcp_input+0x216>
      p->flags |= PBUF_FLAG_PUSH;
 800b172:	7b63      	ldrb	r3, [r4, #13]
 800b174:	f043 0301 	orr.w	r3, r3, #1
 800b178:	7363      	strb	r3, [r4, #13]
    if (pcb->refused_data != NULL) {
 800b17a:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 800b17c:	2b00      	cmp	r3, #0
 800b17e:	f000 80b9 	beq.w	800b2f4 <tcp_input+0x390>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 800b182:	4628      	mov	r0, r5
 800b184:	f7fe fb24 	bl	80097d0 <tcp_process_refused_data>
 800b188:	f110 0f0d 	cmn.w	r0, #13
 800b18c:	d008      	beq.n	800b1a0 <tcp_input+0x23c>
        ((pcb->refused_data != NULL) && (tcplen > 0))) {
 800b18e:	6f6b      	ldr	r3, [r5, #116]	; 0x74
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 800b190:	2b00      	cmp	r3, #0
 800b192:	f000 80af 	beq.w	800b2f4 <tcp_input+0x390>
        ((pcb->refused_data != NULL) && (tcplen > 0))) {
 800b196:	4b1d      	ldr	r3, [pc, #116]	; (800b20c <tcp_input+0x2a8>)
 800b198:	881b      	ldrh	r3, [r3, #0]
 800b19a:	2b00      	cmp	r3, #0
 800b19c:	f000 80aa 	beq.w	800b2f4 <tcp_input+0x390>
        if (pcb->rcv_ann_wnd == 0) {
 800b1a0:	8d6b      	ldrh	r3, [r5, #42]	; 0x2a
 800b1a2:	2b00      	cmp	r3, #0
 800b1a4:	f000 80a2 	beq.w	800b2ec <tcp_input+0x388>
    tcp_input_pcb = NULL;
 800b1a8:	2300      	movs	r3, #0
 800b1aa:	4a26      	ldr	r2, [pc, #152]	; (800b244 <tcp_input+0x2e0>)
 800b1ac:	6013      	str	r3, [r2, #0]
    recv_data = NULL;
 800b1ae:	4a22      	ldr	r2, [pc, #136]	; (800b238 <tcp_input+0x2d4>)
 800b1b0:	6013      	str	r3, [r2, #0]
    if (inseg.p != NULL)
 800b1b2:	4b20      	ldr	r3, [pc, #128]	; (800b234 <tcp_input+0x2d0>)
 800b1b4:	6858      	ldr	r0, [r3, #4]
 800b1b6:	2800      	cmp	r0, #0
 800b1b8:	f43f af1f 	beq.w	800affa <tcp_input+0x96>
      pbuf_free(inseg.p);
 800b1bc:	f7fd fa42 	bl	8008644 <pbuf_free>
      inseg.p = NULL;
 800b1c0:	2200      	movs	r2, #0
 800b1c2:	4b1c      	ldr	r3, [pc, #112]	; (800b234 <tcp_input+0x2d0>)
 800b1c4:	605a      	str	r2, [r3, #4]
 800b1c6:	e718      	b.n	800affa <tcp_input+0x96>
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 800b1c8:	4b12      	ldr	r3, [pc, #72]	; (800b214 <tcp_input+0x2b0>)
 800b1ca:	22ec      	movs	r2, #236	; 0xec
 800b1cc:	491e      	ldr	r1, [pc, #120]	; (800b248 <tcp_input+0x2e4>)
 800b1ce:	4813      	ldr	r0, [pc, #76]	; (800b21c <tcp_input+0x2b8>)
 800b1d0:	f002 fcfb 	bl	800dbca <iprintf>
 800b1d4:	e7aa      	b.n	800b12c <tcp_input+0x1c8>
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 800b1d6:	4b0f      	ldr	r3, [pc, #60]	; (800b214 <tcp_input+0x2b0>)
 800b1d8:	22f4      	movs	r2, #244	; 0xf4
 800b1da:	491c      	ldr	r1, [pc, #112]	; (800b24c <tcp_input+0x2e8>)
 800b1dc:	480f      	ldr	r0, [pc, #60]	; (800b21c <tcp_input+0x2b8>)
 800b1de:	f002 fcf4 	bl	800dbca <iprintf>
 800b1e2:	e7ad      	b.n	800b140 <tcp_input+0x1dc>
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800b1e4:	4b1a      	ldr	r3, [pc, #104]	; (800b250 <tcp_input+0x2ec>)
 800b1e6:	681d      	ldr	r5, [r3, #0]
 800b1e8:	e03b      	b.n	800b262 <tcp_input+0x2fe>
 800b1ea:	bf00      	nop
 800b1ec:	20003fb0 	.word	0x20003fb0
 800b1f0:	2000426c 	.word	0x2000426c
 800b1f4:	20003fbc 	.word	0x20003fbc
 800b1f8:	20003fb8 	.word	0x20003fb8
 800b1fc:	20003fb4 	.word	0x20003fb4
 800b200:	20003fa8 	.word	0x20003fa8
 800b204:	20003f84 	.word	0x20003f84
 800b208:	20003f88 	.word	0x20003f88
 800b20c:	20003fbe 	.word	0x20003fbe
 800b210:	2000797c 	.word	0x2000797c
 800b214:	0800fe4c 	.word	0x0800fe4c
 800b218:	0800fc84 	.word	0x0800fc84
 800b21c:	0800e3b0 	.word	0x0800e3b0
 800b220:	0800fca0 	.word	0x0800fca0
 800b224:	0800fc94 	.word	0x0800fc94
 800b228:	0800fcc0 	.word	0x0800fcc0
 800b22c:	0800fce8 	.word	0x0800fce8
 800b230:	0800fd14 	.word	0x0800fd14
 800b234:	20003f8c 	.word	0x20003f8c
 800b238:	20003fa0 	.word	0x20003fa0
 800b23c:	20003fa4 	.word	0x20003fa4
 800b240:	20003f9c 	.word	0x20003f9c
 800b244:	20007990 	.word	0x20007990
 800b248:	0800fd3c 	.word	0x0800fd3c
 800b24c:	0800fd68 	.word	0x0800fd68
 800b250:	2000798c 	.word	0x2000798c
      if (pcb->remote_port == tcphdr->src &&
 800b254:	8b29      	ldrh	r1, [r5, #24]
 800b256:	4b80      	ldr	r3, [pc, #512]	; (800b458 <tcp_input+0x4f4>)
 800b258:	681b      	ldr	r3, [r3, #0]
 800b25a:	881a      	ldrh	r2, [r3, #0]
 800b25c:	4291      	cmp	r1, r2
 800b25e:	d00b      	beq.n	800b278 <tcp_input+0x314>
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800b260:	68ed      	ldr	r5, [r5, #12]
 800b262:	b1f5      	cbz	r5, 800b2a2 <tcp_input+0x33e>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 800b264:	7d2b      	ldrb	r3, [r5, #20]
 800b266:	2b0a      	cmp	r3, #10
 800b268:	d0f4      	beq.n	800b254 <tcp_input+0x2f0>
 800b26a:	4b7c      	ldr	r3, [pc, #496]	; (800b45c <tcp_input+0x4f8>)
 800b26c:	22fe      	movs	r2, #254	; 0xfe
 800b26e:	497c      	ldr	r1, [pc, #496]	; (800b460 <tcp_input+0x4fc>)
 800b270:	487c      	ldr	r0, [pc, #496]	; (800b464 <tcp_input+0x500>)
 800b272:	f002 fcaa 	bl	800dbca <iprintf>
 800b276:	e7ed      	b.n	800b254 <tcp_input+0x2f0>
          pcb->local_port == tcphdr->dest &&
 800b278:	8aea      	ldrh	r2, [r5, #22]
 800b27a:	885b      	ldrh	r3, [r3, #2]
      if (pcb->remote_port == tcphdr->src &&
 800b27c:	429a      	cmp	r2, r3
 800b27e:	d1ef      	bne.n	800b260 <tcp_input+0x2fc>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800b280:	686a      	ldr	r2, [r5, #4]
 800b282:	4b79      	ldr	r3, [pc, #484]	; (800b468 <tcp_input+0x504>)
 800b284:	691b      	ldr	r3, [r3, #16]
          pcb->local_port == tcphdr->dest &&
 800b286:	429a      	cmp	r2, r3
 800b288:	d1ea      	bne.n	800b260 <tcp_input+0x2fc>
          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800b28a:	682a      	ldr	r2, [r5, #0]
 800b28c:	4b76      	ldr	r3, [pc, #472]	; (800b468 <tcp_input+0x504>)
 800b28e:	695b      	ldr	r3, [r3, #20]
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800b290:	429a      	cmp	r2, r3
 800b292:	d1e5      	bne.n	800b260 <tcp_input+0x2fc>
        tcp_timewait_input(pcb);
 800b294:	4628      	mov	r0, r5
 800b296:	f7fe fd8f 	bl	8009db8 <tcp_timewait_input>
        pbuf_free(p);
 800b29a:	4620      	mov	r0, r4
 800b29c:	f7fd f9d2 	bl	8008644 <pbuf_free>
        return;
 800b2a0:	e6ab      	b.n	800affa <tcp_input+0x96>
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800b2a2:	4b72      	ldr	r3, [pc, #456]	; (800b46c <tcp_input+0x508>)
 800b2a4:	681e      	ldr	r6, [r3, #0]
 800b2a6:	4630      	mov	r0, r6
    prev = NULL;
 800b2a8:	4629      	mov	r1, r5
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800b2aa:	e001      	b.n	800b2b0 <tcp_input+0x34c>
      prev = (struct tcp_pcb *)lpcb;
 800b2ac:	4601      	mov	r1, r0
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800b2ae:	68c0      	ldr	r0, [r0, #12]
 800b2b0:	b168      	cbz	r0, 800b2ce <tcp_input+0x36a>
      if (lpcb->local_port == tcphdr->dest) {
 800b2b2:	8ac2      	ldrh	r2, [r0, #22]
 800b2b4:	4b68      	ldr	r3, [pc, #416]	; (800b458 <tcp_input+0x4f4>)
 800b2b6:	681b      	ldr	r3, [r3, #0]
 800b2b8:	885b      	ldrh	r3, [r3, #2]
 800b2ba:	429a      	cmp	r2, r3
 800b2bc:	d1f6      	bne.n	800b2ac <tcp_input+0x348>
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 800b2be:	6803      	ldr	r3, [r0, #0]
 800b2c0:	4a69      	ldr	r2, [pc, #420]	; (800b468 <tcp_input+0x504>)
 800b2c2:	6952      	ldr	r2, [r2, #20]
 800b2c4:	4293      	cmp	r3, r2
 800b2c6:	d002      	beq.n	800b2ce <tcp_input+0x36a>
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 800b2c8:	b108      	cbz	r0, 800b2ce <tcp_input+0x36a>
 800b2ca:	2b00      	cmp	r3, #0
 800b2cc:	d1ee      	bne.n	800b2ac <tcp_input+0x348>
    if (lpcb != NULL) {
 800b2ce:	2800      	cmp	r0, #0
 800b2d0:	f43f af38 	beq.w	800b144 <tcp_input+0x1e0>
      if (prev != NULL) {
 800b2d4:	b121      	cbz	r1, 800b2e0 <tcp_input+0x37c>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 800b2d6:	68c3      	ldr	r3, [r0, #12]
 800b2d8:	60cb      	str	r3, [r1, #12]
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 800b2da:	60c6      	str	r6, [r0, #12]
        tcp_listen_pcbs.listen_pcbs = lpcb;
 800b2dc:	4b63      	ldr	r3, [pc, #396]	; (800b46c <tcp_input+0x508>)
 800b2de:	6018      	str	r0, [r3, #0]
      tcp_listen_input(lpcb);
 800b2e0:	f7fe fdb2 	bl	8009e48 <tcp_listen_input>
      pbuf_free(p);
 800b2e4:	4620      	mov	r0, r4
 800b2e6:	f7fd f9ad 	bl	8008644 <pbuf_free>
      return;
 800b2ea:	e686      	b.n	800affa <tcp_input+0x96>
          tcp_send_empty_ack(pcb);
 800b2ec:	4628      	mov	r0, r5
 800b2ee:	f000 fde9 	bl	800bec4 <tcp_send_empty_ack>
 800b2f2:	e759      	b.n	800b1a8 <tcp_input+0x244>
    tcp_input_pcb = pcb;
 800b2f4:	4b5e      	ldr	r3, [pc, #376]	; (800b470 <tcp_input+0x50c>)
 800b2f6:	601d      	str	r5, [r3, #0]
    err = tcp_process(pcb);
 800b2f8:	4628      	mov	r0, r5
 800b2fa:	f7ff fb97 	bl	800aa2c <tcp_process>
    if (err != ERR_ABRT) {
 800b2fe:	f110 0f0d 	cmn.w	r0, #13
 800b302:	f43f af51 	beq.w	800b1a8 <tcp_input+0x244>
      if (recv_flags & TF_RESET) {
 800b306:	4b5b      	ldr	r3, [pc, #364]	; (800b474 <tcp_input+0x510>)
 800b308:	781b      	ldrb	r3, [r3, #0]
 800b30a:	f013 0f08 	tst.w	r3, #8
 800b30e:	d00f      	beq.n	800b330 <tcp_input+0x3cc>
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 800b310:	f8d5 308c 	ldr.w	r3, [r5, #140]	; 0x8c
 800b314:	b11b      	cbz	r3, 800b31e <tcp_input+0x3ba>
 800b316:	f06f 010d 	mvn.w	r1, #13
 800b31a:	6928      	ldr	r0, [r5, #16]
 800b31c:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 800b31e:	4629      	mov	r1, r5
 800b320:	4855      	ldr	r0, [pc, #340]	; (800b478 <tcp_input+0x514>)
 800b322:	f7fe f93b 	bl	800959c <tcp_pcb_remove>
        memp_free(MEMP_TCP_PCB, pcb);
 800b326:	4629      	mov	r1, r5
 800b328:	2001      	movs	r0, #1
 800b32a:	f7fc ffb5 	bl	8008298 <memp_free>
 800b32e:	e73b      	b.n	800b1a8 <tcp_input+0x244>
        if (recv_acked > 0) {
 800b330:	4b52      	ldr	r3, [pc, #328]	; (800b47c <tcp_input+0x518>)
 800b332:	881a      	ldrh	r2, [r3, #0]
 800b334:	b162      	cbz	r2, 800b350 <tcp_input+0x3ec>
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 800b336:	6feb      	ldr	r3, [r5, #124]	; 0x7c
 800b338:	2b00      	cmp	r3, #0
 800b33a:	d048      	beq.n	800b3ce <tcp_input+0x46a>
 800b33c:	4629      	mov	r1, r5
 800b33e:	6928      	ldr	r0, [r5, #16]
 800b340:	4798      	blx	r3
            if (err == ERR_ABRT) {
 800b342:	f110 0f0d 	cmn.w	r0, #13
 800b346:	f43f af2f 	beq.w	800b1a8 <tcp_input+0x244>
          recv_acked = 0;
 800b34a:	2200      	movs	r2, #0
 800b34c:	4b4b      	ldr	r3, [pc, #300]	; (800b47c <tcp_input+0x518>)
 800b34e:	801a      	strh	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 800b350:	4628      	mov	r0, r5
 800b352:	f7fe fd0f 	bl	8009d74 <tcp_input_delayed_close>
 800b356:	2800      	cmp	r0, #0
 800b358:	f47f af26 	bne.w	800b1a8 <tcp_input+0x244>
        if (recv_data != NULL) {
 800b35c:	4b48      	ldr	r3, [pc, #288]	; (800b480 <tcp_input+0x51c>)
 800b35e:	681b      	ldr	r3, [r3, #0]
 800b360:	b1eb      	cbz	r3, 800b39e <tcp_input+0x43a>
          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 800b362:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 800b364:	b133      	cbz	r3, 800b374 <tcp_input+0x410>
 800b366:	4b3d      	ldr	r3, [pc, #244]	; (800b45c <tcp_input+0x4f8>)
 800b368:	f44f 72d2 	mov.w	r2, #420	; 0x1a4
 800b36c:	4945      	ldr	r1, [pc, #276]	; (800b484 <tcp_input+0x520>)
 800b36e:	483d      	ldr	r0, [pc, #244]	; (800b464 <tcp_input+0x500>)
 800b370:	f002 fc2b 	bl	800dbca <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 800b374:	7eab      	ldrb	r3, [r5, #26]
 800b376:	f013 0f10 	tst.w	r3, #16
 800b37a:	d12a      	bne.n	800b3d2 <tcp_input+0x46e>
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 800b37c:	f8d5 4080 	ldr.w	r4, [r5, #128]	; 0x80
 800b380:	b37c      	cbz	r4, 800b3e2 <tcp_input+0x47e>
 800b382:	2300      	movs	r3, #0
 800b384:	4a3e      	ldr	r2, [pc, #248]	; (800b480 <tcp_input+0x51c>)
 800b386:	6812      	ldr	r2, [r2, #0]
 800b388:	4629      	mov	r1, r5
 800b38a:	6928      	ldr	r0, [r5, #16]
 800b38c:	47a0      	blx	r4
          if (err == ERR_ABRT) {
 800b38e:	f110 0f0d 	cmn.w	r0, #13
 800b392:	f43f af09 	beq.w	800b1a8 <tcp_input+0x244>
          if (err != ERR_OK) {
 800b396:	b110      	cbz	r0, 800b39e <tcp_input+0x43a>
            pcb->refused_data = recv_data;
 800b398:	4b39      	ldr	r3, [pc, #228]	; (800b480 <tcp_input+0x51c>)
 800b39a:	681b      	ldr	r3, [r3, #0]
 800b39c:	676b      	str	r3, [r5, #116]	; 0x74
        if (recv_flags & TF_GOT_FIN) {
 800b39e:	4b35      	ldr	r3, [pc, #212]	; (800b474 <tcp_input+0x510>)
 800b3a0:	781b      	ldrb	r3, [r3, #0]
 800b3a2:	f013 0f20 	tst.w	r3, #32
 800b3a6:	d005      	beq.n	800b3b4 <tcp_input+0x450>
          if (pcb->refused_data != NULL) {
 800b3a8:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 800b3aa:	b313      	cbz	r3, 800b3f2 <tcp_input+0x48e>
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 800b3ac:	7b5a      	ldrb	r2, [r3, #13]
 800b3ae:	f042 0220 	orr.w	r2, r2, #32
 800b3b2:	735a      	strb	r2, [r3, #13]
        tcp_input_pcb = NULL;
 800b3b4:	2200      	movs	r2, #0
 800b3b6:	4b2e      	ldr	r3, [pc, #184]	; (800b470 <tcp_input+0x50c>)
 800b3b8:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 800b3ba:	4628      	mov	r0, r5
 800b3bc:	f7fe fcda 	bl	8009d74 <tcp_input_delayed_close>
 800b3c0:	2800      	cmp	r0, #0
 800b3c2:	f47f aef1 	bne.w	800b1a8 <tcp_input+0x244>
        tcp_output(pcb);
 800b3c6:	4628      	mov	r0, r5
 800b3c8:	f000 fdb6 	bl	800bf38 <tcp_output>
 800b3cc:	e6ec      	b.n	800b1a8 <tcp_input+0x244>
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 800b3ce:	2000      	movs	r0, #0
 800b3d0:	e7b7      	b.n	800b342 <tcp_input+0x3de>
            pbuf_free(recv_data);
 800b3d2:	4b2b      	ldr	r3, [pc, #172]	; (800b480 <tcp_input+0x51c>)
 800b3d4:	6818      	ldr	r0, [r3, #0]
 800b3d6:	f7fd f935 	bl	8008644 <pbuf_free>
            tcp_abort(pcb);
 800b3da:	4628      	mov	r0, r5
 800b3dc:	f7fe fb2a 	bl	8009a34 <tcp_abort>
            goto aborted;
 800b3e0:	e6e2      	b.n	800b1a8 <tcp_input+0x244>
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 800b3e2:	2300      	movs	r3, #0
 800b3e4:	4a26      	ldr	r2, [pc, #152]	; (800b480 <tcp_input+0x51c>)
 800b3e6:	6812      	ldr	r2, [r2, #0]
 800b3e8:	4629      	mov	r1, r5
 800b3ea:	4618      	mov	r0, r3
 800b3ec:	f7fe f9de 	bl	80097ac <tcp_recv_null>
 800b3f0:	e7cd      	b.n	800b38e <tcp_input+0x42a>
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 800b3f2:	8d2b      	ldrh	r3, [r5, #40]	; 0x28
 800b3f4:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800b3f8:	d001      	beq.n	800b3fe <tcp_input+0x49a>
              pcb->rcv_wnd++;
 800b3fa:	3301      	adds	r3, #1
 800b3fc:	852b      	strh	r3, [r5, #40]	; 0x28
            TCP_EVENT_CLOSED(pcb, err);
 800b3fe:	f8d5 4080 	ldr.w	r4, [r5, #128]	; 0x80
 800b402:	b144      	cbz	r4, 800b416 <tcp_input+0x4b2>
 800b404:	2300      	movs	r3, #0
 800b406:	461a      	mov	r2, r3
 800b408:	4629      	mov	r1, r5
 800b40a:	6928      	ldr	r0, [r5, #16]
 800b40c:	47a0      	blx	r4
            if (err == ERR_ABRT) {
 800b40e:	f110 0f0d 	cmn.w	r0, #13
 800b412:	d1cf      	bne.n	800b3b4 <tcp_input+0x450>
 800b414:	e6c8      	b.n	800b1a8 <tcp_input+0x244>
            TCP_EVENT_CLOSED(pcb, err);
 800b416:	2000      	movs	r0, #0
 800b418:	e7f9      	b.n	800b40e <tcp_input+0x4aa>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 800b41a:	4b0f      	ldr	r3, [pc, #60]	; (800b458 <tcp_input+0x4f4>)
 800b41c:	681b      	ldr	r3, [r3, #0]
 800b41e:	8998      	ldrh	r0, [r3, #12]
 800b420:	f7fb f8f4 	bl	800660c <lwip_htons>
 800b424:	f010 0f04 	tst.w	r0, #4
 800b428:	d003      	beq.n	800b432 <tcp_input+0x4ce>
    pbuf_free(p);
 800b42a:	4620      	mov	r0, r4
 800b42c:	f7fd f90a 	bl	8008644 <pbuf_free>
 800b430:	e5e3      	b.n	800affa <tcp_input+0x96>
        ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800b432:	4b09      	ldr	r3, [pc, #36]	; (800b458 <tcp_input+0x4f4>)
 800b434:	681b      	ldr	r3, [r3, #0]
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 800b436:	4a14      	ldr	r2, [pc, #80]	; (800b488 <tcp_input+0x524>)
 800b438:	4914      	ldr	r1, [pc, #80]	; (800b48c <tcp_input+0x528>)
 800b43a:	8808      	ldrh	r0, [r1, #0]
 800b43c:	4914      	ldr	r1, [pc, #80]	; (800b490 <tcp_input+0x52c>)
 800b43e:	6809      	ldr	r1, [r1, #0]
 800b440:	881d      	ldrh	r5, [r3, #0]
 800b442:	9501      	str	r5, [sp, #4]
 800b444:	885b      	ldrh	r3, [r3, #2]
 800b446:	9300      	str	r3, [sp, #0]
 800b448:	4613      	mov	r3, r2
 800b44a:	3204      	adds	r2, #4
 800b44c:	4401      	add	r1, r0
 800b44e:	4811      	ldr	r0, [pc, #68]	; (800b494 <tcp_input+0x530>)
 800b450:	6800      	ldr	r0, [r0, #0]
 800b452:	f000 fecd 	bl	800c1f0 <tcp_rst>
 800b456:	e7e8      	b.n	800b42a <tcp_input+0x4c6>
 800b458:	20003fb0 	.word	0x20003fb0
 800b45c:	0800fe4c 	.word	0x0800fe4c
 800b460:	0800fd94 	.word	0x0800fd94
 800b464:	0800e3b0 	.word	0x0800e3b0
 800b468:	2000426c 	.word	0x2000426c
 800b46c:	20007984 	.word	0x20007984
 800b470:	20007990 	.word	0x20007990
 800b474:	20003fa4 	.word	0x20003fa4
 800b478:	2000797c 	.word	0x2000797c
 800b47c:	20003f9c 	.word	0x20003f9c
 800b480:	20003fa0 	.word	0x20003fa0
 800b484:	0800fdc4 	.word	0x0800fdc4
 800b488:	2000427c 	.word	0x2000427c
 800b48c:	20003fbe 	.word	0x20003fbe
 800b490:	20003fa8 	.word	0x20003fa8
 800b494:	20003f84 	.word	0x20003f84

0800b498 <tcp_trigger_input_pcb_close>:
}

void
tcp_trigger_input_pcb_close(void)
{
  recv_flags |= TF_CLOSED;
 800b498:	4a02      	ldr	r2, [pc, #8]	; (800b4a4 <tcp_trigger_input_pcb_close+0xc>)
 800b49a:	7813      	ldrb	r3, [r2, #0]
 800b49c:	f043 0310 	orr.w	r3, r3, #16
 800b4a0:	7013      	strb	r3, [r2, #0]
 800b4a2:	4770      	bx	lr
 800b4a4:	20003fa4 	.word	0x20003fa4

0800b4a8 <tcp_write_checks>:
 * @param len length of data to send (checked agains snd_buf)
 * @return ERR_OK if tcp_write is allowed to proceed, another err_t otherwise
 */
static err_t
tcp_write_checks(struct tcp_pcb *pcb, u16_t len)
{
 800b4a8:	b508      	push	{r3, lr}
  /* connection is in invalid state for data transmission? */
  if ((pcb->state != ESTABLISHED) &&
 800b4aa:	7d03      	ldrb	r3, [r0, #20]
 800b4ac:	2b04      	cmp	r3, #4
 800b4ae:	d005      	beq.n	800b4bc <tcp_write_checks+0x14>
 800b4b0:	2b07      	cmp	r3, #7
 800b4b2:	d003      	beq.n	800b4bc <tcp_write_checks+0x14>
      (pcb->state != CLOSE_WAIT) &&
 800b4b4:	2b02      	cmp	r3, #2
 800b4b6:	d001      	beq.n	800b4bc <tcp_write_checks+0x14>
      (pcb->state != SYN_SENT) &&
 800b4b8:	2b03      	cmp	r3, #3
 800b4ba:	d139      	bne.n	800b530 <tcp_write_checks+0x88>
      (pcb->state != SYN_RCVD)) {
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_STATE | LWIP_DBG_LEVEL_SEVERE, ("tcp_write() called in invalid state\n"));
    return ERR_CONN;
  } else if (len == 0) {
 800b4bc:	2900      	cmp	r1, #0
 800b4be:	d03a      	beq.n	800b536 <tcp_write_checks+0x8e>
    return ERR_OK;
  }

  /* fail on too much data */
  if (len > pcb->snd_buf) {
 800b4c0:	f8b0 3060 	ldrh.w	r3, [r0, #96]	; 0x60
 800b4c4:	4299      	cmp	r1, r3
 800b4c6:	d808      	bhi.n	800b4da <tcp_write_checks+0x32>
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: queuelen: %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));

  /* If total number of pbufs on the unsent/unacked queues exceeds the
   * configured maximum, return an error */
  /* check for configured max queuelen and possible overflow */
  if ((pcb->snd_queuelen >= TCP_SND_QUEUELEN) || (pcb->snd_queuelen > TCP_SNDQUEUELEN_OVERFLOW)) {
 800b4c8:	f8b0 3062 	ldrh.w	r3, [r0, #98]	; 0x62
 800b4cc:	2b08      	cmp	r3, #8
 800b4ce:	d80b      	bhi.n	800b4e8 <tcp_write_checks+0x40>
      pcb->snd_queuelen, (u16_t)TCP_SND_QUEUELEN));
    TCP_STATS_INC(tcp.memerr);
    pcb->flags |= TF_NAGLEMEMERR;
    return ERR_MEM;
  }
  if (pcb->snd_queuelen != 0) {
 800b4d0:	b1f3      	cbz	r3, 800b510 <tcp_write_checks+0x68>
    LWIP_ASSERT("tcp_write: pbufs on queue => at least one queue non-empty",
 800b4d2:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
 800b4d4:	b17b      	cbz	r3, 800b4f6 <tcp_write_checks+0x4e>
      pcb->unacked != NULL || pcb->unsent != NULL);
  } else {
    LWIP_ASSERT("tcp_write: no pbufs on queue => both queues empty",
      pcb->unacked == NULL && pcb->unsent == NULL);
  }
  return ERR_OK;
 800b4d6:	2000      	movs	r0, #0
 800b4d8:	bd08      	pop	{r3, pc}
    pcb->flags |= TF_NAGLEMEMERR;
 800b4da:	7e83      	ldrb	r3, [r0, #26]
 800b4dc:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800b4e0:	7683      	strb	r3, [r0, #26]
    return ERR_MEM;
 800b4e2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800b4e6:	bd08      	pop	{r3, pc}
    pcb->flags |= TF_NAGLEMEMERR;
 800b4e8:	7e83      	ldrb	r3, [r0, #26]
 800b4ea:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800b4ee:	7683      	strb	r3, [r0, #26]
    return ERR_MEM;
 800b4f0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800b4f4:	bd08      	pop	{r3, pc}
    LWIP_ASSERT("tcp_write: pbufs on queue => at least one queue non-empty",
 800b4f6:	6e83      	ldr	r3, [r0, #104]	; 0x68
 800b4f8:	b10b      	cbz	r3, 800b4fe <tcp_write_checks+0x56>
  return ERR_OK;
 800b4fa:	2000      	movs	r0, #0
 800b4fc:	bd08      	pop	{r3, pc}
    LWIP_ASSERT("tcp_write: pbufs on queue => at least one queue non-empty",
 800b4fe:	4b0f      	ldr	r3, [pc, #60]	; (800b53c <tcp_write_checks+0x94>)
 800b500:	f44f 72ab 	mov.w	r2, #342	; 0x156
 800b504:	490e      	ldr	r1, [pc, #56]	; (800b540 <tcp_write_checks+0x98>)
 800b506:	480f      	ldr	r0, [pc, #60]	; (800b544 <tcp_write_checks+0x9c>)
 800b508:	f002 fb5f 	bl	800dbca <iprintf>
  return ERR_OK;
 800b50c:	2000      	movs	r0, #0
 800b50e:	bd08      	pop	{r3, pc}
    LWIP_ASSERT("tcp_write: no pbufs on queue => both queues empty",
 800b510:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
 800b512:	b143      	cbz	r3, 800b526 <tcp_write_checks+0x7e>
 800b514:	4b09      	ldr	r3, [pc, #36]	; (800b53c <tcp_write_checks+0x94>)
 800b516:	f240 1259 	movw	r2, #345	; 0x159
 800b51a:	490b      	ldr	r1, [pc, #44]	; (800b548 <tcp_write_checks+0xa0>)
 800b51c:	4809      	ldr	r0, [pc, #36]	; (800b544 <tcp_write_checks+0x9c>)
 800b51e:	f002 fb54 	bl	800dbca <iprintf>
  return ERR_OK;
 800b522:	2000      	movs	r0, #0
 800b524:	bd08      	pop	{r3, pc}
    LWIP_ASSERT("tcp_write: no pbufs on queue => both queues empty",
 800b526:	6e83      	ldr	r3, [r0, #104]	; 0x68
 800b528:	2b00      	cmp	r3, #0
 800b52a:	d1f3      	bne.n	800b514 <tcp_write_checks+0x6c>
  return ERR_OK;
 800b52c:	2000      	movs	r0, #0
}
 800b52e:	bd08      	pop	{r3, pc}
    return ERR_CONN;
 800b530:	f06f 000a 	mvn.w	r0, #10
 800b534:	bd08      	pop	{r3, pc}
    return ERR_OK;
 800b536:	2000      	movs	r0, #0
 800b538:	bd08      	pop	{r3, pc}
 800b53a:	bf00      	nop
 800b53c:	0801035c 	.word	0x0801035c
 800b540:	08010390 	.word	0x08010390
 800b544:	0800e3b0 	.word	0x0800e3b0
 800b548:	080103cc 	.word	0x080103cc

0800b54c <tcp_pbuf_prealloc>:
{
 800b54c:	b570      	push	{r4, r5, r6, lr}
 800b54e:	460c      	mov	r4, r1
 800b550:	461e      	mov	r6, r3
 800b552:	f89d 3018 	ldrb.w	r3, [sp, #24]
  if (length < max_length) {
 800b556:	4291      	cmp	r1, r2
 800b558:	d215      	bcs.n	800b586 <tcp_pbuf_prealloc+0x3a>
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 800b55a:	f89d 1014 	ldrb.w	r1, [sp, #20]
 800b55e:	f011 0f02 	tst.w	r1, #2
 800b562:	d108      	bne.n	800b576 <tcp_pbuf_prealloc+0x2a>
        (!(pcb->flags & TF_NODELAY) &&
 800b564:	9904      	ldr	r1, [sp, #16]
 800b566:	7e89      	ldrb	r1, [r1, #26]
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 800b568:	f011 0f40 	tst.w	r1, #64	; 0x40
 800b56c:	d126      	bne.n	800b5bc <tcp_pbuf_prealloc+0x70>
        (!(pcb->flags & TF_NODELAY) &&
 800b56e:	b113      	cbz	r3, 800b576 <tcp_pbuf_prealloc+0x2a>
          pcb->unsent != NULL ||
 800b570:	9b04      	ldr	r3, [sp, #16]
 800b572:	6e9b      	ldr	r3, [r3, #104]	; 0x68
         (!first_seg ||
 800b574:	b1e3      	cbz	r3, 800b5b0 <tcp_pbuf_prealloc+0x64>
      alloc = LWIP_MIN(max_length, LWIP_MEM_ALIGN_SIZE(TCP_OVERSIZE_CALC_LENGTH(length)));
 800b576:	f204 211b 	addw	r1, r4, #539	; 0x21b
 800b57a:	f021 0103 	bic.w	r1, r1, #3
 800b57e:	428a      	cmp	r2, r1
 800b580:	bf28      	it	cs
 800b582:	460a      	movcs	r2, r1
 800b584:	b291      	uxth	r1, r2
  p = pbuf_alloc(layer, alloc, PBUF_RAM);
 800b586:	2200      	movs	r2, #0
 800b588:	f7fd f8c8 	bl	800871c <pbuf_alloc>
  if (p == NULL) {
 800b58c:	4605      	mov	r5, r0
 800b58e:	b168      	cbz	r0, 800b5ac <tcp_pbuf_prealloc+0x60>
  LWIP_ASSERT("need unchained pbuf", p->next == NULL);
 800b590:	6803      	ldr	r3, [r0, #0]
 800b592:	b133      	cbz	r3, 800b5a2 <tcp_pbuf_prealloc+0x56>
 800b594:	4b0a      	ldr	r3, [pc, #40]	; (800b5c0 <tcp_pbuf_prealloc+0x74>)
 800b596:	f44f 7288 	mov.w	r2, #272	; 0x110
 800b59a:	490a      	ldr	r1, [pc, #40]	; (800b5c4 <tcp_pbuf_prealloc+0x78>)
 800b59c:	480a      	ldr	r0, [pc, #40]	; (800b5c8 <tcp_pbuf_prealloc+0x7c>)
 800b59e:	f002 fb14 	bl	800dbca <iprintf>
  *oversize = p->len - length;
 800b5a2:	896b      	ldrh	r3, [r5, #10]
 800b5a4:	1b1b      	subs	r3, r3, r4
 800b5a6:	8033      	strh	r3, [r6, #0]
  p->len = p->tot_len = length;
 800b5a8:	812c      	strh	r4, [r5, #8]
 800b5aa:	816c      	strh	r4, [r5, #10]
}
 800b5ac:	4628      	mov	r0, r5
 800b5ae:	bd70      	pop	{r4, r5, r6, pc}
          pcb->unacked != NULL))) {
 800b5b0:	9b04      	ldr	r3, [sp, #16]
 800b5b2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
          pcb->unsent != NULL ||
 800b5b4:	2b00      	cmp	r3, #0
 800b5b6:	d1de      	bne.n	800b576 <tcp_pbuf_prealloc+0x2a>
  u16_t alloc = length;
 800b5b8:	4621      	mov	r1, r4
 800b5ba:	e7e4      	b.n	800b586 <tcp_pbuf_prealloc+0x3a>
 800b5bc:	4621      	mov	r1, r4
 800b5be:	e7e2      	b.n	800b586 <tcp_pbuf_prealloc+0x3a>
 800b5c0:	0801035c 	.word	0x0801035c
 800b5c4:	0801016c 	.word	0x0801016c
 800b5c8:	0800e3b0 	.word	0x0800e3b0

0800b5cc <tcp_create_segment>:
{
 800b5cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b5d0:	4680      	mov	r8, r0
 800b5d2:	460e      	mov	r6, r1
 800b5d4:	4617      	mov	r7, r2
 800b5d6:	4699      	mov	r9, r3
 800b5d8:	f89d a020 	ldrb.w	sl, [sp, #32]
  u8_t optlen = LWIP_TCP_OPT_LENGTH(optflags);
 800b5dc:	f01a 0f01 	tst.w	sl, #1
 800b5e0:	d03c      	beq.n	800b65c <tcp_create_segment+0x90>
 800b5e2:	2504      	movs	r5, #4
  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 800b5e4:	2003      	movs	r0, #3
 800b5e6:	f7fc fe3d 	bl	8008264 <memp_malloc>
 800b5ea:	4604      	mov	r4, r0
 800b5ec:	2800      	cmp	r0, #0
 800b5ee:	d037      	beq.n	800b660 <tcp_create_segment+0x94>
  seg->flags = optflags;
 800b5f0:	f880 a00a 	strb.w	sl, [r0, #10]
  seg->next = NULL;
 800b5f4:	2300      	movs	r3, #0
 800b5f6:	6003      	str	r3, [r0, #0]
  seg->p = p;
 800b5f8:	6046      	str	r6, [r0, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 800b5fa:	8933      	ldrh	r3, [r6, #8]
 800b5fc:	fa1f fa85 	uxth.w	sl, r5
 800b600:	4553      	cmp	r3, sl
 800b602:	d331      	bcc.n	800b668 <tcp_create_segment+0x9c>
  seg->len = p->tot_len - optlen;
 800b604:	8933      	ldrh	r3, [r6, #8]
 800b606:	eba3 030a 	sub.w	r3, r3, sl
 800b60a:	8123      	strh	r3, [r4, #8]
  if (pbuf_header(p, TCP_HLEN)) {
 800b60c:	2114      	movs	r1, #20
 800b60e:	4630      	mov	r0, r6
 800b610:	f7fd f80e 	bl	8008630 <pbuf_header>
 800b614:	bb78      	cbnz	r0, 800b676 <tcp_create_segment+0xaa>
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 800b616:	6863      	ldr	r3, [r4, #4]
 800b618:	685e      	ldr	r6, [r3, #4]
 800b61a:	60e6      	str	r6, [r4, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 800b61c:	f8b8 0016 	ldrh.w	r0, [r8, #22]
 800b620:	f7fa fff4 	bl	800660c <lwip_htons>
 800b624:	8030      	strh	r0, [r6, #0]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 800b626:	68e6      	ldr	r6, [r4, #12]
 800b628:	f8b8 0018 	ldrh.w	r0, [r8, #24]
 800b62c:	f7fa ffee 	bl	800660c <lwip_htons>
 800b630:	8070      	strh	r0, [r6, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 800b632:	68e6      	ldr	r6, [r4, #12]
 800b634:	4648      	mov	r0, r9
 800b636:	f7fa ffec 	bl	8006612 <lwip_htonl>
 800b63a:	6070      	str	r0, [r6, #4]
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), flags);
 800b63c:	68e6      	ldr	r6, [r4, #12]
 800b63e:	08a8      	lsrs	r0, r5, #2
 800b640:	3005      	adds	r0, #5
 800b642:	0300      	lsls	r0, r0, #12
 800b644:	b280      	uxth	r0, r0
 800b646:	4338      	orrs	r0, r7
 800b648:	f7fa ffe0 	bl	800660c <lwip_htons>
 800b64c:	81b0      	strh	r0, [r6, #12]
  seg->tcphdr->urgp = 0;
 800b64e:	68e3      	ldr	r3, [r4, #12]
 800b650:	2200      	movs	r2, #0
 800b652:	749a      	strb	r2, [r3, #18]
 800b654:	74da      	strb	r2, [r3, #19]
}
 800b656:	4620      	mov	r0, r4
 800b658:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  u8_t optlen = LWIP_TCP_OPT_LENGTH(optflags);
 800b65c:	2500      	movs	r5, #0
 800b65e:	e7c1      	b.n	800b5e4 <tcp_create_segment+0x18>
    pbuf_free(p);
 800b660:	4630      	mov	r0, r6
 800b662:	f7fc ffef 	bl	8008644 <pbuf_free>
    return NULL;
 800b666:	e7f6      	b.n	800b656 <tcp_create_segment+0x8a>
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 800b668:	4b05      	ldr	r3, [pc, #20]	; (800b680 <tcp_create_segment+0xb4>)
 800b66a:	22ba      	movs	r2, #186	; 0xba
 800b66c:	4905      	ldr	r1, [pc, #20]	; (800b684 <tcp_create_segment+0xb8>)
 800b66e:	4806      	ldr	r0, [pc, #24]	; (800b688 <tcp_create_segment+0xbc>)
 800b670:	f002 faab 	bl	800dbca <iprintf>
 800b674:	e7c6      	b.n	800b604 <tcp_create_segment+0x38>
    tcp_seg_free(seg);
 800b676:	4620      	mov	r0, r4
 800b678:	f7fd fcd0 	bl	800901c <tcp_seg_free>
    return NULL;
 800b67c:	2400      	movs	r4, #0
 800b67e:	e7ea      	b.n	800b656 <tcp_create_segment+0x8a>
 800b680:	0801035c 	.word	0x0801035c
 800b684:	0800ffe4 	.word	0x0800ffe4
 800b688:	0800e3b0 	.word	0x0800e3b0

0800b68c <tcp_output_alloc_header>:
{
 800b68c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b690:	4606      	mov	r6, r0
 800b692:	460c      	mov	r4, r1
 800b694:	4698      	mov	r8, r3
  struct pbuf *p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 800b696:	4411      	add	r1, r2
 800b698:	b289      	uxth	r1, r1
 800b69a:	3114      	adds	r1, #20
 800b69c:	2200      	movs	r2, #0
 800b69e:	b289      	uxth	r1, r1
 800b6a0:	2001      	movs	r0, #1
 800b6a2:	f7fd f83b 	bl	800871c <pbuf_alloc>
  if (p != NULL) {
 800b6a6:	4607      	mov	r7, r0
 800b6a8:	b348      	cbz	r0, 800b6fe <tcp_output_alloc_header+0x72>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 800b6aa:	8942      	ldrh	r2, [r0, #10]
 800b6ac:	f104 0314 	add.w	r3, r4, #20
 800b6b0:	429a      	cmp	r2, r3
 800b6b2:	db27      	blt.n	800b704 <tcp_output_alloc_header+0x78>
    tcphdr = (struct tcp_hdr *)p->payload;
 800b6b4:	687d      	ldr	r5, [r7, #4]
    tcphdr->src = lwip_htons(pcb->local_port);
 800b6b6:	8af0      	ldrh	r0, [r6, #22]
 800b6b8:	f7fa ffa8 	bl	800660c <lwip_htons>
 800b6bc:	8028      	strh	r0, [r5, #0]
    tcphdr->dest = lwip_htons(pcb->remote_port);
 800b6be:	8b30      	ldrh	r0, [r6, #24]
 800b6c0:	f7fa ffa4 	bl	800660c <lwip_htons>
 800b6c4:	8068      	strh	r0, [r5, #2]
    tcphdr->seqno = seqno_be;
 800b6c6:	f8c5 8004 	str.w	r8, [r5, #4]
    tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 800b6ca:	6a70      	ldr	r0, [r6, #36]	; 0x24
 800b6cc:	f7fa ffa1 	bl	8006612 <lwip_htonl>
 800b6d0:	60a8      	str	r0, [r5, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), TCP_ACK);
 800b6d2:	08a0      	lsrs	r0, r4, #2
 800b6d4:	3005      	adds	r0, #5
 800b6d6:	0300      	lsls	r0, r0, #12
 800b6d8:	b280      	uxth	r0, r0
 800b6da:	f040 0010 	orr.w	r0, r0, #16
 800b6de:	f7fa ff95 	bl	800660c <lwip_htons>
 800b6e2:	81a8      	strh	r0, [r5, #12]
    tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 800b6e4:	8d70      	ldrh	r0, [r6, #42]	; 0x2a
 800b6e6:	f7fa ff91 	bl	800660c <lwip_htons>
 800b6ea:	81e8      	strh	r0, [r5, #14]
    tcphdr->chksum = 0;
 800b6ec:	2300      	movs	r3, #0
 800b6ee:	742b      	strb	r3, [r5, #16]
 800b6f0:	746b      	strb	r3, [r5, #17]
    tcphdr->urgp = 0;
 800b6f2:	74ab      	strb	r3, [r5, #18]
 800b6f4:	74eb      	strb	r3, [r5, #19]
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 800b6f6:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800b6f8:	8d72      	ldrh	r2, [r6, #42]	; 0x2a
 800b6fa:	4413      	add	r3, r2
 800b6fc:	62f3      	str	r3, [r6, #44]	; 0x2c
}
 800b6fe:	4638      	mov	r0, r7
 800b700:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 800b704:	4b03      	ldr	r3, [pc, #12]	; (800b714 <tcp_output_alloc_header+0x88>)
 800b706:	2273      	movs	r2, #115	; 0x73
 800b708:	4903      	ldr	r1, [pc, #12]	; (800b718 <tcp_output_alloc_header+0x8c>)
 800b70a:	4804      	ldr	r0, [pc, #16]	; (800b71c <tcp_output_alloc_header+0x90>)
 800b70c:	f002 fa5d 	bl	800dbca <iprintf>
 800b710:	e7d0      	b.n	800b6b4 <tcp_output_alloc_header+0x28>
 800b712:	bf00      	nop
 800b714:	0801035c 	.word	0x0801035c
 800b718:	0801013c 	.word	0x0801013c
 800b71c:	0800e3b0 	.word	0x0800e3b0

0800b720 <tcp_output_segment>:
{
  err_t err;
  u16_t len;
  u32_t *opts;

  if (seg->p->ref != 1) {
 800b720:	6843      	ldr	r3, [r0, #4]
 800b722:	89db      	ldrh	r3, [r3, #14]
 800b724:	2b01      	cmp	r3, #1
 800b726:	d001      	beq.n	800b72c <tcp_output_segment+0xc>
    /* This can happen if the pbuf of this segment is still referenced by the
       netif driver due to deferred transmission. Since this function modifies
       p->len, we must not continue in this case. */
    return ERR_OK;
 800b728:	2000      	movs	r0, #0
 800b72a:	4770      	bx	lr
{
 800b72c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b72e:	b085      	sub	sp, #20
 800b730:	4616      	mov	r6, r2
 800b732:	460d      	mov	r5, r1
 800b734:	4604      	mov	r4, r0
  }

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 800b736:	68c7      	ldr	r7, [r0, #12]
 800b738:	6a48      	ldr	r0, [r1, #36]	; 0x24
 800b73a:	f7fa ff6a 	bl	8006612 <lwip_htonl>
 800b73e:	60b8      	str	r0, [r7, #8]
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 800b740:	68e7      	ldr	r7, [r4, #12]
 800b742:	8d68      	ldrh	r0, [r5, #42]	; 0x2a
 800b744:	f7fa ff62 	bl	800660c <lwip_htons>
 800b748:	81f8      	strh	r0, [r7, #14]
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 800b74a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800b74c:	8d6a      	ldrh	r2, [r5, #42]	; 0x2a
 800b74e:	4413      	add	r3, r2
 800b750:	62eb      	str	r3, [r5, #44]	; 0x2c

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  /* cast through void* to get rid of alignment warnings */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 800b752:	68e7      	ldr	r7, [r4, #12]
  if (seg->flags & TF_SEG_OPTS_MSS) {
 800b754:	7aa3      	ldrb	r3, [r4, #10]
 800b756:	f013 0f01 	tst.w	r3, #1
 800b75a:	d126      	bne.n	800b7aa <tcp_output_segment+0x8a>
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime < 0) {
 800b75c:	f9b5 3030 	ldrsh.w	r3, [r5, #48]	; 0x30
 800b760:	2b00      	cmp	r3, #0
 800b762:	db2d      	blt.n	800b7c0 <tcp_output_segment+0xa0>
    pcb->rtime = 0;
  }

  if (pcb->rttest == 0) {
 800b764:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 800b766:	2b00      	cmp	r3, #0
 800b768:	d02d      	beq.n	800b7c6 <tcp_output_segment+0xa6>
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
          lwip_htonl(seg->tcphdr->seqno), lwip_htonl(seg->tcphdr->seqno) +
          seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 800b76a:	68e3      	ldr	r3, [r4, #12]
 800b76c:	6862      	ldr	r2, [r4, #4]
 800b76e:	6851      	ldr	r1, [r2, #4]
 800b770:	1a5b      	subs	r3, r3, r1
 800b772:	b29b      	uxth	r3, r3
  if (len == 0) {
    /** Exclude retransmitted segments from this count. */
    MIB2_STATS_INC(mib2.tcpoutsegs);
  }

  seg->p->len -= len;
 800b774:	8951      	ldrh	r1, [r2, #10]
 800b776:	1ac9      	subs	r1, r1, r3
 800b778:	8151      	strh	r1, [r2, #10]
  seg->p->tot_len -= len;
 800b77a:	6861      	ldr	r1, [r4, #4]
 800b77c:	890a      	ldrh	r2, [r1, #8]
 800b77e:	1ad3      	subs	r3, r2, r3
 800b780:	810b      	strh	r3, [r1, #8]

  seg->p->payload = seg->tcphdr;
 800b782:	6863      	ldr	r3, [r4, #4]
 800b784:	68e2      	ldr	r2, [r4, #12]
 800b786:	605a      	str	r2, [r3, #4]

  seg->tcphdr->chksum = 0;
 800b788:	68e3      	ldr	r3, [r4, #12]
 800b78a:	2200      	movs	r2, #0
 800b78c:	741a      	strb	r2, [r3, #16]
 800b78e:	745a      	strb	r2, [r3, #17]
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);

  NETIF_SET_HWADDRHINT(netif, &(pcb->addr_hint));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 800b790:	6860      	ldr	r0, [r4, #4]
 800b792:	7aab      	ldrb	r3, [r5, #10]
 800b794:	7a6a      	ldrb	r2, [r5, #9]
 800b796:	9602      	str	r6, [sp, #8]
 800b798:	2106      	movs	r1, #6
 800b79a:	9101      	str	r1, [sp, #4]
 800b79c:	9200      	str	r2, [sp, #0]
 800b79e:	1d2a      	adds	r2, r5, #4
 800b7a0:	4629      	mov	r1, r5
 800b7a2:	f7fb fe83 	bl	80074ac <ip4_output_if>
    pcb->tos, IP_PROTO_TCP, netif);
  NETIF_SET_HWADDRHINT(netif, NULL);
  return err;
}
 800b7a6:	b005      	add	sp, #20
 800b7a8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    mss = tcp_eff_send_mss(TCP_MSS, &pcb->local_ip, &pcb->remote_ip);
 800b7aa:	1d29      	adds	r1, r5, #4
 800b7ac:	f44f 7006 	mov.w	r0, #536	; 0x218
 800b7b0:	f7fe fa3a 	bl	8009c28 <tcp_eff_send_mss_impl>
    *opts = TCP_BUILD_MSS_OPTION(mss);
 800b7b4:	f040 7001 	orr.w	r0, r0, #33816576	; 0x2040000
 800b7b8:	f7fa ff2b 	bl	8006612 <lwip_htonl>
 800b7bc:	6178      	str	r0, [r7, #20]
 800b7be:	e7cd      	b.n	800b75c <tcp_output_segment+0x3c>
    pcb->rtime = 0;
 800b7c0:	2300      	movs	r3, #0
 800b7c2:	862b      	strh	r3, [r5, #48]	; 0x30
 800b7c4:	e7ce      	b.n	800b764 <tcp_output_segment+0x44>
    pcb->rttest = tcp_ticks;
 800b7c6:	4b04      	ldr	r3, [pc, #16]	; (800b7d8 <tcp_output_segment+0xb8>)
 800b7c8:	681b      	ldr	r3, [r3, #0]
 800b7ca:	636b      	str	r3, [r5, #52]	; 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 800b7cc:	68e3      	ldr	r3, [r4, #12]
 800b7ce:	6858      	ldr	r0, [r3, #4]
 800b7d0:	f7fa ff1f 	bl	8006612 <lwip_htonl>
 800b7d4:	63a8      	str	r0, [r5, #56]	; 0x38
 800b7d6:	e7c8      	b.n	800b76a <tcp_output_segment+0x4a>
 800b7d8:	20007980 	.word	0x20007980

0800b7dc <tcp_write>:
{
 800b7dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b7e0:	b091      	sub	sp, #68	; 0x44
 800b7e2:	4681      	mov	r9, r0
 800b7e4:	9108      	str	r1, [sp, #32]
 800b7e6:	4692      	mov	sl, r2
 800b7e8:	9306      	str	r3, [sp, #24]
  u16_t oversize = 0;
 800b7ea:	2300      	movs	r3, #0
 800b7ec:	f8ad 303e 	strh.w	r3, [sp, #62]	; 0x3e
  u16_t mss_local = LWIP_MIN(pcb->mss, TCPWND_MIN16(pcb->snd_wnd_max/2));
 800b7f0:	f8b0 305e 	ldrh.w	r3, [r0, #94]	; 0x5e
 800b7f4:	8e42      	ldrh	r2, [r0, #50]	; 0x32
 800b7f6:	9205      	str	r2, [sp, #20]
 800b7f8:	085b      	lsrs	r3, r3, #1
 800b7fa:	4293      	cmp	r3, r2
 800b7fc:	bf28      	it	cs
 800b7fe:	4613      	movcs	r3, r2
  mss_local = mss_local ? mss_local : pcb->mss;
 800b800:	b103      	cbz	r3, 800b804 <tcp_write+0x28>
 800b802:	9305      	str	r3, [sp, #20]
  LWIP_ERROR("tcp_write: arg == NULL (programmer violates API)",
 800b804:	9b08      	ldr	r3, [sp, #32]
 800b806:	b1cb      	cbz	r3, 800b83c <tcp_write+0x60>
  err = tcp_write_checks(pcb, len);
 800b808:	4651      	mov	r1, sl
 800b80a:	4648      	mov	r0, r9
 800b80c:	f7ff fe4c 	bl	800b4a8 <tcp_write_checks>
  if (err != ERR_OK) {
 800b810:	9009      	str	r0, [sp, #36]	; 0x24
 800b812:	2800      	cmp	r0, #0
 800b814:	f040 81b2 	bne.w	800bb7c <tcp_write+0x3a0>
  queuelen = pcb->snd_queuelen;
 800b818:	f8b9 6062 	ldrh.w	r6, [r9, #98]	; 0x62
  if (pcb->unsent != NULL) {
 800b81c:	f8d9 b068 	ldr.w	fp, [r9, #104]	; 0x68
 800b820:	f1bb 0f00 	cmp.w	fp, #0
 800b824:	d116      	bne.n	800b854 <tcp_write+0x78>
    LWIP_ASSERT("unsent_oversize mismatch (pcb->unsent is NULL)",
 800b826:	f8b9 4064 	ldrh.w	r4, [r9, #100]	; 0x64
 800b82a:	2c00      	cmp	r4, #0
 800b82c:	f040 80d8 	bne.w	800b9e0 <tcp_write+0x204>
  u16_t extendlen = 0;
 800b830:	940b      	str	r4, [sp, #44]	; 0x2c
  u16_t oversize_used = 0;
 800b832:	940a      	str	r4, [sp, #40]	; 0x28
  struct tcp_seg *last_unsent = NULL, *seg = NULL, *prev_seg = NULL, *queue = NULL;
 800b834:	46d8      	mov	r8, fp
  struct pbuf *concat_p = NULL;
 800b836:	2300      	movs	r3, #0
 800b838:	930c      	str	r3, [sp, #48]	; 0x30
 800b83a:	e0e3      	b.n	800ba04 <tcp_write+0x228>
  LWIP_ERROR("tcp_write: arg == NULL (programmer violates API)",
 800b83c:	4bb1      	ldr	r3, [pc, #708]	; (800bb04 <tcp_write+0x328>)
 800b83e:	f44f 72c9 	mov.w	r2, #402	; 0x192
 800b842:	49b1      	ldr	r1, [pc, #708]	; (800bb08 <tcp_write+0x32c>)
 800b844:	48b1      	ldr	r0, [pc, #708]	; (800bb0c <tcp_write+0x330>)
 800b846:	f002 f9c0 	bl	800dbca <iprintf>
 800b84a:	f06f 030f 	mvn.w	r3, #15
 800b84e:	9309      	str	r3, [sp, #36]	; 0x24
 800b850:	e194      	b.n	800bb7c <tcp_write+0x3a0>
         last_unsent = last_unsent->next);
 800b852:	46bb      	mov	fp, r7
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 800b854:	f8db 7000 	ldr.w	r7, [fp]
 800b858:	2f00      	cmp	r7, #0
 800b85a:	d1fa      	bne.n	800b852 <tcp_write+0x76>
    unsent_optlen = LWIP_TCP_OPT_LENGTH(last_unsent->flags);
 800b85c:	f89b 300a 	ldrb.w	r3, [fp, #10]
 800b860:	f013 0f01 	tst.w	r3, #1
 800b864:	d051      	beq.n	800b90a <tcp_write+0x12e>
 800b866:	2404      	movs	r4, #4
    LWIP_ASSERT("mss_local is too small", mss_local >= last_unsent->len + unsent_optlen);
 800b868:	f8bb 3008 	ldrh.w	r3, [fp, #8]
 800b86c:	4423      	add	r3, r4
 800b86e:	9a05      	ldr	r2, [sp, #20]
 800b870:	429a      	cmp	r2, r3
 800b872:	db4c      	blt.n	800b90e <tcp_write+0x132>
    space = mss_local - (last_unsent->len + unsent_optlen);
 800b874:	f8bb 3008 	ldrh.w	r3, [fp, #8]
 800b878:	441c      	add	r4, r3
 800b87a:	b2a4      	uxth	r4, r4
 800b87c:	9b05      	ldr	r3, [sp, #20]
 800b87e:	1b1c      	subs	r4, r3, r4
 800b880:	b2a3      	uxth	r3, r4
 800b882:	461a      	mov	r2, r3
 800b884:	930b      	str	r3, [sp, #44]	; 0x2c
    oversize = pcb->unsent_oversize;
 800b886:	f8b9 3064 	ldrh.w	r3, [r9, #100]	; 0x64
 800b88a:	930a      	str	r3, [sp, #40]	; 0x28
 800b88c:	f8ad 303e 	strh.w	r3, [sp, #62]	; 0x3e
    if (oversize > 0) {
 800b890:	2b00      	cmp	r3, #0
 800b892:	d04e      	beq.n	800b932 <tcp_write+0x156>
      LWIP_ASSERT("inconsistent oversize vs. space", oversize <= space);
 800b894:	429a      	cmp	r2, r3
 800b896:	d342      	bcc.n	800b91e <tcp_write+0x142>
      oversize_used = LWIP_MIN(space, LWIP_MIN(oversize, len));
 800b898:	f8bd 303e 	ldrh.w	r3, [sp, #62]	; 0x3e
 800b89c:	459a      	cmp	sl, r3
 800b89e:	d946      	bls.n	800b92e <tcp_write+0x152>
 800b8a0:	461a      	mov	r2, r3
 800b8a2:	980b      	ldr	r0, [sp, #44]	; 0x2c
 800b8a4:	4282      	cmp	r2, r0
 800b8a6:	bfa8      	it	ge
 800b8a8:	4602      	movge	r2, r0
 800b8aa:	b292      	uxth	r2, r2
 800b8ac:	920a      	str	r2, [sp, #40]	; 0x28
      oversize -= oversize_used;
 800b8ae:	1a9b      	subs	r3, r3, r2
 800b8b0:	f8ad 303e 	strh.w	r3, [sp, #62]	; 0x3e
      space -= oversize_used;
 800b8b4:	1a83      	subs	r3, r0, r2
 800b8b6:	b29b      	uxth	r3, r3
 800b8b8:	930b      	str	r3, [sp, #44]	; 0x2c
      seg = last_unsent;
 800b8ba:	46d8      	mov	r8, fp
    LWIP_ASSERT("inconsistent oversize vs. len", (oversize == 0) || (pos == len));
 800b8bc:	f8bd 303e 	ldrh.w	r3, [sp, #62]	; 0x3e
 800b8c0:	b14b      	cbz	r3, 800b8d6 <tcp_write+0xfa>
 800b8c2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b8c4:	4553      	cmp	r3, sl
 800b8c6:	d006      	beq.n	800b8d6 <tcp_write+0xfa>
 800b8c8:	4b8e      	ldr	r3, [pc, #568]	; (800bb04 <tcp_write+0x328>)
 800b8ca:	f240 12e1 	movw	r2, #481	; 0x1e1
 800b8ce:	4990      	ldr	r1, [pc, #576]	; (800bb10 <tcp_write+0x334>)
 800b8d0:	488e      	ldr	r0, [pc, #568]	; (800bb0c <tcp_write+0x330>)
 800b8d2:	f002 f97a 	bl	800dbca <iprintf>
    if ((pos < len) && (space > 0) && (last_unsent->len > 0)) {
 800b8d6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b8d8:	4552      	cmp	r2, sl
 800b8da:	f080 808f 	bcs.w	800b9fc <tcp_write+0x220>
 800b8de:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800b8e0:	2900      	cmp	r1, #0
 800b8e2:	f000 8094 	beq.w	800ba0e <tcp_write+0x232>
 800b8e6:	f8bb 3008 	ldrh.w	r3, [fp, #8]
 800b8ea:	2b00      	cmp	r3, #0
 800b8ec:	f000 8093 	beq.w	800ba16 <tcp_write+0x23a>
      u16_t seglen = LWIP_MIN(space, len - pos);
 800b8f0:	ebaa 0502 	sub.w	r5, sl, r2
 800b8f4:	428d      	cmp	r5, r1
 800b8f6:	bfa8      	it	ge
 800b8f8:	460d      	movge	r5, r1
 800b8fa:	b2ac      	uxth	r4, r5
      if (apiflags & TCP_WRITE_FLAG_COPY) {
 800b8fc:	9b06      	ldr	r3, [sp, #24]
 800b8fe:	f013 0f01 	tst.w	r3, #1
 800b902:	d118      	bne.n	800b936 <tcp_write+0x15a>
        for (p = last_unsent->p; p->next != NULL; p = p->next);
 800b904:	f8db 3004 	ldr.w	r3, [fp, #4]
 800b908:	e038      	b.n	800b97c <tcp_write+0x1a0>
    unsent_optlen = LWIP_TCP_OPT_LENGTH(last_unsent->flags);
 800b90a:	2400      	movs	r4, #0
 800b90c:	e7ac      	b.n	800b868 <tcp_write+0x8c>
    LWIP_ASSERT("mss_local is too small", mss_local >= last_unsent->len + unsent_optlen);
 800b90e:	4b7d      	ldr	r3, [pc, #500]	; (800bb04 <tcp_write+0x328>)
 800b910:	f240 12c7 	movw	r2, #455	; 0x1c7
 800b914:	497f      	ldr	r1, [pc, #508]	; (800bb14 <tcp_write+0x338>)
 800b916:	487d      	ldr	r0, [pc, #500]	; (800bb0c <tcp_write+0x330>)
 800b918:	f002 f957 	bl	800dbca <iprintf>
 800b91c:	e7aa      	b.n	800b874 <tcp_write+0x98>
      LWIP_ASSERT("inconsistent oversize vs. space", oversize <= space);
 800b91e:	4b79      	ldr	r3, [pc, #484]	; (800bb04 <tcp_write+0x328>)
 800b920:	f240 12d9 	movw	r2, #473	; 0x1d9
 800b924:	497c      	ldr	r1, [pc, #496]	; (800bb18 <tcp_write+0x33c>)
 800b926:	4879      	ldr	r0, [pc, #484]	; (800bb0c <tcp_write+0x330>)
 800b928:	f002 f94f 	bl	800dbca <iprintf>
 800b92c:	e7b4      	b.n	800b898 <tcp_write+0xbc>
      oversize_used = LWIP_MIN(space, LWIP_MIN(oversize, len));
 800b92e:	4652      	mov	r2, sl
 800b930:	e7b7      	b.n	800b8a2 <tcp_write+0xc6>
  struct tcp_seg *last_unsent = NULL, *seg = NULL, *prev_seg = NULL, *queue = NULL;
 800b932:	46b8      	mov	r8, r7
 800b934:	e7c2      	b.n	800b8bc <tcp_write+0xe0>
        if ((concat_p = tcp_pbuf_prealloc(PBUF_RAW, seglen, space, &oversize, pcb, apiflags, 1)) == NULL) {
 800b936:	2301      	movs	r3, #1
 800b938:	9302      	str	r3, [sp, #8]
 800b93a:	9b06      	ldr	r3, [sp, #24]
 800b93c:	9301      	str	r3, [sp, #4]
 800b93e:	f8cd 9000 	str.w	r9, [sp]
 800b942:	f10d 033e 	add.w	r3, sp, #62	; 0x3e
 800b946:	460a      	mov	r2, r1
 800b948:	4621      	mov	r1, r4
 800b94a:	2004      	movs	r0, #4
 800b94c:	f7ff fdfe 	bl	800b54c <tcp_pbuf_prealloc>
 800b950:	4603      	mov	r3, r0
 800b952:	900c      	str	r0, [sp, #48]	; 0x30
 800b954:	2800      	cmp	r0, #0
 800b956:	f000 80f0 	beq.w	800bb3a <tcp_write+0x35e>
        TCP_DATA_COPY2(concat_p->payload, (const u8_t*)arg + pos, seglen, &concat_chksum, &concat_chksum_swapped);
 800b95a:	4622      	mov	r2, r4
 800b95c:	9908      	ldr	r1, [sp, #32]
 800b95e:	980a      	ldr	r0, [sp, #40]	; 0x28
 800b960:	4401      	add	r1, r0
 800b962:	461d      	mov	r5, r3
 800b964:	6858      	ldr	r0, [r3, #4]
 800b966:	f002 fa9c 	bl	800dea2 <memcpy>
        queuelen += pbuf_clen(concat_p);
 800b96a:	4628      	mov	r0, r5
 800b96c:	f7fd f830 	bl	80089d0 <pbuf_clen>
 800b970:	4406      	add	r6, r0
 800b972:	b2b6      	uxth	r6, r6
  u16_t extendlen = 0;
 800b974:	2300      	movs	r3, #0
 800b976:	930b      	str	r3, [sp, #44]	; 0x2c
 800b978:	e01a      	b.n	800b9b0 <tcp_write+0x1d4>
        for (p = last_unsent->p; p->next != NULL; p = p->next);
 800b97a:	4613      	mov	r3, r2
 800b97c:	681a      	ldr	r2, [r3, #0]
 800b97e:	2a00      	cmp	r2, #0
 800b980:	d1fb      	bne.n	800b97a <tcp_write+0x19e>
 800b982:	920c      	str	r2, [sp, #48]	; 0x30
        if (p->type == PBUF_ROM && (const u8_t *)p->payload + p->len == (const u8_t *)arg) {
 800b984:	7b1a      	ldrb	r2, [r3, #12]
 800b986:	2a01      	cmp	r2, #1
 800b988:	d017      	beq.n	800b9ba <tcp_write+0x1de>
          if ((concat_p = pbuf_alloc(PBUF_RAW, seglen, PBUF_ROM)) == NULL) {
 800b98a:	2201      	movs	r2, #1
 800b98c:	4621      	mov	r1, r4
 800b98e:	2004      	movs	r0, #4
 800b990:	f7fc fec4 	bl	800871c <pbuf_alloc>
 800b994:	900c      	str	r0, [sp, #48]	; 0x30
 800b996:	2800      	cmp	r0, #0
 800b998:	f000 80cf 	beq.w	800bb3a <tcp_write+0x35e>
          ((struct pbuf_rom*)concat_p)->payload = (const u8_t*)arg + pos;
 800b99c:	9b08      	ldr	r3, [sp, #32]
 800b99e:	990a      	ldr	r1, [sp, #40]	; 0x28
 800b9a0:	440b      	add	r3, r1
 800b9a2:	6043      	str	r3, [r0, #4]
          queuelen += pbuf_clen(concat_p);
 800b9a4:	f7fd f814 	bl	80089d0 <pbuf_clen>
 800b9a8:	4406      	add	r6, r0
 800b9aa:	b2b6      	uxth	r6, r6
  u16_t extendlen = 0;
 800b9ac:	2300      	movs	r3, #0
 800b9ae:	930b      	str	r3, [sp, #44]	; 0x2c
      pos += seglen;
 800b9b0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b9b2:	441c      	add	r4, r3
 800b9b4:	b2a4      	uxth	r4, r4
      seg = last_unsent;
 800b9b6:	46d8      	mov	r8, fp
 800b9b8:	e024      	b.n	800ba04 <tcp_write+0x228>
        if (p->type == PBUF_ROM && (const u8_t *)p->payload + p->len == (const u8_t *)arg) {
 800b9ba:	685a      	ldr	r2, [r3, #4]
 800b9bc:	895b      	ldrh	r3, [r3, #10]
 800b9be:	4413      	add	r3, r2
 800b9c0:	9a08      	ldr	r2, [sp, #32]
 800b9c2:	429a      	cmp	r2, r3
 800b9c4:	d1e1      	bne.n	800b98a <tcp_write+0x1ae>
          LWIP_ASSERT("tcp_write: ROM pbufs cannot be oversized", pos == 0);
 800b9c6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b9c8:	b90b      	cbnz	r3, 800b9ce <tcp_write+0x1f2>
          extendlen = seglen;
 800b9ca:	940b      	str	r4, [sp, #44]	; 0x2c
 800b9cc:	e7f0      	b.n	800b9b0 <tcp_write+0x1d4>
          LWIP_ASSERT("tcp_write: ROM pbufs cannot be oversized", pos == 0);
 800b9ce:	4b4d      	ldr	r3, [pc, #308]	; (800bb04 <tcp_write+0x328>)
 800b9d0:	f44f 7203 	mov.w	r2, #524	; 0x20c
 800b9d4:	4951      	ldr	r1, [pc, #324]	; (800bb1c <tcp_write+0x340>)
 800b9d6:	484d      	ldr	r0, [pc, #308]	; (800bb0c <tcp_write+0x330>)
 800b9d8:	f002 f8f7 	bl	800dbca <iprintf>
          extendlen = seglen;
 800b9dc:	940b      	str	r4, [sp, #44]	; 0x2c
 800b9de:	e7e7      	b.n	800b9b0 <tcp_write+0x1d4>
    LWIP_ASSERT("unsent_oversize mismatch (pcb->unsent is NULL)",
 800b9e0:	4b48      	ldr	r3, [pc, #288]	; (800bb04 <tcp_write+0x328>)
 800b9e2:	f240 2225 	movw	r2, #549	; 0x225
 800b9e6:	494e      	ldr	r1, [pc, #312]	; (800bb20 <tcp_write+0x344>)
 800b9e8:	4848      	ldr	r0, [pc, #288]	; (800bb0c <tcp_write+0x330>)
 800b9ea:	f002 f8ee 	bl	800dbca <iprintf>
  struct tcp_seg *last_unsent = NULL, *seg = NULL, *prev_seg = NULL, *queue = NULL;
 800b9ee:	46d8      	mov	r8, fp
  u16_t extendlen = 0;
 800b9f0:	2300      	movs	r3, #0
 800b9f2:	930b      	str	r3, [sp, #44]	; 0x2c
  u16_t oversize_used = 0;
 800b9f4:	930a      	str	r3, [sp, #40]	; 0x28
  u16_t pos = 0; /* position in 'arg' data */
 800b9f6:	461c      	mov	r4, r3
  struct pbuf *concat_p = NULL;
 800b9f8:	930c      	str	r3, [sp, #48]	; 0x30
 800b9fa:	e003      	b.n	800ba04 <tcp_write+0x228>
 800b9fc:	9c0a      	ldr	r4, [sp, #40]	; 0x28
  u16_t extendlen = 0;
 800b9fe:	2300      	movs	r3, #0
 800ba00:	930b      	str	r3, [sp, #44]	; 0x2c
  struct pbuf *concat_p = NULL;
 800ba02:	930c      	str	r3, [sp, #48]	; 0x30
      queue = seg;
 800ba04:	2700      	movs	r7, #0
 800ba06:	f8cd b034 	str.w	fp, [sp, #52]	; 0x34
 800ba0a:	46bb      	mov	fp, r7
 800ba0c:	e060      	b.n	800bad0 <tcp_write+0x2f4>
 800ba0e:	9c0a      	ldr	r4, [sp, #40]	; 0x28
  struct pbuf *concat_p = NULL;
 800ba10:	2300      	movs	r3, #0
 800ba12:	930c      	str	r3, [sp, #48]	; 0x30
 800ba14:	e7f6      	b.n	800ba04 <tcp_write+0x228>
  u16_t extendlen = 0;
 800ba16:	930b      	str	r3, [sp, #44]	; 0x2c
 800ba18:	9c0a      	ldr	r4, [sp, #40]	; 0x28
  struct pbuf *concat_p = NULL;
 800ba1a:	2300      	movs	r3, #0
 800ba1c:	930c      	str	r3, [sp, #48]	; 0x30
 800ba1e:	e7f1      	b.n	800ba04 <tcp_write+0x228>
      if ((p = tcp_pbuf_prealloc(PBUF_TRANSPORT, seglen + optlen, mss_local, &oversize, pcb, apiflags, queue == NULL)) == NULL) {
 800ba20:	fab7 f387 	clz	r3, r7
 800ba24:	095b      	lsrs	r3, r3, #5
 800ba26:	9302      	str	r3, [sp, #8]
 800ba28:	9b06      	ldr	r3, [sp, #24]
 800ba2a:	9301      	str	r3, [sp, #4]
 800ba2c:	f8cd 9000 	str.w	r9, [sp]
 800ba30:	f10d 033e 	add.w	r3, sp, #62	; 0x3e
 800ba34:	9a05      	ldr	r2, [sp, #20]
 800ba36:	4629      	mov	r1, r5
 800ba38:	2000      	movs	r0, #0
 800ba3a:	f7ff fd87 	bl	800b54c <tcp_pbuf_prealloc>
 800ba3e:	4680      	mov	r8, r0
 800ba40:	2800      	cmp	r0, #0
 800ba42:	d07a      	beq.n	800bb3a <tcp_write+0x35e>
      LWIP_ASSERT("tcp_write: check that first pbuf can hold the complete seglen",
 800ba44:	8943      	ldrh	r3, [r0, #10]
 800ba46:	429d      	cmp	r5, r3
 800ba48:	d807      	bhi.n	800ba5a <tcp_write+0x27e>
      TCP_DATA_COPY2((char *)p->payload + optlen, (const u8_t*)arg + pos, seglen, &chksum, &chksum_swapped);
 800ba4a:	462a      	mov	r2, r5
 800ba4c:	9b08      	ldr	r3, [sp, #32]
 800ba4e:	1919      	adds	r1, r3, r4
 800ba50:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800ba54:	f002 fa25 	bl	800dea2 <memcpy>
 800ba58:	e01d      	b.n	800ba96 <tcp_write+0x2ba>
      LWIP_ASSERT("tcp_write: check that first pbuf can hold the complete seglen",
 800ba5a:	4b2a      	ldr	r3, [pc, #168]	; (800bb04 <tcp_write+0x328>)
 800ba5c:	f240 2241 	movw	r2, #577	; 0x241
 800ba60:	4930      	ldr	r1, [pc, #192]	; (800bb24 <tcp_write+0x348>)
 800ba62:	482a      	ldr	r0, [pc, #168]	; (800bb0c <tcp_write+0x330>)
 800ba64:	f002 f8b1 	bl	800dbca <iprintf>
 800ba68:	e7ef      	b.n	800ba4a <tcp_write+0x26e>
      if ((p2 = pbuf_alloc(PBUF_TRANSPORT, seglen, PBUF_ROM)) == NULL) {
 800ba6a:	2201      	movs	r2, #1
 800ba6c:	4629      	mov	r1, r5
 800ba6e:	2000      	movs	r0, #0
 800ba70:	f7fc fe54 	bl	800871c <pbuf_alloc>
 800ba74:	9007      	str	r0, [sp, #28]
 800ba76:	2800      	cmp	r0, #0
 800ba78:	d05f      	beq.n	800bb3a <tcp_write+0x35e>
      ((struct pbuf_rom*)p2)->payload = (const u8_t*)arg + pos;
 800ba7a:	9b08      	ldr	r3, [sp, #32]
 800ba7c:	4423      	add	r3, r4
 800ba7e:	6043      	str	r3, [r0, #4]
      if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 800ba80:	2200      	movs	r2, #0
 800ba82:	4611      	mov	r1, r2
 800ba84:	4610      	mov	r0, r2
 800ba86:	f7fc fe49 	bl	800871c <pbuf_alloc>
 800ba8a:	4680      	mov	r8, r0
 800ba8c:	2800      	cmp	r0, #0
 800ba8e:	d04d      	beq.n	800bb2c <tcp_write+0x350>
      pbuf_cat(p/*header*/, p2/*data*/);
 800ba90:	9907      	ldr	r1, [sp, #28]
 800ba92:	f7fc ffc3 	bl	8008a1c <pbuf_cat>
    queuelen += pbuf_clen(p);
 800ba96:	4640      	mov	r0, r8
 800ba98:	f7fc ff9a 	bl	80089d0 <pbuf_clen>
 800ba9c:	4406      	add	r6, r0
 800ba9e:	b2b6      	uxth	r6, r6
    if ((queuelen > TCP_SND_QUEUELEN) || (queuelen > TCP_SNDQUEUELEN_OVERFLOW)) {
 800baa0:	2e09      	cmp	r6, #9
 800baa2:	d847      	bhi.n	800bb34 <tcp_write+0x358>
    if ((seg = tcp_create_segment(pcb, p, 0, pcb->snd_lbb + pos, optflags)) == NULL) {
 800baa4:	f8d9 3058 	ldr.w	r3, [r9, #88]	; 0x58
 800baa8:	2200      	movs	r2, #0
 800baaa:	9200      	str	r2, [sp, #0]
 800baac:	4423      	add	r3, r4
 800baae:	4641      	mov	r1, r8
 800bab0:	4648      	mov	r0, r9
 800bab2:	f7ff fd8b 	bl	800b5cc <tcp_create_segment>
 800bab6:	4680      	mov	r8, r0
 800bab8:	2800      	cmp	r0, #0
 800baba:	d03e      	beq.n	800bb3a <tcp_write+0x35e>
    if (queue == NULL) {
 800babc:	2f00      	cmp	r7, #0
 800babe:	d069      	beq.n	800bb94 <tcp_write+0x3b8>
      LWIP_ASSERT("prev_seg != NULL", prev_seg != NULL);
 800bac0:	f1bb 0f00 	cmp.w	fp, #0
 800bac4:	d05e      	beq.n	800bb84 <tcp_write+0x3a8>
      prev_seg->next = seg;
 800bac6:	f8cb 8000 	str.w	r8, [fp]
    pos += seglen;
 800baca:	442c      	add	r4, r5
 800bacc:	b2a4      	uxth	r4, r4
    prev_seg = seg;
 800bace:	46c3      	mov	fp, r8
  while (pos < len) {
 800bad0:	4554      	cmp	r4, sl
 800bad2:	d261      	bcs.n	800bb98 <tcp_write+0x3bc>
    u16_t left = len - pos;
 800bad4:	ebaa 0504 	sub.w	r5, sl, r4
 800bad8:	b2ad      	uxth	r5, r5
    u16_t seglen = LWIP_MIN(left, max_len);
 800bada:	9b05      	ldr	r3, [sp, #20]
 800badc:	429d      	cmp	r5, r3
 800bade:	bf28      	it	cs
 800bae0:	461d      	movcs	r5, r3
    if (apiflags & TCP_WRITE_FLAG_COPY) {
 800bae2:	9b06      	ldr	r3, [sp, #24]
 800bae4:	f013 0f01 	tst.w	r3, #1
 800bae8:	d19a      	bne.n	800ba20 <tcp_write+0x244>
      LWIP_ASSERT("oversize == 0", oversize == 0);
 800baea:	f8bd 303e 	ldrh.w	r3, [sp, #62]	; 0x3e
 800baee:	2b00      	cmp	r3, #0
 800baf0:	d0bb      	beq.n	800ba6a <tcp_write+0x28e>
 800baf2:	4b04      	ldr	r3, [pc, #16]	; (800bb04 <tcp_write+0x328>)
 800baf4:	f240 224b 	movw	r2, #587	; 0x24b
 800baf8:	490b      	ldr	r1, [pc, #44]	; (800bb28 <tcp_write+0x34c>)
 800bafa:	4804      	ldr	r0, [pc, #16]	; (800bb0c <tcp_write+0x330>)
 800bafc:	f002 f865 	bl	800dbca <iprintf>
 800bb00:	e7b3      	b.n	800ba6a <tcp_write+0x28e>
 800bb02:	bf00      	nop
 800bb04:	0801035c 	.word	0x0801035c
 800bb08:	08010180 	.word	0x08010180
 800bb0c:	0800e3b0 	.word	0x0800e3b0
 800bb10:	080101ec 	.word	0x080101ec
 800bb14:	080101b4 	.word	0x080101b4
 800bb18:	080101cc 	.word	0x080101cc
 800bb1c:	0801020c 	.word	0x0801020c
 800bb20:	08010238 	.word	0x08010238
 800bb24:	08010268 	.word	0x08010268
 800bb28:	080102a8 	.word	0x080102a8
        pbuf_free(p2);
 800bb2c:	9807      	ldr	r0, [sp, #28]
 800bb2e:	f7fc fd89 	bl	8008644 <pbuf_free>
        goto memerr;
 800bb32:	e002      	b.n	800bb3a <tcp_write+0x35e>
      pbuf_free(p);
 800bb34:	4640      	mov	r0, r8
 800bb36:	f7fc fd85 	bl	8008644 <pbuf_free>
  pcb->flags |= TF_NAGLEMEMERR;
 800bb3a:	f899 301a 	ldrb.w	r3, [r9, #26]
 800bb3e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800bb42:	f889 301a 	strb.w	r3, [r9, #26]
  if (concat_p != NULL) {
 800bb46:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800bb48:	b113      	cbz	r3, 800bb50 <tcp_write+0x374>
    pbuf_free(concat_p);
 800bb4a:	4618      	mov	r0, r3
 800bb4c:	f7fc fd7a 	bl	8008644 <pbuf_free>
  if (queue != NULL) {
 800bb50:	b117      	cbz	r7, 800bb58 <tcp_write+0x37c>
    tcp_segs_free(queue);
 800bb52:	4638      	mov	r0, r7
 800bb54:	f7fd fa6f 	bl	8009036 <tcp_segs_free>
  if (pcb->snd_queuelen != 0) {
 800bb58:	f8b9 3062 	ldrh.w	r3, [r9, #98]	; 0x62
 800bb5c:	2b00      	cmp	r3, #0
 800bb5e:	f000 80c6 	beq.w	800bcee <tcp_write+0x512>
    LWIP_ASSERT("tcp_write: valid queue length", pcb->unacked != NULL ||
 800bb62:	f8d9 306c 	ldr.w	r3, [r9, #108]	; 0x6c
 800bb66:	2b00      	cmp	r3, #0
 800bb68:	f040 80c5 	bne.w	800bcf6 <tcp_write+0x51a>
 800bb6c:	f8d9 3068 	ldr.w	r3, [r9, #104]	; 0x68
 800bb70:	2b00      	cmp	r3, #0
 800bb72:	f000 80b1 	beq.w	800bcd8 <tcp_write+0x4fc>
  return ERR_MEM;
 800bb76:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800bb7a:	9309      	str	r3, [sp, #36]	; 0x24
}
 800bb7c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800bb7e:	b011      	add	sp, #68	; 0x44
 800bb80:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      LWIP_ASSERT("prev_seg != NULL", prev_seg != NULL);
 800bb84:	4b5e      	ldr	r3, [pc, #376]	; (800bd00 <tcp_write+0x524>)
 800bb86:	f240 2285 	movw	r2, #645	; 0x285
 800bb8a:	495e      	ldr	r1, [pc, #376]	; (800bd04 <tcp_write+0x528>)
 800bb8c:	485e      	ldr	r0, [pc, #376]	; (800bd08 <tcp_write+0x52c>)
 800bb8e:	f002 f81c 	bl	800dbca <iprintf>
 800bb92:	e798      	b.n	800bac6 <tcp_write+0x2ea>
      queue = seg;
 800bb94:	4607      	mov	r7, r0
 800bb96:	e798      	b.n	800baca <tcp_write+0x2ee>
 800bb98:	f8dd b034 	ldr.w	fp, [sp, #52]	; 0x34
  if (oversize_used > 0) {
 800bb9c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800bb9e:	b1e3      	cbz	r3, 800bbda <tcp_write+0x3fe>
    for (p = last_unsent->p; p; p = p->next) {
 800bba0:	f8db 4004 	ldr.w	r4, [fp, #4]
 800bba4:	461d      	mov	r5, r3
 800bba6:	e000      	b.n	800bbaa <tcp_write+0x3ce>
 800bba8:	6824      	ldr	r4, [r4, #0]
 800bbaa:	b184      	cbz	r4, 800bbce <tcp_write+0x3f2>
      p->tot_len += oversize_used;
 800bbac:	8923      	ldrh	r3, [r4, #8]
 800bbae:	442b      	add	r3, r5
 800bbb0:	8123      	strh	r3, [r4, #8]
      if (p->next == NULL) {
 800bbb2:	6823      	ldr	r3, [r4, #0]
 800bbb4:	2b00      	cmp	r3, #0
 800bbb6:	d1f7      	bne.n	800bba8 <tcp_write+0x3cc>
        TCP_DATA_COPY((char *)p->payload + p->len, arg, oversize_used, last_unsent);
 800bbb8:	6860      	ldr	r0, [r4, #4]
 800bbba:	8963      	ldrh	r3, [r4, #10]
 800bbbc:	462a      	mov	r2, r5
 800bbbe:	9908      	ldr	r1, [sp, #32]
 800bbc0:	4418      	add	r0, r3
 800bbc2:	f002 f96e 	bl	800dea2 <memcpy>
        p->len += oversize_used;
 800bbc6:	8963      	ldrh	r3, [r4, #10]
 800bbc8:	442b      	add	r3, r5
 800bbca:	8163      	strh	r3, [r4, #10]
 800bbcc:	e7ec      	b.n	800bba8 <tcp_write+0x3cc>
    last_unsent->len += oversize_used;
 800bbce:	f8bb 3008 	ldrh.w	r3, [fp, #8]
 800bbd2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800bbd4:	441a      	add	r2, r3
 800bbd6:	f8ab 2008 	strh.w	r2, [fp, #8]
  pcb->unsent_oversize = oversize;
 800bbda:	f8bd 303e 	ldrh.w	r3, [sp, #62]	; 0x3e
 800bbde:	f8a9 3064 	strh.w	r3, [r9, #100]	; 0x64
  if (concat_p != NULL) {
 800bbe2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800bbe4:	2b00      	cmp	r3, #0
 800bbe6:	d03f      	beq.n	800bc68 <tcp_write+0x48c>
    LWIP_ASSERT("tcp_write: cannot concatenate when pcb->unsent is empty",
 800bbe8:	f1bb 0f00 	cmp.w	fp, #0
 800bbec:	d034      	beq.n	800bc58 <tcp_write+0x47c>
    pbuf_cat(last_unsent->p, concat_p);
 800bbee:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 800bbf0:	4621      	mov	r1, r4
 800bbf2:	f8db 0004 	ldr.w	r0, [fp, #4]
 800bbf6:	f7fc ff11 	bl	8008a1c <pbuf_cat>
    last_unsent->len += concat_p->tot_len;
 800bbfa:	8923      	ldrh	r3, [r4, #8]
 800bbfc:	f8bb 2008 	ldrh.w	r2, [fp, #8]
 800bc00:	4413      	add	r3, r2
 800bc02:	f8ab 3008 	strh.w	r3, [fp, #8]
  if (last_unsent == NULL) {
 800bc06:	f1bb 0f00 	cmp.w	fp, #0
 800bc0a:	d056      	beq.n	800bcba <tcp_write+0x4de>
    last_unsent->next = queue;
 800bc0c:	f8cb 7000 	str.w	r7, [fp]
  pcb->snd_lbb += len;
 800bc10:	f8d9 3058 	ldr.w	r3, [r9, #88]	; 0x58
 800bc14:	4453      	add	r3, sl
 800bc16:	f8c9 3058 	str.w	r3, [r9, #88]	; 0x58
  pcb->snd_buf -= len;
 800bc1a:	f8b9 3060 	ldrh.w	r3, [r9, #96]	; 0x60
 800bc1e:	eba3 0a0a 	sub.w	sl, r3, sl
 800bc22:	f8a9 a060 	strh.w	sl, [r9, #96]	; 0x60
  pcb->snd_queuelen = queuelen;
 800bc26:	f8a9 6062 	strh.w	r6, [r9, #98]	; 0x62
  if (pcb->snd_queuelen != 0) {
 800bc2a:	b11e      	cbz	r6, 800bc34 <tcp_write+0x458>
    LWIP_ASSERT("tcp_write: valid queue length",
 800bc2c:	f8d9 306c 	ldr.w	r3, [r9, #108]	; 0x6c
 800bc30:	2b00      	cmp	r3, #0
 800bc32:	d045      	beq.n	800bcc0 <tcp_write+0x4e4>
  if (seg != NULL && seg->tcphdr != NULL && ((apiflags & TCP_WRITE_FLAG_MORE)==0)) {
 800bc34:	f1b8 0f00 	cmp.w	r8, #0
 800bc38:	d0a0      	beq.n	800bb7c <tcp_write+0x3a0>
 800bc3a:	f8d8 400c 	ldr.w	r4, [r8, #12]
 800bc3e:	2c00      	cmp	r4, #0
 800bc40:	d09c      	beq.n	800bb7c <tcp_write+0x3a0>
 800bc42:	9b06      	ldr	r3, [sp, #24]
 800bc44:	f013 0f02 	tst.w	r3, #2
 800bc48:	d198      	bne.n	800bb7c <tcp_write+0x3a0>
    TCPH_SET_FLAG(seg->tcphdr, TCP_PSH);
 800bc4a:	89a5      	ldrh	r5, [r4, #12]
 800bc4c:	2008      	movs	r0, #8
 800bc4e:	f7fa fcdd 	bl	800660c <lwip_htons>
 800bc52:	4328      	orrs	r0, r5
 800bc54:	81a0      	strh	r0, [r4, #12]
 800bc56:	e791      	b.n	800bb7c <tcp_write+0x3a0>
    LWIP_ASSERT("tcp_write: cannot concatenate when pcb->unsent is empty",
 800bc58:	4b29      	ldr	r3, [pc, #164]	; (800bd00 <tcp_write+0x524>)
 800bc5a:	f240 22bb 	movw	r2, #699	; 0x2bb
 800bc5e:	492b      	ldr	r1, [pc, #172]	; (800bd0c <tcp_write+0x530>)
 800bc60:	4829      	ldr	r0, [pc, #164]	; (800bd08 <tcp_write+0x52c>)
 800bc62:	f001 ffb2 	bl	800dbca <iprintf>
 800bc66:	e7c2      	b.n	800bbee <tcp_write+0x412>
  } else if (extendlen > 0) {
 800bc68:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800bc6a:	2b00      	cmp	r3, #0
 800bc6c:	d0cb      	beq.n	800bc06 <tcp_write+0x42a>
    LWIP_ASSERT("tcp_write: extension of reference requires reference",
 800bc6e:	f1bb 0f00 	cmp.w	fp, #0
 800bc72:	d006      	beq.n	800bc82 <tcp_write+0x4a6>
 800bc74:	f8db 3004 	ldr.w	r3, [fp, #4]
 800bc78:	b11b      	cbz	r3, 800bc82 <tcp_write+0x4a6>
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 800bc7a:	f8db 3004 	ldr.w	r3, [fp, #4]
 800bc7e:	980b      	ldr	r0, [sp, #44]	; 0x2c
 800bc80:	e00b      	b.n	800bc9a <tcp_write+0x4be>
    LWIP_ASSERT("tcp_write: extension of reference requires reference",
 800bc82:	4b1f      	ldr	r3, [pc, #124]	; (800bd00 <tcp_write+0x524>)
 800bc84:	f240 22c1 	movw	r2, #705	; 0x2c1
 800bc88:	4921      	ldr	r1, [pc, #132]	; (800bd10 <tcp_write+0x534>)
 800bc8a:	481f      	ldr	r0, [pc, #124]	; (800bd08 <tcp_write+0x52c>)
 800bc8c:	f001 ff9d 	bl	800dbca <iprintf>
 800bc90:	e7f3      	b.n	800bc7a <tcp_write+0x49e>
      p->tot_len += extendlen;
 800bc92:	891a      	ldrh	r2, [r3, #8]
 800bc94:	4402      	add	r2, r0
 800bc96:	811a      	strh	r2, [r3, #8]
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 800bc98:	460b      	mov	r3, r1
 800bc9a:	6819      	ldr	r1, [r3, #0]
 800bc9c:	2900      	cmp	r1, #0
 800bc9e:	d1f8      	bne.n	800bc92 <tcp_write+0x4b6>
    p->tot_len += extendlen;
 800bca0:	891a      	ldrh	r2, [r3, #8]
 800bca2:	980b      	ldr	r0, [sp, #44]	; 0x2c
 800bca4:	4402      	add	r2, r0
 800bca6:	811a      	strh	r2, [r3, #8]
    p->len += extendlen;
 800bca8:	895a      	ldrh	r2, [r3, #10]
 800bcaa:	4402      	add	r2, r0
 800bcac:	815a      	strh	r2, [r3, #10]
    last_unsent->len += extendlen;
 800bcae:	f8bb 3008 	ldrh.w	r3, [fp, #8]
 800bcb2:	4403      	add	r3, r0
 800bcb4:	f8ab 3008 	strh.w	r3, [fp, #8]
 800bcb8:	e7a5      	b.n	800bc06 <tcp_write+0x42a>
    pcb->unsent = queue;
 800bcba:	f8c9 7068 	str.w	r7, [r9, #104]	; 0x68
 800bcbe:	e7a7      	b.n	800bc10 <tcp_write+0x434>
    LWIP_ASSERT("tcp_write: valid queue length",
 800bcc0:	f8d9 3068 	ldr.w	r3, [r9, #104]	; 0x68
 800bcc4:	2b00      	cmp	r3, #0
 800bcc6:	d1b5      	bne.n	800bc34 <tcp_write+0x458>
 800bcc8:	4b0d      	ldr	r3, [pc, #52]	; (800bd00 <tcp_write+0x524>)
 800bcca:	f240 22ed 	movw	r2, #749	; 0x2ed
 800bcce:	4911      	ldr	r1, [pc, #68]	; (800bd14 <tcp_write+0x538>)
 800bcd0:	480d      	ldr	r0, [pc, #52]	; (800bd08 <tcp_write+0x52c>)
 800bcd2:	f001 ff7a 	bl	800dbca <iprintf>
 800bcd6:	e7ad      	b.n	800bc34 <tcp_write+0x458>
    LWIP_ASSERT("tcp_write: valid queue length", pcb->unacked != NULL ||
 800bcd8:	4b09      	ldr	r3, [pc, #36]	; (800bd00 <tcp_write+0x524>)
 800bcda:	f240 3202 	movw	r2, #770	; 0x302
 800bcde:	490d      	ldr	r1, [pc, #52]	; (800bd14 <tcp_write+0x538>)
 800bce0:	4809      	ldr	r0, [pc, #36]	; (800bd08 <tcp_write+0x52c>)
 800bce2:	f001 ff72 	bl	800dbca <iprintf>
  return ERR_MEM;
 800bce6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800bcea:	9309      	str	r3, [sp, #36]	; 0x24
 800bcec:	e746      	b.n	800bb7c <tcp_write+0x3a0>
 800bcee:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800bcf2:	9309      	str	r3, [sp, #36]	; 0x24
 800bcf4:	e742      	b.n	800bb7c <tcp_write+0x3a0>
 800bcf6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800bcfa:	9309      	str	r3, [sp, #36]	; 0x24
 800bcfc:	e73e      	b.n	800bb7c <tcp_write+0x3a0>
 800bcfe:	bf00      	nop
 800bd00:	0801035c 	.word	0x0801035c
 800bd04:	080102b8 	.word	0x080102b8
 800bd08:	0800e3b0 	.word	0x0800e3b0
 800bd0c:	080102cc 	.word	0x080102cc
 800bd10:	08010304 	.word	0x08010304
 800bd14:	0801033c 	.word	0x0801033c

0800bd18 <tcp_enqueue_flags>:
{
 800bd18:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800bd1c:	b083      	sub	sp, #12
 800bd1e:	4604      	mov	r4, r0
 800bd20:	460d      	mov	r5, r1
  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 800bd22:	f011 0703 	ands.w	r7, r1, #3
 800bd26:	d030      	beq.n	800bd8a <tcp_enqueue_flags+0x72>
  if (((pcb->snd_queuelen >= TCP_SND_QUEUELEN) || (pcb->snd_queuelen > TCP_SNDQUEUELEN_OVERFLOW)) &&
 800bd28:	f8b4 3062 	ldrh.w	r3, [r4, #98]	; 0x62
 800bd2c:	2b08      	cmp	r3, #8
 800bd2e:	d902      	bls.n	800bd36 <tcp_enqueue_flags+0x1e>
 800bd30:	f015 0f01 	tst.w	r5, #1
 800bd34:	d031      	beq.n	800bd9a <tcp_enqueue_flags+0x82>
  if (flags & TCP_SYN) {
 800bd36:	f015 0f02 	tst.w	r5, #2
 800bd3a:	d135      	bne.n	800bda8 <tcp_enqueue_flags+0x90>
  u8_t optflags = 0;
 800bd3c:	f04f 0900 	mov.w	r9, #0
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 800bd40:	f1b9 0f00 	cmp.w	r9, #0
 800bd44:	d033      	beq.n	800bdae <tcp_enqueue_flags+0x96>
 800bd46:	2604      	movs	r6, #4
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 800bd48:	b2b6      	uxth	r6, r6
 800bd4a:	2200      	movs	r2, #0
 800bd4c:	4631      	mov	r1, r6
 800bd4e:	4610      	mov	r0, r2
 800bd50:	f7fc fce4 	bl	800871c <pbuf_alloc>
 800bd54:	4680      	mov	r8, r0
 800bd56:	b360      	cbz	r0, 800bdb2 <tcp_enqueue_flags+0x9a>
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 800bd58:	8943      	ldrh	r3, [r0, #10]
 800bd5a:	429e      	cmp	r6, r3
 800bd5c:	d830      	bhi.n	800bdc0 <tcp_enqueue_flags+0xa8>
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 800bd5e:	f8cd 9000 	str.w	r9, [sp]
 800bd62:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800bd64:	462a      	mov	r2, r5
 800bd66:	4641      	mov	r1, r8
 800bd68:	4620      	mov	r0, r4
 800bd6a:	f7ff fc2f 	bl	800b5cc <tcp_create_segment>
 800bd6e:	4606      	mov	r6, r0
 800bd70:	b370      	cbz	r0, 800bdd0 <tcp_enqueue_flags+0xb8>
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 800bd72:	68c3      	ldr	r3, [r0, #12]
 800bd74:	f013 0f03 	tst.w	r3, #3
 800bd78:	d131      	bne.n	800bdde <tcp_enqueue_flags+0xc6>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 800bd7a:	8933      	ldrh	r3, [r6, #8]
 800bd7c:	2b00      	cmp	r3, #0
 800bd7e:	d136      	bne.n	800bdee <tcp_enqueue_flags+0xd6>
  if (pcb->unsent == NULL) {
 800bd80:	6ea2      	ldr	r2, [r4, #104]	; 0x68
 800bd82:	2a00      	cmp	r2, #0
 800bd84:	d13c      	bne.n	800be00 <tcp_enqueue_flags+0xe8>
    pcb->unsent = seg;
 800bd86:	66a6      	str	r6, [r4, #104]	; 0x68
 800bd88:	e03e      	b.n	800be08 <tcp_enqueue_flags+0xf0>
  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 800bd8a:	4b36      	ldr	r3, [pc, #216]	; (800be64 <tcp_enqueue_flags+0x14c>)
 800bd8c:	f240 321b 	movw	r2, #795	; 0x31b
 800bd90:	4935      	ldr	r1, [pc, #212]	; (800be68 <tcp_enqueue_flags+0x150>)
 800bd92:	4836      	ldr	r0, [pc, #216]	; (800be6c <tcp_enqueue_flags+0x154>)
 800bd94:	f001 ff19 	bl	800dbca <iprintf>
 800bd98:	e7c6      	b.n	800bd28 <tcp_enqueue_flags+0x10>
    pcb->flags |= TF_NAGLEMEMERR;
 800bd9a:	7ea3      	ldrb	r3, [r4, #26]
 800bd9c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800bda0:	76a3      	strb	r3, [r4, #26]
    return ERR_MEM;
 800bda2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800bda6:	e04a      	b.n	800be3e <tcp_enqueue_flags+0x126>
    optflags = TF_SEG_OPTS_MSS;
 800bda8:	f04f 0901 	mov.w	r9, #1
 800bdac:	e7c8      	b.n	800bd40 <tcp_enqueue_flags+0x28>
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 800bdae:	2600      	movs	r6, #0
 800bdb0:	e7ca      	b.n	800bd48 <tcp_enqueue_flags+0x30>
    pcb->flags |= TF_NAGLEMEMERR;
 800bdb2:	7ea3      	ldrb	r3, [r4, #26]
 800bdb4:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800bdb8:	76a3      	strb	r3, [r4, #26]
    return ERR_MEM;
 800bdba:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800bdbe:	e03e      	b.n	800be3e <tcp_enqueue_flags+0x126>
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 800bdc0:	4b28      	ldr	r3, [pc, #160]	; (800be64 <tcp_enqueue_flags+0x14c>)
 800bdc2:	f240 3241 	movw	r2, #833	; 0x341
 800bdc6:	492a      	ldr	r1, [pc, #168]	; (800be70 <tcp_enqueue_flags+0x158>)
 800bdc8:	4828      	ldr	r0, [pc, #160]	; (800be6c <tcp_enqueue_flags+0x154>)
 800bdca:	f001 fefe 	bl	800dbca <iprintf>
 800bdce:	e7c6      	b.n	800bd5e <tcp_enqueue_flags+0x46>
    pcb->flags |= TF_NAGLEMEMERR;
 800bdd0:	7ea3      	ldrb	r3, [r4, #26]
 800bdd2:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800bdd6:	76a3      	strb	r3, [r4, #26]
    return ERR_MEM;
 800bdd8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800bddc:	e02f      	b.n	800be3e <tcp_enqueue_flags+0x126>
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 800bdde:	4b21      	ldr	r3, [pc, #132]	; (800be64 <tcp_enqueue_flags+0x14c>)
 800bde0:	f240 3249 	movw	r2, #841	; 0x349
 800bde4:	4923      	ldr	r1, [pc, #140]	; (800be74 <tcp_enqueue_flags+0x15c>)
 800bde6:	4821      	ldr	r0, [pc, #132]	; (800be6c <tcp_enqueue_flags+0x154>)
 800bde8:	f001 feef 	bl	800dbca <iprintf>
 800bdec:	e7c5      	b.n	800bd7a <tcp_enqueue_flags+0x62>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 800bdee:	4b1d      	ldr	r3, [pc, #116]	; (800be64 <tcp_enqueue_flags+0x14c>)
 800bdf0:	f240 324a 	movw	r2, #842	; 0x34a
 800bdf4:	4920      	ldr	r1, [pc, #128]	; (800be78 <tcp_enqueue_flags+0x160>)
 800bdf6:	481d      	ldr	r0, [pc, #116]	; (800be6c <tcp_enqueue_flags+0x154>)
 800bdf8:	f001 fee7 	bl	800dbca <iprintf>
 800bdfc:	e7c0      	b.n	800bd80 <tcp_enqueue_flags+0x68>
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 800bdfe:	461a      	mov	r2, r3
 800be00:	6813      	ldr	r3, [r2, #0]
 800be02:	2b00      	cmp	r3, #0
 800be04:	d1fb      	bne.n	800bdfe <tcp_enqueue_flags+0xe6>
    useg->next = seg;
 800be06:	6016      	str	r6, [r2, #0]
  pcb->unsent_oversize = 0;
 800be08:	2300      	movs	r3, #0
 800be0a:	f8a4 3064 	strh.w	r3, [r4, #100]	; 0x64
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 800be0e:	b117      	cbz	r7, 800be16 <tcp_enqueue_flags+0xfe>
    pcb->snd_lbb++;
 800be10:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800be12:	3301      	adds	r3, #1
 800be14:	65a3      	str	r3, [r4, #88]	; 0x58
  if (flags & TCP_FIN) {
 800be16:	f015 0f01 	tst.w	r5, #1
 800be1a:	d003      	beq.n	800be24 <tcp_enqueue_flags+0x10c>
    pcb->flags |= TF_FIN;
 800be1c:	7ea3      	ldrb	r3, [r4, #26]
 800be1e:	f043 0320 	orr.w	r3, r3, #32
 800be22:	76a3      	strb	r3, [r4, #26]
  pcb->snd_queuelen += pbuf_clen(seg->p);
 800be24:	6870      	ldr	r0, [r6, #4]
 800be26:	f7fc fdd3 	bl	80089d0 <pbuf_clen>
 800be2a:	f8b4 3062 	ldrh.w	r3, [r4, #98]	; 0x62
 800be2e:	4418      	add	r0, r3
 800be30:	b280      	uxth	r0, r0
 800be32:	f8a4 0062 	strh.w	r0, [r4, #98]	; 0x62
  if (pcb->snd_queuelen != 0) {
 800be36:	b190      	cbz	r0, 800be5e <tcp_enqueue_flags+0x146>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 800be38:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 800be3a:	b11b      	cbz	r3, 800be44 <tcp_enqueue_flags+0x12c>
  return ERR_OK;
 800be3c:	2000      	movs	r0, #0
}
 800be3e:	b003      	add	sp, #12
 800be40:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 800be44:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 800be46:	b10b      	cbz	r3, 800be4c <tcp_enqueue_flags+0x134>
  return ERR_OK;
 800be48:	2000      	movs	r0, #0
 800be4a:	e7f8      	b.n	800be3e <tcp_enqueue_flags+0x126>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 800be4c:	4b05      	ldr	r3, [pc, #20]	; (800be64 <tcp_enqueue_flags+0x14c>)
 800be4e:	f240 326d 	movw	r2, #877	; 0x36d
 800be52:	490a      	ldr	r1, [pc, #40]	; (800be7c <tcp_enqueue_flags+0x164>)
 800be54:	4805      	ldr	r0, [pc, #20]	; (800be6c <tcp_enqueue_flags+0x154>)
 800be56:	f001 feb8 	bl	800dbca <iprintf>
  return ERR_OK;
 800be5a:	2000      	movs	r0, #0
 800be5c:	e7ef      	b.n	800be3e <tcp_enqueue_flags+0x126>
 800be5e:	2000      	movs	r0, #0
 800be60:	e7ed      	b.n	800be3e <tcp_enqueue_flags+0x126>
 800be62:	bf00      	nop
 800be64:	0801035c 	.word	0x0801035c
 800be68:	0800fffc 	.word	0x0800fffc
 800be6c:	0800e3b0 	.word	0x0800e3b0
 800be70:	08010054 	.word	0x08010054
 800be74:	08010090 	.word	0x08010090
 800be78:	080100a8 	.word	0x080100a8
 800be7c:	080100d4 	.word	0x080100d4

0800be80 <tcp_send_fin>:
{
 800be80:	b570      	push	{r4, r5, r6, lr}
 800be82:	4605      	mov	r5, r0
  if (pcb->unsent != NULL) {
 800be84:	6e84      	ldr	r4, [r0, #104]	; 0x68
 800be86:	b90c      	cbnz	r4, 800be8c <tcp_send_fin+0xc>
 800be88:	e00a      	b.n	800bea0 <tcp_send_fin+0x20>
         last_unsent = last_unsent->next);
 800be8a:	461c      	mov	r4, r3
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 800be8c:	6823      	ldr	r3, [r4, #0]
 800be8e:	2b00      	cmp	r3, #0
 800be90:	d1fb      	bne.n	800be8a <tcp_send_fin+0xa>
    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 800be92:	68e3      	ldr	r3, [r4, #12]
 800be94:	8998      	ldrh	r0, [r3, #12]
 800be96:	f7fa fbb9 	bl	800660c <lwip_htons>
 800be9a:	f010 0f07 	tst.w	r0, #7
 800be9e:	d004      	beq.n	800beaa <tcp_send_fin+0x2a>
  return tcp_enqueue_flags(pcb, TCP_FIN);
 800bea0:	2101      	movs	r1, #1
 800bea2:	4628      	mov	r0, r5
 800bea4:	f7ff ff38 	bl	800bd18 <tcp_enqueue_flags>
}
 800bea8:	bd70      	pop	{r4, r5, r6, pc}
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 800beaa:	68e6      	ldr	r6, [r4, #12]
 800beac:	89b4      	ldrh	r4, [r6, #12]
 800beae:	2001      	movs	r0, #1
 800beb0:	f7fa fbac 	bl	800660c <lwip_htons>
 800beb4:	4320      	orrs	r0, r4
 800beb6:	81b0      	strh	r0, [r6, #12]
      pcb->flags |= TF_FIN;
 800beb8:	7eab      	ldrb	r3, [r5, #26]
 800beba:	f043 0320 	orr.w	r3, r3, #32
 800bebe:	76ab      	strb	r3, [r5, #26]
      return ERR_OK;
 800bec0:	2000      	movs	r0, #0
 800bec2:	bd70      	pop	{r4, r5, r6, pc}

0800bec4 <tcp_send_empty_ack>:
{
 800bec4:	b570      	push	{r4, r5, r6, lr}
 800bec6:	b084      	sub	sp, #16
 800bec8:	4604      	mov	r4, r0
  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 800beca:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
 800becc:	f7fa fba1 	bl	8006612 <lwip_htonl>
 800bed0:	4603      	mov	r3, r0
 800bed2:	2200      	movs	r2, #0
 800bed4:	4611      	mov	r1, r2
 800bed6:	4620      	mov	r0, r4
 800bed8:	f7ff fbd8 	bl	800b68c <tcp_output_alloc_header>
  if (p == NULL) {
 800bedc:	b1e0      	cbz	r0, 800bf18 <tcp_send_empty_ack+0x54>
 800bede:	4606      	mov	r6, r0
  netif = ip_route(&pcb->local_ip, &pcb->remote_ip);
 800bee0:	1d25      	adds	r5, r4, #4
 800bee2:	4628      	mov	r0, r5
 800bee4:	f7fb f93c 	bl	8007160 <ip4_route>
  if (netif == NULL) {
 800bee8:	b1e8      	cbz	r0, 800bf26 <tcp_send_empty_ack+0x62>
    err = ip_output_if(p, &pcb->local_ip, &pcb->remote_ip,
 800beea:	7aa3      	ldrb	r3, [r4, #10]
 800beec:	7a61      	ldrb	r1, [r4, #9]
 800beee:	9002      	str	r0, [sp, #8]
 800bef0:	2206      	movs	r2, #6
 800bef2:	9201      	str	r2, [sp, #4]
 800bef4:	9100      	str	r1, [sp, #0]
 800bef6:	462a      	mov	r2, r5
 800bef8:	4621      	mov	r1, r4
 800befa:	4630      	mov	r0, r6
 800befc:	f7fb fad6 	bl	80074ac <ip4_output_if>
 800bf00:	4605      	mov	r5, r0
  pbuf_free(p);
 800bf02:	4630      	mov	r0, r6
 800bf04:	f7fc fb9e 	bl	8008644 <pbuf_free>
  if (err != ERR_OK) {
 800bf08:	b985      	cbnz	r5, 800bf2c <tcp_send_empty_ack+0x68>
    pcb->flags &= ~(TF_ACK_DELAY | TF_ACK_NOW);
 800bf0a:	7ea3      	ldrb	r3, [r4, #26]
 800bf0c:	f023 0303 	bic.w	r3, r3, #3
 800bf10:	76a3      	strb	r3, [r4, #26]
}
 800bf12:	4628      	mov	r0, r5
 800bf14:	b004      	add	sp, #16
 800bf16:	bd70      	pop	{r4, r5, r6, pc}
    pcb->flags |= (TF_ACK_DELAY | TF_ACK_NOW);
 800bf18:	7ea3      	ldrb	r3, [r4, #26]
 800bf1a:	f043 0303 	orr.w	r3, r3, #3
 800bf1e:	76a3      	strb	r3, [r4, #26]
    return ERR_BUF;
 800bf20:	f06f 0501 	mvn.w	r5, #1
 800bf24:	e7f5      	b.n	800bf12 <tcp_send_empty_ack+0x4e>
    err = ERR_RTE;
 800bf26:	f06f 0503 	mvn.w	r5, #3
 800bf2a:	e7ea      	b.n	800bf02 <tcp_send_empty_ack+0x3e>
    pcb->flags |= (TF_ACK_DELAY | TF_ACK_NOW);
 800bf2c:	7ea3      	ldrb	r3, [r4, #26]
 800bf2e:	f043 0303 	orr.w	r3, r3, #3
 800bf32:	76a3      	strb	r3, [r4, #26]
 800bf34:	e7ed      	b.n	800bf12 <tcp_send_empty_ack+0x4e>
	...

0800bf38 <tcp_output>:
{
 800bf38:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bf3c:	4605      	mov	r5, r0
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 800bf3e:	7d03      	ldrb	r3, [r0, #20]
 800bf40:	2b01      	cmp	r3, #1
 800bf42:	d01e      	beq.n	800bf82 <tcp_output+0x4a>
  if (tcp_input_pcb == pcb) {
 800bf44:	4ba5      	ldr	r3, [pc, #660]	; (800c1dc <tcp_output+0x2a4>)
 800bf46:	681b      	ldr	r3, [r3, #0]
 800bf48:	429d      	cmp	r5, r3
 800bf4a:	f000 813e 	beq.w	800c1ca <tcp_output+0x292>
  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 800bf4e:	f8b5 305c 	ldrh.w	r3, [r5, #92]	; 0x5c
 800bf52:	f8b5 7048 	ldrh.w	r7, [r5, #72]	; 0x48
 800bf56:	42bb      	cmp	r3, r7
 800bf58:	d200      	bcs.n	800bf5c <tcp_output+0x24>
 800bf5a:	461f      	mov	r7, r3
  seg = pcb->unsent;
 800bf5c:	6eac      	ldr	r4, [r5, #104]	; 0x68
  if (pcb->flags & TF_ACK_NOW &&
 800bf5e:	7eab      	ldrb	r3, [r5, #26]
 800bf60:	f013 0f02 	tst.w	r3, #2
 800bf64:	d00a      	beq.n	800bf7c <tcp_output+0x44>
 800bf66:	b1a4      	cbz	r4, 800bf92 <tcp_output+0x5a>
      lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd)) {
 800bf68:	68e3      	ldr	r3, [r4, #12]
 800bf6a:	6858      	ldr	r0, [r3, #4]
 800bf6c:	f7fa fb51 	bl	8006612 <lwip_htonl>
 800bf70:	6c6b      	ldr	r3, [r5, #68]	; 0x44
 800bf72:	1ac3      	subs	r3, r0, r3
 800bf74:	8920      	ldrh	r0, [r4, #8]
 800bf76:	4403      	add	r3, r0
     (seg == NULL ||
 800bf78:	429f      	cmp	r7, r3
 800bf7a:	d30a      	bcc.n	800bf92 <tcp_output+0x5a>
  useg = pcb->unacked;
 800bf7c:	6eee      	ldr	r6, [r5, #108]	; 0x6c
  if (useg != NULL) {
 800bf7e:	b976      	cbnz	r6, 800bf9e <tcp_output+0x66>
 800bf80:	e010      	b.n	800bfa4 <tcp_output+0x6c>
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 800bf82:	4b97      	ldr	r3, [pc, #604]	; (800c1e0 <tcp_output+0x2a8>)
 800bf84:	f240 32ed 	movw	r2, #1005	; 0x3ed
 800bf88:	4996      	ldr	r1, [pc, #600]	; (800c1e4 <tcp_output+0x2ac>)
 800bf8a:	4897      	ldr	r0, [pc, #604]	; (800c1e8 <tcp_output+0x2b0>)
 800bf8c:	f001 fe1d 	bl	800dbca <iprintf>
 800bf90:	e7d8      	b.n	800bf44 <tcp_output+0xc>
     return tcp_send_empty_ack(pcb);
 800bf92:	4628      	mov	r0, r5
 800bf94:	f7ff ff96 	bl	800bec4 <tcp_send_empty_ack>
 800bf98:	4603      	mov	r3, r0
 800bf9a:	e03f      	b.n	800c01c <tcp_output+0xe4>
    for (; useg->next != NULL; useg = useg->next);
 800bf9c:	461e      	mov	r6, r3
 800bf9e:	6833      	ldr	r3, [r6, #0]
 800bfa0:	2b00      	cmp	r3, #0
 800bfa2:	d1fb      	bne.n	800bf9c <tcp_output+0x64>
  netif = ip_route(&pcb->local_ip, &pcb->remote_ip);
 800bfa4:	1d28      	adds	r0, r5, #4
 800bfa6:	f7fb f8db 	bl	8007160 <ip4_route>
  if (netif == NULL) {
 800bfaa:	4680      	mov	r8, r0
 800bfac:	2800      	cmp	r0, #0
 800bfae:	f000 810e 	beq.w	800c1ce <tcp_output+0x296>
  if (ip_addr_isany(&pcb->local_ip)) {
 800bfb2:	b10d      	cbz	r5, 800bfb8 <tcp_output+0x80>
 800bfb4:	682b      	ldr	r3, [r5, #0]
 800bfb6:	b933      	cbnz	r3, 800bfc6 <tcp_output+0x8e>
    if (local_ip == NULL) {
 800bfb8:	f118 0f04 	cmn.w	r8, #4
 800bfbc:	f000 810a 	beq.w	800c1d4 <tcp_output+0x29c>
    ip_addr_copy(pcb->local_ip, *local_ip);
 800bfc0:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800bfc4:	602b      	str	r3, [r5, #0]
  if (seg != NULL &&
 800bfc6:	2c00      	cmp	r4, #0
 800bfc8:	f000 80a2 	beq.w	800c110 <tcp_output+0x1d8>
      lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd &&
 800bfcc:	68e3      	ldr	r3, [r4, #12]
 800bfce:	6858      	ldr	r0, [r3, #4]
 800bfd0:	f7fa fb1f 	bl	8006612 <lwip_htonl>
 800bfd4:	6c6b      	ldr	r3, [r5, #68]	; 0x44
 800bfd6:	1ac3      	subs	r3, r0, r3
 800bfd8:	8920      	ldrh	r0, [r4, #8]
 800bfda:	4403      	add	r3, r0
  if (seg != NULL &&
 800bfdc:	429f      	cmp	r7, r3
 800bfde:	f080 8097 	bcs.w	800c110 <tcp_output+0x1d8>
      lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd &&
 800bfe2:	2f00      	cmp	r7, #0
 800bfe4:	f000 8094 	beq.w	800c110 <tcp_output+0x1d8>
      wnd > 0 && wnd == pcb->snd_wnd && pcb->unacked == NULL) {
 800bfe8:	f8b5 305c 	ldrh.w	r3, [r5, #92]	; 0x5c
 800bfec:	429f      	cmp	r7, r3
 800bfee:	f040 808f 	bne.w	800c110 <tcp_output+0x1d8>
 800bff2:	6eeb      	ldr	r3, [r5, #108]	; 0x6c
 800bff4:	2b00      	cmp	r3, #0
 800bff6:	f040 808b 	bne.w	800c110 <tcp_output+0x1d8>
    if (pcb->persist_backoff == 0) {
 800bffa:	f895 3095 	ldrb.w	r3, [r5, #149]	; 0x95
 800bffe:	b923      	cbnz	r3, 800c00a <tcp_output+0xd2>
      pcb->persist_cnt = 0;
 800c000:	f885 3094 	strb.w	r3, [r5, #148]	; 0x94
      pcb->persist_backoff = 1;
 800c004:	2301      	movs	r3, #1
 800c006:	f885 3095 	strb.w	r3, [r5, #149]	; 0x95
  if (pcb->unsent == NULL) {
 800c00a:	6eab      	ldr	r3, [r5, #104]	; 0x68
 800c00c:	2b00      	cmp	r3, #0
 800c00e:	f000 80d9 	beq.w	800c1c4 <tcp_output+0x28c>
  pcb->flags &= ~TF_NAGLEMEMERR;
 800c012:	7eab      	ldrb	r3, [r5, #26]
 800c014:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c018:	76ab      	strb	r3, [r5, #26]
  return ERR_OK;
 800c01a:	2300      	movs	r3, #0
}
 800c01c:	4618      	mov	r0, r3
 800c01e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    LWIP_ASSERT("RST not expected here!",
 800c022:	4b6f      	ldr	r3, [pc, #444]	; (800c1e0 <tcp_output+0x2a8>)
 800c024:	f240 4246 	movw	r2, #1094	; 0x446
 800c028:	4970      	ldr	r1, [pc, #448]	; (800c1ec <tcp_output+0x2b4>)
 800c02a:	486f      	ldr	r0, [pc, #444]	; (800c1e8 <tcp_output+0x2b0>)
 800c02c:	f001 fdcd 	bl	800dbca <iprintf>
 800c030:	e084      	b.n	800c13c <tcp_output+0x204>
    if ((tcp_do_output_nagle(pcb) == 0) &&
 800c032:	891a      	ldrh	r2, [r3, #8]
 800c034:	8e6b      	ldrh	r3, [r5, #50]	; 0x32
 800c036:	429a      	cmp	r2, r3
 800c038:	f080 8091 	bcs.w	800c15e <tcp_output+0x226>
 800c03c:	f8b5 3060 	ldrh.w	r3, [r5, #96]	; 0x60
 800c040:	2b00      	cmp	r3, #0
 800c042:	f000 808e 	beq.w	800c162 <tcp_output+0x22a>
 800c046:	f8b5 3062 	ldrh.w	r3, [r5, #98]	; 0x62
 800c04a:	2b08      	cmp	r3, #8
 800c04c:	f240 808b 	bls.w	800c166 <tcp_output+0x22e>
 800c050:	2301      	movs	r3, #1
 800c052:	e002      	b.n	800c05a <tcp_output+0x122>
 800c054:	2301      	movs	r3, #1
 800c056:	e000      	b.n	800c05a <tcp_output+0x122>
 800c058:	2301      	movs	r3, #1
 800c05a:	b91b      	cbnz	r3, 800c064 <tcp_output+0x12c>
      ((pcb->flags & (TF_NAGLEMEMERR | TF_FIN)) == 0)) {
 800c05c:	7eab      	ldrb	r3, [r5, #26]
    if ((tcp_do_output_nagle(pcb) == 0) &&
 800c05e:	f013 0fa0 	tst.w	r3, #160	; 0xa0
 800c062:	d0d2      	beq.n	800c00a <tcp_output+0xd2>
    if (pcb->state != SYN_SENT) {
 800c064:	7d2b      	ldrb	r3, [r5, #20]
 800c066:	2b02      	cmp	r3, #2
 800c068:	d00a      	beq.n	800c080 <tcp_output+0x148>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 800c06a:	f8d4 a00c 	ldr.w	sl, [r4, #12]
 800c06e:	f8ba 900c 	ldrh.w	r9, [sl, #12]
 800c072:	2010      	movs	r0, #16
 800c074:	f7fa faca 	bl	800660c <lwip_htons>
 800c078:	ea49 0000 	orr.w	r0, r9, r0
 800c07c:	f8aa 000c 	strh.w	r0, [sl, #12]
    err = tcp_output_segment(seg, pcb, netif);
 800c080:	4642      	mov	r2, r8
 800c082:	4629      	mov	r1, r5
 800c084:	4620      	mov	r0, r4
 800c086:	f7ff fb4b 	bl	800b720 <tcp_output_segment>
    if (err != ERR_OK) {
 800c08a:	4603      	mov	r3, r0
 800c08c:	2800      	cmp	r0, #0
 800c08e:	d16c      	bne.n	800c16a <tcp_output+0x232>
    pcb->unsent = seg->next;
 800c090:	6823      	ldr	r3, [r4, #0]
 800c092:	66ab      	str	r3, [r5, #104]	; 0x68
    if (pcb->state != SYN_SENT) {
 800c094:	7d2b      	ldrb	r3, [r5, #20]
 800c096:	2b02      	cmp	r3, #2
 800c098:	d003      	beq.n	800c0a2 <tcp_output+0x16a>
      pcb->flags &= ~(TF_ACK_DELAY | TF_ACK_NOW);
 800c09a:	7eab      	ldrb	r3, [r5, #26]
 800c09c:	f023 0303 	bic.w	r3, r3, #3
 800c0a0:	76ab      	strb	r3, [r5, #26]
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 800c0a2:	68e3      	ldr	r3, [r4, #12]
 800c0a4:	6858      	ldr	r0, [r3, #4]
 800c0a6:	f7fa fab4 	bl	8006612 <lwip_htonl>
 800c0aa:	4681      	mov	r9, r0
 800c0ac:	f8b4 a008 	ldrh.w	sl, [r4, #8]
 800c0b0:	68e3      	ldr	r3, [r4, #12]
 800c0b2:	8998      	ldrh	r0, [r3, #12]
 800c0b4:	f7fa faaa 	bl	800660c <lwip_htons>
 800c0b8:	f010 0f03 	tst.w	r0, #3
 800c0bc:	d05a      	beq.n	800c174 <tcp_output+0x23c>
 800c0be:	2001      	movs	r0, #1
 800c0c0:	4450      	add	r0, sl
 800c0c2:	4448      	add	r0, r9
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 800c0c4:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
 800c0c6:	1a1b      	subs	r3, r3, r0
 800c0c8:	2b00      	cmp	r3, #0
 800c0ca:	db55      	blt.n	800c178 <tcp_output+0x240>
    if (TCP_TCPLEN(seg) > 0) {
 800c0cc:	f8b4 9008 	ldrh.w	r9, [r4, #8]
 800c0d0:	68e3      	ldr	r3, [r4, #12]
 800c0d2:	8998      	ldrh	r0, [r3, #12]
 800c0d4:	f7fa fa9a 	bl	800660c <lwip_htons>
 800c0d8:	f010 0f03 	tst.w	r0, #3
 800c0dc:	d04e      	beq.n	800c17c <tcp_output+0x244>
 800c0de:	2301      	movs	r3, #1
 800c0e0:	eb13 0f09 	cmn.w	r3, r9
 800c0e4:	d06a      	beq.n	800c1bc <tcp_output+0x284>
      seg->next = NULL;
 800c0e6:	2300      	movs	r3, #0
 800c0e8:	6023      	str	r3, [r4, #0]
      if (pcb->unacked == NULL) {
 800c0ea:	6eeb      	ldr	r3, [r5, #108]	; 0x6c
 800c0ec:	2b00      	cmp	r3, #0
 800c0ee:	d047      	beq.n	800c180 <tcp_output+0x248>
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 800c0f0:	68e3      	ldr	r3, [r4, #12]
 800c0f2:	6858      	ldr	r0, [r3, #4]
 800c0f4:	f7fa fa8d 	bl	8006612 <lwip_htonl>
 800c0f8:	4681      	mov	r9, r0
 800c0fa:	68f3      	ldr	r3, [r6, #12]
 800c0fc:	6858      	ldr	r0, [r3, #4]
 800c0fe:	f7fa fa88 	bl	8006612 <lwip_htonl>
 800c102:	eba9 0000 	sub.w	r0, r9, r0
 800c106:	2800      	cmp	r0, #0
 800c108:	db3d      	blt.n	800c186 <tcp_output+0x24e>
          useg->next = seg;
 800c10a:	6034      	str	r4, [r6, #0]
          useg = useg->next;
 800c10c:	4626      	mov	r6, r4
    seg = pcb->unsent;
 800c10e:	6eac      	ldr	r4, [r5, #104]	; 0x68
  while (seg != NULL &&
 800c110:	2c00      	cmp	r4, #0
 800c112:	f43f af7a 	beq.w	800c00a <tcp_output+0xd2>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 800c116:	68e3      	ldr	r3, [r4, #12]
 800c118:	6858      	ldr	r0, [r3, #4]
 800c11a:	f7fa fa7a 	bl	8006612 <lwip_htonl>
 800c11e:	6c6b      	ldr	r3, [r5, #68]	; 0x44
 800c120:	1ac0      	subs	r0, r0, r3
 800c122:	8923      	ldrh	r3, [r4, #8]
 800c124:	4418      	add	r0, r3
  while (seg != NULL &&
 800c126:	4287      	cmp	r7, r0
 800c128:	f4ff af6f 	bcc.w	800c00a <tcp_output+0xd2>
    LWIP_ASSERT("RST not expected here!",
 800c12c:	68e3      	ldr	r3, [r4, #12]
 800c12e:	8998      	ldrh	r0, [r3, #12]
 800c130:	f7fa fa6c 	bl	800660c <lwip_htons>
 800c134:	f010 0f04 	tst.w	r0, #4
 800c138:	f47f af73 	bne.w	800c022 <tcp_output+0xea>
    if ((tcp_do_output_nagle(pcb) == 0) &&
 800c13c:	6eeb      	ldr	r3, [r5, #108]	; 0x6c
 800c13e:	2b00      	cmp	r3, #0
 800c140:	d088      	beq.n	800c054 <tcp_output+0x11c>
 800c142:	7eab      	ldrb	r3, [r5, #26]
 800c144:	f013 0f44 	tst.w	r3, #68	; 0x44
 800c148:	d186      	bne.n	800c058 <tcp_output+0x120>
 800c14a:	6eab      	ldr	r3, [r5, #104]	; 0x68
 800c14c:	2b00      	cmp	r3, #0
 800c14e:	f43f af75 	beq.w	800c03c <tcp_output+0x104>
 800c152:	681a      	ldr	r2, [r3, #0]
 800c154:	2a00      	cmp	r2, #0
 800c156:	f43f af6c 	beq.w	800c032 <tcp_output+0xfa>
 800c15a:	2301      	movs	r3, #1
 800c15c:	e77d      	b.n	800c05a <tcp_output+0x122>
 800c15e:	2301      	movs	r3, #1
 800c160:	e77b      	b.n	800c05a <tcp_output+0x122>
 800c162:	2301      	movs	r3, #1
 800c164:	e779      	b.n	800c05a <tcp_output+0x122>
 800c166:	2300      	movs	r3, #0
 800c168:	e777      	b.n	800c05a <tcp_output+0x122>
      pcb->flags |= TF_NAGLEMEMERR;
 800c16a:	7eaa      	ldrb	r2, [r5, #26]
 800c16c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800c170:	76aa      	strb	r2, [r5, #26]
      return err;
 800c172:	e753      	b.n	800c01c <tcp_output+0xe4>
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 800c174:	2000      	movs	r0, #0
 800c176:	e7a3      	b.n	800c0c0 <tcp_output+0x188>
      pcb->snd_nxt = snd_nxt;
 800c178:	64e8      	str	r0, [r5, #76]	; 0x4c
 800c17a:	e7a7      	b.n	800c0cc <tcp_output+0x194>
    if (TCP_TCPLEN(seg) > 0) {
 800c17c:	2300      	movs	r3, #0
 800c17e:	e7af      	b.n	800c0e0 <tcp_output+0x1a8>
        pcb->unacked = seg;
 800c180:	66ec      	str	r4, [r5, #108]	; 0x6c
        useg = seg;
 800c182:	4626      	mov	r6, r4
 800c184:	e7c3      	b.n	800c10e <tcp_output+0x1d6>
          struct tcp_seg **cur_seg = &(pcb->unacked);
 800c186:	f105 0a6c 	add.w	sl, r5, #108	; 0x6c
          while (*cur_seg &&
 800c18a:	e001      	b.n	800c190 <tcp_output+0x258>
              cur_seg = &((*cur_seg)->next );
 800c18c:	f8da a000 	ldr.w	sl, [sl]
          while (*cur_seg &&
 800c190:	f8da 3000 	ldr.w	r3, [sl]
 800c194:	b163      	cbz	r3, 800c1b0 <tcp_output+0x278>
            TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 800c196:	68db      	ldr	r3, [r3, #12]
 800c198:	6858      	ldr	r0, [r3, #4]
 800c19a:	f7fa fa3a 	bl	8006612 <lwip_htonl>
 800c19e:	4681      	mov	r9, r0
 800c1a0:	68e3      	ldr	r3, [r4, #12]
 800c1a2:	6858      	ldr	r0, [r3, #4]
 800c1a4:	f7fa fa35 	bl	8006612 <lwip_htonl>
 800c1a8:	eba9 0000 	sub.w	r0, r9, r0
          while (*cur_seg &&
 800c1ac:	2800      	cmp	r0, #0
 800c1ae:	dbed      	blt.n	800c18c <tcp_output+0x254>
          seg->next = (*cur_seg);
 800c1b0:	f8da 3000 	ldr.w	r3, [sl]
 800c1b4:	6023      	str	r3, [r4, #0]
          (*cur_seg) = seg;
 800c1b6:	f8ca 4000 	str.w	r4, [sl]
 800c1ba:	e7a8      	b.n	800c10e <tcp_output+0x1d6>
      tcp_seg_free(seg);
 800c1bc:	4620      	mov	r0, r4
 800c1be:	f7fc ff2d 	bl	800901c <tcp_seg_free>
 800c1c2:	e7a4      	b.n	800c10e <tcp_output+0x1d6>
    pcb->unsent_oversize = 0;
 800c1c4:	f8a5 3064 	strh.w	r3, [r5, #100]	; 0x64
 800c1c8:	e723      	b.n	800c012 <tcp_output+0xda>
    return ERR_OK;
 800c1ca:	2300      	movs	r3, #0
 800c1cc:	e726      	b.n	800c01c <tcp_output+0xe4>
    return ERR_RTE;
 800c1ce:	f06f 0303 	mvn.w	r3, #3
 800c1d2:	e723      	b.n	800c01c <tcp_output+0xe4>
      return ERR_RTE;
 800c1d4:	f06f 0303 	mvn.w	r3, #3
 800c1d8:	e720      	b.n	800c01c <tcp_output+0xe4>
 800c1da:	bf00      	nop
 800c1dc:	20007990 	.word	0x20007990
 800c1e0:	0801035c 	.word	0x0801035c
 800c1e4:	080100fc 	.word	0x080100fc
 800c1e8:	0800e3b0 	.word	0x0800e3b0
 800c1ec:	08010124 	.word	0x08010124

0800c1f0 <tcp_rst>:
 */
void
tcp_rst(u32_t seqno, u32_t ackno,
  const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
  u16_t local_port, u16_t remote_port)
{
 800c1f0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800c1f4:	b085      	sub	sp, #20
 800c1f6:	4680      	mov	r8, r0
 800c1f8:	460f      	mov	r7, r1
 800c1fa:	4691      	mov	r9, r2
 800c1fc:	461e      	mov	r6, r3
  struct pbuf *p;
  struct tcp_hdr *tcphdr;
  struct netif *netif;
  p = pbuf_alloc(PBUF_IP, TCP_HLEN, PBUF_RAM);
 800c1fe:	2200      	movs	r2, #0
 800c200:	2114      	movs	r1, #20
 800c202:	2001      	movs	r0, #1
 800c204:	f7fc fa8a 	bl	800871c <pbuf_alloc>
  if (p == NULL) {
 800c208:	b3b0      	cbz	r0, 800c278 <tcp_rst+0x88>
 800c20a:	4605      	mov	r5, r0
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 800c20c:	8943      	ldrh	r3, [r0, #10]
 800c20e:	2b13      	cmp	r3, #19
 800c210:	d935      	bls.n	800c27e <tcp_rst+0x8e>
              (p->len >= sizeof(struct tcp_hdr)));

  tcphdr = (struct tcp_hdr *)p->payload;
 800c212:	686c      	ldr	r4, [r5, #4]
  tcphdr->src = lwip_htons(local_port);
 800c214:	f8bd 0030 	ldrh.w	r0, [sp, #48]	; 0x30
 800c218:	f7fa f9f8 	bl	800660c <lwip_htons>
 800c21c:	8020      	strh	r0, [r4, #0]
  tcphdr->dest = lwip_htons(remote_port);
 800c21e:	f8bd 0034 	ldrh.w	r0, [sp, #52]	; 0x34
 800c222:	f7fa f9f3 	bl	800660c <lwip_htons>
 800c226:	8060      	strh	r0, [r4, #2]
  tcphdr->seqno = lwip_htonl(seqno);
 800c228:	4640      	mov	r0, r8
 800c22a:	f7fa f9f2 	bl	8006612 <lwip_htonl>
 800c22e:	6060      	str	r0, [r4, #4]
  tcphdr->ackno = lwip_htonl(ackno);
 800c230:	4638      	mov	r0, r7
 800c232:	f7fa f9ee 	bl	8006612 <lwip_htonl>
 800c236:	60a0      	str	r0, [r4, #8]
  TCPH_HDRLEN_FLAGS_SET(tcphdr, TCP_HLEN/4, TCP_RST | TCP_ACK);
 800c238:	f245 0014 	movw	r0, #20500	; 0x5014
 800c23c:	f7fa f9e6 	bl	800660c <lwip_htons>
 800c240:	81a0      	strh	r0, [r4, #12]
#if LWIP_WND_SCALE
  tcphdr->wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  tcphdr->wnd = PP_HTONS(TCP_WND);
 800c242:	2300      	movs	r3, #0
 800c244:	2208      	movs	r2, #8
 800c246:	73a2      	strb	r2, [r4, #14]
 800c248:	2260      	movs	r2, #96	; 0x60
 800c24a:	73e2      	strb	r2, [r4, #15]
#endif
  tcphdr->chksum = 0;
 800c24c:	7423      	strb	r3, [r4, #16]
 800c24e:	7463      	strb	r3, [r4, #17]
  tcphdr->urgp = 0;
 800c250:	74a3      	strb	r3, [r4, #18]
 800c252:	74e3      	strb	r3, [r4, #19]

  TCP_STATS_INC(tcp.xmit);
  MIB2_STATS_INC(mib2.tcpoutrsts);

  netif = ip_route(local_ip, remote_ip);
 800c254:	4630      	mov	r0, r6
 800c256:	f7fa ff83 	bl	8007160 <ip4_route>
  if (netif != NULL) {
 800c25a:	b150      	cbz	r0, 800c272 <tcp_rst+0x82>
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
                                        local_ip, remote_ip);
    }
#endif
    /* Send output with hardcoded TTL/HL since we have no access to the pcb */
    ip_output_if(p, local_ip, remote_ip, TCP_TTL, 0, IP_PROTO_TCP, netif);
 800c25c:	9002      	str	r0, [sp, #8]
 800c25e:	2306      	movs	r3, #6
 800c260:	9301      	str	r3, [sp, #4]
 800c262:	2300      	movs	r3, #0
 800c264:	9300      	str	r3, [sp, #0]
 800c266:	23ff      	movs	r3, #255	; 0xff
 800c268:	4632      	mov	r2, r6
 800c26a:	4649      	mov	r1, r9
 800c26c:	4628      	mov	r0, r5
 800c26e:	f7fb f91d 	bl	80074ac <ip4_output_if>
  }
  pbuf_free(p);
 800c272:	4628      	mov	r0, r5
 800c274:	f7fc f9e6 	bl	8008644 <pbuf_free>
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 800c278:	b005      	add	sp, #20
 800c27a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 800c27e:	4b04      	ldr	r3, [pc, #16]	; (800c290 <tcp_rst+0xa0>)
 800c280:	f240 524d 	movw	r2, #1357	; 0x54d
 800c284:	4903      	ldr	r1, [pc, #12]	; (800c294 <tcp_rst+0xa4>)
 800c286:	4804      	ldr	r0, [pc, #16]	; (800c298 <tcp_rst+0xa8>)
 800c288:	f001 fc9f 	bl	800dbca <iprintf>
 800c28c:	e7c1      	b.n	800c212 <tcp_rst+0x22>
 800c28e:	bf00      	nop
 800c290:	0801035c 	.word	0x0801035c
 800c294:	0801013c 	.word	0x0801013c
 800c298:	0800e3b0 	.word	0x0800e3b0

0800c29c <tcp_rexmit_rto>:
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
  struct tcp_seg *seg;

  if (pcb->unacked == NULL) {
 800c29c:	6ec2      	ldr	r2, [r0, #108]	; 0x6c
 800c29e:	b10a      	cbz	r2, 800c2a4 <tcp_rexmit_rto+0x8>
{
 800c2a0:	b508      	push	{r3, lr}
 800c2a2:	e001      	b.n	800c2a8 <tcp_rexmit_rto+0xc>
 800c2a4:	4770      	bx	lr
    return;
  }

  /* Move all unacked segments to the head of the unsent queue */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next);
 800c2a6:	461a      	mov	r2, r3
 800c2a8:	6813      	ldr	r3, [r2, #0]
 800c2aa:	2b00      	cmp	r3, #0
 800c2ac:	d1fb      	bne.n	800c2a6 <tcp_rexmit_rto+0xa>
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
 800c2ae:	6e83      	ldr	r3, [r0, #104]	; 0x68
 800c2b0:	6013      	str	r3, [r2, #0]
  if (pcb->unsent == NULL) {
    pcb->unsent_oversize = seg->oversize_left;
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
 800c2b2:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
 800c2b4:	6683      	str	r3, [r0, #104]	; 0x68
  /* unacked queue is now empty */
  pcb->unacked = NULL;
 800c2b6:	2300      	movs	r3, #0
 800c2b8:	66c3      	str	r3, [r0, #108]	; 0x6c

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
 800c2ba:	f890 3042 	ldrb.w	r3, [r0, #66]	; 0x42
 800c2be:	2bff      	cmp	r3, #255	; 0xff
 800c2c0:	d002      	beq.n	800c2c8 <tcp_rexmit_rto+0x2c>
    ++pcb->nrtx;
 800c2c2:	3301      	adds	r3, #1
 800c2c4:	f880 3042 	strb.w	r3, [r0, #66]	; 0x42
  }

  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
 800c2c8:	2300      	movs	r3, #0
 800c2ca:	6343      	str	r3, [r0, #52]	; 0x34

  /* Do the actual retransmission */
  tcp_output(pcb);
 800c2cc:	f7ff fe34 	bl	800bf38 <tcp_output>
 800c2d0:	bd08      	pop	{r3, pc}

0800c2d2 <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit(struct tcp_pcb *pcb)
{
 800c2d2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  if (pcb->unacked == NULL) {
 800c2d4:	6ec6      	ldr	r6, [r0, #108]	; 0x6c
 800c2d6:	b316      	cbz	r6, 800c31e <tcp_rexmit+0x4c>
 800c2d8:	4607      	mov	r7, r0
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  seg = pcb->unacked;
  pcb->unacked = seg->next;
 800c2da:	6833      	ldr	r3, [r6, #0]
 800c2dc:	66c3      	str	r3, [r0, #108]	; 0x6c

  cur_seg = &(pcb->unsent);
 800c2de:	f100 0568 	add.w	r5, r0, #104	; 0x68
  while (*cur_seg &&
 800c2e2:	e000      	b.n	800c2e6 <tcp_rexmit+0x14>
    TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
      cur_seg = &((*cur_seg)->next );
 800c2e4:	682d      	ldr	r5, [r5, #0]
  while (*cur_seg &&
 800c2e6:	682b      	ldr	r3, [r5, #0]
 800c2e8:	b15b      	cbz	r3, 800c302 <tcp_rexmit+0x30>
    TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 800c2ea:	68db      	ldr	r3, [r3, #12]
 800c2ec:	6858      	ldr	r0, [r3, #4]
 800c2ee:	f7fa f990 	bl	8006612 <lwip_htonl>
 800c2f2:	4604      	mov	r4, r0
 800c2f4:	68f3      	ldr	r3, [r6, #12]
 800c2f6:	6858      	ldr	r0, [r3, #4]
 800c2f8:	f7fa f98b 	bl	8006612 <lwip_htonl>
 800c2fc:	1a20      	subs	r0, r4, r0
  while (*cur_seg &&
 800c2fe:	2800      	cmp	r0, #0
 800c300:	dbf0      	blt.n	800c2e4 <tcp_rexmit+0x12>
  }
  seg->next = *cur_seg;
 800c302:	682b      	ldr	r3, [r5, #0]
 800c304:	6033      	str	r3, [r6, #0]
  *cur_seg = seg;
 800c306:	602e      	str	r6, [r5, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
 800c308:	6833      	ldr	r3, [r6, #0]
 800c30a:	b14b      	cbz	r3, 800c320 <tcp_rexmit+0x4e>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
  }
#endif /* TCP_OVERSIZE */

  if (pcb->nrtx < 0xFF) {
 800c30c:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
 800c310:	2bff      	cmp	r3, #255	; 0xff
 800c312:	d002      	beq.n	800c31a <tcp_rexmit+0x48>
    ++pcb->nrtx;
 800c314:	3301      	adds	r3, #1
 800c316:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  }

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
 800c31a:	2300      	movs	r3, #0
 800c31c:	637b      	str	r3, [r7, #52]	; 0x34
 800c31e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    pcb->unsent_oversize = 0;
 800c320:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
 800c324:	e7f2      	b.n	800c30c <tcp_rexmit+0x3a>

0800c326 <tcp_rexmit_fast>:
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 800c326:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
 800c328:	b11b      	cbz	r3, 800c332 <tcp_rexmit_fast+0xc>
 800c32a:	7e83      	ldrb	r3, [r0, #26]
 800c32c:	f013 0f04 	tst.w	r3, #4
 800c330:	d000      	beq.n	800c334 <tcp_rexmit_fast+0xe>
 800c332:	4770      	bx	lr
{
 800c334:	b510      	push	{r4, lr}
 800c336:	4604      	mov	r4, r0
    LWIP_DEBUGF(TCP_FR_DEBUG,
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    tcp_rexmit(pcb);
 800c338:	f7ff ffcb 	bl	800c2d2 <tcp_rexmit>

    /* Set ssthresh to half of the minimum of the current
     * cwnd and the advertised window */
    pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 800c33c:	f8b4 3048 	ldrh.w	r3, [r4, #72]	; 0x48
 800c340:	f8b4 205c 	ldrh.w	r2, [r4, #92]	; 0x5c
 800c344:	4293      	cmp	r3, r2
 800c346:	d218      	bcs.n	800c37a <tcp_rexmit_fast+0x54>
 800c348:	085a      	lsrs	r2, r3, #1
 800c34a:	f8a4 204a 	strh.w	r2, [r4, #74]	; 0x4a

    /* The minimum value for ssthresh should be 2 MSS */
    if (pcb->ssthresh < (2U * pcb->mss)) {
 800c34e:	8e63      	ldrh	r3, [r4, #50]	; 0x32
 800c350:	ebb2 0f43 	cmp.w	r2, r3, lsl #1
 800c354:	d202      	bcs.n	800c35c <tcp_rexmit_fast+0x36>
      LWIP_DEBUGF(TCP_FR_DEBUG,
                  ("tcp_receive: The minimum value for ssthresh %"TCPWNDSIZE_F
                   " should be min 2 mss %"U16_F"...\n",
                   pcb->ssthresh, (u16_t)(2*pcb->mss)));
      pcb->ssthresh = 2*pcb->mss;
 800c356:	005a      	lsls	r2, r3, #1
 800c358:	f8a4 204a 	strh.w	r2, [r4, #74]	; 0x4a
    }

    pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 800c35c:	f8b4 204a 	ldrh.w	r2, [r4, #74]	; 0x4a
 800c360:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800c364:	fa12 f383 	uxtah	r3, r2, r3
 800c368:	f8a4 3048 	strh.w	r3, [r4, #72]	; 0x48
    pcb->flags |= TF_INFR;
 800c36c:	7ea3      	ldrb	r3, [r4, #26]
 800c36e:	f043 0304 	orr.w	r3, r3, #4
 800c372:	76a3      	strb	r3, [r4, #26]

    /* Reset the retransmission timer to prevent immediate rto retransmissions */
    pcb->rtime = 0;
 800c374:	2300      	movs	r3, #0
 800c376:	8623      	strh	r3, [r4, #48]	; 0x30
 800c378:	bd10      	pop	{r4, pc}
    pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 800c37a:	0852      	lsrs	r2, r2, #1
 800c37c:	e7e5      	b.n	800c34a <tcp_rexmit_fast+0x24>

0800c37e <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 800c37e:	b570      	push	{r4, r5, r6, lr}
 800c380:	b084      	sub	sp, #16
 800c382:	4604      	mov	r4, r0
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, 0, 0, lwip_htonl(pcb->snd_nxt - 1));
 800c384:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
 800c386:	3801      	subs	r0, #1
 800c388:	f7fa f943 	bl	8006612 <lwip_htonl>
 800c38c:	4603      	mov	r3, r0
 800c38e:	2200      	movs	r2, #0
 800c390:	4611      	mov	r1, r2
 800c392:	4620      	mov	r0, r4
 800c394:	f7ff f97a 	bl	800b68c <tcp_output_alloc_header>
  if (p == NULL) {
 800c398:	b1d0      	cbz	r0, 800c3d0 <tcp_keepalive+0x52>
 800c39a:	4605      	mov	r5, r0
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
  }
  netif = ip_route(&pcb->local_ip, &pcb->remote_ip);
 800c39c:	1d26      	adds	r6, r4, #4
 800c39e:	4630      	mov	r0, r6
 800c3a0:	f7fa fede 	bl	8007160 <ip4_route>
  if (netif == NULL) {
 800c3a4:	b188      	cbz	r0, 800c3ca <tcp_keepalive+0x4c>
#endif /* CHECKSUM_GEN_TCP */
    TCP_STATS_INC(tcp.xmit);

    /* Send output to IP */
    NETIF_SET_HWADDRHINT(netif, &(pcb->addr_hint));
    err = ip_output_if(p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl, 0, IP_PROTO_TCP, netif);
 800c3a6:	7aa3      	ldrb	r3, [r4, #10]
 800c3a8:	9002      	str	r0, [sp, #8]
 800c3aa:	2206      	movs	r2, #6
 800c3ac:	9201      	str	r2, [sp, #4]
 800c3ae:	2200      	movs	r2, #0
 800c3b0:	9200      	str	r2, [sp, #0]
 800c3b2:	4632      	mov	r2, r6
 800c3b4:	4621      	mov	r1, r4
 800c3b6:	4628      	mov	r0, r5
 800c3b8:	f7fb f878 	bl	80074ac <ip4_output_if>
 800c3bc:	4604      	mov	r4, r0
    NETIF_SET_HWADDRHINT(netif, NULL);
  }
  pbuf_free(p);
 800c3be:	4628      	mov	r0, r5
 800c3c0:	f7fc f940 	bl	8008644 <pbuf_free>

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
}
 800c3c4:	4620      	mov	r0, r4
 800c3c6:	b004      	add	sp, #16
 800c3c8:	bd70      	pop	{r4, r5, r6, pc}
    err = ERR_RTE;
 800c3ca:	f06f 0403 	mvn.w	r4, #3
 800c3ce:	e7f6      	b.n	800c3be <tcp_keepalive+0x40>
    return ERR_MEM;
 800c3d0:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800c3d4:	e7f6      	b.n	800c3c4 <tcp_keepalive+0x46>

0800c3d6 <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 800c3d6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c3da:	b084      	sub	sp, #16
  LWIP_DEBUGF(TCP_DEBUG,
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  seg = pcb->unacked;
 800c3dc:	6ec5      	ldr	r5, [r0, #108]	; 0x6c

  if (seg == NULL) {
 800c3de:	b175      	cbz	r5, 800c3fe <tcp_zero_window_probe+0x28>
    seg = pcb->unsent;
  }
  if (seg == NULL) {
 800c3e0:	2d00      	cmp	r5, #0
 800c3e2:	d05d      	beq.n	800c4a0 <tcp_zero_window_probe+0xca>
 800c3e4:	4604      	mov	r4, r0
    /* nothing to send, zero window probe not needed */
    return ERR_OK;
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 800c3e6:	68eb      	ldr	r3, [r5, #12]
 800c3e8:	8998      	ldrh	r0, [r3, #12]
 800c3ea:	f7fa f90f 	bl	800660c <lwip_htons>
 800c3ee:	f010 0f01 	tst.w	r0, #1
 800c3f2:	d006      	beq.n	800c402 <tcp_zero_window_probe+0x2c>
 800c3f4:	892b      	ldrh	r3, [r5, #8]
 800c3f6:	2b00      	cmp	r3, #0
 800c3f8:	d040      	beq.n	800c47c <tcp_zero_window_probe+0xa6>
 800c3fa:	2200      	movs	r2, #0
 800c3fc:	e002      	b.n	800c404 <tcp_zero_window_probe+0x2e>
    seg = pcb->unsent;
 800c3fe:	6e85      	ldr	r5, [r0, #104]	; 0x68
 800c400:	e7ee      	b.n	800c3e0 <tcp_zero_window_probe+0xa>
  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 800c402:	2200      	movs	r2, #0
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;
 800c404:	f002 06ff 	and.w	r6, r2, #255	; 0xff

  p = tcp_output_alloc_header(pcb, 0, len, seg->tcphdr->seqno);
 800c408:	68eb      	ldr	r3, [r5, #12]
 800c40a:	685b      	ldr	r3, [r3, #4]
 800c40c:	f082 0201 	eor.w	r2, r2, #1
 800c410:	2100      	movs	r1, #0
 800c412:	4620      	mov	r0, r4
 800c414:	f7ff f93a 	bl	800b68c <tcp_output_alloc_header>
  if (p == NULL) {
 800c418:	4607      	mov	r7, r0
 800c41a:	2800      	cmp	r0, #0
 800c41c:	d042      	beq.n	800c4a4 <tcp_zero_window_probe+0xce>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 800c41e:	f8d0 8004 	ldr.w	r8, [r0, #4]

  if (is_fin) {
 800c422:	b36e      	cbz	r6, 800c480 <tcp_zero_window_probe+0xaa>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 800c424:	f8b8 600c 	ldrh.w	r6, [r8, #12]
 800c428:	f426 567c 	bic.w	r6, r6, #16128	; 0x3f00
 800c42c:	b2b6      	uxth	r6, r6
 800c42e:	2011      	movs	r0, #17
 800c430:	f7fa f8ec 	bl	800660c <lwip_htons>
 800c434:	4330      	orrs	r0, r6
 800c436:	f8a8 000c 	strh.w	r0, [r8, #12]
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 800c43a:	68eb      	ldr	r3, [r5, #12]
 800c43c:	6858      	ldr	r0, [r3, #4]
 800c43e:	f7fa f8e8 	bl	8006612 <lwip_htonl>
 800c442:	3001      	adds	r0, #1
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 800c444:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 800c446:	1a1b      	subs	r3, r3, r0
 800c448:	2b00      	cmp	r3, #0
 800c44a:	db24      	blt.n	800c496 <tcp_zero_window_probe+0xc0>
    pcb->snd_nxt = snd_nxt;
  }

  netif = ip_route(&pcb->local_ip, &pcb->remote_ip);
 800c44c:	1d25      	adds	r5, r4, #4
 800c44e:	4628      	mov	r0, r5
 800c450:	f7fa fe86 	bl	8007160 <ip4_route>
  if (netif == NULL) {
 800c454:	b308      	cbz	r0, 800c49a <tcp_zero_window_probe+0xc4>
#endif
    TCP_STATS_INC(tcp.xmit);

    /* Send output to IP */
    NETIF_SET_HWADDRHINT(netif, &(pcb->addr_hint));
    err = ip_output_if(p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 800c456:	7aa3      	ldrb	r3, [r4, #10]
 800c458:	9002      	str	r0, [sp, #8]
 800c45a:	2206      	movs	r2, #6
 800c45c:	9201      	str	r2, [sp, #4]
 800c45e:	2200      	movs	r2, #0
 800c460:	9200      	str	r2, [sp, #0]
 800c462:	462a      	mov	r2, r5
 800c464:	4621      	mov	r1, r4
 800c466:	4638      	mov	r0, r7
 800c468:	f7fb f820 	bl	80074ac <ip4_output_if>
 800c46c:	4604      	mov	r4, r0
      0, IP_PROTO_TCP, netif);
    NETIF_SET_HWADDRHINT(netif, NULL);
  }

  pbuf_free(p);
 800c46e:	4638      	mov	r0, r7
 800c470:	f7fc f8e8 	bl	8008644 <pbuf_free>

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
}
 800c474:	4620      	mov	r0, r4
 800c476:	b004      	add	sp, #16
 800c478:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 800c47c:	2201      	movs	r2, #1
 800c47e:	e7c1      	b.n	800c404 <tcp_zero_window_probe+0x2e>
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 800c480:	6868      	ldr	r0, [r5, #4]
 800c482:	8903      	ldrh	r3, [r0, #8]
 800c484:	892a      	ldrh	r2, [r5, #8]
 800c486:	1a9b      	subs	r3, r3, r2
 800c488:	b29b      	uxth	r3, r3
 800c48a:	2201      	movs	r2, #1
 800c48c:	f108 0114 	add.w	r1, r8, #20
 800c490:	f7fc fba2 	bl	8008bd8 <pbuf_copy_partial>
 800c494:	e7d1      	b.n	800c43a <tcp_zero_window_probe+0x64>
    pcb->snd_nxt = snd_nxt;
 800c496:	64e0      	str	r0, [r4, #76]	; 0x4c
 800c498:	e7d8      	b.n	800c44c <tcp_zero_window_probe+0x76>
    err = ERR_RTE;
 800c49a:	f06f 0403 	mvn.w	r4, #3
 800c49e:	e7e6      	b.n	800c46e <tcp_zero_window_probe+0x98>
    return ERR_OK;
 800c4a0:	2400      	movs	r4, #0
 800c4a2:	e7e7      	b.n	800c474 <tcp_zero_window_probe+0x9e>
    return ERR_MEM;
 800c4a4:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800c4a8:	e7e4      	b.n	800c474 <tcp_zero_window_probe+0x9e>
	...

0800c4ac <sys_timeouts_sleeptime>:
#if !NO_SYS
static
#endif /* !NO_SYS */
u32_t
sys_timeouts_sleeptime(void)
{
 800c4ac:	b508      	push	{r3, lr}
  u32_t diff;
  if (next_timeout == NULL) {
 800c4ae:	4b0a      	ldr	r3, [pc, #40]	; (800c4d8 <sys_timeouts_sleeptime+0x2c>)
 800c4b0:	681b      	ldr	r3, [r3, #0]
 800c4b2:	b15b      	cbz	r3, 800c4cc <sys_timeouts_sleeptime+0x20>
    return 0xffffffff;
  }
  diff = sys_now() - timeouts_last_time;
 800c4b4:	f000 ff2c 	bl	800d310 <sys_now>
 800c4b8:	4b08      	ldr	r3, [pc, #32]	; (800c4dc <sys_timeouts_sleeptime+0x30>)
 800c4ba:	681b      	ldr	r3, [r3, #0]
 800c4bc:	1ac0      	subs	r0, r0, r3
  if (diff > next_timeout->time) {
 800c4be:	4b06      	ldr	r3, [pc, #24]	; (800c4d8 <sys_timeouts_sleeptime+0x2c>)
 800c4c0:	681b      	ldr	r3, [r3, #0]
 800c4c2:	685b      	ldr	r3, [r3, #4]
 800c4c4:	4298      	cmp	r0, r3
 800c4c6:	d804      	bhi.n	800c4d2 <sys_timeouts_sleeptime+0x26>
    return 0;
  } else {
    return next_timeout->time - diff;
 800c4c8:	1a18      	subs	r0, r3, r0
 800c4ca:	bd08      	pop	{r3, pc}
    return 0xffffffff;
 800c4cc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800c4d0:	bd08      	pop	{r3, pc}
    return 0;
 800c4d2:	2000      	movs	r0, #0
  }
}
 800c4d4:	bd08      	pop	{r3, pc}
 800c4d6:	bf00      	nop
 800c4d8:	20003fc0 	.word	0x20003fc0
 800c4dc:	20003fc8 	.word	0x20003fc8

0800c4e0 <sys_check_timeouts>:
  if (next_timeout) {
 800c4e0:	4b15      	ldr	r3, [pc, #84]	; (800c538 <sys_check_timeouts+0x58>)
 800c4e2:	681b      	ldr	r3, [r3, #0]
 800c4e4:	b33b      	cbz	r3, 800c536 <sys_check_timeouts+0x56>
{
 800c4e6:	b570      	push	{r4, r5, r6, lr}
    now = sys_now();
 800c4e8:	f000 ff12 	bl	800d310 <sys_now>
    diff = now - timeouts_last_time;
 800c4ec:	4b13      	ldr	r3, [pc, #76]	; (800c53c <sys_check_timeouts+0x5c>)
 800c4ee:	681c      	ldr	r4, [r3, #0]
 800c4f0:	1b04      	subs	r4, r0, r4
 800c4f2:	e005      	b.n	800c500 <sys_check_timeouts+0x20>
      had_one = 0;
 800c4f4:	2300      	movs	r3, #0
 800c4f6:	e002      	b.n	800c4fe <sys_check_timeouts+0x1e>
 800c4f8:	2300      	movs	r3, #0
 800c4fa:	e000      	b.n	800c4fe <sys_check_timeouts+0x1e>
        had_one = 1;
 800c4fc:	2301      	movs	r3, #1
    } while (had_one);
 800c4fe:	b1cb      	cbz	r3, 800c534 <sys_check_timeouts+0x54>
      tmptimeout = next_timeout;
 800c500:	4b0d      	ldr	r3, [pc, #52]	; (800c538 <sys_check_timeouts+0x58>)
 800c502:	6819      	ldr	r1, [r3, #0]
      if (tmptimeout && (tmptimeout->time <= diff)) {
 800c504:	2900      	cmp	r1, #0
 800c506:	d0f5      	beq.n	800c4f4 <sys_check_timeouts+0x14>
 800c508:	684b      	ldr	r3, [r1, #4]
 800c50a:	429c      	cmp	r4, r3
 800c50c:	d3f4      	bcc.n	800c4f8 <sys_check_timeouts+0x18>
        timeouts_last_time += tmptimeout->time;
 800c50e:	480b      	ldr	r0, [pc, #44]	; (800c53c <sys_check_timeouts+0x5c>)
 800c510:	6802      	ldr	r2, [r0, #0]
 800c512:	441a      	add	r2, r3
 800c514:	6002      	str	r2, [r0, #0]
        diff -= tmptimeout->time;
 800c516:	1ae4      	subs	r4, r4, r3
        next_timeout = tmptimeout->next;
 800c518:	680a      	ldr	r2, [r1, #0]
 800c51a:	4b07      	ldr	r3, [pc, #28]	; (800c538 <sys_check_timeouts+0x58>)
 800c51c:	601a      	str	r2, [r3, #0]
        handler = tmptimeout->h;
 800c51e:	688d      	ldr	r5, [r1, #8]
        arg = tmptimeout->arg;
 800c520:	68ce      	ldr	r6, [r1, #12]
        memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 800c522:	200a      	movs	r0, #10
 800c524:	f7fb feb8 	bl	8008298 <memp_free>
        if (handler != NULL) {
 800c528:	2d00      	cmp	r5, #0
 800c52a:	d0e7      	beq.n	800c4fc <sys_check_timeouts+0x1c>
          handler(arg);
 800c52c:	4630      	mov	r0, r6
 800c52e:	47a8      	blx	r5
        had_one = 1;
 800c530:	2301      	movs	r3, #1
 800c532:	e7e4      	b.n	800c4fe <sys_check_timeouts+0x1e>
 800c534:	bd70      	pop	{r4, r5, r6, pc}
 800c536:	4770      	bx	lr
 800c538:	20003fc0 	.word	0x20003fc0
 800c53c:	20003fc8 	.word	0x20003fc8

0800c540 <sys_timeout>:
{
 800c540:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c544:	4605      	mov	r5, r0
 800c546:	4688      	mov	r8, r1
 800c548:	4617      	mov	r7, r2
  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 800c54a:	200a      	movs	r0, #10
 800c54c:	f7fb fe8a 	bl	8008264 <memp_malloc>
  if (timeout == NULL) {
 800c550:	b308      	cbz	r0, 800c596 <sys_timeout+0x56>
 800c552:	4604      	mov	r4, r0
  now = sys_now();
 800c554:	f000 fedc 	bl	800d310 <sys_now>
  if (next_timeout == NULL) {
 800c558:	4b23      	ldr	r3, [pc, #140]	; (800c5e8 <sys_timeout+0xa8>)
 800c55a:	681e      	ldr	r6, [r3, #0]
 800c55c:	b31e      	cbz	r6, 800c5a6 <sys_timeout+0x66>
    diff = now - timeouts_last_time;
 800c55e:	4b23      	ldr	r3, [pc, #140]	; (800c5ec <sys_timeout+0xac>)
 800c560:	681b      	ldr	r3, [r3, #0]
 800c562:	1ac0      	subs	r0, r0, r3
  timeout->next = NULL;
 800c564:	2300      	movs	r3, #0
 800c566:	6023      	str	r3, [r4, #0]
  timeout->h = handler;
 800c568:	f8c4 8008 	str.w	r8, [r4, #8]
  timeout->arg = arg;
 800c56c:	60e7      	str	r7, [r4, #12]
  timeout->time = msecs + diff;
 800c56e:	4428      	add	r0, r5
 800c570:	6060      	str	r0, [r4, #4]
  if (next_timeout == NULL) {
 800c572:	b1e6      	cbz	r6, 800c5ae <sys_timeout+0x6e>
  if (next_timeout->time > msecs) {
 800c574:	6873      	ldr	r3, [r6, #4]
 800c576:	429d      	cmp	r5, r3
 800c578:	d31d      	bcc.n	800c5b6 <sys_timeout+0x76>
 800c57a:	4632      	mov	r2, r6
    for (t = next_timeout; t != NULL; t = t->next) {
 800c57c:	2a00      	cmp	r2, #0
 800c57e:	d030      	beq.n	800c5e2 <sys_timeout+0xa2>
      timeout->time -= t->time;
 800c580:	6851      	ldr	r1, [r2, #4]
 800c582:	6863      	ldr	r3, [r4, #4]
 800c584:	1a5b      	subs	r3, r3, r1
 800c586:	6063      	str	r3, [r4, #4]
      if (t->next == NULL || t->next->time > timeout->time) {
 800c588:	6811      	ldr	r1, [r2, #0]
 800c58a:	b1d9      	cbz	r1, 800c5c4 <sys_timeout+0x84>
 800c58c:	6848      	ldr	r0, [r1, #4]
 800c58e:	4283      	cmp	r3, r0
 800c590:	d318      	bcc.n	800c5c4 <sys_timeout+0x84>
    for (t = next_timeout; t != NULL; t = t->next) {
 800c592:	460a      	mov	r2, r1
 800c594:	e7f2      	b.n	800c57c <sys_timeout+0x3c>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 800c596:	4b16      	ldr	r3, [pc, #88]	; (800c5f0 <sys_timeout+0xb0>)
 800c598:	22d4      	movs	r2, #212	; 0xd4
 800c59a:	4916      	ldr	r1, [pc, #88]	; (800c5f4 <sys_timeout+0xb4>)
 800c59c:	4816      	ldr	r0, [pc, #88]	; (800c5f8 <sys_timeout+0xb8>)
 800c59e:	f001 fb14 	bl	800dbca <iprintf>
 800c5a2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    timeouts_last_time = now;
 800c5a6:	4b11      	ldr	r3, [pc, #68]	; (800c5ec <sys_timeout+0xac>)
 800c5a8:	6018      	str	r0, [r3, #0]
    diff = 0;
 800c5aa:	2000      	movs	r0, #0
 800c5ac:	e7da      	b.n	800c564 <sys_timeout+0x24>
    next_timeout = timeout;
 800c5ae:	4b0e      	ldr	r3, [pc, #56]	; (800c5e8 <sys_timeout+0xa8>)
 800c5b0:	601c      	str	r4, [r3, #0]
    return;
 800c5b2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    next_timeout->time -= msecs;
 800c5b6:	1b5d      	subs	r5, r3, r5
 800c5b8:	6075      	str	r5, [r6, #4]
    timeout->next = next_timeout;
 800c5ba:	6026      	str	r6, [r4, #0]
    next_timeout = timeout;
 800c5bc:	4b0a      	ldr	r3, [pc, #40]	; (800c5e8 <sys_timeout+0xa8>)
 800c5be:	601c      	str	r4, [r3, #0]
 800c5c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        if (t->next != NULL) {
 800c5c4:	b139      	cbz	r1, 800c5d6 <sys_timeout+0x96>
          t->next->time -= timeout->time;
 800c5c6:	6848      	ldr	r0, [r1, #4]
 800c5c8:	1ac3      	subs	r3, r0, r3
 800c5ca:	604b      	str	r3, [r1, #4]
        timeout->next = t->next;
 800c5cc:	6813      	ldr	r3, [r2, #0]
 800c5ce:	6023      	str	r3, [r4, #0]
        t->next = timeout;
 800c5d0:	6014      	str	r4, [r2, #0]
        break;
 800c5d2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        } else if (timeout->time > msecs) {
 800c5d6:	429d      	cmp	r5, r3
 800c5d8:	d2f8      	bcs.n	800c5cc <sys_timeout+0x8c>
          timeout->time = msecs + next_timeout->time;
 800c5da:	6873      	ldr	r3, [r6, #4]
 800c5dc:	441d      	add	r5, r3
 800c5de:	6065      	str	r5, [r4, #4]
 800c5e0:	e7f4      	b.n	800c5cc <sys_timeout+0x8c>
 800c5e2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c5e6:	bf00      	nop
 800c5e8:	20003fc0 	.word	0x20003fc0
 800c5ec:	20003fc8 	.word	0x20003fc8
 800c5f0:	08010418 	.word	0x08010418
 800c5f4:	0801044c 	.word	0x0801044c
 800c5f8:	0800e3b0 	.word	0x0800e3b0

0800c5fc <tcp_timer_needed>:
{
 800c5fc:	b508      	push	{r3, lr}
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 800c5fe:	4b0a      	ldr	r3, [pc, #40]	; (800c628 <tcp_timer_needed+0x2c>)
 800c600:	681b      	ldr	r3, [r3, #0]
 800c602:	b953      	cbnz	r3, 800c61a <tcp_timer_needed+0x1e>
 800c604:	4b09      	ldr	r3, [pc, #36]	; (800c62c <tcp_timer_needed+0x30>)
 800c606:	681b      	ldr	r3, [r3, #0]
 800c608:	b143      	cbz	r3, 800c61c <tcp_timer_needed+0x20>
    tcpip_tcp_timer_active = 1;
 800c60a:	2201      	movs	r2, #1
 800c60c:	4b06      	ldr	r3, [pc, #24]	; (800c628 <tcp_timer_needed+0x2c>)
 800c60e:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 800c610:	2200      	movs	r2, #0
 800c612:	4907      	ldr	r1, [pc, #28]	; (800c630 <tcp_timer_needed+0x34>)
 800c614:	20fa      	movs	r0, #250	; 0xfa
 800c616:	f7ff ff93 	bl	800c540 <sys_timeout>
 800c61a:	bd08      	pop	{r3, pc}
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 800c61c:	4b05      	ldr	r3, [pc, #20]	; (800c634 <tcp_timer_needed+0x38>)
 800c61e:	681b      	ldr	r3, [r3, #0]
 800c620:	2b00      	cmp	r3, #0
 800c622:	d1f2      	bne.n	800c60a <tcp_timer_needed+0xe>
 800c624:	e7f9      	b.n	800c61a <tcp_timer_needed+0x1e>
 800c626:	bf00      	nop
 800c628:	20003fc4 	.word	0x20003fc4
 800c62c:	2000797c 	.word	0x2000797c
 800c630:	0800c639 	.word	0x0800c639
 800c634:	2000798c 	.word	0x2000798c

0800c638 <tcpip_tcp_timer>:
{
 800c638:	b508      	push	{r3, lr}
  tcp_tmr();
 800c63a:	f7fd f941 	bl	80098c0 <tcp_tmr>
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 800c63e:	4b08      	ldr	r3, [pc, #32]	; (800c660 <tcpip_tcp_timer+0x28>)
 800c640:	681b      	ldr	r3, [r3, #0]
 800c642:	b12b      	cbz	r3, 800c650 <tcpip_tcp_timer+0x18>
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 800c644:	2200      	movs	r2, #0
 800c646:	4907      	ldr	r1, [pc, #28]	; (800c664 <tcpip_tcp_timer+0x2c>)
 800c648:	20fa      	movs	r0, #250	; 0xfa
 800c64a:	f7ff ff79 	bl	800c540 <sys_timeout>
 800c64e:	bd08      	pop	{r3, pc}
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 800c650:	4b05      	ldr	r3, [pc, #20]	; (800c668 <tcpip_tcp_timer+0x30>)
 800c652:	681b      	ldr	r3, [r3, #0]
 800c654:	2b00      	cmp	r3, #0
 800c656:	d1f5      	bne.n	800c644 <tcpip_tcp_timer+0xc>
    tcpip_tcp_timer_active = 0;
 800c658:	2200      	movs	r2, #0
 800c65a:	4b04      	ldr	r3, [pc, #16]	; (800c66c <tcpip_tcp_timer+0x34>)
 800c65c:	601a      	str	r2, [r3, #0]
 800c65e:	bd08      	pop	{r3, pc}
 800c660:	2000797c 	.word	0x2000797c
 800c664:	0800c639 	.word	0x0800c639
 800c668:	2000798c 	.word	0x2000798c
 800c66c:	20003fc4 	.word	0x20003fc4

0800c670 <sys_timeouts_init>:
{
 800c670:	b510      	push	{r4, lr}
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 800c672:	2401      	movs	r4, #1
 800c674:	e008      	b.n	800c688 <sys_timeouts_init+0x18>
    sys_timeout(lwip_cyclic_timers[i].interval_ms, cyclic_timer, LWIP_CONST_CAST(void*, &lwip_cyclic_timers[i]));
 800c676:	4b08      	ldr	r3, [pc, #32]	; (800c698 <sys_timeouts_init+0x28>)
 800c678:	eb03 02c4 	add.w	r2, r3, r4, lsl #3
 800c67c:	4907      	ldr	r1, [pc, #28]	; (800c69c <sys_timeouts_init+0x2c>)
 800c67e:	f853 0034 	ldr.w	r0, [r3, r4, lsl #3]
 800c682:	f7ff ff5d 	bl	800c540 <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 800c686:	3401      	adds	r4, #1
 800c688:	2c02      	cmp	r4, #2
 800c68a:	d9f4      	bls.n	800c676 <sys_timeouts_init+0x6>
  timeouts_last_time = sys_now();
 800c68c:	f000 fe40 	bl	800d310 <sys_now>
 800c690:	4b03      	ldr	r3, [pc, #12]	; (800c6a0 <sys_timeouts_init+0x30>)
 800c692:	6018      	str	r0, [r3, #0]
 800c694:	bd10      	pop	{r4, pc}
 800c696:	bf00      	nop
 800c698:	08010400 	.word	0x08010400
 800c69c:	0800c6a5 	.word	0x0800c6a5
 800c6a0:	20003fc8 	.word	0x20003fc8

0800c6a4 <cyclic_timer>:
{
 800c6a4:	b510      	push	{r4, lr}
 800c6a6:	4604      	mov	r4, r0
  cyclic->handler();
 800c6a8:	6843      	ldr	r3, [r0, #4]
 800c6aa:	4798      	blx	r3
  sys_timeout(cyclic->interval_ms, cyclic_timer, arg);
 800c6ac:	4622      	mov	r2, r4
 800c6ae:	4902      	ldr	r1, [pc, #8]	; (800c6b8 <cyclic_timer+0x14>)
 800c6b0:	6820      	ldr	r0, [r4, #0]
 800c6b2:	f7ff ff45 	bl	800c540 <sys_timeout>
 800c6b6:	bd10      	pop	{r4, pc}
 800c6b8:	0800c6a5 	.word	0x0800c6a5

0800c6bc <sys_timeouts_mbox_fetch>:
 * @param mbox the mbox to fetch the message from
 * @param msg the place to store the message
 */
void
sys_timeouts_mbox_fetch(sys_mbox_t *mbox, void **msg)
{
 800c6bc:	b538      	push	{r3, r4, r5, lr}
 800c6be:	4604      	mov	r4, r0
 800c6c0:	460d      	mov	r5, r1
 800c6c2:	e007      	b.n	800c6d4 <sys_timeouts_mbox_fetch+0x18>
  u32_t sleeptime;

again:
  if (!next_timeout) {
    sys_arch_mbox_fetch(mbox, msg, 0);
 800c6c4:	2200      	movs	r2, #0
 800c6c6:	4629      	mov	r1, r5
 800c6c8:	4620      	mov	r0, r4
 800c6ca:	f000 fb06 	bl	800ccda <sys_arch_mbox_fetch>
    return;
 800c6ce:	bd38      	pop	{r3, r4, r5, pc}

  sleeptime = sys_timeouts_sleeptime();
  if (sleeptime == 0 || sys_arch_mbox_fetch(mbox, msg, sleeptime) == SYS_ARCH_TIMEOUT) {
    /* If a SYS_ARCH_TIMEOUT value is returned, a timeout occurred
       before a message could be fetched. */
    sys_check_timeouts();
 800c6d0:	f7ff ff06 	bl	800c4e0 <sys_check_timeouts>
  if (!next_timeout) {
 800c6d4:	4b08      	ldr	r3, [pc, #32]	; (800c6f8 <sys_timeouts_mbox_fetch+0x3c>)
 800c6d6:	681b      	ldr	r3, [r3, #0]
 800c6d8:	2b00      	cmp	r3, #0
 800c6da:	d0f3      	beq.n	800c6c4 <sys_timeouts_mbox_fetch+0x8>
  sleeptime = sys_timeouts_sleeptime();
 800c6dc:	f7ff fee6 	bl	800c4ac <sys_timeouts_sleeptime>
  if (sleeptime == 0 || sys_arch_mbox_fetch(mbox, msg, sleeptime) == SYS_ARCH_TIMEOUT) {
 800c6e0:	4602      	mov	r2, r0
 800c6e2:	2800      	cmp	r0, #0
 800c6e4:	d0f4      	beq.n	800c6d0 <sys_timeouts_mbox_fetch+0x14>
 800c6e6:	4629      	mov	r1, r5
 800c6e8:	4620      	mov	r0, r4
 800c6ea:	f000 faf6 	bl	800ccda <sys_arch_mbox_fetch>
 800c6ee:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 800c6f2:	d0ed      	beq.n	800c6d0 <sys_timeouts_mbox_fetch+0x14>
 800c6f4:	bd38      	pop	{r3, r4, r5, pc}
 800c6f6:	bf00      	nop
 800c6f8:	20003fc0 	.word	0x20003fc0

0800c6fc <udp_new_port>:
 * @return a new (free) local UDP port number
 */
static u16_t
udp_new_port(void)
{
  u16_t n = 0;
 800c6fc:	2000      	movs	r0, #0
  struct udp_pcb *pcb;

again:
  if (udp_port++ == UDP_LOCAL_PORT_RANGE_END) {
 800c6fe:	4a10      	ldr	r2, [pc, #64]	; (800c740 <udp_new_port+0x44>)
 800c700:	8813      	ldrh	r3, [r2, #0]
 800c702:	1c59      	adds	r1, r3, #1
 800c704:	8011      	strh	r1, [r2, #0]
 800c706:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800c70a:	4293      	cmp	r3, r2
 800c70c:	d009      	beq.n	800c722 <udp_new_port+0x26>
    udp_port = UDP_LOCAL_PORT_RANGE_START;
  }
  /* Check all PCBs. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800c70e:	4b0d      	ldr	r3, [pc, #52]	; (800c744 <udp_new_port+0x48>)
 800c710:	681b      	ldr	r3, [r3, #0]
 800c712:	b193      	cbz	r3, 800c73a <udp_new_port+0x3e>
    if (pcb->local_port == udp_port) {
 800c714:	8a59      	ldrh	r1, [r3, #18]
 800c716:	4a0a      	ldr	r2, [pc, #40]	; (800c740 <udp_new_port+0x44>)
 800c718:	8812      	ldrh	r2, [r2, #0]
 800c71a:	4291      	cmp	r1, r2
 800c71c:	d006      	beq.n	800c72c <udp_new_port+0x30>
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800c71e:	68db      	ldr	r3, [r3, #12]
 800c720:	e7f7      	b.n	800c712 <udp_new_port+0x16>
    udp_port = UDP_LOCAL_PORT_RANGE_START;
 800c722:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 800c726:	4b06      	ldr	r3, [pc, #24]	; (800c740 <udp_new_port+0x44>)
 800c728:	801a      	strh	r2, [r3, #0]
 800c72a:	e7f0      	b.n	800c70e <udp_new_port+0x12>
      if (++n > (UDP_LOCAL_PORT_RANGE_END - UDP_LOCAL_PORT_RANGE_START)) {
 800c72c:	3001      	adds	r0, #1
 800c72e:	b280      	uxth	r0, r0
 800c730:	f5b0 4f80 	cmp.w	r0, #16384	; 0x4000
 800c734:	d3e3      	bcc.n	800c6fe <udp_new_port+0x2>
        return 0;
 800c736:	2000      	movs	r0, #0
      }
      goto again;
    }
  }
  return udp_port;
}
 800c738:	4770      	bx	lr
  return udp_port;
 800c73a:	4b01      	ldr	r3, [pc, #4]	; (800c740 <udp_new_port+0x44>)
 800c73c:	8818      	ldrh	r0, [r3, #0]
 800c73e:	4770      	bx	lr
 800c740:	2000000e 	.word	0x2000000e
 800c744:	20007994 	.word	0x20007994

0800c748 <udp_input_local_match>:
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: all or broadcasts in my subnet
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
 800c748:	b16a      	cbz	r2, 800c766 <udp_input_local_match+0x1e>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800c74a:	b1a8      	cbz	r0, 800c778 <udp_input_local_match+0x30>
 800c74c:	6803      	ldr	r3, [r0, #0]
 800c74e:	b1ab      	cbz	r3, 800c77c <udp_input_local_match+0x34>
          ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 800c750:	4a10      	ldr	r2, [pc, #64]	; (800c794 <udp_input_local_match+0x4c>)
 800c752:	6952      	ldr	r2, [r2, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800c754:	f1b2 3fff 	cmp.w	r2, #4294967295	; 0xffffffff
 800c758:	d012      	beq.n	800c780 <udp_input_local_match+0x38>
           ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 800c75a:	6889      	ldr	r1, [r1, #8]
 800c75c:	4053      	eors	r3, r2
          ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 800c75e:	420b      	tst	r3, r1
 800c760:	d010      	beq.n	800c784 <udp_input_local_match+0x3c>
    if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
      return 1;
    }
  }

  return 0;
 800c762:	2000      	movs	r0, #0
 800c764:	4770      	bx	lr
    if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800c766:	b178      	cbz	r0, 800c788 <udp_input_local_match+0x40>
 800c768:	6803      	ldr	r3, [r0, #0]
 800c76a:	b17b      	cbz	r3, 800c78c <udp_input_local_match+0x44>
 800c76c:	4a09      	ldr	r2, [pc, #36]	; (800c794 <udp_input_local_match+0x4c>)
 800c76e:	6952      	ldr	r2, [r2, #20]
 800c770:	4293      	cmp	r3, r2
 800c772:	d00d      	beq.n	800c790 <udp_input_local_match+0x48>
  return 0;
 800c774:	2000      	movs	r0, #0
 800c776:	4770      	bx	lr
          return 1;
 800c778:	2001      	movs	r0, #1
 800c77a:	4770      	bx	lr
 800c77c:	2001      	movs	r0, #1
 800c77e:	4770      	bx	lr
 800c780:	2001      	movs	r0, #1
 800c782:	4770      	bx	lr
 800c784:	2001      	movs	r0, #1
 800c786:	4770      	bx	lr
      return 1;
 800c788:	2001      	movs	r0, #1
 800c78a:	4770      	bx	lr
 800c78c:	2001      	movs	r0, #1
 800c78e:	4770      	bx	lr
 800c790:	2001      	movs	r0, #1
}
 800c792:	4770      	bx	lr
 800c794:	2000426c 	.word	0x2000426c

0800c798 <udp_init>:
{
 800c798:	4770      	bx	lr
	...

0800c79c <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 800c79c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c7a0:	b085      	sub	sp, #20
 800c7a2:	4681      	mov	r9, r0
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 800c7a4:	8943      	ldrh	r3, [r0, #10]
 800c7a6:	2b07      	cmp	r3, #7
 800c7a8:	d917      	bls.n	800c7da <udp_input+0x3e>
 800c7aa:	460f      	mov	r7, r1
    MIB2_STATS_INC(mib2.udpinerrors);
    pbuf_free(p);
    goto end;
  }

  udphdr = (struct udp_hdr *)p->payload;
 800c7ac:	6844      	ldr	r4, [r0, #4]

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 800c7ae:	4b46      	ldr	r3, [pc, #280]	; (800c8c8 <udp_input+0x12c>)
 800c7b0:	6819      	ldr	r1, [r3, #0]
 800c7b2:	6958      	ldr	r0, [r3, #20]
 800c7b4:	f7fa fe8f 	bl	80074d6 <ip4_addr_isbroadcast_u32>
 800c7b8:	4680      	mov	r8, r0

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 800c7ba:	8820      	ldrh	r0, [r4, #0]
 800c7bc:	f7f9 ff26 	bl	800660c <lwip_htons>
 800c7c0:	4682      	mov	sl, r0
  dest = lwip_ntohs(udphdr->dest);
 800c7c2:	8860      	ldrh	r0, [r4, #2]
 800c7c4:	f7f9 ff22 	bl	800660c <lwip_htons>
 800c7c8:	4606      	mov	r6, r0
  uncon_pcb = NULL;
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800c7ca:	4b40      	ldr	r3, [pc, #256]	; (800c8cc <udp_input+0x130>)
 800c7cc:	681b      	ldr	r3, [r3, #0]
 800c7ce:	9303      	str	r3, [sp, #12]
 800c7d0:	461c      	mov	r4, r3
  uncon_pcb = NULL;
 800c7d2:	f04f 0b00 	mov.w	fp, #0
  prev = NULL;
 800c7d6:	465d      	mov	r5, fp
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800c7d8:	e009      	b.n	800c7ee <udp_input+0x52>
    pbuf_free(p);
 800c7da:	f7fb ff33 	bl	8008644 <pbuf_free>
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 800c7de:	b005      	add	sp, #20
 800c7e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      if ((pcb->remote_port == src) &&
 800c7e4:	8aa3      	ldrh	r3, [r4, #20]
 800c7e6:	459a      	cmp	sl, r3
 800c7e8:	d015      	beq.n	800c816 <udp_input+0x7a>
    prev = pcb;
 800c7ea:	4625      	mov	r5, r4
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800c7ec:	68e4      	ldr	r4, [r4, #12]
 800c7ee:	b1fc      	cbz	r4, 800c830 <udp_input+0x94>
    if ((pcb->local_port == dest) &&
 800c7f0:	8a63      	ldrh	r3, [r4, #18]
 800c7f2:	429e      	cmp	r6, r3
 800c7f4:	d1f9      	bne.n	800c7ea <udp_input+0x4e>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
 800c7f6:	4642      	mov	r2, r8
 800c7f8:	4639      	mov	r1, r7
 800c7fa:	4620      	mov	r0, r4
 800c7fc:	f7ff ffa4 	bl	800c748 <udp_input_local_match>
    if ((pcb->local_port == dest) &&
 800c800:	2800      	cmp	r0, #0
 800c802:	d0f2      	beq.n	800c7ea <udp_input+0x4e>
      if (((pcb->flags & UDP_FLAGS_CONNECTED) == 0) &&
 800c804:	7c23      	ldrb	r3, [r4, #16]
 800c806:	f013 0f04 	tst.w	r3, #4
 800c80a:	d1eb      	bne.n	800c7e4 <udp_input+0x48>
 800c80c:	f1bb 0f00 	cmp.w	fp, #0
 800c810:	d1e8      	bne.n	800c7e4 <udp_input+0x48>
        uncon_pcb = pcb;
 800c812:	46a3      	mov	fp, r4
 800c814:	e7e6      	b.n	800c7e4 <udp_input+0x48>
          (ip_addr_isany_val(pcb->remote_ip) ||
 800c816:	6863      	ldr	r3, [r4, #4]
      if ((pcb->remote_port == src) &&
 800c818:	b11b      	cbz	r3, 800c822 <udp_input+0x86>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 800c81a:	4a2b      	ldr	r2, [pc, #172]	; (800c8c8 <udp_input+0x12c>)
 800c81c:	6912      	ldr	r2, [r2, #16]
          (ip_addr_isany_val(pcb->remote_ip) ||
 800c81e:	4293      	cmp	r3, r2
 800c820:	d1e3      	bne.n	800c7ea <udp_input+0x4e>
        if (prev != NULL) {
 800c822:	b12d      	cbz	r5, 800c830 <udp_input+0x94>
          prev->next = pcb->next;
 800c824:	68e3      	ldr	r3, [r4, #12]
 800c826:	60eb      	str	r3, [r5, #12]
          pcb->next = udp_pcbs;
 800c828:	9b03      	ldr	r3, [sp, #12]
 800c82a:	60e3      	str	r3, [r4, #12]
          udp_pcbs = pcb;
 800c82c:	4b27      	ldr	r3, [pc, #156]	; (800c8cc <udp_input+0x130>)
 800c82e:	601c      	str	r4, [r3, #0]
  if (pcb == NULL) {
 800c830:	b1a4      	cbz	r4, 800c85c <udp_input+0xc0>
  if (pcb != NULL) {
 800c832:	b1ac      	cbz	r4, 800c860 <udp_input+0xc4>
    for_us = 1;
 800c834:	2301      	movs	r3, #1
  if (for_us) {
 800c836:	2b00      	cmp	r3, #0
 800c838:	d041      	beq.n	800c8be <udp_input+0x122>
    if (pbuf_header(p, -UDP_HLEN)) {
 800c83a:	f06f 0107 	mvn.w	r1, #7
 800c83e:	4648      	mov	r0, r9
 800c840:	f7fb fef6 	bl	8008630 <pbuf_header>
 800c844:	b9a0      	cbnz	r0, 800c870 <udp_input+0xd4>
    if (pcb != NULL) {
 800c846:	b314      	cbz	r4, 800c88e <udp_input+0xf2>
      if (pcb->recv != NULL) {
 800c848:	69a5      	ldr	r5, [r4, #24]
 800c84a:	b1e5      	cbz	r5, 800c886 <udp_input+0xea>
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 800c84c:	69e0      	ldr	r0, [r4, #28]
 800c84e:	f8cd a000 	str.w	sl, [sp]
 800c852:	4b1f      	ldr	r3, [pc, #124]	; (800c8d0 <udp_input+0x134>)
 800c854:	464a      	mov	r2, r9
 800c856:	4621      	mov	r1, r4
 800c858:	47a8      	blx	r5
 800c85a:	e7c0      	b.n	800c7de <udp_input+0x42>
    pcb = uncon_pcb;
 800c85c:	465c      	mov	r4, fp
 800c85e:	e7e8      	b.n	800c832 <udp_input+0x96>
      for_us = ip4_addr_cmp(netif_ip4_addr(inp), ip4_current_dest_addr());
 800c860:	687b      	ldr	r3, [r7, #4]
 800c862:	4a19      	ldr	r2, [pc, #100]	; (800c8c8 <udp_input+0x12c>)
 800c864:	6952      	ldr	r2, [r2, #20]
 800c866:	4293      	cmp	r3, r2
 800c868:	bf14      	ite	ne
 800c86a:	2300      	movne	r3, #0
 800c86c:	2301      	moveq	r3, #1
 800c86e:	e7e2      	b.n	800c836 <udp_input+0x9a>
      LWIP_ASSERT("pbuf_header failed\n", 0);
 800c870:	4b18      	ldr	r3, [pc, #96]	; (800c8d4 <udp_input+0x138>)
 800c872:	f240 1255 	movw	r2, #341	; 0x155
 800c876:	4918      	ldr	r1, [pc, #96]	; (800c8d8 <udp_input+0x13c>)
 800c878:	4818      	ldr	r0, [pc, #96]	; (800c8dc <udp_input+0x140>)
 800c87a:	f001 f9a6 	bl	800dbca <iprintf>
      pbuf_free(p);
 800c87e:	4648      	mov	r0, r9
 800c880:	f7fb fee0 	bl	8008644 <pbuf_free>
      goto end;
 800c884:	e7ab      	b.n	800c7de <udp_input+0x42>
        pbuf_free(p);
 800c886:	4648      	mov	r0, r9
 800c888:	f7fb fedc 	bl	8008644 <pbuf_free>
        goto end;
 800c88c:	e7a7      	b.n	800c7de <udp_input+0x42>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 800c88e:	f1b8 0f00 	cmp.w	r8, #0
 800c892:	d110      	bne.n	800c8b6 <udp_input+0x11a>
 800c894:	4b0c      	ldr	r3, [pc, #48]	; (800c8c8 <udp_input+0x12c>)
 800c896:	695b      	ldr	r3, [r3, #20]
 800c898:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800c89c:	2be0      	cmp	r3, #224	; 0xe0
 800c89e:	d00a      	beq.n	800c8b6 <udp_input+0x11a>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 800c8a0:	4b09      	ldr	r3, [pc, #36]	; (800c8c8 <udp_input+0x12c>)
 800c8a2:	8999      	ldrh	r1, [r3, #12]
 800c8a4:	3108      	adds	r1, #8
 800c8a6:	b209      	sxth	r1, r1
 800c8a8:	4648      	mov	r0, r9
 800c8aa:	f7fb fec6 	bl	800863a <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 800c8ae:	2103      	movs	r1, #3
 800c8b0:	4648      	mov	r0, r9
 800c8b2:	f7fa fc49 	bl	8007148 <icmp_dest_unreach>
      pbuf_free(p);
 800c8b6:	4648      	mov	r0, r9
 800c8b8:	f7fb fec4 	bl	8008644 <pbuf_free>
 800c8bc:	e78f      	b.n	800c7de <udp_input+0x42>
    pbuf_free(p);
 800c8be:	4648      	mov	r0, r9
 800c8c0:	f7fb fec0 	bl	8008644 <pbuf_free>
  return;
 800c8c4:	e78b      	b.n	800c7de <udp_input+0x42>
 800c8c6:	bf00      	nop
 800c8c8:	2000426c 	.word	0x2000426c
 800c8cc:	20007994 	.word	0x20007994
 800c8d0:	2000427c 	.word	0x2000427c
 800c8d4:	0801048c 	.word	0x0801048c
 800c8d8:	080104bc 	.word	0x080104bc
 800c8dc:	0800e3b0 	.word	0x0800e3b0

0800c8e0 <udp_bind>:
 *
 * @see udp_disconnect()
 */
err_t
udp_bind(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 800c8e0:	b570      	push	{r4, r5, r6, lr}
 800c8e2:	4604      	mov	r4, r0
  struct udp_pcb *ipcb;
  u8_t rebind;

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 800c8e4:	460d      	mov	r5, r1
 800c8e6:	b159      	cbz	r1, 800c900 <udp_bind+0x20>
    ipaddr = IP4_ADDR_ANY;
  }
#endif /* LWIP_IPV4 */

  /* still need to check for ipaddr == NULL in IPv6 only case */
  if ((pcb == NULL) || (ipaddr == NULL)) {
 800c8e8:	2c00      	cmp	r4, #0
 800c8ea:	d02c      	beq.n	800c946 <udp_bind+0x66>
 800c8ec:	2d00      	cmp	r5, #0
 800c8ee:	d02d      	beq.n	800c94c <udp_bind+0x6c>
  ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_TRACE, ipaddr);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, (", port = %"U16_F")\n", port));

  rebind = 0;
  /* Check for double bind and rebind of the same pcb */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800c8f0:	4b1a      	ldr	r3, [pc, #104]	; (800c95c <udp_bind+0x7c>)
 800c8f2:	681b      	ldr	r3, [r3, #0]
 800c8f4:	4619      	mov	r1, r3
 800c8f6:	b129      	cbz	r1, 800c904 <udp_bind+0x24>
    /* is this UDP PCB already on active list? */
    if (pcb == ipcb) {
 800c8f8:	42a1      	cmp	r1, r4
 800c8fa:	d013      	beq.n	800c924 <udp_bind+0x44>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800c8fc:	68c9      	ldr	r1, [r1, #12]
 800c8fe:	e7fa      	b.n	800c8f6 <udp_bind+0x16>
    ipaddr = IP4_ADDR_ANY;
 800c900:	4d17      	ldr	r5, [pc, #92]	; (800c960 <udp_bind+0x80>)
 800c902:	e7f1      	b.n	800c8e8 <udp_bind+0x8>
  rebind = 0;
 800c904:	2600      	movs	r6, #0
      break;
    }
  }

  /* no port specified? */
  if (port == 0) {
 800c906:	b982      	cbnz	r2, 800c92a <udp_bind+0x4a>
    port = udp_new_port();
 800c908:	f7ff fef8 	bl	800c6fc <udp_new_port>
    if (port == 0) {
 800c90c:	4602      	mov	r2, r0
 800c90e:	b300      	cbz	r0, 800c952 <udp_bind+0x72>
        }
      }
    }
  }

  ip_addr_set_ipaddr(&pcb->local_ip, ipaddr);
 800c910:	682b      	ldr	r3, [r5, #0]
 800c912:	6023      	str	r3, [r4, #0]

  pcb->local_port = port;
 800c914:	8262      	strh	r2, [r4, #18]
  mib2_udp_bind(pcb);
  /* pcb not active yet? */
  if (rebind == 0) {
 800c916:	b9fe      	cbnz	r6, 800c958 <udp_bind+0x78>
    /* place the PCB on the active list if not already there */
    pcb->next = udp_pcbs;
 800c918:	4b10      	ldr	r3, [pc, #64]	; (800c95c <udp_bind+0x7c>)
 800c91a:	681a      	ldr	r2, [r3, #0]
 800c91c:	60e2      	str	r2, [r4, #12]
    udp_pcbs = pcb;
 800c91e:	601c      	str	r4, [r3, #0]
  }
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("udp_bind: bound to "));
  ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, &pcb->local_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->local_port));
  return ERR_OK;
 800c920:	2000      	movs	r0, #0
 800c922:	bd70      	pop	{r4, r5, r6, pc}
      rebind = 1;
 800c924:	2601      	movs	r6, #1
 800c926:	e7ee      	b.n	800c906 <udp_bind+0x26>
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800c928:	68db      	ldr	r3, [r3, #12]
 800c92a:	2b00      	cmp	r3, #0
 800c92c:	d0f0      	beq.n	800c910 <udp_bind+0x30>
      if (pcb != ipcb) {
 800c92e:	42a3      	cmp	r3, r4
 800c930:	d0fa      	beq.n	800c928 <udp_bind+0x48>
          if ((ipcb->local_port == port) &&
 800c932:	8a59      	ldrh	r1, [r3, #18]
 800c934:	428a      	cmp	r2, r1
 800c936:	d1f7      	bne.n	800c928 <udp_bind+0x48>
              ip_addr_cmp(&ipcb->local_ip, ipaddr)) {
 800c938:	6818      	ldr	r0, [r3, #0]
 800c93a:	6829      	ldr	r1, [r5, #0]
          if ((ipcb->local_port == port) &&
 800c93c:	4288      	cmp	r0, r1
 800c93e:	d1f3      	bne.n	800c928 <udp_bind+0x48>
            return ERR_USE;
 800c940:	f06f 0007 	mvn.w	r0, #7
 800c944:	bd70      	pop	{r4, r5, r6, pc}
    return ERR_VAL;
 800c946:	f06f 0005 	mvn.w	r0, #5
 800c94a:	bd70      	pop	{r4, r5, r6, pc}
 800c94c:	f06f 0005 	mvn.w	r0, #5
 800c950:	bd70      	pop	{r4, r5, r6, pc}
      return ERR_USE;
 800c952:	f06f 0007 	mvn.w	r0, #7
 800c956:	bd70      	pop	{r4, r5, r6, pc}
  return ERR_OK;
 800c958:	2000      	movs	r0, #0
}
 800c95a:	bd70      	pop	{r4, r5, r6, pc}
 800c95c:	20007994 	.word	0x20007994
 800c960:	0800ef98 	.word	0x0800ef98

0800c964 <udp_sendto_if_src>:
{
 800c964:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800c968:	b085      	sub	sp, #20
  if ((pcb == NULL) || (dst_ip == NULL) || !IP_ADDR_PCB_VERSION_MATCH(pcb, src_ip) ||
 800c96a:	2800      	cmp	r0, #0
 800c96c:	d051      	beq.n	800ca12 <udp_sendto_if_src+0xae>
 800c96e:	4604      	mov	r4, r0
 800c970:	2a00      	cmp	r2, #0
 800c972:	d051      	beq.n	800ca18 <udp_sendto_if_src+0xb4>
 800c974:	4699      	mov	r9, r3
 800c976:	4690      	mov	r8, r2
 800c978:	460e      	mov	r6, r1
  if (pcb->local_port == 0) {
 800c97a:	8a42      	ldrh	r2, [r0, #18]
 800c97c:	b922      	cbnz	r2, 800c988 <udp_sendto_if_src+0x24>
    err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 800c97e:	4601      	mov	r1, r0
 800c980:	f7ff ffae 	bl	800c8e0 <udp_bind>
    if (err != ERR_OK) {
 800c984:	4607      	mov	r7, r0
 800c986:	bb50      	cbnz	r0, 800c9de <udp_sendto_if_src+0x7a>
  if (pbuf_header(p, UDP_HLEN)) {
 800c988:	2108      	movs	r1, #8
 800c98a:	4630      	mov	r0, r6
 800c98c:	f7fb fe50 	bl	8008630 <pbuf_header>
 800c990:	bb48      	cbnz	r0, 800c9e6 <udp_sendto_if_src+0x82>
    q = p;
 800c992:	4635      	mov	r5, r6
  LWIP_ASSERT("check that first pbuf can hold struct udp_hdr",
 800c994:	896b      	ldrh	r3, [r5, #10]
 800c996:	2b07      	cmp	r3, #7
 800c998:	d933      	bls.n	800ca02 <udp_sendto_if_src+0x9e>
  udphdr = (struct udp_hdr *)q->payload;
 800c99a:	686f      	ldr	r7, [r5, #4]
  udphdr->src = lwip_htons(pcb->local_port);
 800c99c:	8a60      	ldrh	r0, [r4, #18]
 800c99e:	f7f9 fe35 	bl	800660c <lwip_htons>
 800c9a2:	8038      	strh	r0, [r7, #0]
  udphdr->dest = lwip_htons(dst_port);
 800c9a4:	4648      	mov	r0, r9
 800c9a6:	f7f9 fe31 	bl	800660c <lwip_htons>
 800c9aa:	8078      	strh	r0, [r7, #2]
  udphdr->chksum = 0x0000;
 800c9ac:	2300      	movs	r3, #0
 800c9ae:	71bb      	strb	r3, [r7, #6]
 800c9b0:	71fb      	strb	r3, [r7, #7]
    udphdr->len = lwip_htons(q->tot_len);
 800c9b2:	8928      	ldrh	r0, [r5, #8]
 800c9b4:	f7f9 fe2a 	bl	800660c <lwip_htons>
 800c9b8:	80b8      	strh	r0, [r7, #4]
  ttl = pcb->ttl;
 800c9ba:	7aa3      	ldrb	r3, [r4, #10]
  err = ip_output_if_src(q, src_ip, dst_ip, ttl, pcb->tos, ip_proto, netif);
 800c9bc:	7a62      	ldrb	r2, [r4, #9]
 800c9be:	990c      	ldr	r1, [sp, #48]	; 0x30
 800c9c0:	9102      	str	r1, [sp, #8]
 800c9c2:	2111      	movs	r1, #17
 800c9c4:	9101      	str	r1, [sp, #4]
 800c9c6:	9200      	str	r2, [sp, #0]
 800c9c8:	4642      	mov	r2, r8
 800c9ca:	990d      	ldr	r1, [sp, #52]	; 0x34
 800c9cc:	4628      	mov	r0, r5
 800c9ce:	f7fa fcf3 	bl	80073b8 <ip4_output_if_src>
 800c9d2:	4607      	mov	r7, r0
  if (q != p) {
 800c9d4:	42b5      	cmp	r5, r6
 800c9d6:	d002      	beq.n	800c9de <udp_sendto_if_src+0x7a>
    pbuf_free(q);
 800c9d8:	4628      	mov	r0, r5
 800c9da:	f7fb fe33 	bl	8008644 <pbuf_free>
}
 800c9de:	4638      	mov	r0, r7
 800c9e0:	b005      	add	sp, #20
 800c9e2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    q = pbuf_alloc(PBUF_IP, UDP_HLEN, PBUF_RAM);
 800c9e6:	2200      	movs	r2, #0
 800c9e8:	2108      	movs	r1, #8
 800c9ea:	2001      	movs	r0, #1
 800c9ec:	f7fb fe96 	bl	800871c <pbuf_alloc>
    if (q == NULL) {
 800c9f0:	4605      	mov	r5, r0
 800c9f2:	b1a0      	cbz	r0, 800ca1e <udp_sendto_if_src+0xba>
    if (p->tot_len != 0) {
 800c9f4:	8933      	ldrh	r3, [r6, #8]
 800c9f6:	2b00      	cmp	r3, #0
 800c9f8:	d0cc      	beq.n	800c994 <udp_sendto_if_src+0x30>
      pbuf_chain(q, p);
 800c9fa:	4631      	mov	r1, r6
 800c9fc:	f7fc f848 	bl	8008a90 <pbuf_chain>
 800ca00:	e7c8      	b.n	800c994 <udp_sendto_if_src+0x30>
  LWIP_ASSERT("check that first pbuf can hold struct udp_hdr",
 800ca02:	4b08      	ldr	r3, [pc, #32]	; (800ca24 <udp_sendto_if_src+0xc0>)
 800ca04:	f44f 7237 	mov.w	r2, #732	; 0x2dc
 800ca08:	4907      	ldr	r1, [pc, #28]	; (800ca28 <udp_sendto_if_src+0xc4>)
 800ca0a:	4808      	ldr	r0, [pc, #32]	; (800ca2c <udp_sendto_if_src+0xc8>)
 800ca0c:	f001 f8dd 	bl	800dbca <iprintf>
 800ca10:	e7c3      	b.n	800c99a <udp_sendto_if_src+0x36>
    return ERR_VAL;
 800ca12:	f06f 0705 	mvn.w	r7, #5
 800ca16:	e7e2      	b.n	800c9de <udp_sendto_if_src+0x7a>
 800ca18:	f06f 0705 	mvn.w	r7, #5
 800ca1c:	e7df      	b.n	800c9de <udp_sendto_if_src+0x7a>
      return ERR_MEM;
 800ca1e:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800ca22:	e7dc      	b.n	800c9de <udp_sendto_if_src+0x7a>
 800ca24:	0801048c 	.word	0x0801048c
 800ca28:	080104d0 	.word	0x080104d0
 800ca2c:	0800e3b0 	.word	0x0800e3b0

0800ca30 <udp_sendto_if>:
{
 800ca30:	b570      	push	{r4, r5, r6, lr}
 800ca32:	b082      	sub	sp, #8
 800ca34:	9d06      	ldr	r5, [sp, #24]
  if ((pcb == NULL) || (dst_ip == NULL) || !IP_ADDR_PCB_VERSION_MATCH(pcb, dst_ip)) {
 800ca36:	b1a8      	cbz	r0, 800ca64 <udp_sendto_if+0x34>
 800ca38:	4604      	mov	r4, r0
 800ca3a:	b1b2      	cbz	r2, 800ca6a <udp_sendto_if+0x3a>
  if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800ca3c:	b150      	cbz	r0, 800ca54 <udp_sendto_if+0x24>
 800ca3e:	6800      	ldr	r0, [r0, #0]
 800ca40:	b140      	cbz	r0, 800ca54 <udp_sendto_if+0x24>
      ip4_addr_ismulticast(ip_2_ip4(&pcb->local_ip))) {
 800ca42:	f000 06f0 	and.w	r6, r0, #240	; 0xf0
  if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800ca46:	2ee0      	cmp	r6, #224	; 0xe0
 800ca48:	d004      	beq.n	800ca54 <udp_sendto_if+0x24>
    if (!ip4_addr_cmp(ip_2_ip4(&(pcb->local_ip)), netif_ip4_addr(netif))) {
 800ca4a:	686e      	ldr	r6, [r5, #4]
 800ca4c:	42b0      	cmp	r0, r6
 800ca4e:	d10f      	bne.n	800ca70 <udp_sendto_if+0x40>
    src_ip = &pcb->local_ip;
 800ca50:	4626      	mov	r6, r4
 800ca52:	e000      	b.n	800ca56 <udp_sendto_if+0x26>
    src_ip = netif_ip_addr4(netif);
 800ca54:	1d2e      	adds	r6, r5, #4
 800ca56:	4620      	mov	r0, r4
  return udp_sendto_if_src(pcb, p, dst_ip, dst_port, netif, src_ip);
 800ca58:	9601      	str	r6, [sp, #4]
 800ca5a:	9500      	str	r5, [sp, #0]
 800ca5c:	f7ff ff82 	bl	800c964 <udp_sendto_if_src>
}
 800ca60:	b002      	add	sp, #8
 800ca62:	bd70      	pop	{r4, r5, r6, pc}
    return ERR_VAL;
 800ca64:	f06f 0005 	mvn.w	r0, #5
 800ca68:	e7fa      	b.n	800ca60 <udp_sendto_if+0x30>
 800ca6a:	f06f 0005 	mvn.w	r0, #5
 800ca6e:	e7f7      	b.n	800ca60 <udp_sendto_if+0x30>
      return ERR_RTE;
 800ca70:	f06f 0003 	mvn.w	r0, #3
 800ca74:	e7f4      	b.n	800ca60 <udp_sendto_if+0x30>

0800ca76 <udp_sendto>:
  if ((pcb == NULL) || (dst_ip == NULL) || !IP_ADDR_PCB_VERSION_MATCH(pcb, dst_ip)) {
 800ca76:	b198      	cbz	r0, 800caa0 <udp_sendto+0x2a>
{
 800ca78:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ca7a:	b083      	sub	sp, #12
 800ca7c:	4605      	mov	r5, r0
  if ((pcb == NULL) || (dst_ip == NULL) || !IP_ADDR_PCB_VERSION_MATCH(pcb, dst_ip)) {
 800ca7e:	b192      	cbz	r2, 800caa6 <udp_sendto+0x30>
 800ca80:	461f      	mov	r7, r3
 800ca82:	4614      	mov	r4, r2
 800ca84:	460e      	mov	r6, r1
    netif = ip_route(&pcb->local_ip, dst_ip_route);
 800ca86:	4610      	mov	r0, r2
 800ca88:	f7fa fb6a 	bl	8007160 <ip4_route>
  if (netif == NULL) {
 800ca8c:	b170      	cbz	r0, 800caac <udp_sendto+0x36>
  return udp_sendto_if(pcb, p, dst_ip, dst_port, netif);
 800ca8e:	9000      	str	r0, [sp, #0]
 800ca90:	463b      	mov	r3, r7
 800ca92:	4622      	mov	r2, r4
 800ca94:	4631      	mov	r1, r6
 800ca96:	4628      	mov	r0, r5
 800ca98:	f7ff ffca 	bl	800ca30 <udp_sendto_if>
}
 800ca9c:	b003      	add	sp, #12
 800ca9e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return ERR_VAL;
 800caa0:	f06f 0005 	mvn.w	r0, #5
 800caa4:	4770      	bx	lr
 800caa6:	f06f 0005 	mvn.w	r0, #5
 800caaa:	e7f7      	b.n	800ca9c <udp_sendto+0x26>
    return ERR_RTE;
 800caac:	f06f 0003 	mvn.w	r0, #3
 800cab0:	e7f4      	b.n	800ca9c <udp_sendto+0x26>

0800cab2 <udp_send>:
  if ((pcb == NULL) || IP_IS_ANY_TYPE_VAL(pcb->remote_ip)) {
 800cab2:	b128      	cbz	r0, 800cac0 <udp_send+0xe>
{
 800cab4:	b508      	push	{r3, lr}
  return udp_sendto(pcb, p, &pcb->remote_ip, pcb->remote_port);
 800cab6:	8a83      	ldrh	r3, [r0, #20]
 800cab8:	1d02      	adds	r2, r0, #4
 800caba:	f7ff ffdc 	bl	800ca76 <udp_sendto>
 800cabe:	bd08      	pop	{r3, pc}
    return ERR_VAL;
 800cac0:	f06f 0005 	mvn.w	r0, #5
 800cac4:	4770      	bx	lr

0800cac6 <udp_recv>:
 */
void
udp_recv(struct udp_pcb *pcb, udp_recv_fn recv, void *recv_arg)
{
  /* remember recv() callback and user data */
  pcb->recv = recv;
 800cac6:	6181      	str	r1, [r0, #24]
  pcb->recv_arg = recv_arg;
 800cac8:	61c2      	str	r2, [r0, #28]
 800caca:	4770      	bx	lr

0800cacc <udp_remove>:
 *
 * @see udp_new()
 */
void
udp_remove(struct udp_pcb *pcb)
{
 800cacc:	b508      	push	{r3, lr}
 800cace:	4601      	mov	r1, r0
  struct udp_pcb *pcb2;

  mib2_udp_unbind(pcb);
  /* pcb to be removed is first in list? */
  if (udp_pcbs == pcb) {
 800cad0:	4b0b      	ldr	r3, [pc, #44]	; (800cb00 <udp_remove+0x34>)
 800cad2:	681a      	ldr	r2, [r3, #0]
 800cad4:	4282      	cmp	r2, r0
 800cad6:	d109      	bne.n	800caec <udp_remove+0x20>
    /* make list start at 2nd pcb */
    udp_pcbs = udp_pcbs->next;
 800cad8:	68d2      	ldr	r2, [r2, #12]
 800cada:	601a      	str	r2, [r3, #0]
 800cadc:	e001      	b.n	800cae2 <udp_remove+0x16>
  } else {
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
      /* find pcb in udp_pcbs list */
      if (pcb2->next != NULL && pcb2->next == pcb) {
        /* remove pcb from list */
        pcb2->next = pcb->next;
 800cade:	68cb      	ldr	r3, [r1, #12]
 800cae0:	60d3      	str	r3, [r2, #12]
        break;
      }
    }
  }
  memp_free(MEMP_UDP_PCB, pcb);
 800cae2:	2000      	movs	r0, #0
 800cae4:	f7fb fbd8 	bl	8008298 <memp_free>
 800cae8:	bd08      	pop	{r3, pc}
 800caea:	461a      	mov	r2, r3
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 800caec:	2a00      	cmp	r2, #0
 800caee:	d0f8      	beq.n	800cae2 <udp_remove+0x16>
      if (pcb2->next != NULL && pcb2->next == pcb) {
 800caf0:	68d3      	ldr	r3, [r2, #12]
 800caf2:	2b00      	cmp	r3, #0
 800caf4:	d0f9      	beq.n	800caea <udp_remove+0x1e>
 800caf6:	4299      	cmp	r1, r3
 800caf8:	d0f1      	beq.n	800cade <udp_remove+0x12>
 800cafa:	461a      	mov	r2, r3
 800cafc:	e7f6      	b.n	800caec <udp_remove+0x20>
 800cafe:	bf00      	nop
 800cb00:	20007994 	.word	0x20007994

0800cb04 <udp_new>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new(void)
{
 800cb04:	b510      	push	{r4, lr}
  struct udp_pcb *pcb;
  pcb = (struct udp_pcb *)memp_malloc(MEMP_UDP_PCB);
 800cb06:	2000      	movs	r0, #0
 800cb08:	f7fb fbac 	bl	8008264 <memp_malloc>
  /* could allocate UDP PCB? */
  if (pcb != NULL) {
 800cb0c:	4604      	mov	r4, r0
 800cb0e:	b128      	cbz	r0, 800cb1c <udp_new+0x18>
    /* UDP Lite: by initializing to all zeroes, chksum_len is set to 0
     * which means checksum is generated over the whole datagram per default
     * (recommended as default by RFC 3828). */
    /* initialize PCB to all zeroes */
    memset(pcb, 0, sizeof(struct udp_pcb));
 800cb10:	2220      	movs	r2, #32
 800cb12:	2100      	movs	r1, #0
 800cb14:	f001 f9d0 	bl	800deb8 <memset>
    pcb->ttl = UDP_TTL;
 800cb18:	23ff      	movs	r3, #255	; 0xff
 800cb1a:	72a3      	strb	r3, [r4, #10]
#if LWIP_MULTICAST_TX_OPTIONS
    udp_set_multicast_ttl(pcb, UDP_TTL);
#endif /* LWIP_MULTICAST_TX_OPTIONS */
  }
  return pcb;
}
 800cb1c:	4620      	mov	r0, r4
 800cb1e:	bd10      	pop	{r4, pc}

0800cb20 <udp_new_ip_type>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new_ip_type(u8_t type)
{
 800cb20:	b508      	push	{r3, lr}
  struct udp_pcb *pcb;
  pcb = udp_new();
 800cb22:	f7ff ffef 	bl	800cb04 <udp_new>
  }
#else
  LWIP_UNUSED_ARG(type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  return pcb;
}
 800cb26:	bd08      	pop	{r3, pc}

0800cb28 <udp_netif_ip_addr_changed>:
 */
void udp_netif_ip_addr_changed(const ip_addr_t* old_addr, const ip_addr_t* new_addr)
{
  struct udp_pcb* upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 800cb28:	b1a0      	cbz	r0, 800cb54 <udp_netif_ip_addr_changed+0x2c>
{
 800cb2a:	b410      	push	{r4}
 800cb2c:	4604      	mov	r4, r0
  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 800cb2e:	6803      	ldr	r3, [r0, #0]
 800cb30:	b173      	cbz	r3, 800cb50 <udp_netif_ip_addr_changed+0x28>
 800cb32:	b169      	cbz	r1, 800cb50 <udp_netif_ip_addr_changed+0x28>
 800cb34:	680b      	ldr	r3, [r1, #0]
 800cb36:	b15b      	cbz	r3, 800cb50 <udp_netif_ip_addr_changed+0x28>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 800cb38:	4b07      	ldr	r3, [pc, #28]	; (800cb58 <udp_netif_ip_addr_changed+0x30>)
 800cb3a:	681b      	ldr	r3, [r3, #0]
 800cb3c:	e000      	b.n	800cb40 <udp_netif_ip_addr_changed+0x18>
 800cb3e:	68db      	ldr	r3, [r3, #12]
 800cb40:	b133      	cbz	r3, 800cb50 <udp_netif_ip_addr_changed+0x28>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 800cb42:	6818      	ldr	r0, [r3, #0]
 800cb44:	6822      	ldr	r2, [r4, #0]
 800cb46:	4290      	cmp	r0, r2
 800cb48:	d1f9      	bne.n	800cb3e <udp_netif_ip_addr_changed+0x16>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 800cb4a:	680a      	ldr	r2, [r1, #0]
 800cb4c:	601a      	str	r2, [r3, #0]
 800cb4e:	e7f6      	b.n	800cb3e <udp_netif_ip_addr_changed+0x16>
      }
    }
  }
}
 800cb50:	f85d 4b04 	ldr.w	r4, [sp], #4
 800cb54:	4770      	bx	lr
 800cb56:	bf00      	nop
 800cb58:	20007994 	.word	0x20007994

0800cb5c <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 800cb5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cb5e:	4604      	mov	r4, r0
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  s16_t ip_hdr_offset = SIZEOF_ETH_HDR;
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  if (p->len <= SIZEOF_ETH_HDR) {
 800cb60:	8945      	ldrh	r5, [r0, #10]
 800cb62:	2d0e      	cmp	r5, #14
 800cb64:	d916      	bls.n	800cb94 <ethernet_input+0x38>
 800cb66:	460f      	mov	r7, r1
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 800cb68:	6840      	ldr	r0, [r0, #4]
     (unsigned)ethhdr->dest.addr[3], (unsigned)ethhdr->dest.addr[4], (unsigned)ethhdr->dest.addr[5],
     (unsigned)ethhdr->src.addr[0],  (unsigned)ethhdr->src.addr[1],  (unsigned)ethhdr->src.addr[2],
     (unsigned)ethhdr->src.addr[3],  (unsigned)ethhdr->src.addr[4],  (unsigned)ethhdr->src.addr[5],
     lwip_htons(ethhdr->type)));

  type = ethhdr->type;
 800cb6a:	8986      	ldrh	r6, [r0, #12]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 800cb6c:	7803      	ldrb	r3, [r0, #0]
 800cb6e:	f013 0f01 	tst.w	r3, #1
 800cb72:	d00a      	beq.n	800cb8a <ethernet_input+0x2e>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 800cb74:	2b01      	cmp	r3, #1
 800cb76:	d012      	beq.n	800cb9e <ethernet_input+0x42>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 800cb78:	2206      	movs	r2, #6
 800cb7a:	4921      	ldr	r1, [pc, #132]	; (800cc00 <ethernet_input+0xa4>)
 800cb7c:	f001 f982 	bl	800de84 <memcmp>
 800cb80:	b918      	cbnz	r0, 800cb8a <ethernet_input+0x2e>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 800cb82:	7b63      	ldrb	r3, [r4, #13]
 800cb84:	f043 0308 	orr.w	r3, r3, #8
 800cb88:	7363      	strb	r3, [r4, #13]
    }
  }

  switch (type) {
 800cb8a:	2e08      	cmp	r6, #8
 800cb8c:	d012      	beq.n	800cbb4 <ethernet_input+0x58>
 800cb8e:	f5b6 6fc1 	cmp.w	r6, #1544	; 0x608
 800cb92:	d022      	beq.n	800cbda <ethernet_input+0x7e>
  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;

free_and_return:
  pbuf_free(p);
 800cb94:	4620      	mov	r0, r4
 800cb96:	f7fb fd55 	bl	8008644 <pbuf_free>
  return ERR_OK;
}
 800cb9a:	2000      	movs	r0, #0
 800cb9c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 800cb9e:	7843      	ldrb	r3, [r0, #1]
 800cba0:	2b00      	cmp	r3, #0
 800cba2:	d1f2      	bne.n	800cb8a <ethernet_input+0x2e>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
 800cba4:	7883      	ldrb	r3, [r0, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 800cba6:	2b5e      	cmp	r3, #94	; 0x5e
 800cba8:	d1ef      	bne.n	800cb8a <ethernet_input+0x2e>
        p->flags |= PBUF_FLAG_LLMCAST;
 800cbaa:	7b63      	ldrb	r3, [r4, #13]
 800cbac:	f043 0310 	orr.w	r3, r3, #16
 800cbb0:	7363      	strb	r3, [r4, #13]
 800cbb2:	e7ea      	b.n	800cb8a <ethernet_input+0x2e>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 800cbb4:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800cbb8:	f013 0f08 	tst.w	r3, #8
 800cbbc:	d0ea      	beq.n	800cb94 <ethernet_input+0x38>
      if ((p->len < ip_hdr_offset) || pbuf_header(p, (s16_t)-ip_hdr_offset)) {
 800cbbe:	2d0d      	cmp	r5, #13
 800cbc0:	dde8      	ble.n	800cb94 <ethernet_input+0x38>
 800cbc2:	f06f 010d 	mvn.w	r1, #13
 800cbc6:	4620      	mov	r0, r4
 800cbc8:	f7fb fd32 	bl	8008630 <pbuf_header>
 800cbcc:	2800      	cmp	r0, #0
 800cbce:	d1e1      	bne.n	800cb94 <ethernet_input+0x38>
        ip4_input(p, netif);
 800cbd0:	4639      	mov	r1, r7
 800cbd2:	4620      	mov	r0, r4
 800cbd4:	f7fa fb14 	bl	8007200 <ip4_input>
      break;
 800cbd8:	e7df      	b.n	800cb9a <ethernet_input+0x3e>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 800cbda:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800cbde:	f013 0f08 	tst.w	r3, #8
 800cbe2:	d0d7      	beq.n	800cb94 <ethernet_input+0x38>
      if ((p->len < ip_hdr_offset) || pbuf_header(p, (s16_t)-ip_hdr_offset)) {
 800cbe4:	2d0d      	cmp	r5, #13
 800cbe6:	ddd5      	ble.n	800cb94 <ethernet_input+0x38>
 800cbe8:	f06f 010d 	mvn.w	r1, #13
 800cbec:	4620      	mov	r0, r4
 800cbee:	f7fb fd1f 	bl	8008630 <pbuf_header>
 800cbf2:	2800      	cmp	r0, #0
 800cbf4:	d1ce      	bne.n	800cb94 <ethernet_input+0x38>
        etharp_input(p, netif);
 800cbf6:	4639      	mov	r1, r7
 800cbf8:	4620      	mov	r0, r4
 800cbfa:	f7f9 ff1b 	bl	8006a34 <etharp_input>
      break;
 800cbfe:	e7cc      	b.n	800cb9a <ethernet_input+0x3e>
 800cc00:	08010500 	.word	0x08010500

0800cc04 <ethernet_output>:
 */
err_t
ethernet_output(struct netif* netif, struct pbuf* p,
                const struct eth_addr* src, const struct eth_addr* dst,
                u16_t eth_type)
{
 800cc04:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cc08:	4605      	mov	r5, r0
 800cc0a:	460c      	mov	r4, r1
 800cc0c:	4616      	mov	r6, r2
 800cc0e:	461f      	mov	r7, r3
  struct eth_hdr* ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 800cc10:	f8bd 0018 	ldrh.w	r0, [sp, #24]
 800cc14:	f7f9 fcfa 	bl	800660c <lwip_htons>
 800cc18:	4680      	mov	r8, r0

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_header(p, SIZEOF_ETH_HDR) != 0) {
 800cc1a:	210e      	movs	r1, #14
 800cc1c:	4620      	mov	r0, r4
 800cc1e:	f7fb fd07 	bl	8008630 <pbuf_header>
 800cc22:	b9e0      	cbnz	r0, 800cc5e <ethernet_output+0x5a>
      goto pbuf_header_failed;
    }
  }

  ethhdr = (struct eth_hdr*)p->payload;
 800cc24:	6863      	ldr	r3, [r4, #4]
  ethhdr->type = eth_type_be;
 800cc26:	f8a3 800c 	strh.w	r8, [r3, #12]
  ETHADDR32_COPY(&ethhdr->dest, dst);
 800cc2a:	683a      	ldr	r2, [r7, #0]
 800cc2c:	601a      	str	r2, [r3, #0]
 800cc2e:	88ba      	ldrh	r2, [r7, #4]
 800cc30:	809a      	strh	r2, [r3, #4]
  ETHADDR16_COPY(&ethhdr->src,  src);
 800cc32:	6832      	ldr	r2, [r6, #0]
 800cc34:	f8c3 2006 	str.w	r2, [r3, #6]
 800cc38:	88b2      	ldrh	r2, [r6, #4]
 800cc3a:	815a      	strh	r2, [r3, #10]

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 800cc3c:	f895 3024 	ldrb.w	r3, [r5, #36]	; 0x24
 800cc40:	2b06      	cmp	r3, #6
 800cc42:	d006      	beq.n	800cc52 <ethernet_output+0x4e>
 800cc44:	4b08      	ldr	r3, [pc, #32]	; (800cc68 <ethernet_output+0x64>)
 800cc46:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800cc4a:	4908      	ldr	r1, [pc, #32]	; (800cc6c <ethernet_output+0x68>)
 800cc4c:	4808      	ldr	r0, [pc, #32]	; (800cc70 <ethernet_output+0x6c>)
 800cc4e:	f000 ffbc 	bl	800dbca <iprintf>
    (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
    ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 800cc52:	69ab      	ldr	r3, [r5, #24]
 800cc54:	4621      	mov	r1, r4
 800cc56:	4628      	mov	r0, r5
 800cc58:	4798      	blx	r3
 800cc5a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
    ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
 800cc5e:	f06f 0001 	mvn.w	r0, #1
}
 800cc62:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cc66:	bf00      	nop
 800cc68:	08010508 	.word	0x08010508
 800cc6c:	08010540 	.word	0x08010540
 800cc70:	0800e3b0 	.word	0x0800e3b0

0800cc74 <sys_mbox_new>:
#endif

/*-----------------------------------------------------------------------------------*/
//  Creates an empty mailbox.
err_t sys_mbox_new(sys_mbox_t *mbox, int size)
{
 800cc74:	b510      	push	{r4, lr}
 800cc76:	b084      	sub	sp, #16
 800cc78:	4604      	mov	r4, r0
#if (osCMSIS < 0x20000U)
  osMessageQDef(QUEUE, size, void *);
 800cc7a:	9100      	str	r1, [sp, #0]
 800cc7c:	2304      	movs	r3, #4
 800cc7e:	9301      	str	r3, [sp, #4]
 800cc80:	2100      	movs	r1, #0
 800cc82:	9102      	str	r1, [sp, #8]
 800cc84:	9103      	str	r1, [sp, #12]
  *mbox = osMessageCreate(osMessageQ(QUEUE), NULL);
 800cc86:	4668      	mov	r0, sp
 800cc88:	f7f5 fc00 	bl	800248c <osMessageCreate>
 800cc8c:	6020      	str	r0, [r4, #0]
  if(lwip_stats.sys.mbox.max < lwip_stats.sys.mbox.used)
  {
    lwip_stats.sys.mbox.max = lwip_stats.sys.mbox.used;
  }
#endif /* SYS_STATS */
  if(*mbox == NULL)
 800cc8e:	b110      	cbz	r0, 800cc96 <sys_mbox_new+0x22>
    return ERR_MEM;

  return ERR_OK;
 800cc90:	2000      	movs	r0, #0
}
 800cc92:	b004      	add	sp, #16
 800cc94:	bd10      	pop	{r4, pc}
    return ERR_MEM;
 800cc96:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800cc9a:	e7fa      	b.n	800cc92 <sys_mbox_new+0x1e>

0800cc9c <sys_mbox_free>:
  Deallocates a mailbox. If there are messages still present in the
  mailbox when the mailbox is deallocated, it is an indication of a
  programming error in lwIP and the developer should be notified.
*/
void sys_mbox_free(sys_mbox_t *mbox)
{
 800cc9c:	b510      	push	{r4, lr}
 800cc9e:	4604      	mov	r4, r0
#if (osCMSIS < 0x20000U)
  if(osMessageWaiting(*mbox))
 800cca0:	6800      	ldr	r0, [r0, #0]
 800cca2:	f7f5 fc89 	bl	80025b8 <osMessageWaiting>
    lwip_stats.sys.mbox.err++;
#endif /* SYS_STATS */

  }
#if (osCMSIS < 0x20000U)
  osMessageDelete(*mbox);
 800cca6:	6820      	ldr	r0, [r4, #0]
 800cca8:	f7f5 fc93 	bl	80025d2 <osMessageDelete>
 800ccac:	bd10      	pop	{r4, pc}

0800ccae <sys_mbox_post>:
}

/*-----------------------------------------------------------------------------------*/
//   Posts the "msg" to the mailbox.
void sys_mbox_post(sys_mbox_t *mbox, void *data)
{
 800ccae:	b538      	push	{r3, r4, r5, lr}
 800ccb0:	4605      	mov	r5, r0
 800ccb2:	460c      	mov	r4, r1
#if (osCMSIS < 0x20000U)
  while(osMessagePut(*mbox, (uint32_t)data, osWaitForever) != osOK);
 800ccb4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800ccb8:	4621      	mov	r1, r4
 800ccba:	6828      	ldr	r0, [r5, #0]
 800ccbc:	f7f5 fbfa 	bl	80024b4 <osMessagePut>
 800ccc0:	2800      	cmp	r0, #0
 800ccc2:	d1f7      	bne.n	800ccb4 <sys_mbox_post+0x6>
#else
  while(osMessageQueuePut(*mbox, &data, 0, osWaitForever) != osOK);
#endif
}
 800ccc4:	bd38      	pop	{r3, r4, r5, pc}

0800ccc6 <sys_mbox_trypost>:


/*-----------------------------------------------------------------------------------*/
//   Try to post the "msg" to the mailbox.
err_t sys_mbox_trypost(sys_mbox_t *mbox, void *msg)
{
 800ccc6:	b508      	push	{r3, lr}
  err_t result;
#if (osCMSIS < 0x20000U)
  if(osMessagePut(*mbox, (uint32_t)msg, 0) == osOK)
 800ccc8:	2200      	movs	r2, #0
 800ccca:	6800      	ldr	r0, [r0, #0]
 800cccc:	f7f5 fbf2 	bl	80024b4 <osMessagePut>
 800ccd0:	b900      	cbnz	r0, 800ccd4 <sys_mbox_trypost+0xe>
    lwip_stats.sys.mbox.err++;
#endif /* SYS_STATS */
  }

  return result;
}
 800ccd2:	bd08      	pop	{r3, pc}
    result = ERR_MEM;
 800ccd4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800ccd8:	e7fb      	b.n	800ccd2 <sys_mbox_trypost+0xc>

0800ccda <sys_arch_mbox_fetch>:

  Note that a function with a similar name, sys_mbox_fetch(), is
  implemented by lwIP.
*/
u32_t sys_arch_mbox_fetch(sys_mbox_t *mbox, void **msg, u32_t timeout)
{
 800ccda:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ccdc:	b089      	sub	sp, #36	; 0x24
 800ccde:	4606      	mov	r6, r0
 800cce0:	460f      	mov	r7, r1
 800cce2:	4615      	mov	r5, r2
#if (osCMSIS < 0x20000U)
  osEvent event;
  uint32_t starttime = osKernelSysTick();
 800cce4:	f7f5 fa81 	bl	80021ea <osKernelSysTick>
 800cce8:	4604      	mov	r4, r0
#else
  osStatus_t status;
  uint32_t starttime = osKernelGetTickCount();
#endif
  if(timeout != 0)
 800ccea:	b185      	cbz	r5, 800cd0e <sys_arch_mbox_fetch+0x34>
  {
#if (osCMSIS < 0x20000U)
    event = osMessageGet (*mbox, timeout);
 800ccec:	462a      	mov	r2, r5
 800ccee:	6831      	ldr	r1, [r6, #0]
 800ccf0:	a805      	add	r0, sp, #20
 800ccf2:	f7f5 fc13 	bl	800251c <osMessageGet>

    if(event.status == osEventMessage)
 800ccf6:	9b05      	ldr	r3, [sp, #20]
 800ccf8:	2b10      	cmp	r3, #16
 800ccfa:	d002      	beq.n	800cd02 <sys_arch_mbox_fetch+0x28>
      return (osKernelGetTickCount() - starttime);
    }
#endif
    else
    {
      return SYS_ARCH_TIMEOUT;
 800ccfc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800cd00:	e015      	b.n	800cd2e <sys_arch_mbox_fetch+0x54>
      *msg = (void *)event.value.v;
 800cd02:	9b06      	ldr	r3, [sp, #24]
 800cd04:	603b      	str	r3, [r7, #0]
      return (osKernelSysTick() - starttime);
 800cd06:	f7f5 fa70 	bl	80021ea <osKernelSysTick>
 800cd0a:	1b00      	subs	r0, r0, r4
 800cd0c:	e00f      	b.n	800cd2e <sys_arch_mbox_fetch+0x54>
    }
  }
  else
  {
#if (osCMSIS < 0x20000U)
    event = osMessageGet (*mbox, osWaitForever);
 800cd0e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800cd12:	6831      	ldr	r1, [r6, #0]
 800cd14:	4668      	mov	r0, sp
 800cd16:	f7f5 fc01 	bl	800251c <osMessageGet>
 800cd1a:	e89d 0007 	ldmia.w	sp, {r0, r1, r2}
 800cd1e:	ab08      	add	r3, sp, #32
 800cd20:	e903 0007 	stmdb	r3, {r0, r1, r2}
    *msg = (void *)event.value.v;
 800cd24:	9b06      	ldr	r3, [sp, #24]
 800cd26:	603b      	str	r3, [r7, #0]
    return (osKernelSysTick() - starttime);
 800cd28:	f7f5 fa5f 	bl	80021ea <osKernelSysTick>
 800cd2c:	1b00      	subs	r0, r0, r4
#else
    osMessageQueueGet(*mbox, msg, 0, osWaitForever );
    return (osKernelGetTickCount() - starttime);
#endif
  }
}
 800cd2e:	b009      	add	sp, #36	; 0x24
 800cd30:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800cd32 <sys_arch_mbox_tryfetch>:
/*
  Similar to sys_arch_mbox_fetch, but if message is not ready immediately, we'll
  return with SYS_MBOX_EMPTY.  On success, 0 is returned.
*/
u32_t sys_arch_mbox_tryfetch(sys_mbox_t *mbox, void **msg)
{
 800cd32:	b510      	push	{r4, lr}
 800cd34:	b084      	sub	sp, #16
 800cd36:	460c      	mov	r4, r1
#if (osCMSIS < 0x20000U)
  osEvent event;

  event = osMessageGet (*mbox, 0);
 800cd38:	2200      	movs	r2, #0
 800cd3a:	6801      	ldr	r1, [r0, #0]
 800cd3c:	a801      	add	r0, sp, #4
 800cd3e:	f7f5 fbed 	bl	800251c <osMessageGet>

  if(event.status == osEventMessage)
 800cd42:	9b01      	ldr	r3, [sp, #4]
 800cd44:	2b10      	cmp	r3, #16
 800cd46:	d003      	beq.n	800cd50 <sys_arch_mbox_tryfetch+0x1e>
#endif
    return ERR_OK;
  }
  else
  {
    return SYS_MBOX_EMPTY;
 800cd48:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
  }
}
 800cd4c:	b004      	add	sp, #16
 800cd4e:	bd10      	pop	{r4, pc}
    *msg = (void *)event.value.v;
 800cd50:	9b02      	ldr	r3, [sp, #8]
 800cd52:	6023      	str	r3, [r4, #0]
    return ERR_OK;
 800cd54:	2000      	movs	r0, #0
 800cd56:	e7f9      	b.n	800cd4c <sys_arch_mbox_tryfetch+0x1a>

0800cd58 <sys_mbox_valid>:
/*----------------------------------------------------------------------------------*/
int sys_mbox_valid(sys_mbox_t *mbox)
{
  if (*mbox == SYS_MBOX_NULL)
 800cd58:	6803      	ldr	r3, [r0, #0]
 800cd5a:	b10b      	cbz	r3, 800cd60 <sys_mbox_valid+0x8>
    return 0;
  else
    return 1;
 800cd5c:	2001      	movs	r0, #1
}
 800cd5e:	4770      	bx	lr
    return 0;
 800cd60:	2000      	movs	r0, #0
 800cd62:	4770      	bx	lr

0800cd64 <sys_mbox_set_invalid>:
/*-----------------------------------------------------------------------------------*/
void sys_mbox_set_invalid(sys_mbox_t *mbox)
{
  *mbox = SYS_MBOX_NULL;
 800cd64:	2300      	movs	r3, #0
 800cd66:	6003      	str	r3, [r0, #0]
 800cd68:	4770      	bx	lr

0800cd6a <sys_sem_new>:

/*-----------------------------------------------------------------------------------*/
//  Creates a new semaphore. The "count" argument specifies
//  the initial state of the semaphore.
err_t sys_sem_new(sys_sem_t *sem, u8_t count)
{
 800cd6a:	b530      	push	{r4, r5, lr}
 800cd6c:	b083      	sub	sp, #12
 800cd6e:	4604      	mov	r4, r0
 800cd70:	460d      	mov	r5, r1
#if (osCMSIS < 0x20000U)
  osSemaphoreDef(SEM);
 800cd72:	2300      	movs	r3, #0
 800cd74:	9300      	str	r3, [sp, #0]
 800cd76:	9301      	str	r3, [sp, #4]
  *sem = osSemaphoreCreate (osSemaphore(SEM), 1);
 800cd78:	2101      	movs	r1, #1
 800cd7a:	4668      	mov	r0, sp
 800cd7c:	f7f5 faee 	bl	800235c <osSemaphoreCreate>
 800cd80:	6020      	str	r0, [r4, #0]
#else
  *sem = osSemaphoreNew(UINT16_MAX, count, NULL);
#endif

  if(*sem == NULL)
 800cd82:	b140      	cbz	r0, 800cd96 <sys_sem_new+0x2c>
    ++lwip_stats.sys.sem.err;
#endif /* SYS_STATS */
    return ERR_MEM;
  }

  if(count == 0)	// Means it can't be taken
 800cd84:	b115      	cbz	r5, 800cd8c <sys_sem_new+0x22>
  if (lwip_stats.sys.sem.max < lwip_stats.sys.sem.used) {
    lwip_stats.sys.sem.max = lwip_stats.sys.sem.used;
  }
#endif /* SYS_STATS */

  return ERR_OK;
 800cd86:	2000      	movs	r0, #0
}
 800cd88:	b003      	add	sp, #12
 800cd8a:	bd30      	pop	{r4, r5, pc}
    osSemaphoreWait(*sem, 0);
 800cd8c:	2100      	movs	r1, #0
 800cd8e:	f7f5 fb0b 	bl	80023a8 <osSemaphoreWait>
  return ERR_OK;
 800cd92:	2000      	movs	r0, #0
 800cd94:	e7f8      	b.n	800cd88 <sys_sem_new+0x1e>
    return ERR_MEM;
 800cd96:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800cd9a:	e7f5      	b.n	800cd88 <sys_sem_new+0x1e>

0800cd9c <sys_arch_sem_wait>:

  Notice that lwIP implements a function with a similar name,
  sys_sem_wait(), that uses the sys_arch_sem_wait() function.
*/
u32_t sys_arch_sem_wait(sys_sem_t *sem, u32_t timeout)
{
 800cd9c:	b570      	push	{r4, r5, r6, lr}
 800cd9e:	4604      	mov	r4, r0
 800cda0:	460e      	mov	r6, r1
#if (osCMSIS < 0x20000U)
  uint32_t starttime = osKernelSysTick();
 800cda2:	f7f5 fa22 	bl	80021ea <osKernelSysTick>
 800cda6:	4605      	mov	r5, r0
#else
  uint32_t starttime = osKernelGetTickCount();
#endif
  if(timeout != 0)
 800cda8:	b956      	cbnz	r6, 800cdc0 <sys_arch_sem_wait+0x24>
    }
  }
  else
  {
#if (osCMSIS < 0x20000U)
    while(osSemaphoreWait (*sem, osWaitForever) != osOK);
 800cdaa:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800cdae:	6820      	ldr	r0, [r4, #0]
 800cdb0:	f7f5 fafa 	bl	80023a8 <osSemaphoreWait>
 800cdb4:	2800      	cmp	r0, #0
 800cdb6:	d1f8      	bne.n	800cdaa <sys_arch_sem_wait+0xe>
    return (osKernelSysTick() - starttime);
 800cdb8:	f7f5 fa17 	bl	80021ea <osKernelSysTick>
 800cdbc:	1b40      	subs	r0, r0, r5
 800cdbe:	bd70      	pop	{r4, r5, r6, pc}
    if(osSemaphoreWait (*sem, timeout) == osOK)
 800cdc0:	4631      	mov	r1, r6
 800cdc2:	6820      	ldr	r0, [r4, #0]
 800cdc4:	f7f5 faf0 	bl	80023a8 <osSemaphoreWait>
 800cdc8:	b110      	cbz	r0, 800cdd0 <sys_arch_sem_wait+0x34>
      return SYS_ARCH_TIMEOUT;
 800cdca:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
#else
    while(osSemaphoreAcquire(*sem, osWaitForever) != osOK);
    return (osKernelGetTickCount() - starttime);
#endif
  }
}
 800cdce:	bd70      	pop	{r4, r5, r6, pc}
      return (osKernelSysTick() - starttime);
 800cdd0:	f7f5 fa0b 	bl	80021ea <osKernelSysTick>
 800cdd4:	1b40      	subs	r0, r0, r5
 800cdd6:	bd70      	pop	{r4, r5, r6, pc}

0800cdd8 <sys_sem_signal>:

/*-----------------------------------------------------------------------------------*/
// Signals a semaphore
void sys_sem_signal(sys_sem_t *sem)
{
 800cdd8:	b508      	push	{r3, lr}
  osSemaphoreRelease(*sem);
 800cdda:	6800      	ldr	r0, [r0, #0]
 800cddc:	f7f5 fb1c 	bl	8002418 <osSemaphoreRelease>
 800cde0:	bd08      	pop	{r3, pc}

0800cde2 <sys_sem_free>:
}

/*-----------------------------------------------------------------------------------*/
// Deallocates a semaphore
void sys_sem_free(sys_sem_t *sem)
{
 800cde2:	b508      	push	{r3, lr}
#if SYS_STATS
  --lwip_stats.sys.sem.used;
#endif /* SYS_STATS */

  osSemaphoreDelete(*sem);
 800cde4:	6800      	ldr	r0, [r0, #0]
 800cde6:	f7f5 fb45 	bl	8002474 <osSemaphoreDelete>
 800cdea:	bd08      	pop	{r3, pc}

0800cdec <sys_sem_valid>:
}
/*-----------------------------------------------------------------------------------*/
int sys_sem_valid(sys_sem_t *sem)
{
  if (*sem == SYS_SEM_NULL)
 800cdec:	6803      	ldr	r3, [r0, #0]
 800cdee:	b10b      	cbz	r3, 800cdf4 <sys_sem_valid+0x8>
    return 0;
  else
    return 1;
 800cdf0:	2001      	movs	r0, #1
}
 800cdf2:	4770      	bx	lr
    return 0;
 800cdf4:	2000      	movs	r0, #0
 800cdf6:	4770      	bx	lr

0800cdf8 <sys_sem_set_invalid>:

/*-----------------------------------------------------------------------------------*/
void sys_sem_set_invalid(sys_sem_t *sem)
{
  *sem = SYS_SEM_NULL;
 800cdf8:	2300      	movs	r3, #0
 800cdfa:	6003      	str	r3, [r0, #0]
 800cdfc:	4770      	bx	lr
	...

0800ce00 <sys_init>:
#else
osMutexId_t lwip_sys_mutex;
#endif
// Initialize sys arch
void sys_init(void)
{
 800ce00:	b508      	push	{r3, lr}
#if (osCMSIS < 0x20000U)
  lwip_sys_mutex = osMutexCreate(osMutex(lwip_sys_mutex));
 800ce02:	4803      	ldr	r0, [pc, #12]	; (800ce10 <sys_init+0x10>)
 800ce04:	f7f5 fa39 	bl	800227a <osMutexCreate>
 800ce08:	4b02      	ldr	r3, [pc, #8]	; (800ce14 <sys_init+0x14>)
 800ce0a:	6018      	str	r0, [r3, #0]
 800ce0c:	bd08      	pop	{r3, pc}
 800ce0e:	bf00      	nop
 800ce10:	0801057c 	.word	0x0801057c
 800ce14:	2000799c 	.word	0x2000799c

0800ce18 <sys_mutex_new>:
                                      /* Mutexes*/
/*-----------------------------------------------------------------------------------*/
/*-----------------------------------------------------------------------------------*/
#if LWIP_COMPAT_MUTEX == 0
/* Create a new mutex*/
err_t sys_mutex_new(sys_mutex_t *mutex) {
 800ce18:	b510      	push	{r4, lr}
 800ce1a:	b082      	sub	sp, #8
 800ce1c:	4604      	mov	r4, r0

#if (osCMSIS < 0x20000U)
  osMutexDef(MUTEX);
 800ce1e:	2300      	movs	r3, #0
 800ce20:	9300      	str	r3, [sp, #0]
 800ce22:	9301      	str	r3, [sp, #4]
  *mutex = osMutexCreate(osMutex(MUTEX));
 800ce24:	4668      	mov	r0, sp
 800ce26:	f7f5 fa28 	bl	800227a <osMutexCreate>
 800ce2a:	6020      	str	r0, [r4, #0]
#else
  *mutex = osMutexNew(NULL);
#endif

  if(*mutex == NULL)
 800ce2c:	b110      	cbz	r0, 800ce34 <sys_mutex_new+0x1c>
  ++lwip_stats.sys.mutex.used;
  if (lwip_stats.sys.mutex.max < lwip_stats.sys.mutex.used) {
    lwip_stats.sys.mutex.max = lwip_stats.sys.mutex.used;
  }
#endif /* SYS_STATS */
  return ERR_OK;
 800ce2e:	2000      	movs	r0, #0
}
 800ce30:	b002      	add	sp, #8
 800ce32:	bd10      	pop	{r4, pc}
    return ERR_MEM;
 800ce34:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800ce38:	e7fa      	b.n	800ce30 <sys_mutex_new+0x18>

0800ce3a <sys_mutex_lock>:
  osMutexDelete(*mutex);
}
/*-----------------------------------------------------------------------------------*/
/* Lock a mutex*/
void sys_mutex_lock(sys_mutex_t *mutex)
{
 800ce3a:	b508      	push	{r3, lr}
#if (osCMSIS < 0x20000U)
  osMutexWait(*mutex, osWaitForever);
 800ce3c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800ce40:	6800      	ldr	r0, [r0, #0]
 800ce42:	f7f5 fa25 	bl	8002290 <osMutexWait>
 800ce46:	bd08      	pop	{r3, pc}

0800ce48 <sys_mutex_unlock>:
}

/*-----------------------------------------------------------------------------------*/
/* Unlock a mutex*/
void sys_mutex_unlock(sys_mutex_t *mutex)
{
 800ce48:	b508      	push	{r3, lr}
  osMutexRelease(*mutex);
 800ce4a:	6800      	ldr	r0, [r0, #0]
 800ce4c:	f7f5 fa58 	bl	8002300 <osMutexRelease>
 800ce50:	bd08      	pop	{r3, pc}

0800ce52 <sys_thread_new>:
  function "thread()". The "arg" argument will be passed as an argument to the
  thread() function. The id of the new thread is returned. Both the id and
  the priority are system dependent.
*/
sys_thread_t sys_thread_new(const char *name, lwip_thread_fn thread , void *arg, int stacksize, int prio)
{
 800ce52:	b510      	push	{r4, lr}
 800ce54:	b088      	sub	sp, #32
#if (osCMSIS < 0x20000U)
  const osThreadDef_t os_thread_def = { (char *)name, (os_pthread)thread, (osPriority)prio, 0, stacksize};
 800ce56:	2400      	movs	r4, #0
 800ce58:	9403      	str	r4, [sp, #12]
 800ce5a:	9404      	str	r4, [sp, #16]
 800ce5c:	9406      	str	r4, [sp, #24]
 800ce5e:	9407      	str	r4, [sp, #28]
 800ce60:	9001      	str	r0, [sp, #4]
 800ce62:	9102      	str	r1, [sp, #8]
 800ce64:	f9bd 1028 	ldrsh.w	r1, [sp, #40]	; 0x28
 800ce68:	f8ad 100c 	strh.w	r1, [sp, #12]
 800ce6c:	9305      	str	r3, [sp, #20]
  return osThreadCreate(&os_thread_def, arg);
 800ce6e:	4611      	mov	r1, r2
 800ce70:	a801      	add	r0, sp, #4
 800ce72:	f7f5 f9c4 	bl	80021fe <osThreadCreate>
                        .stack_size = stacksize,
                        .priority = (osPriority_t)prio,
                      };
  return osThreadNew(thread, arg, &attributes);
#endif
}
 800ce76:	b008      	add	sp, #32
 800ce78:	bd10      	pop	{r4, pc}
	...

0800ce7c <sys_arch_protect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
sys_prot_t sys_arch_protect(void)
{
 800ce7c:	b508      	push	{r3, lr}
#if (osCMSIS < 0x20000U)
  osMutexWait(lwip_sys_mutex, osWaitForever);
 800ce7e:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800ce82:	4b03      	ldr	r3, [pc, #12]	; (800ce90 <sys_arch_protect+0x14>)
 800ce84:	6818      	ldr	r0, [r3, #0]
 800ce86:	f7f5 fa03 	bl	8002290 <osMutexWait>
#else
  osMutexAcquire(lwip_sys_mutex, osWaitForever);
#endif
  return (sys_prot_t)1;
}
 800ce8a:	2001      	movs	r0, #1
 800ce8c:	bd08      	pop	{r3, pc}
 800ce8e:	bf00      	nop
 800ce90:	2000799c 	.word	0x2000799c

0800ce94 <sys_arch_unprotect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
void sys_arch_unprotect(sys_prot_t pval)
{
 800ce94:	b508      	push	{r3, lr}
  ( void ) pval;
  osMutexRelease(lwip_sys_mutex);
 800ce96:	4b02      	ldr	r3, [pc, #8]	; (800cea0 <sys_arch_unprotect+0xc>)
 800ce98:	6818      	ldr	r0, [r3, #0]
 800ce9a:	f7f5 fa31 	bl	8002300 <osMutexRelease>
 800ce9e:	bd08      	pop	{r3, pc}
 800cea0:	2000799c 	.word	0x2000799c

0800cea4 <low_level_input>:
 * @param netif the lwip network interface structure for this ethernetif
 * @return a pbuf filled with the received packet (including MAC header)
 *         NULL on memory error
   */
static struct pbuf * low_level_input(struct netif *netif)
{
 800cea4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  uint32_t byteslefttocopy = 0;
  uint32_t i=0;
  

  /* get received frame */
  if (HAL_ETH_GetReceivedFrame_IT(&heth) != HAL_OK)
 800cea8:	4834      	ldr	r0, [pc, #208]	; (800cf7c <low_level_input+0xd8>)
 800ceaa:	f7f3 fdd1 	bl	8000a50 <HAL_ETH_GetReceivedFrame_IT>
 800ceae:	2800      	cmp	r0, #0
 800ceb0:	d160      	bne.n	800cf74 <low_level_input+0xd0>
    return NULL;
  
  /* Obtain the size of the packet and put it into the "len" variable. */
  len = heth.RxFrameInfos.length;
 800ceb2:	4b32      	ldr	r3, [pc, #200]	; (800cf7c <low_level_input+0xd8>)
 800ceb4:	8f99      	ldrh	r1, [r3, #60]	; 0x3c
  buffer = (uint8_t *)heth.RxFrameInfos.buffer;
 800ceb6:	f8d3 8040 	ldr.w	r8, [r3, #64]	; 0x40
  
  if (len > 0)
 800ceba:	b949      	cbnz	r1, 800ced0 <low_level_input+0x2c>
  struct pbuf *p = NULL;
 800cebc:	f04f 0a00 	mov.w	sl, #0
  {
    /* We allocate a pbuf chain of pbufs from the Lwip buffer pool */
    p = pbuf_alloc(PBUF_RAW, len, PBUF_POOL);
  }
  
  if (p != NULL)
 800cec0:	f1ba 0f00 	cmp.w	sl, #0
 800cec4:	d033      	beq.n	800cf2e <low_level_input+0x8a>
  {
    dmarxdesc = heth.RxFrameInfos.FSRxDesc;
 800cec6:	4b2d      	ldr	r3, [pc, #180]	; (800cf7c <low_level_input+0xd8>)
 800cec8:	6b1f      	ldr	r7, [r3, #48]	; 0x30
    bufferoffset = 0;
    for(q = p; q != NULL; q = q->next)
 800ceca:	46d1      	mov	r9, sl
    bufferoffset = 0;
 800cecc:	2400      	movs	r4, #0
    for(q = p; q != NULL; q = q->next)
 800cece:	e027      	b.n	800cf20 <low_level_input+0x7c>
    p = pbuf_alloc(PBUF_RAW, len, PBUF_POOL);
 800ced0:	2203      	movs	r2, #3
 800ced2:	2004      	movs	r0, #4
 800ced4:	f7fb fc22 	bl	800871c <pbuf_alloc>
 800ced8:	4682      	mov	sl, r0
 800ceda:	e7f1      	b.n	800cec0 <low_level_input+0x1c>
      
      /* Check if the length of bytes to copy in current pbuf is bigger than Rx buffer size*/
      while( (byteslefttocopy + bufferoffset) > ETH_RX_BUF_SIZE )
      {
        /* Copy data to pbuf */
        memcpy( (uint8_t*)((uint8_t*)q->payload + payloadoffset), (uint8_t*)((uint8_t*)buffer + bufferoffset), (ETH_RX_BUF_SIZE - bufferoffset));
 800cedc:	f8d9 0004 	ldr.w	r0, [r9, #4]
 800cee0:	f5c4 62be 	rsb	r2, r4, #1520	; 0x5f0
 800cee4:	3204      	adds	r2, #4
 800cee6:	eb08 0104 	add.w	r1, r8, r4
 800ceea:	4430      	add	r0, r6
 800ceec:	f000 ffd9 	bl	800dea2 <memcpy>
        
        /* Point to next descriptor */
        dmarxdesc = (ETH_DMADescTypeDef *)(dmarxdesc->Buffer2NextDescAddr);
 800cef0:	68ff      	ldr	r7, [r7, #12]
        buffer = (uint8_t *)(dmarxdesc->Buffer1Addr);
 800cef2:	f8d7 8008 	ldr.w	r8, [r7, #8]
        
        byteslefttocopy = byteslefttocopy - (ETH_RX_BUF_SIZE - bufferoffset);
 800cef6:	f2a5 52f4 	subw	r2, r5, #1524	; 0x5f4
        payloadoffset = payloadoffset + (ETH_RX_BUF_SIZE - bufferoffset);
 800cefa:	1b36      	subs	r6, r6, r4
 800cefc:	f206 56f4 	addw	r6, r6, #1524	; 0x5f4
        bufferoffset = 0;
 800cf00:	2400      	movs	r4, #0
      while( (byteslefttocopy + bufferoffset) > ETH_RX_BUF_SIZE )
 800cf02:	18a5      	adds	r5, r4, r2
 800cf04:	f240 53f4 	movw	r3, #1524	; 0x5f4
 800cf08:	429d      	cmp	r5, r3
 800cf0a:	d8e7      	bhi.n	800cedc <low_level_input+0x38>
      }
      /* Copy remaining data in pbuf */
      memcpy( (uint8_t*)((uint8_t*)q->payload + payloadoffset), (uint8_t*)((uint8_t*)buffer + bufferoffset), byteslefttocopy);
 800cf0c:	f8d9 0004 	ldr.w	r0, [r9, #4]
 800cf10:	eb08 0104 	add.w	r1, r8, r4
 800cf14:	4430      	add	r0, r6
 800cf16:	f000 ffc4 	bl	800dea2 <memcpy>
    for(q = p; q != NULL; q = q->next)
 800cf1a:	f8d9 9000 	ldr.w	r9, [r9]
      bufferoffset = bufferoffset + byteslefttocopy;
 800cf1e:	462c      	mov	r4, r5
    for(q = p; q != NULL; q = q->next)
 800cf20:	f1b9 0f00 	cmp.w	r9, #0
 800cf24:	d003      	beq.n	800cf2e <low_level_input+0x8a>
      byteslefttocopy = q->len;
 800cf26:	f8b9 200a 	ldrh.w	r2, [r9, #10]
      payloadoffset = 0;
 800cf2a:	2600      	movs	r6, #0
      while( (byteslefttocopy + bufferoffset) > ETH_RX_BUF_SIZE )
 800cf2c:	e7e9      	b.n	800cf02 <low_level_input+0x5e>
    }
  }  
  
    /* Release descriptors to DMA */
    /* Point to first descriptor */
    dmarxdesc = heth.RxFrameInfos.FSRxDesc;
 800cf2e:	4b13      	ldr	r3, [pc, #76]	; (800cf7c <low_level_input+0xd8>)
 800cf30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    /* Set Own bit in Rx descriptors: gives the buffers back to DMA */
    for (i=0; i< heth.RxFrameInfos.SegCount; i++)
 800cf32:	2100      	movs	r1, #0
 800cf34:	e005      	b.n	800cf42 <low_level_input+0x9e>
    {  
      dmarxdesc->Status |= ETH_DMARXDESC_OWN;
 800cf36:	681a      	ldr	r2, [r3, #0]
 800cf38:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 800cf3c:	601a      	str	r2, [r3, #0]
      dmarxdesc = (ETH_DMADescTypeDef *)(dmarxdesc->Buffer2NextDescAddr);
 800cf3e:	68db      	ldr	r3, [r3, #12]
    for (i=0; i< heth.RxFrameInfos.SegCount; i++)
 800cf40:	3101      	adds	r1, #1
 800cf42:	4a0e      	ldr	r2, [pc, #56]	; (800cf7c <low_level_input+0xd8>)
 800cf44:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800cf46:	4291      	cmp	r1, r2
 800cf48:	d3f5      	bcc.n	800cf36 <low_level_input+0x92>
    }
    
    /* Clear Segment_Count */
    heth.RxFrameInfos.SegCount =0;  
 800cf4a:	4b0c      	ldr	r3, [pc, #48]	; (800cf7c <low_level_input+0xd8>)
 800cf4c:	2200      	movs	r2, #0
 800cf4e:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* When Rx Buffer unavailable flag is set: clear it and resume reception */
  if ((heth.Instance->DMASR & ETH_DMASR_RBUS) != (uint32_t)RESET)  
 800cf50:	681b      	ldr	r3, [r3, #0]
 800cf52:	f241 0214 	movw	r2, #4116	; 0x1014
 800cf56:	589a      	ldr	r2, [r3, r2]
 800cf58:	f012 0f80 	tst.w	r2, #128	; 0x80
 800cf5c:	d007      	beq.n	800cf6e <low_level_input+0xca>
  {
    /* Clear RBUS ETHERNET DMA flag */
    heth.Instance->DMASR = ETH_DMASR_RBUS;
 800cf5e:	2180      	movs	r1, #128	; 0x80
 800cf60:	f241 0214 	movw	r2, #4116	; 0x1014
 800cf64:	5099      	str	r1, [r3, r2]
    /* Resume DMA reception */
    heth.Instance->DMARPDR = 0;
 800cf66:	2100      	movs	r1, #0
 800cf68:	f241 0208 	movw	r2, #4104	; 0x1008
 800cf6c:	5099      	str	r1, [r3, r2]
  }
  return p;
}
 800cf6e:	4650      	mov	r0, sl
 800cf70:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    return NULL;
 800cf74:	f04f 0a00 	mov.w	sl, #0
 800cf78:	e7f9      	b.n	800cf6e <low_level_input+0xca>
 800cf7a:	bf00      	nop
 800cf7c:	20009270 	.word	0x20009270

0800cf80 <ethernetif_input>:
 * the appropriate input function is called.
 *
 * @param netif the lwip network interface structure for this ethernetif
 */
void ethernetif_input( void const * argument ) 
{
 800cf80:	b538      	push	{r3, r4, r5, lr}
 800cf82:	4605      	mov	r5, r0
  struct pbuf *p;
  struct netif *netif = (struct netif *) argument;
  
  for( ;; )
  {
    if (osSemaphoreWait( s_xSemaphore, TIME_WAITING_FOR_INPUT)==osOK)
 800cf84:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800cf88:	4b0b      	ldr	r3, [pc, #44]	; (800cfb8 <ethernetif_input+0x38>)
 800cf8a:	6818      	ldr	r0, [r3, #0]
 800cf8c:	f7f5 fa0c 	bl	80023a8 <osSemaphoreWait>
 800cf90:	2800      	cmp	r0, #0
 800cf92:	d1f7      	bne.n	800cf84 <ethernetif_input+0x4>
 800cf94:	e001      	b.n	800cf9a <ethernetif_input+0x1a>
          if (netif->input( p, netif) != ERR_OK )
          {
            pbuf_free(p);
          }
        }
      } while(p!=NULL);
 800cf96:	2c00      	cmp	r4, #0
 800cf98:	d0f4      	beq.n	800cf84 <ethernetif_input+0x4>
        p = low_level_input( netif );
 800cf9a:	4628      	mov	r0, r5
 800cf9c:	f7ff ff82 	bl	800cea4 <low_level_input>
        if   (p != NULL)
 800cfa0:	4604      	mov	r4, r0
 800cfa2:	2800      	cmp	r0, #0
 800cfa4:	d0f7      	beq.n	800cf96 <ethernetif_input+0x16>
          if (netif->input( p, netif) != ERR_OK )
 800cfa6:	692b      	ldr	r3, [r5, #16]
 800cfa8:	4629      	mov	r1, r5
 800cfaa:	4798      	blx	r3
 800cfac:	2800      	cmp	r0, #0
 800cfae:	d0f2      	beq.n	800cf96 <ethernetif_input+0x16>
            pbuf_free(p);
 800cfb0:	4620      	mov	r0, r4
 800cfb2:	f7fb fb47 	bl	8008644 <pbuf_free>
 800cfb6:	e7ee      	b.n	800cf96 <ethernetif_input+0x16>
 800cfb8:	20003fcc 	.word	0x20003fcc

0800cfbc <low_level_output>:
{
 800cfbc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cfc0:	468b      	mov	fp, r1
  uint8_t *buffer = (uint8_t *)(heth.TxDesc->Buffer1Addr);
 800cfc2:	4b2c      	ldr	r3, [pc, #176]	; (800d074 <low_level_output+0xb8>)
 800cfc4:	6ade      	ldr	r6, [r3, #44]	; 0x2c
 800cfc6:	f8d6 a008 	ldr.w	sl, [r6, #8]
  bufferoffset = 0;
 800cfca:	2400      	movs	r4, #0
  uint32_t framelength = 0;
 800cfcc:	4627      	mov	r7, r4
  for(q = p; q != NULL; q = q->next)
 800cfce:	f1bb 0f00 	cmp.w	fp, #0
 800cfd2:	d032      	beq.n	800d03a <low_level_output+0x7e>
      if((DmaTxDesc->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 800cfd4:	6833      	ldr	r3, [r6, #0]
 800cfd6:	2b00      	cmp	r3, #0
 800cfd8:	db35      	blt.n	800d046 <low_level_output+0x8a>
      byteslefttocopy = q->len;
 800cfda:	f8bb 900a 	ldrh.w	r9, [fp, #10]
      payloadoffset = 0;
 800cfde:	2500      	movs	r5, #0
      while( (byteslefttocopy + bufferoffset) > ETH_TX_BUF_SIZE )
 800cfe0:	eb04 0809 	add.w	r8, r4, r9
 800cfe4:	f240 53f4 	movw	r3, #1524	; 0x5f4
 800cfe8:	4598      	cmp	r8, r3
 800cfea:	d919      	bls.n	800d020 <low_level_output+0x64>
        memcpy( (uint8_t*)((uint8_t*)buffer + bufferoffset), (uint8_t*)((uint8_t*)q->payload + payloadoffset), (ETH_TX_BUF_SIZE - bufferoffset) );
 800cfec:	f8db 1004 	ldr.w	r1, [fp, #4]
 800cff0:	f5c4 62be 	rsb	r2, r4, #1520	; 0x5f0
 800cff4:	3204      	adds	r2, #4
 800cff6:	4429      	add	r1, r5
 800cff8:	eb0a 0004 	add.w	r0, sl, r4
 800cffc:	f000 ff51 	bl	800dea2 <memcpy>
        DmaTxDesc = (ETH_DMADescTypeDef *)(DmaTxDesc->Buffer2NextDescAddr);
 800d000:	68f6      	ldr	r6, [r6, #12]
        if((DmaTxDesc->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 800d002:	6833      	ldr	r3, [r6, #0]
 800d004:	2b00      	cmp	r3, #0
 800d006:	db21      	blt.n	800d04c <low_level_output+0x90>
        buffer = (uint8_t *)(DmaTxDesc->Buffer1Addr);
 800d008:	f8d6 a008 	ldr.w	sl, [r6, #8]
        byteslefttocopy = byteslefttocopy - (ETH_TX_BUF_SIZE - bufferoffset);
 800d00c:	f2a8 59f4 	subw	r9, r8, #1524	; 0x5f4
        payloadoffset = payloadoffset + (ETH_TX_BUF_SIZE - bufferoffset);
 800d010:	1b2d      	subs	r5, r5, r4
 800d012:	f205 55f4 	addw	r5, r5, #1524	; 0x5f4
        framelength = framelength + (ETH_TX_BUF_SIZE - bufferoffset);
 800d016:	1b3f      	subs	r7, r7, r4
 800d018:	f207 57f4 	addw	r7, r7, #1524	; 0x5f4
        bufferoffset = 0;
 800d01c:	2400      	movs	r4, #0
 800d01e:	e7df      	b.n	800cfe0 <low_level_output+0x24>
      memcpy( (uint8_t*)((uint8_t*)buffer + bufferoffset), (uint8_t*)((uint8_t*)q->payload + payloadoffset), byteslefttocopy );
 800d020:	f8db 1004 	ldr.w	r1, [fp, #4]
 800d024:	464a      	mov	r2, r9
 800d026:	4429      	add	r1, r5
 800d028:	eb0a 0004 	add.w	r0, sl, r4
 800d02c:	f000 ff39 	bl	800dea2 <memcpy>
      framelength = framelength + byteslefttocopy;
 800d030:	444f      	add	r7, r9
  for(q = p; q != NULL; q = q->next)
 800d032:	f8db b000 	ldr.w	fp, [fp]
      bufferoffset = bufferoffset + byteslefttocopy;
 800d036:	4644      	mov	r4, r8
 800d038:	e7c9      	b.n	800cfce <low_level_output+0x12>
  HAL_ETH_TransmitFrame(&heth, framelength);
 800d03a:	4639      	mov	r1, r7
 800d03c:	480d      	ldr	r0, [pc, #52]	; (800d074 <low_level_output+0xb8>)
 800d03e:	f7f3 fc75 	bl	800092c <HAL_ETH_TransmitFrame>
  errval = ERR_OK;
 800d042:	2000      	movs	r0, #0
 800d044:	e004      	b.n	800d050 <low_level_output+0x94>
        errval = ERR_USE;
 800d046:	f06f 0007 	mvn.w	r0, #7
 800d04a:	e001      	b.n	800d050 <low_level_output+0x94>
          errval = ERR_USE;
 800d04c:	f06f 0007 	mvn.w	r0, #7
  if ((heth.Instance->DMASR & ETH_DMASR_TUS) != (uint32_t)RESET)
 800d050:	4b08      	ldr	r3, [pc, #32]	; (800d074 <low_level_output+0xb8>)
 800d052:	681b      	ldr	r3, [r3, #0]
 800d054:	f241 0214 	movw	r2, #4116	; 0x1014
 800d058:	589a      	ldr	r2, [r3, r2]
 800d05a:	f012 0f20 	tst.w	r2, #32
 800d05e:	d007      	beq.n	800d070 <low_level_output+0xb4>
    heth.Instance->DMASR = ETH_DMASR_TUS;
 800d060:	2120      	movs	r1, #32
 800d062:	f241 0214 	movw	r2, #4116	; 0x1014
 800d066:	5099      	str	r1, [r3, r2]
    heth.Instance->DMATPDR = 0;
 800d068:	2100      	movs	r1, #0
 800d06a:	f241 0204 	movw	r2, #4100	; 0x1004
 800d06e:	5099      	str	r1, [r3, r2]
}
 800d070:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d074:	20009270 	.word	0x20009270

0800d078 <low_level_init>:
{ 
 800d078:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d07a:	b08d      	sub	sp, #52	; 0x34
 800d07c:	4604      	mov	r4, r0
  uint32_t regvalue = 0;
 800d07e:	2300      	movs	r3, #0
 800d080:	930b      	str	r3, [sp, #44]	; 0x2c
  heth.Instance = ETH;
 800d082:	483e      	ldr	r0, [pc, #248]	; (800d17c <low_level_init+0x104>)
 800d084:	4a3e      	ldr	r2, [pc, #248]	; (800d180 <low_level_init+0x108>)
 800d086:	6002      	str	r2, [r0, #0]
  heth.Init.AutoNegotiation = ETH_AUTONEGOTIATION_ENABLE;
 800d088:	2201      	movs	r2, #1
 800d08a:	6042      	str	r2, [r0, #4]
  heth.Init.PhyAddress = LAN8742A_PHY_ADDRESS;
 800d08c:	8203      	strh	r3, [r0, #16]
  MACAddr[0] = 0x00;
 800d08e:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
  MACAddr[1] = 0x80;
 800d092:	2180      	movs	r1, #128	; 0x80
 800d094:	f88d 1025 	strb.w	r1, [sp, #37]	; 0x25
  MACAddr[2] = 0xE1;
 800d098:	21e1      	movs	r1, #225	; 0xe1
 800d09a:	f88d 1026 	strb.w	r1, [sp, #38]	; 0x26
  MACAddr[3] = 0x00;
 800d09e:	f88d 3027 	strb.w	r3, [sp, #39]	; 0x27
  MACAddr[4] = 0x00;
 800d0a2:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
  MACAddr[5] = 0x00;
 800d0a6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
  heth.Init.MACAddr = &MACAddr[0];
 800d0aa:	a909      	add	r1, sp, #36	; 0x24
 800d0ac:	6141      	str	r1, [r0, #20]
  heth.Init.RxMode = ETH_RXINTERRUPT_MODE;
 800d0ae:	6182      	str	r2, [r0, #24]
  heth.Init.ChecksumMode = ETH_CHECKSUM_BY_HARDWARE;
 800d0b0:	61c3      	str	r3, [r0, #28]
  heth.Init.MediaInterface = ETH_MEDIA_INTERFACE_RMII;
 800d0b2:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 800d0b6:	6203      	str	r3, [r0, #32]
  hal_eth_init_status = HAL_ETH_Init(&heth);
 800d0b8:	f7f3 fdd4 	bl	8000c64 <HAL_ETH_Init>
  if (hal_eth_init_status == HAL_OK)
 800d0bc:	b928      	cbnz	r0, 800d0ca <low_level_init+0x52>
    netif->flags |= NETIF_FLAG_LINK_UP;
 800d0be:	f894 302b 	ldrb.w	r3, [r4, #43]	; 0x2b
 800d0c2:	f043 0304 	orr.w	r3, r3, #4
 800d0c6:	f884 302b 	strb.w	r3, [r4, #43]	; 0x2b
  HAL_ETH_DMATxDescListInit(&heth, DMATxDscrTab, &Tx_Buff[0][0], ETH_TXBUFNB);
 800d0ca:	4f2c      	ldr	r7, [pc, #176]	; (800d17c <low_level_init+0x104>)
 800d0cc:	2304      	movs	r3, #4
 800d0ce:	4a2d      	ldr	r2, [pc, #180]	; (800d184 <low_level_init+0x10c>)
 800d0d0:	492d      	ldr	r1, [pc, #180]	; (800d188 <low_level_init+0x110>)
 800d0d2:	4638      	mov	r0, r7
 800d0d4:	f7f3 fbba 	bl	800084c <HAL_ETH_DMATxDescListInit>
  HAL_ETH_DMARxDescListInit(&heth, DMARxDscrTab, &Rx_Buff[0][0], ETH_RXBUFNB);
 800d0d8:	2304      	movs	r3, #4
 800d0da:	4a2c      	ldr	r2, [pc, #176]	; (800d18c <low_level_init+0x114>)
 800d0dc:	492c      	ldr	r1, [pc, #176]	; (800d190 <low_level_init+0x118>)
 800d0de:	4638      	mov	r0, r7
 800d0e0:	f7f3 fbed 	bl	80008be <HAL_ETH_DMARxDescListInit>
  netif->hwaddr_len = ETH_HWADDR_LEN;
 800d0e4:	2306      	movs	r3, #6
 800d0e6:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 800d0ea:	697b      	ldr	r3, [r7, #20]
 800d0ec:	781a      	ldrb	r2, [r3, #0]
 800d0ee:	f884 2025 	strb.w	r2, [r4, #37]	; 0x25
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 800d0f2:	785a      	ldrb	r2, [r3, #1]
 800d0f4:	f884 2026 	strb.w	r2, [r4, #38]	; 0x26
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 800d0f8:	789a      	ldrb	r2, [r3, #2]
 800d0fa:	f884 2027 	strb.w	r2, [r4, #39]	; 0x27
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 800d0fe:	78da      	ldrb	r2, [r3, #3]
 800d100:	f884 2028 	strb.w	r2, [r4, #40]	; 0x28
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 800d104:	791a      	ldrb	r2, [r3, #4]
 800d106:	f884 2029 	strb.w	r2, [r4, #41]	; 0x29
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 800d10a:	795b      	ldrb	r3, [r3, #5]
 800d10c:	f884 302a 	strb.w	r3, [r4, #42]	; 0x2a
  netif->mtu = 1500;
 800d110:	f240 53dc 	movw	r3, #1500	; 0x5dc
 800d114:	8463      	strh	r3, [r4, #34]	; 0x22
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 800d116:	f894 302b 	ldrb.w	r3, [r4, #43]	; 0x2b
 800d11a:	f043 030a 	orr.w	r3, r3, #10
 800d11e:	f884 302b 	strb.w	r3, [r4, #43]	; 0x2b
  osSemaphoreDef(SEM);
 800d122:	2300      	movs	r3, #0
 800d124:	9307      	str	r3, [sp, #28]
 800d126:	9308      	str	r3, [sp, #32]
  s_xSemaphore = osSemaphoreCreate(osSemaphore(SEM) , 1 );
 800d128:	2101      	movs	r1, #1
 800d12a:	a807      	add	r0, sp, #28
 800d12c:	f7f5 f916 	bl	800235c <osSemaphoreCreate>
 800d130:	4b18      	ldr	r3, [pc, #96]	; (800d194 <low_level_init+0x11c>)
 800d132:	6018      	str	r0, [r3, #0]
  osThreadDef(EthIf, ethernetif_input, osPriorityRealtime, 0, INTERFACE_THREAD_STACK_SIZE);
 800d134:	466d      	mov	r5, sp
 800d136:	4e18      	ldr	r6, [pc, #96]	; (800d198 <low_level_init+0x120>)
 800d138:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800d13a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800d13c:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
 800d140:	e885 0007 	stmia.w	r5, {r0, r1, r2}
  osThreadCreate (osThread(EthIf), netif);
 800d144:	4621      	mov	r1, r4
 800d146:	4668      	mov	r0, sp
 800d148:	f7f5 f859 	bl	80021fe <osThreadCreate>
  HAL_ETH_Start(&heth);
 800d14c:	4638      	mov	r0, r7
 800d14e:	f7f3 feb5 	bl	8000ebc <HAL_ETH_Start>
  HAL_ETH_ReadPHYRegister(&heth, PHY_ISFR, &regvalue);
 800d152:	aa0b      	add	r2, sp, #44	; 0x2c
 800d154:	211d      	movs	r1, #29
 800d156:	4638      	mov	r0, r7
 800d158:	f7f3 fd0e 	bl	8000b78 <HAL_ETH_ReadPHYRegister>
  regvalue |= (PHY_ISFR_INT4);
 800d15c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800d15e:	f042 020b 	orr.w	r2, r2, #11
 800d162:	920b      	str	r2, [sp, #44]	; 0x2c
  HAL_ETH_WritePHYRegister(&heth, PHY_ISFR , regvalue );
 800d164:	211d      	movs	r1, #29
 800d166:	4638      	mov	r0, r7
 800d168:	f7f3 fd42 	bl	8000bf0 <HAL_ETH_WritePHYRegister>
  HAL_ETH_ReadPHYRegister(&heth, PHY_ISFR , &regvalue);
 800d16c:	aa0b      	add	r2, sp, #44	; 0x2c
 800d16e:	211d      	movs	r1, #29
 800d170:	4638      	mov	r0, r7
 800d172:	f7f3 fd01 	bl	8000b78 <HAL_ETH_ReadPHYRegister>
}
 800d176:	b00d      	add	sp, #52	; 0x34
 800d178:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d17a:	bf00      	nop
 800d17c:	20009270 	.word	0x20009270
 800d180:	40028000 	.word	0x40028000
 800d184:	200092b8 	.word	0x200092b8
 800d188:	200079a0 	.word	0x200079a0
 800d18c:	20007a20 	.word	0x20007a20
 800d190:	200091f0 	.word	0x200091f0
 800d194:	20003fcc 	.word	0x20003fcc
 800d198:	0800e2c4 	.word	0x0800e2c4

0800d19c <HAL_ETH_MspInit>:
{
 800d19c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d19e:	b08d      	sub	sp, #52	; 0x34
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800d1a0:	2300      	movs	r3, #0
 800d1a2:	9307      	str	r3, [sp, #28]
 800d1a4:	9308      	str	r3, [sp, #32]
 800d1a6:	9309      	str	r3, [sp, #36]	; 0x24
 800d1a8:	930a      	str	r3, [sp, #40]	; 0x28
 800d1aa:	930b      	str	r3, [sp, #44]	; 0x2c
  if(ethHandle->Instance==ETH)
 800d1ac:	6802      	ldr	r2, [r0, #0]
 800d1ae:	4b3d      	ldr	r3, [pc, #244]	; (800d2a4 <HAL_ETH_MspInit+0x108>)
 800d1b0:	429a      	cmp	r2, r3
 800d1b2:	d001      	beq.n	800d1b8 <HAL_ETH_MspInit+0x1c>
}
 800d1b4:	b00d      	add	sp, #52	; 0x34
 800d1b6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    __HAL_RCC_ETH_CLK_ENABLE();
 800d1b8:	2400      	movs	r4, #0
 800d1ba:	9400      	str	r4, [sp, #0]
 800d1bc:	f5a3 4390 	sub.w	r3, r3, #18432	; 0x4800
 800d1c0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800d1c2:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
 800d1c6:	631a      	str	r2, [r3, #48]	; 0x30
 800d1c8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800d1ca:	f002 7200 	and.w	r2, r2, #33554432	; 0x2000000
 800d1ce:	9200      	str	r2, [sp, #0]
 800d1d0:	9a00      	ldr	r2, [sp, #0]
 800d1d2:	9401      	str	r4, [sp, #4]
 800d1d4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800d1d6:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 800d1da:	631a      	str	r2, [r3, #48]	; 0x30
 800d1dc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800d1de:	f002 6280 	and.w	r2, r2, #67108864	; 0x4000000
 800d1e2:	9201      	str	r2, [sp, #4]
 800d1e4:	9a01      	ldr	r2, [sp, #4]
 800d1e6:	9402      	str	r4, [sp, #8]
 800d1e8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800d1ea:	f042 6200 	orr.w	r2, r2, #134217728	; 0x8000000
 800d1ee:	631a      	str	r2, [r3, #48]	; 0x30
 800d1f0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800d1f2:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 800d1f6:	9202      	str	r2, [sp, #8]
 800d1f8:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800d1fa:	9403      	str	r4, [sp, #12]
 800d1fc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800d1fe:	f042 0204 	orr.w	r2, r2, #4
 800d202:	631a      	str	r2, [r3, #48]	; 0x30
 800d204:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800d206:	f002 0204 	and.w	r2, r2, #4
 800d20a:	9203      	str	r2, [sp, #12]
 800d20c:	9a03      	ldr	r2, [sp, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800d20e:	9404      	str	r4, [sp, #16]
 800d210:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800d212:	f042 0201 	orr.w	r2, r2, #1
 800d216:	631a      	str	r2, [r3, #48]	; 0x30
 800d218:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800d21a:	f002 0201 	and.w	r2, r2, #1
 800d21e:	9204      	str	r2, [sp, #16]
 800d220:	9a04      	ldr	r2, [sp, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800d222:	9405      	str	r4, [sp, #20]
 800d224:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800d226:	f042 0202 	orr.w	r2, r2, #2
 800d22a:	631a      	str	r2, [r3, #48]	; 0x30
 800d22c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800d22e:	f002 0202 	and.w	r2, r2, #2
 800d232:	9205      	str	r2, [sp, #20]
 800d234:	9a05      	ldr	r2, [sp, #20]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 800d236:	9406      	str	r4, [sp, #24]
 800d238:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800d23a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800d23e:	631a      	str	r2, [r3, #48]	; 0x30
 800d240:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d242:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d246:	9306      	str	r3, [sp, #24]
 800d248:	9b06      	ldr	r3, [sp, #24]
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 800d24a:	2332      	movs	r3, #50	; 0x32
 800d24c:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800d24e:	2702      	movs	r7, #2
 800d250:	9708      	str	r7, [sp, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800d252:	2603      	movs	r6, #3
 800d254:	960a      	str	r6, [sp, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800d256:	250b      	movs	r5, #11
 800d258:	950b      	str	r5, [sp, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800d25a:	a907      	add	r1, sp, #28
 800d25c:	4812      	ldr	r0, [pc, #72]	; (800d2a8 <HAL_ETH_MspInit+0x10c>)
 800d25e:	f7f3 fe4f 	bl	8000f00 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 800d262:	2386      	movs	r3, #134	; 0x86
 800d264:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800d266:	9708      	str	r7, [sp, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800d268:	9409      	str	r4, [sp, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800d26a:	960a      	str	r6, [sp, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800d26c:	950b      	str	r5, [sp, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800d26e:	a907      	add	r1, sp, #28
 800d270:	480e      	ldr	r0, [pc, #56]	; (800d2ac <HAL_ETH_MspInit+0x110>)
 800d272:	f7f3 fe45 	bl	8000f00 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 800d276:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800d27a:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800d27c:	9708      	str	r7, [sp, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800d27e:	9409      	str	r4, [sp, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800d280:	960a      	str	r6, [sp, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800d282:	950b      	str	r5, [sp, #44]	; 0x2c
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 800d284:	a907      	add	r1, sp, #28
 800d286:	480a      	ldr	r0, [pc, #40]	; (800d2b0 <HAL_ETH_MspInit+0x114>)
 800d288:	f7f3 fe3a 	bl	8000f00 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 800d28c:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800d290:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800d292:	9708      	str	r7, [sp, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800d294:	9409      	str	r4, [sp, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800d296:	960a      	str	r6, [sp, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800d298:	950b      	str	r5, [sp, #44]	; 0x2c
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800d29a:	a907      	add	r1, sp, #28
 800d29c:	4805      	ldr	r0, [pc, #20]	; (800d2b4 <HAL_ETH_MspInit+0x118>)
 800d29e:	f7f3 fe2f 	bl	8000f00 <HAL_GPIO_Init>
}
 800d2a2:	e787      	b.n	800d1b4 <HAL_ETH_MspInit+0x18>
 800d2a4:	40028000 	.word	0x40028000
 800d2a8:	40020800 	.word	0x40020800
 800d2ac:	40020000 	.word	0x40020000
 800d2b0:	40020400 	.word	0x40020400
 800d2b4:	40021800 	.word	0x40021800

0800d2b8 <HAL_ETH_RxCpltCallback>:
{
 800d2b8:	b508      	push	{r3, lr}
  osSemaphoreRelease(s_xSemaphore);
 800d2ba:	4b02      	ldr	r3, [pc, #8]	; (800d2c4 <HAL_ETH_RxCpltCallback+0xc>)
 800d2bc:	6818      	ldr	r0, [r3, #0]
 800d2be:	f7f5 f8ab 	bl	8002418 <osSemaphoreRelease>
 800d2c2:	bd08      	pop	{r3, pc}
 800d2c4:	20003fcc 	.word	0x20003fcc

0800d2c8 <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
 800d2c8:	b510      	push	{r4, lr}
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 800d2ca:	4604      	mov	r4, r0
 800d2cc:	b170      	cbz	r0, 800d2ec <ethernetif_init+0x24>
#if LWIP_NETIF_HOSTNAME
  /* Initialize interface hostname */
  netif->hostname = "lwip";
#endif /* LWIP_NETIF_HOSTNAME */

  netif->name[0] = IFNAME0;
 800d2ce:	2373      	movs	r3, #115	; 0x73
 800d2d0:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
  netif->name[1] = IFNAME1;
 800d2d4:	2374      	movs	r3, #116	; 0x74
 800d2d6:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
   * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
  netif->output = etharp_output;
 800d2da:	4b08      	ldr	r3, [pc, #32]	; (800d2fc <ethernetif_init+0x34>)
 800d2dc:	6163      	str	r3, [r4, #20]
 
#if LWIP_IPV6
  netif->output_ip6 = ethip6_output;
#endif /* LWIP_IPV6 */

  netif->linkoutput = low_level_output;
 800d2de:	4b08      	ldr	r3, [pc, #32]	; (800d300 <ethernetif_init+0x38>)
 800d2e0:	61a3      	str	r3, [r4, #24]

  /* initialize the hardware */
  low_level_init(netif);
 800d2e2:	4620      	mov	r0, r4
 800d2e4:	f7ff fec8 	bl	800d078 <low_level_init>

  return ERR_OK;
}
 800d2e8:	2000      	movs	r0, #0
 800d2ea:	bd10      	pop	{r4, pc}
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 800d2ec:	4b05      	ldr	r3, [pc, #20]	; (800d304 <ethernetif_init+0x3c>)
 800d2ee:	f240 222a 	movw	r2, #554	; 0x22a
 800d2f2:	4905      	ldr	r1, [pc, #20]	; (800d308 <ethernetif_init+0x40>)
 800d2f4:	4805      	ldr	r0, [pc, #20]	; (800d30c <ethernetif_init+0x44>)
 800d2f6:	f000 fc68 	bl	800dbca <iprintf>
 800d2fa:	e7e8      	b.n	800d2ce <ethernetif_init+0x6>
 800d2fc:	08006e09 	.word	0x08006e09
 800d300:	0800cfbd 	.word	0x0800cfbd
 800d304:	08010584 	.word	0x08010584
 800d308:	0800edac 	.word	0x0800edac
 800d30c:	0800e3b0 	.word	0x0800e3b0

0800d310 <sys_now>:
*         when LWIP_TIMERS == 1 and NO_SYS == 1
* @param  None
* @retval Time
*/
u32_t sys_now(void)
{
 800d310:	b508      	push	{r3, lr}
  return HAL_GetTick();
 800d312:	f7f3 f923 	bl	800055c <HAL_GetTick>
}
 800d316:	bd08      	pop	{r3, pc}

0800d318 <StartDefaultTask>:
  * @param  argument: Not used 
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 800d318:	b538      	push	{r3, r4, r5, lr}
  /* init code for LWIP */
  MX_LWIP_Init();
 800d31a:	f000 f8ed 	bl	800d4f8 <MX_LWIP_Init>
//		  {
//			  close(sdsocket);
//			  sdsocket = -1;
//		  }

	 sdsocket = connexion_tcp_server_wait(IP_NUCLEO, KLISTEN_PORT);
 800d31e:	f241 318a 	movw	r1, #5002	; 0x138a
 800d322:	4816      	ldr	r0, [pc, #88]	; (800d37c <StartDefaultTask+0x64>)
 800d324:	f000 f9f2 	bl	800d70c <connexion_tcp_server_wait>
 800d328:	4604      	mov	r4, r0
	 while(sdsocket!=-1)
 800d32a:	e00c      	b.n	800d346 <StartDefaultTask+0x2e>
		 {
			 close(sdsocket);
			 sdsocket = -1;
		 }

		 retreceive = sreceivemessage (sdsocket, message , strlen (message));
 800d32c:	221c      	movs	r2, #28
 800d32e:	4914      	ldr	r1, [pc, #80]	; (800d380 <StartDefaultTask+0x68>)
 800d330:	4620      	mov	r0, r4
 800d332:	f000 fa83 	bl	800d83c <sreceivemessage>
 800d336:	4605      	mov	r5, r0
		 osDelay(2000);
 800d338:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800d33c:	f7f4 ff94 	bl	8002268 <osDelay>
//		 if(retreceive!=-1)
//		 {
//			 receivemessage (sdsocket, message , strlen (message));
//			 osDelay(2000);
//		 }
		 if (retreceive==-1)
 800d340:	f1b5 3fff 	cmp.w	r5, #4294967295	; 0xffffffff
 800d344:	d014      	beq.n	800d370 <StartDefaultTask+0x58>
	 while(sdsocket!=-1)
 800d346:	f1b4 3fff 	cmp.w	r4, #4294967295	; 0xffffffff
 800d34a:	d0e8      	beq.n	800d31e <StartDefaultTask+0x6>
			 retsend = ssend_msg(sdsocket, message, strlen (message));
 800d34c:	221c      	movs	r2, #28
 800d34e:	490c      	ldr	r1, [pc, #48]	; (800d380 <StartDefaultTask+0x68>)
 800d350:	4620      	mov	r0, r4
 800d352:	f000 fa55 	bl	800d800 <ssend_msg>
 800d356:	4605      	mov	r5, r0
			 osDelay(2000);
 800d358:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800d35c:	f7f4 ff84 	bl	8002268 <osDelay>
		 if(retsend== -1)
 800d360:	f1b5 3fff 	cmp.w	r5, #4294967295	; 0xffffffff
 800d364:	d1e2      	bne.n	800d32c <StartDefaultTask+0x14>
			 close(sdsocket);
 800d366:	4620      	mov	r0, r4
 800d368:	f7f8 fd56 	bl	8005e18 <lwip_close>
			 sdsocket = -1;
 800d36c:	462c      	mov	r4, r5
 800d36e:	e7dd      	b.n	800d32c <StartDefaultTask+0x14>
		 {
			 close(sdsocket);
 800d370:	4620      	mov	r0, r4
 800d372:	f7f8 fd51 	bl	8005e18 <lwip_close>
			 sdsocket = -1;
 800d376:	462c      	mov	r4, r5
 800d378:	e7e5      	b.n	800d346 <StartDefaultTask+0x2e>
 800d37a:	bf00      	nop
 800d37c:	080105a0 	.word	0x080105a0
 800d380:	080105b0 	.word	0x080105b0

0800d384 <vApplicationGetIdleTaskMemory>:
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 800d384:	4b03      	ldr	r3, [pc, #12]	; (800d394 <vApplicationGetIdleTaskMemory+0x10>)
 800d386:	6003      	str	r3, [r0, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 800d388:	4b03      	ldr	r3, [pc, #12]	; (800d398 <vApplicationGetIdleTaskMemory+0x14>)
 800d38a:	600b      	str	r3, [r1, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 800d38c:	2380      	movs	r3, #128	; 0x80
 800d38e:	6013      	str	r3, [r2, #0]
 800d390:	4770      	bx	lr
 800d392:	bf00      	nop
 800d394:	200041d0 	.word	0x200041d0
 800d398:	20003fd0 	.word	0x20003fd0

0800d39c <MX_FREERTOS_Init>:
void MX_FREERTOS_Init(void) {
 800d39c:	b530      	push	{r4, r5, lr}
 800d39e:	b089      	sub	sp, #36	; 0x24
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 800d3a0:	ac01      	add	r4, sp, #4
 800d3a2:	4d07      	ldr	r5, [pc, #28]	; (800d3c0 <MX_FREERTOS_Init+0x24>)
 800d3a4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800d3a6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800d3a8:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800d3ac:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 800d3b0:	2100      	movs	r1, #0
 800d3b2:	a801      	add	r0, sp, #4
 800d3b4:	f7f4 ff23 	bl	80021fe <osThreadCreate>
 800d3b8:	4b02      	ldr	r3, [pc, #8]	; (800d3c4 <MX_FREERTOS_Init+0x28>)
 800d3ba:	6018      	str	r0, [r3, #0]
}
 800d3bc:	b009      	add	sp, #36	; 0x24
 800d3be:	bd30      	pop	{r4, r5, pc}
 800d3c0:	0800e2e0 	.word	0x0800e2e0
 800d3c4:	2000aa88 	.word	0x2000aa88

0800d3c8 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800d3c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d3cc:	b08c      	sub	sp, #48	; 0x30

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800d3ce:	2400      	movs	r4, #0
 800d3d0:	9407      	str	r4, [sp, #28]
 800d3d2:	9408      	str	r4, [sp, #32]
 800d3d4:	9409      	str	r4, [sp, #36]	; 0x24
 800d3d6:	940a      	str	r4, [sp, #40]	; 0x28
 800d3d8:	940b      	str	r4, [sp, #44]	; 0x2c

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800d3da:	9401      	str	r4, [sp, #4]
 800d3dc:	4b41      	ldr	r3, [pc, #260]	; (800d4e4 <MX_GPIO_Init+0x11c>)
 800d3de:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800d3e0:	f042 0204 	orr.w	r2, r2, #4
 800d3e4:	631a      	str	r2, [r3, #48]	; 0x30
 800d3e6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800d3e8:	f002 0204 	and.w	r2, r2, #4
 800d3ec:	9201      	str	r2, [sp, #4]
 800d3ee:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800d3f0:	9402      	str	r4, [sp, #8]
 800d3f2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800d3f4:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800d3f8:	631a      	str	r2, [r3, #48]	; 0x30
 800d3fa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800d3fc:	f002 0280 	and.w	r2, r2, #128	; 0x80
 800d400:	9202      	str	r2, [sp, #8]
 800d402:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800d404:	9403      	str	r4, [sp, #12]
 800d406:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800d408:	f042 0201 	orr.w	r2, r2, #1
 800d40c:	631a      	str	r2, [r3, #48]	; 0x30
 800d40e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800d410:	f002 0201 	and.w	r2, r2, #1
 800d414:	9203      	str	r2, [sp, #12]
 800d416:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800d418:	9404      	str	r4, [sp, #16]
 800d41a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800d41c:	f042 0202 	orr.w	r2, r2, #2
 800d420:	631a      	str	r2, [r3, #48]	; 0x30
 800d422:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800d424:	f002 0202 	and.w	r2, r2, #2
 800d428:	9204      	str	r2, [sp, #16]
 800d42a:	9a04      	ldr	r2, [sp, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800d42c:	9405      	str	r4, [sp, #20]
 800d42e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800d430:	f042 0208 	orr.w	r2, r2, #8
 800d434:	631a      	str	r2, [r3, #48]	; 0x30
 800d436:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800d438:	f002 0208 	and.w	r2, r2, #8
 800d43c:	9205      	str	r2, [sp, #20]
 800d43e:	9a05      	ldr	r2, [sp, #20]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800d440:	9406      	str	r4, [sp, #24]
 800d442:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800d444:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800d448:	631a      	str	r2, [r3, #48]	; 0x30
 800d44a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d44c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d450:	9306      	str	r3, [sp, #24]
 800d452:	9b06      	ldr	r3, [sp, #24]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 800d454:	f8df 809c 	ldr.w	r8, [pc, #156]	; 800d4f4 <MX_GPIO_Init+0x12c>
 800d458:	4622      	mov	r2, r4
 800d45a:	f44f 4181 	mov.w	r1, #16512	; 0x4080
 800d45e:	4640      	mov	r0, r8
 800d460:	f7f3 fe40 	bl	80010e4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 800d464:	4f20      	ldr	r7, [pc, #128]	; (800d4e8 <MX_GPIO_Init+0x120>)
 800d466:	4622      	mov	r2, r4
 800d468:	2140      	movs	r1, #64	; 0x40
 800d46a:	4638      	mov	r0, r7
 800d46c:	f7f3 fe3a 	bl	80010e4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD1_GPIO_Port, LD1_Pin, GPIO_PIN_RESET);
 800d470:	4d1e      	ldr	r5, [pc, #120]	; (800d4ec <MX_GPIO_Init+0x124>)
 800d472:	4622      	mov	r2, r4
 800d474:	f44f 7100 	mov.w	r1, #512	; 0x200
 800d478:	4628      	mov	r0, r5
 800d47a:	f7f3 fe33 	bl	80010e4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 800d47e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800d482:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800d484:	4b1a      	ldr	r3, [pc, #104]	; (800d4f0 <MX_GPIO_Init+0x128>)
 800d486:	9308      	str	r3, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800d488:	9409      	str	r4, [sp, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 800d48a:	a907      	add	r1, sp, #28
 800d48c:	4628      	mov	r0, r5
 800d48e:	f7f3 fd37 	bl	8000f00 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = LD3_Pin|LD2_Pin;
 800d492:	f44f 4381 	mov.w	r3, #16512	; 0x4080
 800d496:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800d498:	2601      	movs	r6, #1
 800d49a:	9608      	str	r6, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800d49c:	9409      	str	r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800d49e:	940a      	str	r4, [sp, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800d4a0:	a907      	add	r1, sp, #28
 800d4a2:	4640      	mov	r0, r8
 800d4a4:	f7f3 fd2c 	bl	8000f00 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 800d4a8:	2340      	movs	r3, #64	; 0x40
 800d4aa:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800d4ac:	9608      	str	r6, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800d4ae:	9409      	str	r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800d4b0:	940a      	str	r4, [sp, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 800d4b2:	a907      	add	r1, sp, #28
 800d4b4:	4638      	mov	r0, r7
 800d4b6:	f7f3 fd23 	bl	8000f00 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 800d4ba:	2380      	movs	r3, #128	; 0x80
 800d4bc:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800d4be:	9408      	str	r4, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800d4c0:	9409      	str	r4, [sp, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 800d4c2:	a907      	add	r1, sp, #28
 800d4c4:	4638      	mov	r0, r7
 800d4c6:	f7f3 fd1b 	bl	8000f00 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD1_Pin;
 800d4ca:	f44f 7300 	mov.w	r3, #512	; 0x200
 800d4ce:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800d4d0:	9608      	str	r6, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800d4d2:	9409      	str	r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800d4d4:	940a      	str	r4, [sp, #40]	; 0x28
  HAL_GPIO_Init(LD1_GPIO_Port, &GPIO_InitStruct);
 800d4d6:	a907      	add	r1, sp, #28
 800d4d8:	4628      	mov	r0, r5
 800d4da:	f7f3 fd11 	bl	8000f00 <HAL_GPIO_Init>

}
 800d4de:	b00c      	add	sp, #48	; 0x30
 800d4e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d4e4:	40023800 	.word	0x40023800
 800d4e8:	40021800 	.word	0x40021800
 800d4ec:	40020800 	.word	0x40020800
 800d4f0:	10110000 	.word	0x10110000
 800d4f4:	40020400 	.word	0x40020400

0800d4f8 <MX_LWIP_Init>:

/**
  * LwIP initialization function
  */
void MX_LWIP_Init(void)
{
 800d4f8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d4fa:	b085      	sub	sp, #20
  /* IP addresses initialization */
  IP_ADDRESS[0] = 10;
 800d4fc:	4f3b      	ldr	r7, [pc, #236]	; (800d5ec <MX_LWIP_Init+0xf4>)
 800d4fe:	220a      	movs	r2, #10
 800d500:	703a      	strb	r2, [r7, #0]
  IP_ADDRESS[1] = 1;
 800d502:	2301      	movs	r3, #1
 800d504:	707b      	strb	r3, [r7, #1]
  IP_ADDRESS[2] = 101;
 800d506:	2165      	movs	r1, #101	; 0x65
 800d508:	70b9      	strb	r1, [r7, #2]
  IP_ADDRESS[3] = 101;
 800d50a:	70f9      	strb	r1, [r7, #3]
  NETMASK_ADDRESS[0] = 255;
 800d50c:	4e38      	ldr	r6, [pc, #224]	; (800d5f0 <MX_LWIP_Init+0xf8>)
 800d50e:	21ff      	movs	r1, #255	; 0xff
 800d510:	7031      	strb	r1, [r6, #0]
  NETMASK_ADDRESS[1] = 255;
 800d512:	7071      	strb	r1, [r6, #1]
  NETMASK_ADDRESS[2] = 0;
 800d514:	2400      	movs	r4, #0
 800d516:	70b4      	strb	r4, [r6, #2]
  NETMASK_ADDRESS[3] = 0;
 800d518:	70f4      	strb	r4, [r6, #3]
  GATEWAY_ADDRESS[0] = 10;
 800d51a:	4d36      	ldr	r5, [pc, #216]	; (800d5f4 <MX_LWIP_Init+0xfc>)
 800d51c:	702a      	strb	r2, [r5, #0]
  GATEWAY_ADDRESS[1] = 1;
 800d51e:	706b      	strb	r3, [r5, #1]
  GATEWAY_ADDRESS[2] = 1;
 800d520:	70ab      	strb	r3, [r5, #2]
  GATEWAY_ADDRESS[3] = 1;
 800d522:	70eb      	strb	r3, [r5, #3]
  
  /* Initilialize the LwIP stack with RTOS */
  tcpip_init( NULL, NULL );
 800d524:	4621      	mov	r1, r4
 800d526:	4620      	mov	r0, r4
 800d528:	f7f9 f83e 	bl	80065a8 <tcpip_init>

  /* IP addresses initialization without DHCP (IPv4) */
  IP4_ADDR(&ipaddr, IP_ADDRESS[0], IP_ADDRESS[1], IP_ADDRESS[2], IP_ADDRESS[3]);
 800d52c:	783a      	ldrb	r2, [r7, #0]
 800d52e:	787b      	ldrb	r3, [r7, #1]
 800d530:	041b      	lsls	r3, r3, #16
 800d532:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800d536:	78ba      	ldrb	r2, [r7, #2]
 800d538:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800d53c:	78fa      	ldrb	r2, [r7, #3]
 800d53e:	4313      	orrs	r3, r2
 800d540:	021a      	lsls	r2, r3, #8
 800d542:	f402 027f 	and.w	r2, r2, #16711680	; 0xff0000
 800d546:	ea42 6203 	orr.w	r2, r2, r3, lsl #24
 800d54a:	0a19      	lsrs	r1, r3, #8
 800d54c:	f401 417f 	and.w	r1, r1, #65280	; 0xff00
 800d550:	430a      	orrs	r2, r1
 800d552:	ea42 6313 	orr.w	r3, r2, r3, lsr #24
 800d556:	4928      	ldr	r1, [pc, #160]	; (800d5f8 <MX_LWIP_Init+0x100>)
 800d558:	600b      	str	r3, [r1, #0]
  IP4_ADDR(&netmask, NETMASK_ADDRESS[0], NETMASK_ADDRESS[1] , NETMASK_ADDRESS[2], NETMASK_ADDRESS[3]);
 800d55a:	7832      	ldrb	r2, [r6, #0]
 800d55c:	7873      	ldrb	r3, [r6, #1]
 800d55e:	041b      	lsls	r3, r3, #16
 800d560:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800d564:	78b2      	ldrb	r2, [r6, #2]
 800d566:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800d56a:	78f2      	ldrb	r2, [r6, #3]
 800d56c:	4313      	orrs	r3, r2
 800d56e:	021a      	lsls	r2, r3, #8
 800d570:	f402 027f 	and.w	r2, r2, #16711680	; 0xff0000
 800d574:	ea42 6203 	orr.w	r2, r2, r3, lsl #24
 800d578:	0a18      	lsrs	r0, r3, #8
 800d57a:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 800d57e:	4302      	orrs	r2, r0
 800d580:	ea42 6313 	orr.w	r3, r2, r3, lsr #24
 800d584:	4a1d      	ldr	r2, [pc, #116]	; (800d5fc <MX_LWIP_Init+0x104>)
 800d586:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&gw, GATEWAY_ADDRESS[0], GATEWAY_ADDRESS[1], GATEWAY_ADDRESS[2], GATEWAY_ADDRESS[3]);
 800d588:	7828      	ldrb	r0, [r5, #0]
 800d58a:	786b      	ldrb	r3, [r5, #1]
 800d58c:	041b      	lsls	r3, r3, #16
 800d58e:	ea43 6300 	orr.w	r3, r3, r0, lsl #24
 800d592:	78a8      	ldrb	r0, [r5, #2]
 800d594:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
 800d598:	78e8      	ldrb	r0, [r5, #3]
 800d59a:	4303      	orrs	r3, r0
 800d59c:	0218      	lsls	r0, r3, #8
 800d59e:	f400 007f 	and.w	r0, r0, #16711680	; 0xff0000
 800d5a2:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
 800d5a6:	0a1d      	lsrs	r5, r3, #8
 800d5a8:	f405 457f 	and.w	r5, r5, #65280	; 0xff00
 800d5ac:	4328      	orrs	r0, r5
 800d5ae:	ea40 6013 	orr.w	r0, r0, r3, lsr #24
 800d5b2:	4b13      	ldr	r3, [pc, #76]	; (800d600 <MX_LWIP_Init+0x108>)
 800d5b4:	6018      	str	r0, [r3, #0]

  /* add the network interface (IPv4/IPv6) with RTOS */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &tcpip_input);
 800d5b6:	4d13      	ldr	r5, [pc, #76]	; (800d604 <MX_LWIP_Init+0x10c>)
 800d5b8:	4813      	ldr	r0, [pc, #76]	; (800d608 <MX_LWIP_Init+0x110>)
 800d5ba:	9002      	str	r0, [sp, #8]
 800d5bc:	4813      	ldr	r0, [pc, #76]	; (800d60c <MX_LWIP_Init+0x114>)
 800d5be:	9001      	str	r0, [sp, #4]
 800d5c0:	9400      	str	r4, [sp, #0]
 800d5c2:	4628      	mov	r0, r5
 800d5c4:	f7fa fee8 	bl	8008398 <netif_add>

  /* Registers the default network interface */
  netif_set_default(&gnetif);
 800d5c8:	4628      	mov	r0, r5
 800d5ca:	f7fa ff25 	bl	8008418 <netif_set_default>

  if (netif_is_link_up(&gnetif))
 800d5ce:	f895 302b 	ldrb.w	r3, [r5, #43]	; 0x2b
 800d5d2:	f013 0f04 	tst.w	r3, #4
 800d5d6:	d104      	bne.n	800d5e2 <MX_LWIP_Init+0xea>
    netif_set_up(&gnetif);
  }
  else
  {
    /* When the netif link is down this function must be called */
    netif_set_down(&gnetif);
 800d5d8:	480a      	ldr	r0, [pc, #40]	; (800d604 <MX_LWIP_Init+0x10c>)
 800d5da:	f7fa ff35 	bl	8008448 <netif_set_down>
  }

/* USER CODE BEGIN 3 */

/* USER CODE END 3 */
}
 800d5de:	b005      	add	sp, #20
 800d5e0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    netif_set_up(&gnetif);
 800d5e2:	4628      	mov	r0, r5
 800d5e4:	f7fa ff1e 	bl	8008424 <netif_set_up>
 800d5e8:	e7f9      	b.n	800d5de <MX_LWIP_Init+0xe6>
 800d5ea:	bf00      	nop
 800d5ec:	2000aac8 	.word	0x2000aac8
 800d5f0:	2000aac4 	.word	0x2000aac4
 800d5f4:	2000aa8c 	.word	0x2000aa8c
 800d5f8:	2000aac0 	.word	0x2000aac0
 800d5fc:	2000aacc 	.word	0x2000aacc
 800d600:	2000aad0 	.word	0x2000aad0
 800d604:	2000aa90 	.word	0x2000aa90
 800d608:	080064a1 	.word	0x080064a1
 800d60c:	0800d2c9 	.word	0x0800d2c9

0800d610 <MX_NVIC_Init>:
/**
  * @brief NVIC Configuration.
  * @retval None
  */
static void MX_NVIC_Init(void)
{
 800d610:	b508      	push	{r3, lr}
  /* ETH_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(ETH_IRQn, 5, 0);
 800d612:	2200      	movs	r2, #0
 800d614:	2105      	movs	r1, #5
 800d616:	203d      	movs	r0, #61	; 0x3d
 800d618:	f7f2 ffcc 	bl	80005b4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(ETH_IRQn);
 800d61c:	203d      	movs	r0, #61	; 0x3d
 800d61e:	f7f2 fffb 	bl	8000618 <HAL_NVIC_EnableIRQ>
 800d622:	bd08      	pop	{r3, pc}

0800d624 <SystemClock_Config>:
{
 800d624:	b530      	push	{r4, r5, lr}
 800d626:	b095      	sub	sp, #84	; 0x54
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800d628:	2230      	movs	r2, #48	; 0x30
 800d62a:	2100      	movs	r1, #0
 800d62c:	a808      	add	r0, sp, #32
 800d62e:	f000 fc43 	bl	800deb8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800d632:	2400      	movs	r4, #0
 800d634:	9403      	str	r4, [sp, #12]
 800d636:	9404      	str	r4, [sp, #16]
 800d638:	9405      	str	r4, [sp, #20]
 800d63a:	9406      	str	r4, [sp, #24]
 800d63c:	9407      	str	r4, [sp, #28]
  __HAL_RCC_PWR_CLK_ENABLE();
 800d63e:	9401      	str	r4, [sp, #4]
 800d640:	4b1c      	ldr	r3, [pc, #112]	; (800d6b4 <SystemClock_Config+0x90>)
 800d642:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800d644:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800d648:	641a      	str	r2, [r3, #64]	; 0x40
 800d64a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d64c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800d650:	9301      	str	r3, [sp, #4]
 800d652:	9b01      	ldr	r3, [sp, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800d654:	9402      	str	r4, [sp, #8]
 800d656:	4b18      	ldr	r3, [pc, #96]	; (800d6b8 <SystemClock_Config+0x94>)
 800d658:	681a      	ldr	r2, [r3, #0]
 800d65a:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 800d65e:	601a      	str	r2, [r3, #0]
 800d660:	681b      	ldr	r3, [r3, #0]
 800d662:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800d666:	9302      	str	r3, [sp, #8]
 800d668:	9b02      	ldr	r3, [sp, #8]
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800d66a:	2301      	movs	r3, #1
 800d66c:	9308      	str	r3, [sp, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 800d66e:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 800d672:	9309      	str	r3, [sp, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800d674:	2502      	movs	r5, #2
 800d676:	950e      	str	r5, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800d678:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800d67c:	930f      	str	r3, [sp, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 800d67e:	2304      	movs	r3, #4
 800d680:	9310      	str	r3, [sp, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 800d682:	23a8      	movs	r3, #168	; 0xa8
 800d684:	9311      	str	r3, [sp, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800d686:	9512      	str	r5, [sp, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 800d688:	2307      	movs	r3, #7
 800d68a:	9313      	str	r3, [sp, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800d68c:	a808      	add	r0, sp, #32
 800d68e:	f7f3 fdc1 	bl	8001214 <HAL_RCC_OscConfig>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800d692:	230f      	movs	r3, #15
 800d694:	9303      	str	r3, [sp, #12]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800d696:	9504      	str	r5, [sp, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800d698:	9405      	str	r4, [sp, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800d69a:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800d69e:	9306      	str	r3, [sp, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800d6a0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800d6a4:	9307      	str	r3, [sp, #28]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800d6a6:	2105      	movs	r1, #5
 800d6a8:	a803      	add	r0, sp, #12
 800d6aa:	f7f3 ffe9 	bl	8001680 <HAL_RCC_ClockConfig>
}
 800d6ae:	b015      	add	sp, #84	; 0x54
 800d6b0:	bd30      	pop	{r4, r5, pc}
 800d6b2:	bf00      	nop
 800d6b4:	40023800 	.word	0x40023800
 800d6b8:	40007000 	.word	0x40007000

0800d6bc <main>:
{
 800d6bc:	b508      	push	{r3, lr}
  HAL_Init();
 800d6be:	f7f2 ff27 	bl	8000510 <HAL_Init>
  SystemClock_Config();
 800d6c2:	f7ff ffaf 	bl	800d624 <SystemClock_Config>
  MX_GPIO_Init();
 800d6c6:	f7ff fe7f 	bl	800d3c8 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 800d6ca:	f000 fad9 	bl	800dc80 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 800d6ce:	f000 fb2b 	bl	800dd28 <MX_USB_OTG_FS_PCD_Init>
  MX_NVIC_Init();
 800d6d2:	f7ff ff9d 	bl	800d610 <MX_NVIC_Init>
  MX_FREERTOS_Init();
 800d6d6:	f7ff fe61 	bl	800d39c <MX_FREERTOS_Init>
  osKernelStart();
 800d6da:	f7f4 fd81 	bl	80021e0 <osKernelStart>
 800d6de:	e7fe      	b.n	800d6de <main+0x22>

0800d6e0 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800d6e0:	b508      	push	{r3, lr}
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 800d6e2:	6802      	ldr	r2, [r0, #0]
 800d6e4:	4b03      	ldr	r3, [pc, #12]	; (800d6f4 <HAL_TIM_PeriodElapsedCallback+0x14>)
 800d6e6:	429a      	cmp	r2, r3
 800d6e8:	d000      	beq.n	800d6ec <HAL_TIM_PeriodElapsedCallback+0xc>
 800d6ea:	bd08      	pop	{r3, pc}
    HAL_IncTick();
 800d6ec:	f7f2 ff2a 	bl	8000544 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800d6f0:	e7fb      	b.n	800d6ea <HAL_TIM_PeriodElapsedCallback+0xa>
 800d6f2:	bf00      	nop
 800d6f4:	40010000 	.word	0x40010000

0800d6f8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800d6f8:	4770      	bx	lr

0800d6fa <malloc>:
#include "FreeRTOS.h"
#include <task.h> // pvxxxMalloc
#include <portable.h> // pvxxxMalloc
#include <string.h> // memset

void *malloc (size_t size) {
 800d6fa:	b508      	push	{r3, lr}
/* Call the FreeRTOS version of malloc. */
return pvPortMalloc( size );
 800d6fc:	f7f5 f9e0 	bl	8002ac0 <pvPortMalloc>
}
 800d700:	bd08      	pop	{r3, pc}

0800d702 <free>:
void *calloc (size_t nmemb, size_t size) {
/* Call the FreeRTOS version of calloc. */
void * p= pvPortMalloc( size );
return memset(p,0,size);
}
void free (void *ptr) {
 800d702:	b508      	push	{r3, lr}
	vPortFree( ptr );
 800d704:	f7f5 fa60 	bl	8002bc8 <vPortFree>
 800d708:	bd08      	pop	{r3, pc}
	...

0800d70c <connexion_tcp_server_wait>:
/*fonction qui établie la connexion
 * return - 1 en cas d'erreur
 * return la new_socket quand pas d'erreur
 */
int connexion_tcp_server_wait(const char *addr, int port)
{
 800d70c:	b530      	push	{r4, r5, lr}
 800d70e:	b08d      	sub	sp, #52	; 0x34
	int socket_desc , new_socket , c;
	struct sockaddr_in server , client;
	char *message;

	//Create socket
	socket_desc = socket(AF_INET , SOCK_STREAM , 0);
 800d710:	2200      	movs	r2, #0
 800d712:	2101      	movs	r1, #1
 800d714:	2002      	movs	r0, #2
 800d716:	f7f8 fdef 	bl	80062f8 <lwip_socket>
 800d71a:	4604      	mov	r4, r0
	if (socket_desc == -1)
 800d71c:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 800d720:	d033      	beq.n	800d78a <connexion_tcp_server_wait+0x7e>
				errno, strerror(errno));
		return -1;
	}

	//Prepare the sockaddr_in structure
	server.sin_family = AF_INET;
 800d722:	2302      	movs	r3, #2
 800d724:	f88d 301d 	strb.w	r3, [sp, #29]
	server.sin_addr.s_addr = INADDR_ANY;
 800d728:	2300      	movs	r3, #0
 800d72a:	9308      	str	r3, [sp, #32]
	server.sin_port = htons( KLISTEN_PORT );
 800d72c:	f241 308a 	movw	r0, #5002	; 0x138a
 800d730:	f7f8 ff6c 	bl	800660c <lwip_htons>
 800d734:	f8ad 001e 	strh.w	r0, [sp, #30]

	//Bind
	int ret = bind(socket_desc,(struct sockaddr *)&server , sizeof(server));
 800d738:	2210      	movs	r2, #16
 800d73a:	a907      	add	r1, sp, #28
 800d73c:	4620      	mov	r0, r4
 800d73e:	f7f8 fb1d 	bl	8005d7c <lwip_bind>
	if(ret < 0)
 800d742:	2800      	cmp	r0, #0
 800d744:	db2c      	blt.n	800d7a0 <connexion_tcp_server_wait+0x94>
		printf("bind sur l'ip %s sur le port %d ne peut se faire - le code d'erreur est (n° %d)-%s\n",
				IP_SERVEUR, KLISTEN_PORT, errno, strerror(errno));
		return -1;
		close(socket_desc);
	}
	printf("Connexion avec le client qui a l'ip %s et le port %d\n", IP_SERVEUR, KLISTEN_PORT);
 800d746:	f241 328a 	movw	r2, #5002	; 0x138a
 800d74a:	4924      	ldr	r1, [pc, #144]	; (800d7dc <connexion_tcp_server_wait+0xd0>)
 800d74c:	4824      	ldr	r0, [pc, #144]	; (800d7e0 <connexion_tcp_server_wait+0xd4>)
 800d74e:	f000 fa3c 	bl	800dbca <iprintf>


	//Listen
	listen(socket_desc , 3);
 800d752:	2103      	movs	r1, #3
 800d754:	4620      	mov	r0, r4
 800d756:	f7f8 fb9b 	bl	8005e90 <lwip_listen>
	printf("En listen\n");
 800d75a:	4822      	ldr	r0, [pc, #136]	; (800d7e4 <connexion_tcp_server_wait+0xd8>)
 800d75c:	f000 fa74 	bl	800dc48 <puts>

	//Accept and incoming connection
	printf("Waiting for incoming connections...");
 800d760:	4821      	ldr	r0, [pc, #132]	; (800d7e8 <connexion_tcp_server_wait+0xdc>)
 800d762:	f000 fa32 	bl	800dbca <iprintf>
	c = sizeof(struct sockaddr_in);
 800d766:	aa0c      	add	r2, sp, #48	; 0x30
 800d768:	2310      	movs	r3, #16
 800d76a:	f842 3d04 	str.w	r3, [r2, #-4]!
	new_socket = accept(socket_desc, (struct sockaddr *)&client, (socklen_t*)&c);
 800d76e:	a903      	add	r1, sp, #12
 800d770:	4620      	mov	r0, r4
 800d772:	f7f8 fa1b 	bl	8005bac <lwip_accept>
	if( new_socket > 0 )
 800d776:	1e04      	subs	r4, r0, #0
 800d778:	dd02      	ble.n	800d780 <connexion_tcp_server_wait+0x74>
	{
		printf("Connection accepted\n");
 800d77a:	481c      	ldr	r0, [pc, #112]	; (800d7ec <connexion_tcp_server_wait+0xe0>)
 800d77c:	f000 fa64 	bl	800dc48 <puts>

	}

	if (new_socket< 0)
 800d780:	2c00      	cmp	r4, #0
 800d782:	db1d      	blt.n	800d7c0 <connexion_tcp_server_wait+0xb4>
		return -1;
		close(new_socket);
	}

	return new_socket;
}
 800d784:	4620      	mov	r0, r4
 800d786:	b00d      	add	sp, #52	; 0x34
 800d788:	bd30      	pop	{r4, r5, pc}
		printf("Socket ne peut se faire - le code d'erreur est (n° %d)-%s\n",
 800d78a:	4b19      	ldr	r3, [pc, #100]	; (800d7f0 <connexion_tcp_server_wait+0xe4>)
 800d78c:	681d      	ldr	r5, [r3, #0]
 800d78e:	4628      	mov	r0, r5
 800d790:	f000 fd80 	bl	800e294 <strerror>
 800d794:	4602      	mov	r2, r0
 800d796:	4629      	mov	r1, r5
 800d798:	4816      	ldr	r0, [pc, #88]	; (800d7f4 <connexion_tcp_server_wait+0xe8>)
 800d79a:	f000 fa16 	bl	800dbca <iprintf>
		return -1;
 800d79e:	e7f1      	b.n	800d784 <connexion_tcp_server_wait+0x78>
		printf("bind sur l'ip %s sur le port %d ne peut se faire - le code d'erreur est (n° %d)-%s\n",
 800d7a0:	4b13      	ldr	r3, [pc, #76]	; (800d7f0 <connexion_tcp_server_wait+0xe4>)
 800d7a2:	681c      	ldr	r4, [r3, #0]
 800d7a4:	4620      	mov	r0, r4
 800d7a6:	f000 fd75 	bl	800e294 <strerror>
 800d7aa:	9000      	str	r0, [sp, #0]
 800d7ac:	4623      	mov	r3, r4
 800d7ae:	f241 328a 	movw	r2, #5002	; 0x138a
 800d7b2:	490a      	ldr	r1, [pc, #40]	; (800d7dc <connexion_tcp_server_wait+0xd0>)
 800d7b4:	4810      	ldr	r0, [pc, #64]	; (800d7f8 <connexion_tcp_server_wait+0xec>)
 800d7b6:	f000 fa08 	bl	800dbca <iprintf>
		return -1;
 800d7ba:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800d7be:	e7e1      	b.n	800d784 <connexion_tcp_server_wait+0x78>
		printf("accept failed - le code d'erreur est (n° %d)-%s\n", errno, strerror(errno));
 800d7c0:	4b0b      	ldr	r3, [pc, #44]	; (800d7f0 <connexion_tcp_server_wait+0xe4>)
 800d7c2:	681c      	ldr	r4, [r3, #0]
 800d7c4:	4620      	mov	r0, r4
 800d7c6:	f000 fd65 	bl	800e294 <strerror>
 800d7ca:	4602      	mov	r2, r0
 800d7cc:	4621      	mov	r1, r4
 800d7ce:	480b      	ldr	r0, [pc, #44]	; (800d7fc <connexion_tcp_server_wait+0xf0>)
 800d7d0:	f000 f9fb 	bl	800dbca <iprintf>
		return -1;
 800d7d4:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800d7d8:	e7d4      	b.n	800d784 <connexion_tcp_server_wait+0x78>
 800d7da:	bf00      	nop
 800d7dc:	08010618 	.word	0x08010618
 800d7e0:	0801067c 	.word	0x0801067c
 800d7e4:	080106b4 	.word	0x080106b4
 800d7e8:	080106c0 	.word	0x080106c0
 800d7ec:	080106e4 	.word	0x080106e4
 800d7f0:	20007998 	.word	0x20007998
 800d7f4:	080105dc 	.word	0x080105dc
 800d7f8:	08010624 	.word	0x08010624
 800d7fc:	080106f8 	.word	0x080106f8

0800d800 <ssend_msg>:
/* Fonction qui envoie le message
 *return -1 si erreur et
*return le nombre d'octets si ok, on envoie le message du buffer
*/
int ssend_msg(int new_socket, const char *message, int in_longueur)
{
 800d800:	b510      	push	{r4, lr}
 int ret = send(new_socket , message , in_longueur , 0);
 800d802:	2300      	movs	r3, #0
 800d804:	f7f8 fd32 	bl	800626c <lwip_send>
	if( ret< 0)
 800d808:	1e04      	subs	r4, r0, #0
 800d80a:	db04      	blt.n	800d816 <ssend_msg+0x16>
	{
		printf("Envoi echoue; le code d'erreur est (n° %d)-%s\n", errno, strerror(errno));
		return -1;
	}
	printf("Message envoye\n");
 800d80c:	4808      	ldr	r0, [pc, #32]	; (800d830 <ssend_msg+0x30>)
 800d80e:	f000 fa1b 	bl	800dc48 <puts>

	return ret;
}
 800d812:	4620      	mov	r0, r4
 800d814:	bd10      	pop	{r4, pc}
		printf("Envoi echoue; le code d'erreur est (n° %d)-%s\n", errno, strerror(errno));
 800d816:	4b07      	ldr	r3, [pc, #28]	; (800d834 <ssend_msg+0x34>)
 800d818:	681c      	ldr	r4, [r3, #0]
 800d81a:	4620      	mov	r0, r4
 800d81c:	f000 fd3a 	bl	800e294 <strerror>
 800d820:	4602      	mov	r2, r0
 800d822:	4621      	mov	r1, r4
 800d824:	4804      	ldr	r0, [pc, #16]	; (800d838 <ssend_msg+0x38>)
 800d826:	f000 f9d0 	bl	800dbca <iprintf>
		return -1;
 800d82a:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800d82e:	e7f0      	b.n	800d812 <ssend_msg+0x12>
 800d830:	080107c0 	.word	0x080107c0
 800d834:	20007998 	.word	0x20007998
 800d838:	08010790 	.word	0x08010790

0800d83c <sreceivemessage>:
/* fonction qui reçoit le message d'une socket
 *return -1 si erreur et
 *return le nombre d'octets si ok, on reçoit le message du buffer
 */
int sreceivemessage (int new_socket, char *out_server_reply ,int in_longueur)
{
 800d83c:	b538      	push	{r3, r4, r5, lr}
 800d83e:	460d      	mov	r5, r1


	int ret = recv(new_socket, out_server_reply, in_longueur-1, 0); //recv: reçoit les messages d'une socket
 800d840:	2300      	movs	r3, #0
 800d842:	3a01      	subs	r2, #1
 800d844:	f7f8 fc82 	bl	800614c <lwip_recv>

	if(ret>=0){
 800d848:	1e04      	subs	r4, r0, #0
 800d84a:	db11      	blt.n	800d870 <sreceivemessage+0x34>
		printf("Message recu : %d\n", ret );
 800d84c:	4621      	mov	r1, r4
 800d84e:	480f      	ldr	r0, [pc, #60]	; (800d88c <sreceivemessage+0x50>)
 800d850:	f000 f9bb 	bl	800dbca <iprintf>
		out_server_reply[ret]= '\0';
 800d854:	2300      	movs	r3, #0
 800d856:	552b      	strb	r3, [r5, r4]
		printf("%s", out_server_reply);
 800d858:	4629      	mov	r1, r5
 800d85a:	480d      	ldr	r0, [pc, #52]	; (800d890 <sreceivemessage+0x54>)
 800d85c:	f000 f9b5 	bl	800dbca <iprintf>
	{
		printf("Reception échouee; le code d'erreur est (n° %d)-%s\n", errno, strerror(errno));
		return -1;
	}

	printf("Bonne reception \n");
 800d860:	480c      	ldr	r0, [pc, #48]	; (800d894 <sreceivemessage+0x58>)
 800d862:	f000 f9f1 	bl	800dc48 <puts>
	printf(out_server_reply);
 800d866:	4628      	mov	r0, r5
 800d868:	f000 f9af 	bl	800dbca <iprintf>

	return ret;
}
 800d86c:	4620      	mov	r0, r4
 800d86e:	bd38      	pop	{r3, r4, r5, pc}
		printf("Reception échouee; le code d'erreur est (n° %d)-%s\n", errno, strerror(errno));
 800d870:	4b09      	ldr	r3, [pc, #36]	; (800d898 <sreceivemessage+0x5c>)
 800d872:	681c      	ldr	r4, [r3, #0]
 800d874:	4620      	mov	r0, r4
 800d876:	f000 fd0d 	bl	800e294 <strerror>
 800d87a:	4602      	mov	r2, r0
 800d87c:	4621      	mov	r1, r4
 800d87e:	4807      	ldr	r0, [pc, #28]	; (800d89c <sreceivemessage+0x60>)
 800d880:	f000 f9a3 	bl	800dbca <iprintf>
		return -1;
 800d884:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800d888:	e7f0      	b.n	800d86c <sreceivemessage+0x30>
 800d88a:	bf00      	nop
 800d88c:	0801072c 	.word	0x0801072c
 800d890:	08010740 	.word	0x08010740
 800d894:	08010744 	.word	0x08010744
 800d898:	20007998 	.word	0x20007998
 800d89c:	08010758 	.word	0x08010758

0800d8a0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800d8a0:	b500      	push	{lr}
 800d8a2:	b083      	sub	sp, #12
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800d8a4:	2200      	movs	r2, #0
 800d8a6:	9200      	str	r2, [sp, #0]
 800d8a8:	4b0d      	ldr	r3, [pc, #52]	; (800d8e0 <HAL_MspInit+0x40>)
 800d8aa:	6c59      	ldr	r1, [r3, #68]	; 0x44
 800d8ac:	f441 4180 	orr.w	r1, r1, #16384	; 0x4000
 800d8b0:	6459      	str	r1, [r3, #68]	; 0x44
 800d8b2:	6c59      	ldr	r1, [r3, #68]	; 0x44
 800d8b4:	f401 4180 	and.w	r1, r1, #16384	; 0x4000
 800d8b8:	9100      	str	r1, [sp, #0]
 800d8ba:	9900      	ldr	r1, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 800d8bc:	9201      	str	r2, [sp, #4]
 800d8be:	6c19      	ldr	r1, [r3, #64]	; 0x40
 800d8c0:	f041 5180 	orr.w	r1, r1, #268435456	; 0x10000000
 800d8c4:	6419      	str	r1, [r3, #64]	; 0x40
 800d8c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d8c8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800d8cc:	9301      	str	r3, [sp, #4]
 800d8ce:	9b01      	ldr	r3, [sp, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800d8d0:	210f      	movs	r1, #15
 800d8d2:	f06f 0001 	mvn.w	r0, #1
 800d8d6:	f7f2 fe6d 	bl	80005b4 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800d8da:	b003      	add	sp, #12
 800d8dc:	f85d fb04 	ldr.w	pc, [sp], #4
 800d8e0:	40023800 	.word	0x40023800

0800d8e4 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800d8e4:	b510      	push	{r4, lr}
 800d8e6:	b088      	sub	sp, #32
  uint32_t              uwTimclock = 0;
  uint32_t              uwPrescalerValue = 0;
  uint32_t              pFLatency;
  
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority ,0); 
 800d8e8:	2200      	movs	r2, #0
 800d8ea:	4601      	mov	r1, r0
 800d8ec:	2019      	movs	r0, #25
 800d8ee:	f7f2 fe61 	bl	80005b4 <HAL_NVIC_SetPriority>
  
  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn); 
 800d8f2:	2019      	movs	r0, #25
 800d8f4:	f7f2 fe90 	bl	8000618 <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 800d8f8:	2400      	movs	r4, #0
 800d8fa:	9401      	str	r4, [sp, #4]
 800d8fc:	4b14      	ldr	r3, [pc, #80]	; (800d950 <HAL_InitTick+0x6c>)
 800d8fe:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800d900:	f042 0201 	orr.w	r2, r2, #1
 800d904:	645a      	str	r2, [r3, #68]	; 0x44
 800d906:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d908:	f003 0301 	and.w	r3, r3, #1
 800d90c:	9301      	str	r3, [sp, #4]
 800d90e:	9b01      	ldr	r3, [sp, #4]
  
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800d910:	a902      	add	r1, sp, #8
 800d912:	a803      	add	r0, sp, #12
 800d914:	f7f3 ff86 	bl	8001824 <HAL_RCC_GetClockConfig>
  
  /* Compute TIM1 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 800d918:	f7f3 ff74 	bl	8001804 <HAL_RCC_GetPCLK2Freq>
 800d91c:	0043      	lsls	r3, r0, #1
   
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 800d91e:	480d      	ldr	r0, [pc, #52]	; (800d954 <HAL_InitTick+0x70>)
 800d920:	fba0 2303 	umull	r2, r3, r0, r3
 800d924:	0c9b      	lsrs	r3, r3, #18
 800d926:	3b01      	subs	r3, #1
  
  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 800d928:	480b      	ldr	r0, [pc, #44]	; (800d958 <HAL_InitTick+0x74>)
 800d92a:	4a0c      	ldr	r2, [pc, #48]	; (800d95c <HAL_InitTick+0x78>)
 800d92c:	6002      	str	r2, [r0, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000 / 1000) - 1;
 800d92e:	f240 32e7 	movw	r2, #999	; 0x3e7
 800d932:	60c2      	str	r2, [r0, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 800d934:	6043      	str	r3, [r0, #4]
  htim1.Init.ClockDivision = 0;
 800d936:	6104      	str	r4, [r0, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800d938:	6084      	str	r4, [r0, #8]
  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 800d93a:	f7f4 f8cb 	bl	8001ad4 <HAL_TIM_Base_Init>
 800d93e:	b110      	cbz	r0, 800d946 <HAL_InitTick+0x62>
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
  }
  
  /* Return function status */
  return HAL_ERROR;
 800d940:	2001      	movs	r0, #1
}
 800d942:	b008      	add	sp, #32
 800d944:	bd10      	pop	{r4, pc}
    return HAL_TIM_Base_Start_IT(&htim1);
 800d946:	4804      	ldr	r0, [pc, #16]	; (800d958 <HAL_InitTick+0x74>)
 800d948:	f7f3 ff8b 	bl	8001862 <HAL_TIM_Base_Start_IT>
 800d94c:	e7f9      	b.n	800d942 <HAL_InitTick+0x5e>
 800d94e:	bf00      	nop
 800d950:	40023800 	.word	0x40023800
 800d954:	431bde83 	.word	0x431bde83
 800d958:	2000aad4 	.word	0x2000aad4
 800d95c:	40010000 	.word	0x40010000

0800d960 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800d960:	4770      	bx	lr

0800d962 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800d962:	e7fe      	b.n	800d962 <HardFault_Handler>

0800d964 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800d964:	e7fe      	b.n	800d964 <MemManage_Handler>

0800d966 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800d966:	e7fe      	b.n	800d966 <BusFault_Handler>

0800d968 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800d968:	e7fe      	b.n	800d968 <UsageFault_Handler>

0800d96a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800d96a:	4770      	bx	lr

0800d96c <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 800d96c:	b508      	push	{r3, lr}
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800d96e:	4802      	ldr	r0, [pc, #8]	; (800d978 <TIM1_UP_TIM10_IRQHandler+0xc>)
 800d970:	f7f3 ff8c 	bl	800188c <HAL_TIM_IRQHandler>
 800d974:	bd08      	pop	{r3, pc}
 800d976:	bf00      	nop
 800d978:	2000aad4 	.word	0x2000aad4

0800d97c <ETH_IRQHandler>:

/**
  * @brief This function handles Ethernet global interrupt.
  */
void ETH_IRQHandler(void)
{
 800d97c:	b508      	push	{r3, lr}
  /* USER CODE BEGIN ETH_IRQn 0 */

  /* USER CODE END ETH_IRQn 0 */
  HAL_ETH_IRQHandler(&heth);
 800d97e:	4802      	ldr	r0, [pc, #8]	; (800d988 <ETH_IRQHandler+0xc>)
 800d980:	f7f3 f8b4 	bl	8000aec <HAL_ETH_IRQHandler>
 800d984:	bd08      	pop	{r3, pc}
 800d986:	bf00      	nop
 800d988:	20009270 	.word	0x20009270

0800d98c <_write>:
		__io_putchar(*ptr++);
	}
	return len;
}
__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800d98c:	b430      	push	{r4, r5}
	int i=0;
	for(i=0 ; i<len ; i++)
 800d98e:	2400      	movs	r4, #0
 800d990:	e00a      	b.n	800d9a8 <_write+0x1c>
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
  {
    while (ITM->PORT[0U].u32 == 0UL)
    {
      __NOP();
 800d992:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 800d994:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 800d998:	681b      	ldr	r3, [r3, #0]
 800d99a:	2b00      	cmp	r3, #0
 800d99c:	d0f9      	beq.n	800d992 <_write+0x6>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 800d99e:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 800d9a2:	7019      	strb	r1, [r3, #0]
 800d9a4:	3401      	adds	r4, #1
	ITM_SendChar((*ptr++)); // out char to serial
 800d9a6:	4629      	mov	r1, r5
	for(i=0 ; i<len ; i++)
 800d9a8:	4294      	cmp	r4, r2
 800d9aa:	da10      	bge.n	800d9ce <_write+0x42>
	ITM_SendChar((*ptr++)); // out char to serial
 800d9ac:	1c4d      	adds	r5, r1, #1
 800d9ae:	7809      	ldrb	r1, [r1, #0]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 800d9b0:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 800d9b4:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 800d9b8:	f013 0f01 	tst.w	r3, #1
 800d9bc:	d0f2      	beq.n	800d9a4 <_write+0x18>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 800d9be:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 800d9c2:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 800d9c6:	f013 0f01 	tst.w	r3, #1
 800d9ca:	d1e3      	bne.n	800d994 <_write+0x8>
 800d9cc:	e7ea      	b.n	800d9a4 <_write+0x18>
	return len;
}
 800d9ce:	4610      	mov	r0, r2
 800d9d0:	bc30      	pop	{r4, r5}
 800d9d2:	4770      	bx	lr

0800d9d4 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800d9d4:	490f      	ldr	r1, [pc, #60]	; (800da14 <SystemInit+0x40>)
 800d9d6:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 800d9da:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800d9de:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 800d9e2:	4b0d      	ldr	r3, [pc, #52]	; (800da18 <SystemInit+0x44>)
 800d9e4:	681a      	ldr	r2, [r3, #0]
 800d9e6:	f042 0201 	orr.w	r2, r2, #1
 800d9ea:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 800d9ec:	2000      	movs	r0, #0
 800d9ee:	6098      	str	r0, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 800d9f0:	681a      	ldr	r2, [r3, #0]
 800d9f2:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 800d9f6:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800d9fa:	601a      	str	r2, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 800d9fc:	4a07      	ldr	r2, [pc, #28]	; (800da1c <SystemInit+0x48>)
 800d9fe:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 800da00:	681a      	ldr	r2, [r3, #0]
 800da02:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800da06:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 800da08:	60d8      	str	r0, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800da0a:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800da0e:	608b      	str	r3, [r1, #8]
 800da10:	4770      	bx	lr
 800da12:	bf00      	nop
 800da14:	e000ed00 	.word	0xe000ed00
 800da18:	40023800 	.word	0x40023800
 800da1c:	24003010 	.word	0x24003010

0800da20 <ts_itoa>:
**  Abstract: Convert integer to ascii
**  Returns:  void
**---------------------------------------------------------------------------
*/
void ts_itoa(char **buf, unsigned int d, int base)
{
 800da20:	b470      	push	{r4, r5, r6}
	int div = 1;
 800da22:	2301      	movs	r3, #1
	while (d/div >= base)
 800da24:	e001      	b.n	800da2a <ts_itoa+0xa>
		div *= base;
 800da26:	fb02 f303 	mul.w	r3, r2, r3
	while (d/div >= base)
 800da2a:	fbb1 f4f3 	udiv	r4, r1, r3
 800da2e:	4294      	cmp	r4, r2
 800da30:	d2f9      	bcs.n	800da26 <ts_itoa+0x6>
 800da32:	e004      	b.n	800da3e <ts_itoa+0x1e>
		d = d%div;
		div /= base;
		if (num > 9)
			*((*buf)++) = (num-10) + 'A';
		else
			*((*buf)++) = num + '0';
 800da34:	6805      	ldr	r5, [r0, #0]
 800da36:	1c6e      	adds	r6, r5, #1
 800da38:	6006      	str	r6, [r0, #0]
 800da3a:	3430      	adds	r4, #48	; 0x30
 800da3c:	702c      	strb	r4, [r5, #0]
	while (div != 0)
 800da3e:	b16b      	cbz	r3, 800da5c <ts_itoa+0x3c>
		int num = d/div;
 800da40:	fbb1 f4f3 	udiv	r4, r1, r3
		d = d%div;
 800da44:	fb03 1114 	mls	r1, r3, r4, r1
		div /= base;
 800da48:	fb93 f3f2 	sdiv	r3, r3, r2
		if (num > 9)
 800da4c:	2c09      	cmp	r4, #9
 800da4e:	ddf1      	ble.n	800da34 <ts_itoa+0x14>
			*((*buf)++) = (num-10) + 'A';
 800da50:	6805      	ldr	r5, [r0, #0]
 800da52:	1c6e      	adds	r6, r5, #1
 800da54:	6006      	str	r6, [r0, #0]
 800da56:	3437      	adds	r4, #55	; 0x37
 800da58:	702c      	strb	r4, [r5, #0]
 800da5a:	e7f0      	b.n	800da3e <ts_itoa+0x1e>
	}
}
 800da5c:	bc70      	pop	{r4, r5, r6}
 800da5e:	4770      	bx	lr

0800da60 <ts_formatstring>:
**  Abstract: Writes arguments va to buffer buf according to format fmt
**  Returns:  Length of string
**---------------------------------------------------------------------------
*/
int ts_formatstring(char *buf, const char *fmt, va_list va)
{
 800da60:	b530      	push	{r4, r5, lr}
 800da62:	b083      	sub	sp, #12
 800da64:	9001      	str	r0, [sp, #4]
 800da66:	460c      	mov	r4, r1
 800da68:	9200      	str	r2, [sp, #0]
	char *start_buf = buf;
 800da6a:	4605      	mov	r5, r0
	while(*fmt)
 800da6c:	e03e      	b.n	800daec <ts_formatstring+0x8c>
	{
		/* Character needs formating? */
		if (*fmt == '%')
		{
			switch (*(++fmt))
 800da6e:	7863      	ldrb	r3, [r4, #1]
 800da70:	2b64      	cmp	r3, #100	; 0x64
 800da72:	d01c      	beq.n	800daae <ts_formatstring+0x4e>
 800da74:	d90d      	bls.n	800da92 <ts_formatstring+0x32>
 800da76:	2b73      	cmp	r3, #115	; 0x73
 800da78:	d04a      	beq.n	800db10 <ts_formatstring+0xb0>
 800da7a:	d916      	bls.n	800daaa <ts_formatstring+0x4a>
 800da7c:	2b75      	cmp	r3, #117	; 0x75
 800da7e:	d121      	bne.n	800dac4 <ts_formatstring+0x64>
						*buf++ = *arg++;
					}
				}
				break;
			  case 'u':
					ts_itoa(&buf, va_arg(va, unsigned int), 10);
 800da80:	9b00      	ldr	r3, [sp, #0]
 800da82:	1d1a      	adds	r2, r3, #4
 800da84:	9200      	str	r2, [sp, #0]
 800da86:	220a      	movs	r2, #10
 800da88:	6819      	ldr	r1, [r3, #0]
 800da8a:	a801      	add	r0, sp, #4
 800da8c:	f7ff ffc8 	bl	800da20 <ts_itoa>
				break;
 800da90:	e02b      	b.n	800daea <ts_formatstring+0x8a>
			switch (*(++fmt))
 800da92:	2b58      	cmp	r3, #88	; 0x58
 800da94:	d018      	beq.n	800dac8 <ts_formatstring+0x68>
 800da96:	2b63      	cmp	r3, #99	; 0x63
 800da98:	d01f      	beq.n	800dada <ts_formatstring+0x7a>
 800da9a:	2b25      	cmp	r3, #37	; 0x25
 800da9c:	d125      	bne.n	800daea <ts_formatstring+0x8a>
			  case 'x':
			  case 'X':
					ts_itoa(&buf, va_arg(va, int), 16);
				break;
			  case '%':
				  *buf++ = '%';
 800da9e:	9b01      	ldr	r3, [sp, #4]
 800daa0:	1c5a      	adds	r2, r3, #1
 800daa2:	9201      	str	r2, [sp, #4]
 800daa4:	2225      	movs	r2, #37	; 0x25
 800daa6:	701a      	strb	r2, [r3, #0]
				  break;
 800daa8:	e01f      	b.n	800daea <ts_formatstring+0x8a>
			switch (*(++fmt))
 800daaa:	2b69      	cmp	r3, #105	; 0x69
 800daac:	d11d      	bne.n	800daea <ts_formatstring+0x8a>
					signed int val = va_arg(va, signed int);
 800daae:	9b00      	ldr	r3, [sp, #0]
 800dab0:	1d1a      	adds	r2, r3, #4
 800dab2:	9200      	str	r2, [sp, #0]
 800dab4:	6819      	ldr	r1, [r3, #0]
					if (val < 0)
 800dab6:	2900      	cmp	r1, #0
 800dab8:	db23      	blt.n	800db02 <ts_formatstring+0xa2>
					ts_itoa(&buf, val, 10);
 800daba:	220a      	movs	r2, #10
 800dabc:	a801      	add	r0, sp, #4
 800dabe:	f7ff ffaf 	bl	800da20 <ts_itoa>
				break;
 800dac2:	e012      	b.n	800daea <ts_formatstring+0x8a>
			switch (*(++fmt))
 800dac4:	2b78      	cmp	r3, #120	; 0x78
 800dac6:	d110      	bne.n	800daea <ts_formatstring+0x8a>
					ts_itoa(&buf, va_arg(va, int), 16);
 800dac8:	9b00      	ldr	r3, [sp, #0]
 800daca:	1d1a      	adds	r2, r3, #4
 800dacc:	9200      	str	r2, [sp, #0]
 800dace:	2210      	movs	r2, #16
 800dad0:	6819      	ldr	r1, [r3, #0]
 800dad2:	a801      	add	r0, sp, #4
 800dad4:	f7ff ffa4 	bl	800da20 <ts_itoa>
				break;
 800dad8:	e007      	b.n	800daea <ts_formatstring+0x8a>
				*buf++ = va_arg(va, int);
 800dada:	9b01      	ldr	r3, [sp, #4]
 800dadc:	1c5a      	adds	r2, r3, #1
 800dade:	9201      	str	r2, [sp, #4]
 800dae0:	9a00      	ldr	r2, [sp, #0]
 800dae2:	1d11      	adds	r1, r2, #4
 800dae4:	9100      	str	r1, [sp, #0]
 800dae6:	6812      	ldr	r2, [r2, #0]
 800dae8:	701a      	strb	r2, [r3, #0]
			}
			fmt++;
 800daea:	3402      	adds	r4, #2
	while(*fmt)
 800daec:	7823      	ldrb	r3, [r4, #0]
 800daee:	b1f3      	cbz	r3, 800db2e <ts_formatstring+0xce>
		if (*fmt == '%')
 800daf0:	2b25      	cmp	r3, #37	; 0x25
 800daf2:	d0bc      	beq.n	800da6e <ts_formatstring+0xe>
		}
		/* Else just copy */
		else
		{
			*buf++ = *fmt++;
 800daf4:	9b01      	ldr	r3, [sp, #4]
 800daf6:	1c5a      	adds	r2, r3, #1
 800daf8:	9201      	str	r2, [sp, #4]
 800dafa:	7822      	ldrb	r2, [r4, #0]
 800dafc:	701a      	strb	r2, [r3, #0]
 800dafe:	3401      	adds	r4, #1
 800db00:	e7f4      	b.n	800daec <ts_formatstring+0x8c>
						val *= -1;
 800db02:	4249      	negs	r1, r1
						*buf++ = '-';
 800db04:	9b01      	ldr	r3, [sp, #4]
 800db06:	1c5a      	adds	r2, r3, #1
 800db08:	9201      	str	r2, [sp, #4]
 800db0a:	222d      	movs	r2, #45	; 0x2d
 800db0c:	701a      	strb	r2, [r3, #0]
 800db0e:	e7d4      	b.n	800daba <ts_formatstring+0x5a>
					char * arg = va_arg(va, char *);
 800db10:	9b00      	ldr	r3, [sp, #0]
 800db12:	1d1a      	adds	r2, r3, #4
 800db14:	9200      	str	r2, [sp, #0]
 800db16:	681b      	ldr	r3, [r3, #0]
					while (*arg)
 800db18:	e005      	b.n	800db26 <ts_formatstring+0xc6>
						*buf++ = *arg++;
 800db1a:	9a01      	ldr	r2, [sp, #4]
 800db1c:	1c51      	adds	r1, r2, #1
 800db1e:	9101      	str	r1, [sp, #4]
 800db20:	7819      	ldrb	r1, [r3, #0]
 800db22:	7011      	strb	r1, [r2, #0]
 800db24:	3301      	adds	r3, #1
					while (*arg)
 800db26:	781a      	ldrb	r2, [r3, #0]
 800db28:	2a00      	cmp	r2, #0
 800db2a:	d1f6      	bne.n	800db1a <ts_formatstring+0xba>
 800db2c:	e7dd      	b.n	800daea <ts_formatstring+0x8a>
		}
	}
	*buf = 0;
 800db2e:	2200      	movs	r2, #0
 800db30:	9b01      	ldr	r3, [sp, #4]
 800db32:	701a      	strb	r2, [r3, #0]

	return (int)(buf - start_buf);
}
 800db34:	9801      	ldr	r0, [sp, #4]
 800db36:	1b40      	subs	r0, r0, r5
 800db38:	b003      	add	sp, #12
 800db3a:	bd30      	pop	{r4, r5, pc}

0800db3c <ts_formatlength>:
**            format string and va_list va
**  Returns:  Maximum length
**---------------------------------------------------------------------------
*/
int ts_formatlength(const char *fmt, va_list va)
{
 800db3c:	b082      	sub	sp, #8
 800db3e:	4603      	mov	r3, r0
 800db40:	9101      	str	r1, [sp, #4]
	int length = 0;
 800db42:	2000      	movs	r0, #0
	while (*fmt)
 800db44:	e01d      	b.n	800db82 <ts_formatlength+0x46>
	{
		if (*fmt == '%')
		{
			++fmt;
 800db46:	1c59      	adds	r1, r3, #1
			switch (*fmt)
 800db48:	785b      	ldrb	r3, [r3, #1]
 800db4a:	3b58      	subs	r3, #88	; 0x58
 800db4c:	2b20      	cmp	r3, #32
 800db4e:	d837      	bhi.n	800dbc0 <ts_formatlength+0x84>
 800db50:	e8df f003 	tbb	[pc, r3]
 800db54:	36363630 	.word	0x36363630
 800db58:	36363636 	.word	0x36363636
 800db5c:	11363636 	.word	0x11363636
 800db60:	3636361d 	.word	0x3636361d
 800db64:	36361d36 	.word	0x36361d36
 800db68:	36363636 	.word	0x36363636
 800db6c:	23363636 	.word	0x23363636
 800db70:	36361d36 	.word	0x36361d36
 800db74:	30          	.byte	0x30
 800db75:	00          	.byte	0x00
			{
			  case 'c':
		  		  va_arg(va, int);
 800db76:	9b01      	ldr	r3, [sp, #4]
 800db78:	3304      	adds	r3, #4
 800db7a:	9301      	str	r3, [sp, #4]
				  ++length;
 800db7c:	3001      	adds	r0, #1
			++fmt;
 800db7e:	460b      	mov	r3, r1
		}
		else
		{
			++length;
		}
		++fmt;
 800db80:	3301      	adds	r3, #1
	while (*fmt)
 800db82:	781a      	ldrb	r2, [r3, #0]
 800db84:	b1fa      	cbz	r2, 800dbc6 <ts_formatlength+0x8a>
		if (*fmt == '%')
 800db86:	2a25      	cmp	r2, #37	; 0x25
 800db88:	d0dd      	beq.n	800db46 <ts_formatlength+0xa>
			++length;
 800db8a:	3001      	adds	r0, #1
 800db8c:	e7f8      	b.n	800db80 <ts_formatlength+0x44>
				  length += 11;
 800db8e:	300b      	adds	r0, #11
				  va_arg(va, int);
 800db90:	9b01      	ldr	r3, [sp, #4]
 800db92:	3304      	adds	r3, #4
 800db94:	9301      	str	r3, [sp, #4]
			++fmt;
 800db96:	460b      	mov	r3, r1
 800db98:	e7f2      	b.n	800db80 <ts_formatlength+0x44>
			  		  char * str = va_arg(va, char *);
 800db9a:	9b01      	ldr	r3, [sp, #4]
 800db9c:	1d1a      	adds	r2, r3, #4
 800db9e:	9201      	str	r2, [sp, #4]
 800dba0:	681b      	ldr	r3, [r3, #0]
			  		  while (*str++)
 800dba2:	e001      	b.n	800dba8 <ts_formatlength+0x6c>
			  			  ++length;
 800dba4:	3001      	adds	r0, #1
			  		  while (*str++)
 800dba6:	4613      	mov	r3, r2
 800dba8:	1c5a      	adds	r2, r3, #1
 800dbaa:	781b      	ldrb	r3, [r3, #0]
 800dbac:	2b00      	cmp	r3, #0
 800dbae:	d1f9      	bne.n	800dba4 <ts_formatlength+0x68>
			++fmt;
 800dbb0:	460b      	mov	r3, r1
 800dbb2:	e7e5      	b.n	800db80 <ts_formatlength+0x44>
				  length += 8;
 800dbb4:	3008      	adds	r0, #8
				  va_arg(va, unsigned int);
 800dbb6:	9b01      	ldr	r3, [sp, #4]
 800dbb8:	3304      	adds	r3, #4
 800dbba:	9301      	str	r3, [sp, #4]
			++fmt;
 800dbbc:	460b      	mov	r3, r1
 800dbbe:	e7df      	b.n	800db80 <ts_formatlength+0x44>
				  ++length;
 800dbc0:	3001      	adds	r0, #1
			++fmt;
 800dbc2:	460b      	mov	r3, r1
				  break;
 800dbc4:	e7dc      	b.n	800db80 <ts_formatlength+0x44>
	}
	return length;
}
 800dbc6:	b002      	add	sp, #8
 800dbc8:	4770      	bx	lr

0800dbca <iprintf>:
**  Returns:  Number of bytes written
**
**===========================================================================
*/
int iprintf(const char *fmt, ...)
{
 800dbca:	b40f      	push	{r0, r1, r2, r3}
 800dbcc:	b5f0      	push	{r4, r5, r6, r7, lr}
 800dbce:	b083      	sub	sp, #12
 800dbd0:	af00      	add	r7, sp, #0
 800dbd2:	f107 0120 	add.w	r1, r7, #32
 800dbd6:	f851 5b04 	ldr.w	r5, [r1], #4
	int length = 0;
	va_list va;
	va_start(va, fmt);
 800dbda:	6079      	str	r1, [r7, #4]
	length = ts_formatlength(fmt, va);
 800dbdc:	4628      	mov	r0, r5
 800dbde:	f7ff ffad 	bl	800db3c <ts_formatlength>
 800dbe2:	4604      	mov	r4, r0
	va_end(va);
	if(length < 50)
 800dbe4:	2831      	cmp	r0, #49	; 0x31
 800dbe6:	dd19      	ble.n	800dc1c <iprintf+0x52>
		va_start(va, fmt);
		length = ts_formatstring(buf, fmt, va);
		length = _write(1, buf, length);
		va_end(va);
	}else {
		char * buf=malloc(length * sizeof(char));
 800dbe8:	f7ff fd87 	bl	800d6fa <malloc>
		if (buf) {
 800dbec:	4606      	mov	r6, r0
 800dbee:	b170      	cbz	r0, 800dc0e <iprintf+0x44>
		va_start(va, fmt);
 800dbf0:	f107 0224 	add.w	r2, r7, #36	; 0x24
 800dbf4:	607a      	str	r2, [r7, #4]
		length = ts_formatstring(buf, fmt, va);
 800dbf6:	4629      	mov	r1, r5
 800dbf8:	f7ff ff32 	bl	800da60 <ts_formatstring>
		length = _write(1, buf, length);
 800dbfc:	4602      	mov	r2, r0
 800dbfe:	4631      	mov	r1, r6
 800dc00:	2001      	movs	r0, #1
 800dc02:	f7ff fec3 	bl	800d98c <_write>
 800dc06:	4604      	mov	r4, r0
		va_end(va);
		free(buf);
 800dc08:	4630      	mov	r0, r6
 800dc0a:	f7ff fd7a 	bl	800d702 <free>
		}
	}
	return length;
}
 800dc0e:	4620      	mov	r0, r4
 800dc10:	370c      	adds	r7, #12
 800dc12:	46bd      	mov	sp, r7
 800dc14:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 800dc18:	b004      	add	sp, #16
 800dc1a:	4770      	bx	lr
	{
 800dc1c:	466e      	mov	r6, sp
		char buf[length];
 800dc1e:	3407      	adds	r4, #7
 800dc20:	f024 0407 	bic.w	r4, r4, #7
 800dc24:	ebad 0d04 	sub.w	sp, sp, r4
		va_start(va, fmt);
 800dc28:	f107 0224 	add.w	r2, r7, #36	; 0x24
 800dc2c:	607a      	str	r2, [r7, #4]
		length = ts_formatstring(buf, fmt, va);
 800dc2e:	4629      	mov	r1, r5
 800dc30:	4668      	mov	r0, sp
 800dc32:	f7ff ff15 	bl	800da60 <ts_formatstring>
		length = _write(1, buf, length);
 800dc36:	4602      	mov	r2, r0
 800dc38:	4669      	mov	r1, sp
 800dc3a:	2001      	movs	r0, #1
 800dc3c:	f7ff fea6 	bl	800d98c <_write>
 800dc40:	4604      	mov	r4, r0
 800dc42:	46b5      	mov	sp, r6
 800dc44:	e7e3      	b.n	800dc0e <iprintf+0x44>
	...

0800dc48 <puts>:
**  the result is EOF.
**
**===========================================================================
*/
int puts(const char *s)
{
 800dc48:	b538      	push	{r3, r4, r5, lr}
 800dc4a:	4605      	mov	r5, r0
	int length = strlen(s);
 800dc4c:	f7f2 fad0 	bl	80001f0 <strlen>
 800dc50:	4604      	mov	r4, r0
	int numbytes = 0;
	int res;

	numbytes = _write(1, (char*)s, length);
 800dc52:	4602      	mov	r2, r0
 800dc54:	4629      	mov	r1, r5
 800dc56:	2001      	movs	r0, #1
 800dc58:	f7ff fe98 	bl	800d98c <_write>
 800dc5c:	4605      	mov	r5, r0
	numbytes += _write(1, "\n", 1);
 800dc5e:	2201      	movs	r2, #1
 800dc60:	4906      	ldr	r1, [pc, #24]	; (800dc7c <puts+0x34>)
 800dc62:	4610      	mov	r0, r2
 800dc64:	f7ff fe92 	bl	800d98c <_write>
 800dc68:	4428      	add	r0, r5

	if (numbytes == (length+1))
 800dc6a:	3401      	adds	r4, #1
 800dc6c:	42a0      	cmp	r0, r4
 800dc6e:	d101      	bne.n	800dc74 <puts+0x2c>
	{
		res = 0;
 800dc70:	2000      	movs	r0, #0
 800dc72:	bd38      	pop	{r3, r4, r5, pc}
	}
	else
	{
		res = EOF;
 800dc74:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
	}

	return res;
}
 800dc78:	bd38      	pop	{r3, r4, r5, pc}
 800dc7a:	bf00      	nop
 800dc7c:	0800fb30 	.word	0x0800fb30

0800dc80 <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 800dc80:	b508      	push	{r3, lr}

  huart3.Instance = USART3;
 800dc82:	480a      	ldr	r0, [pc, #40]	; (800dcac <MX_USART3_UART_Init+0x2c>)
 800dc84:	4b0a      	ldr	r3, [pc, #40]	; (800dcb0 <MX_USART3_UART_Init+0x30>)
 800dc86:	6003      	str	r3, [r0, #0]
  huart3.Init.BaudRate = 115200;
 800dc88:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 800dc8c:	6043      	str	r3, [r0, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800dc8e:	2300      	movs	r3, #0
 800dc90:	6083      	str	r3, [r0, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800dc92:	60c3      	str	r3, [r0, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800dc94:	6103      	str	r3, [r0, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 800dc96:	220c      	movs	r2, #12
 800dc98:	6142      	str	r2, [r0, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800dc9a:	6183      	str	r3, [r0, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800dc9c:	61c3      	str	r3, [r0, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800dc9e:	f7f4 f8d7 	bl	8001e50 <HAL_UART_Init>
 800dca2:	b900      	cbnz	r0, 800dca6 <MX_USART3_UART_Init+0x26>
 800dca4:	bd08      	pop	{r3, pc}
  {
    Error_Handler();
 800dca6:	f7ff fd27 	bl	800d6f8 <Error_Handler>
  }

}
 800dcaa:	e7fb      	b.n	800dca4 <MX_USART3_UART_Init+0x24>
 800dcac:	2000ab14 	.word	0x2000ab14
 800dcb0:	40004800 	.word	0x40004800

0800dcb4 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800dcb4:	b500      	push	{lr}
 800dcb6:	b089      	sub	sp, #36	; 0x24

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800dcb8:	2300      	movs	r3, #0
 800dcba:	9303      	str	r3, [sp, #12]
 800dcbc:	9304      	str	r3, [sp, #16]
 800dcbe:	9305      	str	r3, [sp, #20]
 800dcc0:	9306      	str	r3, [sp, #24]
 800dcc2:	9307      	str	r3, [sp, #28]
  if(uartHandle->Instance==USART3)
 800dcc4:	6802      	ldr	r2, [r0, #0]
 800dcc6:	4b16      	ldr	r3, [pc, #88]	; (800dd20 <HAL_UART_MspInit+0x6c>)
 800dcc8:	429a      	cmp	r2, r3
 800dcca:	d002      	beq.n	800dcd2 <HAL_UART_MspInit+0x1e>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 800dccc:	b009      	add	sp, #36	; 0x24
 800dcce:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_USART3_CLK_ENABLE();
 800dcd2:	2100      	movs	r1, #0
 800dcd4:	9101      	str	r1, [sp, #4]
 800dcd6:	f503 33f8 	add.w	r3, r3, #126976	; 0x1f000
 800dcda:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800dcdc:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 800dce0:	641a      	str	r2, [r3, #64]	; 0x40
 800dce2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800dce4:	f402 2280 	and.w	r2, r2, #262144	; 0x40000
 800dce8:	9201      	str	r2, [sp, #4]
 800dcea:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800dcec:	9102      	str	r1, [sp, #8]
 800dcee:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800dcf0:	f042 0208 	orr.w	r2, r2, #8
 800dcf4:	631a      	str	r2, [r3, #48]	; 0x30
 800dcf6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800dcf8:	f003 0308 	and.w	r3, r3, #8
 800dcfc:	9302      	str	r3, [sp, #8]
 800dcfe:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 800dd00:	f44f 7340 	mov.w	r3, #768	; 0x300
 800dd04:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800dd06:	2302      	movs	r3, #2
 800dd08:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800dd0a:	2301      	movs	r3, #1
 800dd0c:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800dd0e:	2303      	movs	r3, #3
 800dd10:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800dd12:	2307      	movs	r3, #7
 800dd14:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800dd16:	a903      	add	r1, sp, #12
 800dd18:	4802      	ldr	r0, [pc, #8]	; (800dd24 <HAL_UART_MspInit+0x70>)
 800dd1a:	f7f3 f8f1 	bl	8000f00 <HAL_GPIO_Init>
}
 800dd1e:	e7d5      	b.n	800dccc <HAL_UART_MspInit+0x18>
 800dd20:	40004800 	.word	0x40004800
 800dd24:	40020c00 	.word	0x40020c00

0800dd28 <MX_USB_OTG_FS_PCD_Init>:
PCD_HandleTypeDef hpcd_USB_OTG_FS;

/* USB_OTG_FS init function */

void MX_USB_OTG_FS_PCD_Init(void)
{
 800dd28:	b508      	push	{r3, lr}

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800dd2a:	480c      	ldr	r0, [pc, #48]	; (800dd5c <MX_USB_OTG_FS_PCD_Init+0x34>)
 800dd2c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 800dd30:	6003      	str	r3, [r0, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 800dd32:	2304      	movs	r3, #4
 800dd34:	6043      	str	r3, [r0, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800dd36:	2202      	movs	r2, #2
 800dd38:	60c2      	str	r2, [r0, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800dd3a:	2300      	movs	r3, #0
 800dd3c:	6103      	str	r3, [r0, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800dd3e:	6182      	str	r2, [r0, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 800dd40:	2201      	movs	r2, #1
 800dd42:	61c2      	str	r2, [r0, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800dd44:	6203      	str	r3, [r0, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800dd46:	6243      	str	r3, [r0, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 800dd48:	62c2      	str	r2, [r0, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800dd4a:	6303      	str	r3, [r0, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800dd4c:	f7f3 f9d0 	bl	80010f0 <HAL_PCD_Init>
 800dd50:	b900      	cbnz	r0, 800dd54 <MX_USB_OTG_FS_PCD_Init+0x2c>
 800dd52:	bd08      	pop	{r3, pc}
  {
    Error_Handler();
 800dd54:	f7ff fcd0 	bl	800d6f8 <Error_Handler>
  }

}
 800dd58:	e7fb      	b.n	800dd52 <MX_USB_OTG_FS_PCD_Init+0x2a>
 800dd5a:	bf00      	nop
 800dd5c:	2000ab54 	.word	0x2000ab54

0800dd60 <HAL_PCD_MspInit>:

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800dd60:	b570      	push	{r4, r5, r6, lr}
 800dd62:	b088      	sub	sp, #32

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800dd64:	2300      	movs	r3, #0
 800dd66:	9303      	str	r3, [sp, #12]
 800dd68:	9304      	str	r3, [sp, #16]
 800dd6a:	9305      	str	r3, [sp, #20]
 800dd6c:	9306      	str	r3, [sp, #24]
 800dd6e:	9307      	str	r3, [sp, #28]
  if(pcdHandle->Instance==USB_OTG_FS)
 800dd70:	6803      	ldr	r3, [r0, #0]
 800dd72:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800dd76:	d001      	beq.n	800dd7c <HAL_PCD_MspInit+0x1c>
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800dd78:	b008      	add	sp, #32
 800dd7a:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800dd7c:	2500      	movs	r5, #0
 800dd7e:	9501      	str	r5, [sp, #4]
 800dd80:	4c17      	ldr	r4, [pc, #92]	; (800dde0 <HAL_PCD_MspInit+0x80>)
 800dd82:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800dd84:	f043 0301 	orr.w	r3, r3, #1
 800dd88:	6323      	str	r3, [r4, #48]	; 0x30
 800dd8a:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800dd8c:	f003 0301 	and.w	r3, r3, #1
 800dd90:	9301      	str	r3, [sp, #4]
 800dd92:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 800dd94:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 800dd98:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800dd9a:	2302      	movs	r3, #2
 800dd9c:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800dd9e:	2303      	movs	r3, #3
 800dda0:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800dda2:	230a      	movs	r3, #10
 800dda4:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800dda6:	4e0f      	ldr	r6, [pc, #60]	; (800dde4 <HAL_PCD_MspInit+0x84>)
 800dda8:	a903      	add	r1, sp, #12
 800ddaa:	4630      	mov	r0, r6
 800ddac:	f7f3 f8a8 	bl	8000f00 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 800ddb0:	f44f 7300 	mov.w	r3, #512	; 0x200
 800ddb4:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800ddb6:	9504      	str	r5, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ddb8:	9505      	str	r5, [sp, #20]
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 800ddba:	a903      	add	r1, sp, #12
 800ddbc:	4630      	mov	r0, r6
 800ddbe:	f7f3 f89f 	bl	8000f00 <HAL_GPIO_Init>
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800ddc2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800ddc4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ddc8:	6363      	str	r3, [r4, #52]	; 0x34
 800ddca:	9502      	str	r5, [sp, #8]
 800ddcc:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800ddce:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800ddd2:	6463      	str	r3, [r4, #68]	; 0x44
 800ddd4:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800ddd6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800ddda:	9302      	str	r3, [sp, #8]
 800dddc:	9b02      	ldr	r3, [sp, #8]
}
 800ddde:	e7cb      	b.n	800dd78 <HAL_PCD_MspInit+0x18>
 800dde0:	40023800 	.word	0x40023800
 800dde4:	40020000 	.word	0x40020000

0800dde8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 800dde8:	f8df d034 	ldr.w	sp, [pc, #52]	; 800de20 <LoopFillZerobss+0x14>
 
/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 800ddec:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800ddee:	e003      	b.n	800ddf8 <LoopCopyDataInit>

0800ddf0 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 800ddf0:	4b0c      	ldr	r3, [pc, #48]	; (800de24 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800ddf2:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 800ddf4:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800ddf6:	3104      	adds	r1, #4

0800ddf8 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 800ddf8:	480b      	ldr	r0, [pc, #44]	; (800de28 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800ddfa:	4b0c      	ldr	r3, [pc, #48]	; (800de2c <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 800ddfc:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800ddfe:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 800de00:	d3f6      	bcc.n	800ddf0 <CopyDataInit>
  ldr  r2, =_sbss
 800de02:	4a0b      	ldr	r2, [pc, #44]	; (800de30 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 800de04:	e002      	b.n	800de0c <LoopFillZerobss>

0800de06 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800de06:	2300      	movs	r3, #0
  str  r3, [r2], #4
 800de08:	f842 3b04 	str.w	r3, [r2], #4

0800de0c <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 800de0c:	4b09      	ldr	r3, [pc, #36]	; (800de34 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800de0e:	429a      	cmp	r2, r3
  bcc  FillZerobss
 800de10:	d3f9      	bcc.n	800de06 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800de12:	f7ff fddf 	bl	800d9d4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800de16:	f000 f811 	bl	800de3c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800de1a:	f7ff fc4f 	bl	800d6bc <main>
  bx  lr    
 800de1e:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 800de20:	20030000 	.word	0x20030000
  ldr  r3, =_sidata
 800de24:	08010e90 	.word	0x08010e90
  ldr  r0, =_sdata
 800de28:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 800de2c:	20000078 	.word	0x20000078
  ldr  r2, =_sbss
 800de30:	20000078 	.word	0x20000078
  ldr  r3, = _ebss
 800de34:	2000af5c 	.word	0x2000af5c

0800de38 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800de38:	e7fe      	b.n	800de38 <ADC_IRQHandler>
	...

0800de3c <__libc_init_array>:
 800de3c:	b570      	push	{r4, r5, r6, lr}
 800de3e:	4e0d      	ldr	r6, [pc, #52]	; (800de74 <__libc_init_array+0x38>)
 800de40:	4c0d      	ldr	r4, [pc, #52]	; (800de78 <__libc_init_array+0x3c>)
 800de42:	1ba4      	subs	r4, r4, r6
 800de44:	10a4      	asrs	r4, r4, #2
 800de46:	2500      	movs	r5, #0
 800de48:	42a5      	cmp	r5, r4
 800de4a:	d109      	bne.n	800de60 <__libc_init_array+0x24>
 800de4c:	4e0b      	ldr	r6, [pc, #44]	; (800de7c <__libc_init_array+0x40>)
 800de4e:	4c0c      	ldr	r4, [pc, #48]	; (800de80 <__libc_init_array+0x44>)
 800de50:	f000 fa2c 	bl	800e2ac <_init>
 800de54:	1ba4      	subs	r4, r4, r6
 800de56:	10a4      	asrs	r4, r4, #2
 800de58:	2500      	movs	r5, #0
 800de5a:	42a5      	cmp	r5, r4
 800de5c:	d105      	bne.n	800de6a <__libc_init_array+0x2e>
 800de5e:	bd70      	pop	{r4, r5, r6, pc}
 800de60:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800de64:	4798      	blx	r3
 800de66:	3501      	adds	r5, #1
 800de68:	e7ee      	b.n	800de48 <__libc_init_array+0xc>
 800de6a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800de6e:	4798      	blx	r3
 800de70:	3501      	adds	r5, #1
 800de72:	e7f2      	b.n	800de5a <__libc_init_array+0x1e>
 800de74:	08010e88 	.word	0x08010e88
 800de78:	08010e88 	.word	0x08010e88
 800de7c:	08010e88 	.word	0x08010e88
 800de80:	08010e8c 	.word	0x08010e8c

0800de84 <memcmp>:
 800de84:	b510      	push	{r4, lr}
 800de86:	3901      	subs	r1, #1
 800de88:	4402      	add	r2, r0
 800de8a:	4290      	cmp	r0, r2
 800de8c:	d101      	bne.n	800de92 <memcmp+0xe>
 800de8e:	2000      	movs	r0, #0
 800de90:	bd10      	pop	{r4, pc}
 800de92:	f810 3b01 	ldrb.w	r3, [r0], #1
 800de96:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800de9a:	42a3      	cmp	r3, r4
 800de9c:	d0f5      	beq.n	800de8a <memcmp+0x6>
 800de9e:	1b18      	subs	r0, r3, r4
 800dea0:	bd10      	pop	{r4, pc}

0800dea2 <memcpy>:
 800dea2:	b510      	push	{r4, lr}
 800dea4:	1e43      	subs	r3, r0, #1
 800dea6:	440a      	add	r2, r1
 800dea8:	4291      	cmp	r1, r2
 800deaa:	d100      	bne.n	800deae <memcpy+0xc>
 800deac:	bd10      	pop	{r4, pc}
 800deae:	f811 4b01 	ldrb.w	r4, [r1], #1
 800deb2:	f803 4f01 	strb.w	r4, [r3, #1]!
 800deb6:	e7f7      	b.n	800dea8 <memcpy+0x6>

0800deb8 <memset>:
 800deb8:	4402      	add	r2, r0
 800deba:	4603      	mov	r3, r0
 800debc:	4293      	cmp	r3, r2
 800debe:	d100      	bne.n	800dec2 <memset+0xa>
 800dec0:	4770      	bx	lr
 800dec2:	f803 1b01 	strb.w	r1, [r3], #1
 800dec6:	e7f9      	b.n	800debc <memset+0x4>

0800dec8 <_strerror_r>:
 800dec8:	b510      	push	{r4, lr}
 800deca:	4604      	mov	r4, r0
 800decc:	4608      	mov	r0, r1
 800dece:	4611      	mov	r1, r2
 800ded0:	288e      	cmp	r0, #142	; 0x8e
 800ded2:	f200 812f 	bhi.w	800e134 <_strerror_r+0x26c>
 800ded6:	e8df f010 	tbh	[pc, r0, lsl #1]
 800deda:	0138      	.short	0x0138
 800dedc:	0091008f 	.word	0x0091008f
 800dee0:	00950093 	.word	0x00950093
 800dee4:	00990097 	.word	0x00990097
 800dee8:	009d009b 	.word	0x009d009b
 800deec:	00a300a1 	.word	0x00a300a1
 800def0:	00a900a7 	.word	0x00a900a7
 800def4:	00ad00ab 	.word	0x00ad00ab
 800def8:	00af012d 	.word	0x00af012d
 800defc:	00b300b1 	.word	0x00b300b1
 800df00:	00b700b5 	.word	0x00b700b5
 800df04:	00bf00bd 	.word	0x00bf00bd
 800df08:	00c700c5 	.word	0x00c700c5
 800df0c:	00cb00c9 	.word	0x00cb00c9
 800df10:	00d100cd 	.word	0x00d100cd
 800df14:	00d700d5 	.word	0x00d700d5
 800df18:	00db00d9 	.word	0x00db00d9
 800df1c:	00df00dd 	.word	0x00df00dd
 800df20:	00e300e1 	.word	0x00e300e1
 800df24:	012d012d 	.word	0x012d012d
 800df28:	012d012d 	.word	0x012d012d
 800df2c:	012d012d 	.word	0x012d012d
 800df30:	012d012d 	.word	0x012d012d
 800df34:	00eb00e7 	.word	0x00eb00e7
 800df38:	012d012d 	.word	0x012d012d
 800df3c:	012d012d 	.word	0x012d012d
 800df40:	012d012d 	.word	0x012d012d
 800df44:	012d012d 	.word	0x012d012d
 800df48:	012d012d 	.word	0x012d012d
 800df4c:	012d012d 	.word	0x012d012d
 800df50:	00ed012d 	.word	0x00ed012d
 800df54:	00ef0107 	.word	0x00ef0107
 800df58:	012d00f1 	.word	0x012d00f1
 800df5c:	012d012d 	.word	0x012d012d
 800df60:	012d00f3 	.word	0x012d00f3
 800df64:	012d012d 	.word	0x012d012d
 800df68:	012d00f5 	.word	0x012d00f5
 800df6c:	00f9012d 	.word	0x00f9012d
 800df70:	012d012d 	.word	0x012d012d
 800df74:	012d00fb 	.word	0x012d00fb
 800df78:	012d012d 	.word	0x012d012d
 800df7c:	012d012d 	.word	0x012d012d
 800df80:	012d012d 	.word	0x012d012d
 800df84:	012d012d 	.word	0x012d012d
 800df88:	00fd012d 	.word	0x00fd012d
 800df8c:	00ff012d 	.word	0x00ff012d
 800df90:	01030101 	.word	0x01030101
 800df94:	012d012d 	.word	0x012d012d
 800df98:	012d0125 	.word	0x012d0125
 800df9c:	012d012d 	.word	0x012d012d
 800dfa0:	012d012d 	.word	0x012d012d
 800dfa4:	012d012d 	.word	0x012d012d
 800dfa8:	0113012d 	.word	0x0113012d
 800dfac:	01090105 	.word	0x01090105
 800dfb0:	010d010b 	.word	0x010d010b
 800dfb4:	012d010f 	.word	0x012d010f
 800dfb8:	01150111 	.word	0x01150111
 800dfbc:	00e90119 	.word	0x00e90119
 800dfc0:	012b00c1 	.word	0x012b00c1
 800dfc4:	00cf00b9 	.word	0x00cf00b9
 800dfc8:	009f00bb 	.word	0x009f00bb
 800dfcc:	012900a5 	.word	0x012900a5
 800dfd0:	012d00f7 	.word	0x012d00f7
 800dfd4:	00c30117 	.word	0x00c30117
 800dfd8:	011b011d 	.word	0x011b011d
 800dfdc:	012d012d 	.word	0x012d012d
 800dfe0:	012d012d 	.word	0x012d012d
 800dfe4:	00d3012d 	.word	0x00d3012d
 800dfe8:	012d012d 	.word	0x012d012d
 800dfec:	00e5012d 	.word	0x00e5012d
 800dff0:	011f0127 	.word	0x011f0127
 800dff4:	01230121 	.word	0x01230121
 800dff8:	4855      	ldr	r0, [pc, #340]	; (800e150 <_strerror_r+0x288>)
 800dffa:	bd10      	pop	{r4, pc}
 800dffc:	4855      	ldr	r0, [pc, #340]	; (800e154 <_strerror_r+0x28c>)
 800dffe:	bd10      	pop	{r4, pc}
 800e000:	4855      	ldr	r0, [pc, #340]	; (800e158 <_strerror_r+0x290>)
 800e002:	bd10      	pop	{r4, pc}
 800e004:	4855      	ldr	r0, [pc, #340]	; (800e15c <_strerror_r+0x294>)
 800e006:	bd10      	pop	{r4, pc}
 800e008:	4855      	ldr	r0, [pc, #340]	; (800e160 <_strerror_r+0x298>)
 800e00a:	bd10      	pop	{r4, pc}
 800e00c:	4855      	ldr	r0, [pc, #340]	; (800e164 <_strerror_r+0x29c>)
 800e00e:	bd10      	pop	{r4, pc}
 800e010:	4855      	ldr	r0, [pc, #340]	; (800e168 <_strerror_r+0x2a0>)
 800e012:	bd10      	pop	{r4, pc}
 800e014:	4855      	ldr	r0, [pc, #340]	; (800e16c <_strerror_r+0x2a4>)
 800e016:	bd10      	pop	{r4, pc}
 800e018:	4855      	ldr	r0, [pc, #340]	; (800e170 <_strerror_r+0x2a8>)
 800e01a:	bd10      	pop	{r4, pc}
 800e01c:	4855      	ldr	r0, [pc, #340]	; (800e174 <_strerror_r+0x2ac>)
 800e01e:	bd10      	pop	{r4, pc}
 800e020:	4855      	ldr	r0, [pc, #340]	; (800e178 <_strerror_r+0x2b0>)
 800e022:	bd10      	pop	{r4, pc}
 800e024:	4855      	ldr	r0, [pc, #340]	; (800e17c <_strerror_r+0x2b4>)
 800e026:	bd10      	pop	{r4, pc}
 800e028:	4855      	ldr	r0, [pc, #340]	; (800e180 <_strerror_r+0x2b8>)
 800e02a:	bd10      	pop	{r4, pc}
 800e02c:	4855      	ldr	r0, [pc, #340]	; (800e184 <_strerror_r+0x2bc>)
 800e02e:	bd10      	pop	{r4, pc}
 800e030:	4855      	ldr	r0, [pc, #340]	; (800e188 <_strerror_r+0x2c0>)
 800e032:	bd10      	pop	{r4, pc}
 800e034:	4855      	ldr	r0, [pc, #340]	; (800e18c <_strerror_r+0x2c4>)
 800e036:	bd10      	pop	{r4, pc}
 800e038:	4855      	ldr	r0, [pc, #340]	; (800e190 <_strerror_r+0x2c8>)
 800e03a:	bd10      	pop	{r4, pc}
 800e03c:	4855      	ldr	r0, [pc, #340]	; (800e194 <_strerror_r+0x2cc>)
 800e03e:	bd10      	pop	{r4, pc}
 800e040:	4855      	ldr	r0, [pc, #340]	; (800e198 <_strerror_r+0x2d0>)
 800e042:	bd10      	pop	{r4, pc}
 800e044:	4855      	ldr	r0, [pc, #340]	; (800e19c <_strerror_r+0x2d4>)
 800e046:	bd10      	pop	{r4, pc}
 800e048:	4855      	ldr	r0, [pc, #340]	; (800e1a0 <_strerror_r+0x2d8>)
 800e04a:	bd10      	pop	{r4, pc}
 800e04c:	4855      	ldr	r0, [pc, #340]	; (800e1a4 <_strerror_r+0x2dc>)
 800e04e:	bd10      	pop	{r4, pc}
 800e050:	4855      	ldr	r0, [pc, #340]	; (800e1a8 <_strerror_r+0x2e0>)
 800e052:	bd10      	pop	{r4, pc}
 800e054:	4855      	ldr	r0, [pc, #340]	; (800e1ac <_strerror_r+0x2e4>)
 800e056:	bd10      	pop	{r4, pc}
 800e058:	4855      	ldr	r0, [pc, #340]	; (800e1b0 <_strerror_r+0x2e8>)
 800e05a:	bd10      	pop	{r4, pc}
 800e05c:	4855      	ldr	r0, [pc, #340]	; (800e1b4 <_strerror_r+0x2ec>)
 800e05e:	bd10      	pop	{r4, pc}
 800e060:	4855      	ldr	r0, [pc, #340]	; (800e1b8 <_strerror_r+0x2f0>)
 800e062:	bd10      	pop	{r4, pc}
 800e064:	4855      	ldr	r0, [pc, #340]	; (800e1bc <_strerror_r+0x2f4>)
 800e066:	bd10      	pop	{r4, pc}
 800e068:	4855      	ldr	r0, [pc, #340]	; (800e1c0 <_strerror_r+0x2f8>)
 800e06a:	bd10      	pop	{r4, pc}
 800e06c:	4855      	ldr	r0, [pc, #340]	; (800e1c4 <_strerror_r+0x2fc>)
 800e06e:	bd10      	pop	{r4, pc}
 800e070:	4855      	ldr	r0, [pc, #340]	; (800e1c8 <_strerror_r+0x300>)
 800e072:	bd10      	pop	{r4, pc}
 800e074:	4855      	ldr	r0, [pc, #340]	; (800e1cc <_strerror_r+0x304>)
 800e076:	bd10      	pop	{r4, pc}
 800e078:	4855      	ldr	r0, [pc, #340]	; (800e1d0 <_strerror_r+0x308>)
 800e07a:	bd10      	pop	{r4, pc}
 800e07c:	4855      	ldr	r0, [pc, #340]	; (800e1d4 <_strerror_r+0x30c>)
 800e07e:	bd10      	pop	{r4, pc}
 800e080:	4855      	ldr	r0, [pc, #340]	; (800e1d8 <_strerror_r+0x310>)
 800e082:	bd10      	pop	{r4, pc}
 800e084:	4855      	ldr	r0, [pc, #340]	; (800e1dc <_strerror_r+0x314>)
 800e086:	bd10      	pop	{r4, pc}
 800e088:	4855      	ldr	r0, [pc, #340]	; (800e1e0 <_strerror_r+0x318>)
 800e08a:	bd10      	pop	{r4, pc}
 800e08c:	4855      	ldr	r0, [pc, #340]	; (800e1e4 <_strerror_r+0x31c>)
 800e08e:	bd10      	pop	{r4, pc}
 800e090:	4855      	ldr	r0, [pc, #340]	; (800e1e8 <_strerror_r+0x320>)
 800e092:	bd10      	pop	{r4, pc}
 800e094:	4855      	ldr	r0, [pc, #340]	; (800e1ec <_strerror_r+0x324>)
 800e096:	bd10      	pop	{r4, pc}
 800e098:	4855      	ldr	r0, [pc, #340]	; (800e1f0 <_strerror_r+0x328>)
 800e09a:	bd10      	pop	{r4, pc}
 800e09c:	4855      	ldr	r0, [pc, #340]	; (800e1f4 <_strerror_r+0x32c>)
 800e09e:	bd10      	pop	{r4, pc}
 800e0a0:	4855      	ldr	r0, [pc, #340]	; (800e1f8 <_strerror_r+0x330>)
 800e0a2:	bd10      	pop	{r4, pc}
 800e0a4:	4855      	ldr	r0, [pc, #340]	; (800e1fc <_strerror_r+0x334>)
 800e0a6:	bd10      	pop	{r4, pc}
 800e0a8:	4855      	ldr	r0, [pc, #340]	; (800e200 <_strerror_r+0x338>)
 800e0aa:	bd10      	pop	{r4, pc}
 800e0ac:	4855      	ldr	r0, [pc, #340]	; (800e204 <_strerror_r+0x33c>)
 800e0ae:	bd10      	pop	{r4, pc}
 800e0b0:	4855      	ldr	r0, [pc, #340]	; (800e208 <_strerror_r+0x340>)
 800e0b2:	bd10      	pop	{r4, pc}
 800e0b4:	4855      	ldr	r0, [pc, #340]	; (800e20c <_strerror_r+0x344>)
 800e0b6:	bd10      	pop	{r4, pc}
 800e0b8:	4855      	ldr	r0, [pc, #340]	; (800e210 <_strerror_r+0x348>)
 800e0ba:	bd10      	pop	{r4, pc}
 800e0bc:	4855      	ldr	r0, [pc, #340]	; (800e214 <_strerror_r+0x34c>)
 800e0be:	bd10      	pop	{r4, pc}
 800e0c0:	4855      	ldr	r0, [pc, #340]	; (800e218 <_strerror_r+0x350>)
 800e0c2:	bd10      	pop	{r4, pc}
 800e0c4:	4855      	ldr	r0, [pc, #340]	; (800e21c <_strerror_r+0x354>)
 800e0c6:	bd10      	pop	{r4, pc}
 800e0c8:	4855      	ldr	r0, [pc, #340]	; (800e220 <_strerror_r+0x358>)
 800e0ca:	bd10      	pop	{r4, pc}
 800e0cc:	4855      	ldr	r0, [pc, #340]	; (800e224 <_strerror_r+0x35c>)
 800e0ce:	bd10      	pop	{r4, pc}
 800e0d0:	4855      	ldr	r0, [pc, #340]	; (800e228 <_strerror_r+0x360>)
 800e0d2:	bd10      	pop	{r4, pc}
 800e0d4:	4855      	ldr	r0, [pc, #340]	; (800e22c <_strerror_r+0x364>)
 800e0d6:	bd10      	pop	{r4, pc}
 800e0d8:	4855      	ldr	r0, [pc, #340]	; (800e230 <_strerror_r+0x368>)
 800e0da:	bd10      	pop	{r4, pc}
 800e0dc:	4855      	ldr	r0, [pc, #340]	; (800e234 <_strerror_r+0x36c>)
 800e0de:	bd10      	pop	{r4, pc}
 800e0e0:	4855      	ldr	r0, [pc, #340]	; (800e238 <_strerror_r+0x370>)
 800e0e2:	bd10      	pop	{r4, pc}
 800e0e4:	4855      	ldr	r0, [pc, #340]	; (800e23c <_strerror_r+0x374>)
 800e0e6:	bd10      	pop	{r4, pc}
 800e0e8:	4855      	ldr	r0, [pc, #340]	; (800e240 <_strerror_r+0x378>)
 800e0ea:	bd10      	pop	{r4, pc}
 800e0ec:	4855      	ldr	r0, [pc, #340]	; (800e244 <_strerror_r+0x37c>)
 800e0ee:	bd10      	pop	{r4, pc}
 800e0f0:	4855      	ldr	r0, [pc, #340]	; (800e248 <_strerror_r+0x380>)
 800e0f2:	bd10      	pop	{r4, pc}
 800e0f4:	4855      	ldr	r0, [pc, #340]	; (800e24c <_strerror_r+0x384>)
 800e0f6:	bd10      	pop	{r4, pc}
 800e0f8:	4855      	ldr	r0, [pc, #340]	; (800e250 <_strerror_r+0x388>)
 800e0fa:	bd10      	pop	{r4, pc}
 800e0fc:	4855      	ldr	r0, [pc, #340]	; (800e254 <_strerror_r+0x38c>)
 800e0fe:	bd10      	pop	{r4, pc}
 800e100:	4855      	ldr	r0, [pc, #340]	; (800e258 <_strerror_r+0x390>)
 800e102:	bd10      	pop	{r4, pc}
 800e104:	4855      	ldr	r0, [pc, #340]	; (800e25c <_strerror_r+0x394>)
 800e106:	bd10      	pop	{r4, pc}
 800e108:	4855      	ldr	r0, [pc, #340]	; (800e260 <_strerror_r+0x398>)
 800e10a:	bd10      	pop	{r4, pc}
 800e10c:	4855      	ldr	r0, [pc, #340]	; (800e264 <_strerror_r+0x39c>)
 800e10e:	bd10      	pop	{r4, pc}
 800e110:	4855      	ldr	r0, [pc, #340]	; (800e268 <_strerror_r+0x3a0>)
 800e112:	bd10      	pop	{r4, pc}
 800e114:	4855      	ldr	r0, [pc, #340]	; (800e26c <_strerror_r+0x3a4>)
 800e116:	bd10      	pop	{r4, pc}
 800e118:	4855      	ldr	r0, [pc, #340]	; (800e270 <_strerror_r+0x3a8>)
 800e11a:	bd10      	pop	{r4, pc}
 800e11c:	4855      	ldr	r0, [pc, #340]	; (800e274 <_strerror_r+0x3ac>)
 800e11e:	bd10      	pop	{r4, pc}
 800e120:	4855      	ldr	r0, [pc, #340]	; (800e278 <_strerror_r+0x3b0>)
 800e122:	bd10      	pop	{r4, pc}
 800e124:	4855      	ldr	r0, [pc, #340]	; (800e27c <_strerror_r+0x3b4>)
 800e126:	bd10      	pop	{r4, pc}
 800e128:	4855      	ldr	r0, [pc, #340]	; (800e280 <_strerror_r+0x3b8>)
 800e12a:	bd10      	pop	{r4, pc}
 800e12c:	4855      	ldr	r0, [pc, #340]	; (800e284 <_strerror_r+0x3bc>)
 800e12e:	bd10      	pop	{r4, pc}
 800e130:	4855      	ldr	r0, [pc, #340]	; (800e288 <_strerror_r+0x3c0>)
 800e132:	bd10      	pop	{r4, pc}
 800e134:	2b00      	cmp	r3, #0
 800e136:	bf14      	ite	ne
 800e138:	461a      	movne	r2, r3
 800e13a:	4622      	moveq	r2, r4
 800e13c:	f000 f8b4 	bl	800e2a8 <_user_strerror>
 800e140:	4b52      	ldr	r3, [pc, #328]	; (800e28c <_strerror_r+0x3c4>)
 800e142:	2800      	cmp	r0, #0
 800e144:	bf08      	it	eq
 800e146:	4618      	moveq	r0, r3
 800e148:	bd10      	pop	{r4, pc}
 800e14a:	4851      	ldr	r0, [pc, #324]	; (800e290 <_strerror_r+0x3c8>)
 800e14c:	bd10      	pop	{r4, pc}
 800e14e:	bf00      	nop
 800e150:	080107f0 	.word	0x080107f0
 800e154:	080107fa 	.word	0x080107fa
 800e158:	08010814 	.word	0x08010814
 800e15c:	08010824 	.word	0x08010824
 800e160:	0801083c 	.word	0x0801083c
 800e164:	08010846 	.word	0x08010846
 800e168:	08010860 	.word	0x08010860
 800e16c:	08010872 	.word	0x08010872
 800e170:	08010884 	.word	0x08010884
 800e174:	0801089d 	.word	0x0801089d
 800e178:	080108ad 	.word	0x080108ad
 800e17c:	080108b9 	.word	0x080108b9
 800e180:	080108d6 	.word	0x080108d6
 800e184:	080108e8 	.word	0x080108e8
 800e188:	080108f9 	.word	0x080108f9
 800e18c:	0801090b 	.word	0x0801090b
 800e190:	08010917 	.word	0x08010917
 800e194:	0801092f 	.word	0x0801092f
 800e198:	0801093b 	.word	0x0801093b
 800e19c:	0801094d 	.word	0x0801094d
 800e1a0:	0801095c 	.word	0x0801095c
 800e1a4:	0801096c 	.word	0x0801096c
 800e1a8:	08010979 	.word	0x08010979
 800e1ac:	08010998 	.word	0x08010998
 800e1b0:	080109a7 	.word	0x080109a7
 800e1b4:	080109b8 	.word	0x080109b8
 800e1b8:	080109dc 	.word	0x080109dc
 800e1bc:	080109fa 	.word	0x080109fa
 800e1c0:	08010a18 	.word	0x08010a18
 800e1c4:	08010a38 	.word	0x08010a38
 800e1c8:	08010a4f 	.word	0x08010a4f
 800e1cc:	08010a5e 	.word	0x08010a5e
 800e1d0:	08010a6d 	.word	0x08010a6d
 800e1d4:	08010a81 	.word	0x08010a81
 800e1d8:	08010a99 	.word	0x08010a99
 800e1dc:	08010aa7 	.word	0x08010aa7
 800e1e0:	08010ab4 	.word	0x08010ab4
 800e1e4:	08010aca 	.word	0x08010aca
 800e1e8:	08010ad9 	.word	0x08010ad9
 800e1ec:	08010ae5 	.word	0x08010ae5
 800e1f0:	08010b14 	.word	0x08010b14
 800e1f4:	08010b25 	.word	0x08010b25
 800e1f8:	08010b40 	.word	0x08010b40
 800e1fc:	08010b53 	.word	0x08010b53
 800e200:	08010b69 	.word	0x08010b69
 800e204:	08010b72 	.word	0x08010b72
 800e208:	08010b89 	.word	0x08010b89
 800e20c:	08010b91 	.word	0x08010b91
 800e210:	08010b9e 	.word	0x08010b9e
 800e214:	08010bb3 	.word	0x08010bb3
 800e218:	08010bc7 	.word	0x08010bc7
 800e21c:	08010bdf 	.word	0x08010bdf
 800e220:	08010bee 	.word	0x08010bee
 800e224:	08010bff 	.word	0x08010bff
 800e228:	08010c12 	.word	0x08010c12
 800e22c:	08010c1e 	.word	0x08010c1e
 800e230:	08010c37 	.word	0x08010c37
 800e234:	08010c4b 	.word	0x08010c4b
 800e238:	08010c66 	.word	0x08010c66
 800e23c:	08010c7e 	.word	0x08010c7e
 800e240:	08010c98 	.word	0x08010c98
 800e244:	08010ca0 	.word	0x08010ca0
 800e248:	08010cd0 	.word	0x08010cd0
 800e24c:	08010cef 	.word	0x08010cef
 800e250:	08010d0e 	.word	0x08010d0e
 800e254:	08010d25 	.word	0x08010d25
 800e258:	08010d38 	.word	0x08010d38
 800e25c:	08010d51 	.word	0x08010d51
 800e260:	08010d68 	.word	0x08010d68
 800e264:	08010d7e 	.word	0x08010d7e
 800e268:	08010d9f 	.word	0x08010d9f
 800e26c:	08010db7 	.word	0x08010db7
 800e270:	08010dd3 	.word	0x08010dd3
 800e274:	08010de6 	.word	0x08010de6
 800e278:	08010dfc 	.word	0x08010dfc
 800e27c:	08010e10 	.word	0x08010e10
 800e280:	08010e32 	.word	0x08010e32
 800e284:	08010e58 	.word	0x08010e58
 800e288:	08010e69 	.word	0x08010e69
 800e28c:	08010c9f 	.word	0x08010c9f
 800e290:	080107e8 	.word	0x080107e8

0800e294 <strerror>:
 800e294:	4601      	mov	r1, r0
 800e296:	4803      	ldr	r0, [pc, #12]	; (800e2a4 <strerror+0x10>)
 800e298:	2300      	movs	r3, #0
 800e29a:	461a      	mov	r2, r3
 800e29c:	6800      	ldr	r0, [r0, #0]
 800e29e:	f7ff be13 	b.w	800dec8 <_strerror_r>
 800e2a2:	bf00      	nop
 800e2a4:	20000014 	.word	0x20000014

0800e2a8 <_user_strerror>:
 800e2a8:	2000      	movs	r0, #0
 800e2aa:	4770      	bx	lr

0800e2ac <_init>:
 800e2ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e2ae:	bf00      	nop
 800e2b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e2b2:	bc08      	pop	{r3}
 800e2b4:	469e      	mov	lr, r3
 800e2b6:	4770      	bx	lr

0800e2b8 <_fini>:
 800e2b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e2ba:	bf00      	nop
 800e2bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e2be:	bc08      	pop	{r3}
 800e2c0:	469e      	mov	lr, r3
 800e2c2:	4770      	bx	lr
